{
  "address": "0x2a19eb9146DB64dc8cbCdD8Ff77cFB3204118362",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_teleBTC",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_relay",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceOracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralPoolFactory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_slasherPercentageReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_paybackDeadline",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "loanAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "instantFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isFixed",
          "type": "bool"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "collateralToken",
          "type": "address"
        }
      ],
      "name": "InstantExchange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "loanAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "instantFee",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "collateralToken",
          "type": "address"
        }
      ],
      "name": "InstantTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "paybackAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockedCollateralPoolToken",
          "type": "uint256"
        }
      ],
      "name": "PaybackLoan",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slashedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "paybackAmount",
          "type": "uint256"
        }
      ],
      "name": "SlashUser",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "collateralPoolFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getLockedCollateralPoolTokenAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getUserRequestDeadline",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserRequestsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_exchangeConnector",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_loanAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isFixedToken",
          "type": "bool"
        }
      ],
      "name": "instantCCExchange",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_loanAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        }
      ],
      "name": "instantCCTransfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "instantRequests",
      "outputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "collateralPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "paybackAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockedCollateralPoolTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_teleBTCAmount",
          "type": "uint256"
        }
      ],
      "name": "payBackLoan",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paybackDeadline",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relay",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_paybackDeadline",
          "type": "uint256"
        }
      ],
      "name": "setPaybackDeadline",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_slasherPercentageReward",
          "type": "uint256"
        }
      ],
      "name": "setSlasherPercentageReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_teleBTCInstantPool",
          "type": "address"
        }
      ],
      "name": "setTeleBTCInstantPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_exchangeRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_requestIndex",
          "type": "uint256"
        }
      ],
      "name": "slashUser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slasherPercentageReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "teleBTC",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "teleBTCInstantPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x00023adf78b4dd6c5644877bc6ee96571263df363873f9752fed05b03e8c8bc8",
  "receipt": {
    "to": null,
    "from": "0x1DE72A1935Df9b4E02315BDa3C3cDbDF2A640583",
    "contractAddress": "0x2a19eb9146DB64dc8cbCdD8Ff77cFB3204118362",
    "transactionIndex": 0,
    "gasUsed": "2699061",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000800000000008000000000000000000004000000000000000000000000000000000000000000000000000000000000000000020000000000001000000000000000000000000000000000000020000000000000000020800000000100000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xaff9debe14c500d1532b6818113eaacfb224271cb12d31925f9e1bafc4265a67",
    "transactionHash": "0x00023adf78b4dd6c5644877bc6ee96571263df363873f9752fed05b03e8c8bc8",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 12805065,
        "transactionHash": "0x00023adf78b4dd6c5644877bc6ee96571263df363873f9752fed05b03e8c8bc8",
        "address": "0x2a19eb9146DB64dc8cbCdD8Ff77cFB3204118362",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001de72a1935df9b4e02315bda3c3cdbdf2a640583"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xaff9debe14c500d1532b6818113eaacfb224271cb12d31925f9e1bafc4265a67"
      }
    ],
    "blockNumber": 12805065,
    "cumulativeGasUsed": "2699061",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE9B3d12D7254Bb86DF10c2f03C98ee4B17598abc",
    "0x8ed36B08134B84698C898f0A4314905e1cA7aE1d",
    "0x1562A83dB2d6A7DAf652EbD8dD497DE4e68E6717",
    "0xBc6aCDe2c0E9BC472f4e0808Af5cCf62698a7a8C",
    10,
    12
  ],
  "numDeployments": 1,
  "solcInputHash": "e12c7c9cd263aabdb11ed9046c0bd066",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teleBTC\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_relay\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralPoolFactory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_slasherPercentageReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_paybackDeadline\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"instantFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isFixed\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"}],\"name\":\"InstantExchange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"instantFee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"}],\"name\":\"InstantTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paybackAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedCollateralPoolToken\",\"type\":\"uint256\"}],\"name\":\"PaybackLoan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slashedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paybackAmount\",\"type\":\"uint256\"}],\"name\":\"SlashUser\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"collateralPoolFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getLockedCollateralPoolTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getUserRequestDeadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserRequestsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchangeConnector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_loanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isFixedToken\",\"type\":\"bool\"}],\"name\":\"instantCCExchange\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_loanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"}],\"name\":\"instantCCTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"instantRequests\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"paybackAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedCollateralPoolTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_teleBTCAmount\",\"type\":\"uint256\"}],\"name\":\"payBackLoan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paybackDeadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relay\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_paybackDeadline\",\"type\":\"uint256\"}],\"name\":\"setPaybackDeadline\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slasherPercentageReward\",\"type\":\"uint256\"}],\"name\":\"setSlasherPercentageReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teleBTCInstantPool\",\"type\":\"address\"}],\"name\":\"setTeleBTCInstantPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchangeRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_requestIndex\",\"type\":\"uint256\"}],\"name\":\"slashUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slasherPercentageReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teleBTC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teleBTCInstantPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"It manages instant pool contract\",\"params\":{\"_collateralPoolFactory\":\"Address of relay contract\",\"_paybackDeadline\":\"Dealine of paying back the borrowed tokens from instant pool\",\"_priceOracle\":\"Address of collateral pool factory contract\",\"_relay\":\"Address of price oracle contract\",\"_slasherPercentageReward\":\"Percentage of total collateral that goes to slasher\",\"_teleBTC\":\"Address of teleBTC contract\"}},\"getLockedCollateralPoolTokenAmount(address,uint256)\":{\"params\":{\"_index\":\"Number of the instant request\",\"_user\":\"Address of the user\"},\"returns\":{\"_0\":\"Amount of locked collateral\"}},\"getUserRequestDeadline(address,uint256)\":{\"params\":{\"_index\":\"Index of the request in user request list\",\"_user\":\"Address of the user\"},\"returns\":{\"_0\":\"The deadline of that request\"}},\"getUserRequestsLength(address)\":{\"params\":{\"_user\":\"Address of the user\"},\"returns\":{\"_0\":\"The total number of user's requests\"}},\"instantCCExchange(address,address,uint256,uint256,address[],uint256,address,bool)\":{\"details\":\"Locks the required collateral amount of the user\",\"params\":{\"_amountOut\":\"Amount of the output token\",\"_collateralToken\":\"Address of collateral token\",\"_deadline\":\"Deadline of getting the loan\",\"_isFixedToken\":\"Shows whether input or output is fixed in exchange\",\"_loanAmount\":\"Amount of the loan\",\"_path\":\"Path of exchanging tokens\",\"_receiver\":\"Address of the loan receiver\"},\"returns\":{\"_0\":\"\"}},\"instantCCTransfer(address,uint256,uint256,address)\":{\"details\":\"Transfes required collateral pool token of user to itself\",\"params\":{\"_collateralToken\":\"Address of the collateral token\",\"_deadline\":\"Deadline of getting the loan\",\"_loanAmount\":\"Amount of the loan\",\"_receiver\":\"Address of the loan receiver\"},\"returns\":{\"_0\":\"True if getting loan was successful\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"payBackLoan(address,uint256)\":{\"params\":{\"_teleBTCAmount\":\"Amount of available teleBTC to pay back loans\",\"_user\":\"Address of the user who wants to pay back loans\"},\"returns\":{\"_0\":\"True if paying back is successful\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setPaybackDeadline(uint256)\":{\"details\":\"Only owner can call this\",\"params\":{\"_paybackDeadline\":\"The new payback _deadline\"}},\"setSlasherPercentageReward(uint256)\":{\"details\":\"Only owner can call this\",\"params\":{\"_slasherPercentageReward\":\"The new slasher reward\"}},\"setTeleBTCInstantPool(address)\":{\"details\":\"Only owner can call this\",\"params\":{\"_teleBTCInstantPool\":\"The new teleBTC instant pool address\"}},\"slashUser(address,address,uint256)\":{\"details\":\"Buys teleBTC using the collateral\",\"params\":{\"_exchangeRouter\":\"Address of exchange router that is used to exchange collateral tokens to teleBTC\",\"_requestIndex\":\"Index of the request that have not been paid back before deadline\",\"_user\":\"Address of the slashed user\"},\"returns\":{\"_0\":\"True if slashing is successful\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"events\":{\"InstantExchange(address,address,uint256,uint256,uint256,address[],bool,uint256,address)\":{\"notice\":\"Emits when a user submits instant exchange request\"},\"InstantTransfer(address,address,uint256,uint256,uint256,address)\":{\"notice\":\"Emits when a user submits instant transfer request\"},\"PaybackLoan(address,uint256,address,uint256)\":{\"notice\":\"Emits when a loan gets paid back\"},\"SlashUser(address,address,uint256,uint256)\":{\"notice\":\"Emits when a user gets slashed\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"This contract handles instant transfer and instant exchange requests\"},\"getLockedCollateralPoolTokenAmount(address,uint256)\":{\"notice\":\"Gives the collateral amount corresponding to the request\"},\"getUserRequestDeadline(address,uint256)\":{\"notice\":\"Gives the user request deadline\"},\"getUserRequestsLength(address)\":{\"notice\":\"Gives the total number of user's requests\"},\"instantCCExchange(address,address,uint256,uint256,address[],uint256,address,bool)\":{\"notice\":\"Exchanges the loan amount instantly for the user\"},\"instantCCTransfer(address,uint256,uint256,address)\":{\"notice\":\"Transfers the loan amount to the user\"},\"payBackLoan(address,uint256)\":{\"notice\":\"Settles loans of the user\"},\"setPaybackDeadline(uint256)\":{\"notice\":\"Changes the payback _deadline\"},\"setSlasherPercentageReward(uint256)\":{\"notice\":\"Changes the slasher reward\"},\"setTeleBTCInstantPool(address)\":{\"notice\":\"Sets the teleBTC instant pool address\"},\"slashUser(address,address,uint256)\":{\"notice\":\"Slashes collateral of user who did not pay back loan\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/routers/InstantRouter.sol\":\"InstantRouter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/connectors/interfaces/IExchangeConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IExchangeConnector {\\n\\n    // Events\\n    event Swap(address[] path, uint[] amounts, address receiver);\\n\\n    // Read-only functions\\n\\n    function name() external view returns (string memory);\\n\\n    function exchangeRouter() external view returns (address);\\n\\n    function liquidityPoolFactory() external view returns (address);\\n\\n    function wrappedNativeToken() external view returns (address);\\n\\n    function getInputAmount(\\n        uint _outputAmount,\\n        address _inputToken,\\n        address _outputToken\\n    ) external returns (bool, uint);\\n\\n    function getOutputAmount(\\n        uint _inputAmount,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view returns (bool, uint);\\n\\n    // State-changing functions\\n\\n    function setExchangeRouter(address _exchangeRouter) external;\\n\\n    function setLiquidityPoolFactory() external;\\n\\n    function setWrappedNativeToken(address _wrappedNativeToken) external;\\n\\n    function swap(\\n        uint256 _inputAmount,\\n        uint256 _outputAmount,\\n        address[] memory _path,\\n        address _to,\\n        uint256 _deadline,\\n        bool _isFixedToken\\n    ) external returns(bool, uint[] memory);\\n}\",\"keccak256\":\"0x784837e181735cc4bda4ab8fad8c950b96fbf36705c3b53d74a850486abb4bc5\",\"license\":\"MIT\"},\"contracts/erc20/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    // events\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    // read-only functions\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    // state-changing functions\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9210fa056ea67b530890ea968948270e0d22a15bd428a2edd4915ef25c4eb918\",\"license\":\"MIT\"},\"contracts/oracle/interfaces/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IPriceOracle {\\n\\n    /// @notice                     Emits when new exchange router is added\\n    /// @param exchangeRouter       Address of new exchange router\\n    /// @param exchangeConnector    Address of exchange connector\\n    event ExchangeConnectorAdded(address exchangeRouter, address exchangeConnector);\\n\\n    /// @notice                     Emits when an exchange router is removed\\n    /// @param exchangeRouter       Address of removed exchange router\\n    event ExchangeConnectorRemoved(address exchangeRouter);\\n\\n    /// @notice                     Emits when a price proxy is set\\n    /// @param _firstToken          Address of the first token\\n    /// @param _secondToken         Address of the second token\\n    /// @param _priceProxyAddress   Address of price proxy contract\\n    event SetPriceProxy(address _firstToken, address _secondToken, address _priceProxyAddress);\\n\\n    // Read-only functions\\n    \\n    /// @notice                     Gives price proxy address for a pair of tokens\\n    /// @param _firstToken          Address of the first token\\n    /// @param _secondToken         Address of the second token\\n    /// @return                     Address of price proxy contract\\n    function ChainlinkPriceProxy(address _firstToken, address _secondToken) external view returns (address);\\n\\n    /// @notice                     Gives exchange connector address for an exchange router\\n    /// @param _exchangeRouter      Address of exchange router\\n    /// @return                     Address of exchange connector\\n    function exchangeConnector(address _exchangeRouter) external view returns (address);\\n\\n    /// @notice                     Gives address of an exchange router from exchange routers list\\n    /// @param _index               Index of exchange router\\n    /// @return                     Address of exchange router\\n    function exchangeRoutersList(uint _index) external view returns (address);\\n\\n    function getExchangeRoutersListLength() external view returns (uint);\\n\\n    function acceptableDelay() external view returns (uint);\\n\\n    function equivalentOutputAmount(\\n        uint _inputAmount,\\n        uint _inputDecimals,\\n        uint _outputDecimals,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view returns (uint);\\n\\n    function equivalentOutputAmountFromOracle(\\n        uint _inputAmount,\\n        uint _inputDecimals,\\n        uint _outputDecimals,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view returns (uint);\\n\\n    function equivalentOutputAmountFromExchange(\\n        address _exchangeRouter,\\n        uint _inputAmount,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view returns (uint);\\n    \\n    // State-changing functions\\n    \\n    function addExchangeConnector(address _exchangeRouter, address _exchangeConnector) external;\\n\\n    function removeExchangeConnector(uint _exchangeRouterIndex) external;\\n\\n    function setPriceProxy(address _firstToken, address _secondToken, address _priceProxyAddress) external;\\n\\n    function setAcceptableDelay(uint _acceptableDelay) external;\\n}\",\"keccak256\":\"0x1cdef8498572919d3f96536a7084ea3e283cb1e8f55960bfd023b9d896d3f0a2\",\"license\":\"MIT\"},\"contracts/pools/interfaces/ICollateralPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '../../erc20/interfaces/IERC20.sol';\\n\\ninterface ICollateralPool is IERC20 {\\n\\n\\t// Events\\n\\n\\tevent AddCollateral(address indexed user, uint amount, uint collateralPoolTokenAmount);\\n\\n\\tevent RemoveCollateral(address indexed user, uint amount, uint collateralPoolTokenAmount);\\n\\n\\t// Read-only functions\\n\\n\\tfunction collateralToken() external view returns (address);\\n\\n\\tfunction collateralizationRatio() external view returns(uint);\\n\\n\\tfunction totalAddedCollateral() external view returns (uint);\\n\\n\\tfunction equivalentCollateralToken(uint _collateralPoolTokenAmount) external view returns (uint);\\n\\n\\tfunction equivalentCollateralPoolToken(uint _collateralTokenAmount) external view returns (uint);\\n\\n\\t// State-changing functions\\n\\n\\tfunction setCollateralizationRatio(uint _collateralizationRatio) external;\\n\\n\\tfunction addCollateral(address _user, uint _amount) external returns (bool);\\n\\n\\tfunction removeCollateral(uint _collateralPoolTokenAmount) external returns (bool);\\n\\n}\",\"keccak256\":\"0xaf2c77d0d394a3dd1d1c3e84fbe46c36079f5443d23473eda74bbced316b878a\",\"license\":\"MIT\"},\"contracts/pools/interfaces/ICollateralPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICollateralPoolFactory {\\n\\n    // Events\\n\\n    /// @notice                             Emits when a collateral pool is created\\n    /// @param name                         Name of the collateral token\\n    /// @param collateralToken              Collateral token address\\n    /// @param collateralizationRatio       At most (collateral value)/(collateralization ratio) can be moved instantly by the user\\n    /// @param collateralPool               Collateral pool contract address\\n    event CreateCollateralPool(\\n        string name,\\n        address indexed collateralToken,\\n        uint collateralizationRatio,\\n        address collateralPool\\n    );\\n\\n    /// @notice                 Emits when a collateral pool is removed\\n    /// @param collateralToken  Collateral token address\\n    /// @param collateralPool   Collateral pool contract address\\n    event RemoveCollateralPool(\\n        address indexed collateralToken,\\n        address collateralPool\\n    );\\n\\n    // Read-only functions\\n\\n    function instantRouter() external view returns (address);\\n\\n    function getCollateralPoolByToken(address _collateralToken) external view returns (address);\\n\\n    function allCollateralPools(uint _index) external view returns (address);\\n\\n    function allCollateralPoolsLength() external view returns (uint);\\n\\n    function isCollateral(address _collateralToken) external view returns (bool);\\n\\n    // State-changing functions\\n\\n    function setInstantRouter(address _instantRouter) external;\\n\\n    function createCollateralPool(address _collateralToken, uint _collateralizationRatio) external returns (address);\\n\\n    function removeCollateralPool(address _collateralToken, uint _index) external returns (bool);\\n}\",\"keccak256\":\"0xef366390efc83efd7d7fe5d04dcf138eb9c3cdf41746e9b4ada6267d2f8e2454\",\"license\":\"MIT\"},\"contracts/pools/interfaces/IInstantPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0; \\n\\nimport '../../erc20/interfaces/IERC20.sol';\\n\\ninterface IInstantPool is IERC20 {\\n\\n\\t// Events\\n\\n\\t/// @notice                             emits when some liquidity gets added to the pool               \\n\\t/// @param user                         User who added the liquidity\\n\\t/// @param teleBTCAmount                Amount of teleBTC added to the pool\\n\\t/// @param instantPoolTokenAmount       User's share from the pool\\n\\tevent AddLiquidity(address indexed user, uint teleBTCAmount, uint instantPoolTokenAmount); \\n\\n\\t/// @notice                             Emits when some liquidity gets removed from the pool\\n\\t/// @param user                         User who removed the liquidity\\n\\t/// @param teleBTCAmount                Amount of teleBTC removed from the pool\\n\\t/// @param instantPoolTokenAmount       User's share from the pool\\n\\tevent RemoveLiquidity(address indexed user, uint teleBTCAmount, uint instantPoolTokenAmount);\\n\\n\\t/// @notice                       Adds collateral to collateral pool\\n\\t/// @param user                   User who wants to get the loan\\n\\t/// @param requestedAmount        Amount of loan requested and sent to the user\\n\\t/// @param instantFee             Amount of fee that the user should pay back later with the loan\\n\\tevent InstantLoan(address indexed user, uint256 requestedAmount, uint instantFee);\\n\\n\\t// Read-only functions\\n\\n\\tfunction teleBTC() external view returns (address);\\n\\n\\tfunction instantRouter() external view returns (address);\\n\\n\\tfunction totalAddedTeleBTC() external view returns (uint);\\n\\n\\tfunction availableTeleBTC() external view returns (uint);\\n\\n\\tfunction totalUnpaidLoan() external view returns (uint);\\n\\n\\tfunction instantPercentageFee() external view returns (uint);\\n\\n\\t// State-changing functions\\n\\n\\tfunction setInstantRouter(address _instantRouter) external;\\n\\n\\tfunction setInstantPercentageFee(uint _instantPercentageFee) external;\\n\\n\\tfunction setTeleBTC(address _teleBTC) external;\\n\\n\\tfunction addLiquidity(address _user, uint _amount) external returns (uint);\\n\\n\\tfunction addLiquidityWithoutMint(uint _amount) external returns (bool);\\n\\n\\tfunction removeLiquidity(address _user, uint _instantPoolTokenAmount) external returns (uint);\\n\\n\\tfunction getLoan(address _user, uint _amount) external returns (bool);\\n\\n}\",\"keccak256\":\"0xfc238793f16807fb4c01214590f20840e0a921dc4329dc9ffb3e86c6f0cd312c\",\"license\":\"MIT\"},\"contracts/relay/interfaces/IBitcoinRelay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBitcoinRelay {\\n    // Structures\\n\\n    /// @notice                 \\tStructure for recording block header\\n    /// @param selfHash             Hash of block header\\n    /// @param parentHash          \\tHash of parent block header\\n    /// @param merkleRoot       \\tMerkle root of transactions in the block\\n    /// @param relayer              Address of relayer who submitted the block header\\n    struct blockHeader {\\n        bytes32 selfHash;\\n        bytes32 parentHash;\\n        bytes32 merkleRoot;\\n        address relayer;\\n        uint gasPrice;\\n    }\\n\\n    // Events\\n\\n    /// @notice                     Emits when a block header is added\\n    /// @param height               Height of submitted header\\n    /// @param selfHash             Hash of submitted header\\n    /// @param parentHash           Parent hash of submitted header\\n    /// @param relayer              Address of relayer who submitted the block header\\n    event BlockAdded(\\n        uint indexed height,\\n        bytes32 selfHash,\\n        bytes32 indexed parentHash,\\n        address indexed relayer\\n    );\\n\\n    /// @notice                     Emits when a block header gets finalized\\n    /// @param height               Height of the header\\n    /// @param selfHash             Hash of the header\\n    /// @param parentHash           Parent hash of the header\\n    /// @param relayer              Address of relayer who submitted the block header\\n    /// @param rewardAmountTNT      Amount of reward that the relayer receives in target native token\\n    /// @param rewardAmountTDT      Amount of reward that the relayer receives in TDT\\n    event BlockFinalized(\\n        uint indexed height,\\n        bytes32 selfHash,\\n        bytes32 parentHash,\\n        address indexed relayer,\\n        uint rewardAmountTNT,\\n        uint rewardAmountTDT\\n    );\\n\\n    // Read-only functions\\n\\n    function relayGenesisHash() external view returns (bytes32);\\n\\n    function initialHeight() external view returns(uint);\\n\\n    function lastSubmittedHeight() external view returns(uint);\\n\\n    function finalizationParameter() external view returns(uint);\\n\\n    function TeleportDAOToken() external view returns(address);\\n\\n    function relayerPercentageFee() external view returns(uint);\\n\\n    function epochLength() external view returns(uint);\\n\\n    function lastEpochQueries() external view returns(uint);\\n\\n    function currentEpochQueries() external view returns(uint);\\n\\n    function baseQueries() external view returns(uint);\\n\\n    function submissionGasUsed() external view returns(uint);\\n\\n    function getBlockHeaderHash(uint height, uint index) external view returns(bytes32);\\n\\n    function getBlockHeaderFee (uint _height, uint _index) external view returns(uint);\\n\\n    function getNumberOfSubmittedHeaders(uint height) external view returns (uint);\\n\\n    function getCurrentEpochDifficulty() external view returns (uint256);\\n\\n    function getPrevEpochDifficulty() external view returns (uint256);\\n\\n    function availableTDT() external view returns(uint);\\n\\n    function availableTNT() external view returns(uint);\\n\\n    function findHeight(bytes32 _hash) external view returns (uint256);\\n\\n    function findAncestor(bytes32 _hash, uint256 _offset) external view returns (bytes32); // see if it's needed\\n\\n    function isAncestor(bytes32 _ancestor, bytes32 _descendant, uint256 _limit) external view returns (bool); // see if it's needed\\n\\n    function rewardAmountInTDT() external view returns (uint);\\n\\n    // State-changing functions\\n\\n    function pauseRelay() external;\\n\\n    function unPauseRelay() external;\\n\\n    function setRewardAmountInTDT(uint _rewardAmountInTDT) external;\\n\\n    function setFinalizationParameter(uint _finalizationParameter) external;\\n\\n    function setRelayerPercentageFee(uint _relayerPercentageFee) external;\\n\\n    function setEpochLength(uint _epochLength) external;\\n\\n    function setBaseQueries(uint _baseQueries) external;\\n\\n    function setSubmissionGasUsed(uint _submissionGasUsed) external;\\n\\n    function checkTxProof(\\n        bytes32 txid,\\n        uint blockHeight,\\n        bytes calldata intermediateNodes,\\n        uint index\\n    ) external payable returns (bool);\\n\\n    function addHeaders(bytes calldata _anchor, bytes calldata _headers) external returns (bool);\\n\\n    function addHeadersWithRetarget(\\n        bytes calldata _oldPeriodStartHeader,\\n        bytes calldata _oldPeriodEndHeader,\\n        bytes calldata _headers\\n    ) external returns (bool);\\n\\n}\",\"keccak256\":\"0x457fb0f8a6082c881c9da37003c8690061f911ada2a7bda96a7917f20a6877a9\",\"license\":\"MIT\"},\"contracts/routers/InstantRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport './interfaces/IInstantRouter.sol';\\nimport '../connectors/interfaces/IExchangeConnector.sol';\\nimport '../pools/interfaces/IInstantPool.sol';\\nimport '../pools/interfaces/ICollateralPool.sol';\\nimport '../pools/interfaces/ICollateralPoolFactory.sol';\\nimport '../erc20/interfaces/IERC20.sol';\\nimport '../oracle/interfaces/IPriceOracle.sol';\\nimport \\\"../relay/interfaces/IBitcoinRelay.sol\\\";\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport \\\"hardhat/console.sol\\\"; // Just for test\\n\\ncontract InstantRouter is IInstantRouter, Ownable, ReentrancyGuard {\\n\\n    mapping(address => instantRequest[]) public instantRequests;\\n    uint public override slasherPercentageReward;\\n    uint public override paybackDeadline;\\n    address public override teleBTC;\\n    address public override teleBTCInstantPool;\\n    address public override relay;\\n    address public override priceOracle;\\n    address public override collateralPoolFactory;\\n\\n    /// @notice                             This contract handles instant transfer and instant exchange requests\\n    /// @dev                                It manages instant pool contract\\n    /// @param _teleBTC                     Address of teleBTC contract\\n    /// @param _relay                       Address of price oracle contract\\n    /// @param _priceOracle                 Address of collateral pool factory contract\\n    /// @param _collateralPoolFactory       Address of relay contract\\n    /// @param _slasherPercentageReward     Percentage of total collateral that goes to slasher\\n    /// @param _paybackDeadline             Dealine of paying back the borrowed tokens from instant pool\\n    constructor(\\n        address _teleBTC,\\n        address _relay,\\n        address _priceOracle,\\n        address _collateralPoolFactory,\\n        uint _slasherPercentageReward,\\n        uint _paybackDeadline\\n    ) {\\n        teleBTC = _teleBTC;\\n        relay = _relay;\\n        priceOracle = _priceOracle;\\n        collateralPoolFactory = _collateralPoolFactory;\\n        slasherPercentageReward = _slasherPercentageReward;\\n        paybackDeadline = _paybackDeadline;\\n    }\\n\\n    /// @notice                  Gives the collateral amount corresponding to the request\\n    /// @param _user             Address of the user\\n    /// @param _index            Number of the instant request\\n    /// @return                  Amount of locked collateral\\n    function getLockedCollateralPoolTokenAmount(address _user, uint _index) external view override returns (uint) {\\n        return instantRequests[_user][_index].lockedCollateralPoolTokenAmount;\\n    }\\n\\n    /// @notice                   Gives the total number of user's requests\\n    /// @param _user              Address of the user\\n    /// @return                   The total number of user's requests\\n    function getUserRequestsLength(address _user) external view override returns (uint) {\\n        return instantRequests[_user].length;\\n    }\\n\\n    /// @notice                   Gives the user request deadline\\n    /// @param _user              Address of the user\\n    /// @param _index             Index of the request in user request list\\n    /// @return                   The deadline of that request\\n    function getUserRequestDeadline(address _user, uint _index) external view override returns (uint) {\\n        return instantRequests[_user][_index].deadline;\\n    }\\n\\n    /// @notice                   Changes the payback _deadline\\n    /// @dev                      Only owner can call this\\n    /// @param _paybackDeadline   The new payback _deadline\\n    function setPaybackDeadline(uint _paybackDeadline) external override onlyOwner {\\n        paybackDeadline = _paybackDeadline;\\n    }\\n\\n    /// @notice                             Changes the slasher reward\\n    /// @dev                                Only owner can call this\\n    /// @param _slasherPercentageReward     The new slasher reward\\n    function setSlasherPercentageReward(uint _slasherPercentageReward) external override onlyOwner {\\n        slasherPercentageReward = _slasherPercentageReward;\\n    }\\n\\n    /// @notice                                 Sets the teleBTC instant pool address\\n    /// @dev                                    Only owner can call this\\n    /// @param _teleBTCInstantPool              The new teleBTC instant pool address\\n    function setTeleBTCInstantPool(address _teleBTCInstantPool) external override onlyOwner {\\n        teleBTCInstantPool = _teleBTCInstantPool;\\n    }\\n\\n    /// @notice                   Transfers the loan amount to the user\\n    /// @dev                      Transfes required collateral pool token of user to itself\\n    /// @param _receiver          Address of the loan receiver\\n    /// @param _loanAmount        Amount of the loan\\n    /// @param _deadline          Deadline of getting the loan\\n    /// @param _collateralToken   Address of the collateral token\\n    /// @return                   True if getting loan was successful\\n    function instantCCTransfer(\\n        address _receiver,\\n        uint _loanAmount,\\n        uint _deadline,\\n        address _collateralToken\\n    ) external nonReentrant override returns (bool) {\\n        // Checks that deadline for getting loan has not passed\\n        require(_deadline >= block.timestamp, \\\"InstantRouter: deadline has passed\\\");\\n\\n        // Calculates the instant fee\\n        uint instantFee = IInstantPool(teleBTCInstantPool).instantPercentageFee()*_loanAmount/10000;\\n\\n        // Locks the required amount of user's collateral\\n        _lockCollateral(msg.sender, _loanAmount + instantFee, _collateralToken);\\n\\n        // Gets loan from instant pool\\n        IInstantPool(teleBTCInstantPool).getLoan(_receiver, _loanAmount);\\n\\n        emit InstantTransfer(\\n            msg.sender,\\n            _receiver,\\n            _loanAmount,\\n            instantFee,\\n            instantRequests[msg.sender][instantRequests[msg.sender].length - 1].deadline,\\n            _collateralToken\\n        );\\n        return true;\\n    }\\n\\n    /// @notice                   Exchanges the loan amount instantly for the user\\n    /// @dev                      Locks the required collateral amount of the user\\n    /// @param _receiver          Address of the loan receiver\\n    /// @param _loanAmount        Amount of the loan\\n    /// @param _amountOut         Amount of the output token\\n    /// @param _path              Path of exchanging tokens\\n    /// @param _deadline          Deadline of getting the loan\\n    /// @param _collateralToken   Address of collateral token\\n    /// @param _isFixedToken           Shows whether input or output is fixed in exchange\\n    /// @return\\n    function instantCCExchange(\\n        address _exchangeConnector,\\n        address _receiver,\\n        uint _loanAmount,\\n        uint _amountOut,\\n        address[] memory _path,\\n        uint _deadline,\\n        address _collateralToken,\\n        bool _isFixedToken\\n    ) external nonReentrant override returns(uint[] memory) {\\n        // Checks that deadline for exchanging has not passed\\n        require(_deadline >= block.timestamp, \\\"InstantRouter: deadline has passed\\\");\\n\\n        // Checks that the first token in teleBTC\\n        require(_path[0] == teleBTC, \\\"InstantRouter: input token is not valid\\\");\\n\\n        // Calculates the instant fee\\n        uint instantFee = IInstantPool(teleBTCInstantPool).instantPercentageFee()*_loanAmount/10000;\\n\\n        // Locks the required amount of user's collateral\\n        _lockCollateral(msg.sender, _loanAmount + instantFee, _collateralToken);\\n\\n        // Gets loan from instant pool\\n        IInstantPool(teleBTCInstantPool).getLoan(address(this), _loanAmount);\\n\\n        // Gives allowance to exchange connector\\n        IERC20(teleBTC).approve(_exchangeConnector, _loanAmount);\\n\\n        // Exchanges teleBTC for output token\\n        (bool result, uint[] memory amounts) = IExchangeConnector(_exchangeConnector).swap(\\n            _loanAmount,\\n            _amountOut,\\n            _path,\\n            _receiver,\\n            _deadline,\\n            _isFixedToken\\n        );\\n\\n        // Checks the exchanging result\\n        require(result == true, \\\"InstantRouter: exchange was not successful\\\");\\n\\n        emit InstantExchange(\\n            msg.sender,\\n            _receiver,\\n            _loanAmount,\\n            instantFee,\\n            _amountOut,\\n            _path,\\n            _isFixedToken,\\n            instantRequests[msg.sender][instantRequests[msg.sender].length - 1].deadline, // payback deadline\\n            _collateralToken\\n        );\\n        return amounts;\\n    }\\n\\n    /// @notice                             Settles loans of the user\\n    /// @param _user                        Address of the user who wants to pay back loans\\n    /// @param _teleBTCAmount               Amount of available teleBTC to pay back loans\\n    /// @return                             True if paying back is successful\\n    function payBackLoan(address _user, uint _teleBTCAmount) external nonReentrant override returns (bool) {\\n        uint remainedAmount = _teleBTCAmount;\\n        uint lastSubmittedHeight = IBitcoinRelay(relay).lastSubmittedHeight();\\n\\n        for (uint i = 1; i <= instantRequests[_user].length; i++) {\\n            if (\\n                remainedAmount >= instantRequests[_user][i-1].paybackAmount &&\\n                instantRequests[_user][i-1].deadline >= lastSubmittedHeight\\n            ) {\\n                remainedAmount = remainedAmount - instantRequests[_user][i-1].paybackAmount;\\n\\n                // Pays back the loan to instant pool\\n                IERC20(teleBTC).transferFrom(\\n                    msg.sender,\\n                    teleBTCInstantPool,\\n                    instantRequests[_user][i-1].paybackAmount\\n                );\\n\\n                // Unlocks the locked collateral pool token after paying the loan\\n                ICollateralPool(instantRequests[_user][i-1].collateralPool).transfer(\\n                    _user,\\n                    instantRequests[_user][i-1].lockedCollateralPoolTokenAmount\\n                );\\n\\n                emit PaybackLoan(\\n                    _user,\\n                    instantRequests[_user][i-1].paybackAmount,\\n                    instantRequests[_user][i-1].collateralToken,\\n                    instantRequests[_user][i-1].lockedCollateralPoolTokenAmount\\n                );\\n\\n                // Deletes the request after paying it\\n                _removeElement(_user, i-1);\\n                i--;\\n            }\\n\\n            if (remainedAmount == 0) {\\n                break;\\n            }\\n        }\\n\\n        // Transfers rest of teleBTC to user\\n        if (remainedAmount > 0) {\\n            IERC20(teleBTC).transferFrom(msg.sender, _user, remainedAmount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @notice                           Slashes collateral of user who did not pay back loan\\n    /// @dev                              Buys teleBTC using the collateral\\n    /// @param _exchangeRouter            Address of exchange router that is used to exchange collateral tokens to teleBTC\\n    /// @param _user                      Address of the slashed user\\n    /// @param _requestIndex              Index of the request that have not been paid back before deadline\\n    /// @return                           True if slashing is successful\\n    function slashUser(\\n        address _exchangeRouter,\\n        address _user,\\n        uint _requestIndex\\n    ) override nonReentrant external returns (bool) {\\n        // Gets exchange connector address\\n        address _exchangeConnector = IPriceOracle(priceOracle).exchangeConnector(_exchangeRouter);\\n        require(_exchangeConnector != address(0), \\\"InstantRouter: exchange connector is not acceptable\\\");\\n\\n        require(instantRequests[_user].length > _requestIndex, \\\"InstantRouter: request index does not exist\\\");\\n\\n        // Gets last submitted height on relay\\n        uint lastSubmittedHeight = IBitcoinRelay(relay).lastSubmittedHeight();\\n\\n        // Checks that deadline has passed\\n        require(\\n            instantRequests[_user][_requestIndex].deadline < lastSubmittedHeight,\\n            \\\"InstantRouter: deadline has not passed yet\\\"\\n        );\\n\\n        // Gets loan information\\n        uint lockedCollateralPoolTokenAmount = instantRequests[_user][_requestIndex].lockedCollateralPoolTokenAmount;\\n        address collateralToken = instantRequests[_user][_requestIndex].collateralToken;\\n        address collateralPool = instantRequests[_user][_requestIndex].collateralPool;\\n        uint paybackAmount = instantRequests[_user][_requestIndex].paybackAmount;\\n\\n        // Finds needed collateral token to pay back loan\\n        (bool result, uint requiredCollateralToken) = IExchangeConnector(_exchangeConnector).getInputAmount(\\n            paybackAmount,\\n            collateralToken,\\n            teleBTC\\n        );\\n        uint totalCollateralToken = ICollateralPool(collateralPool).equivalentCollateralToken(\\n            lockedCollateralPoolTokenAmount\\n        );\\n\\n        // Path of exchanging\\n        address[] memory path = new address[](2);\\n        path[0] = collateralToken;\\n        path[1] = teleBTC;\\n\\n        // Gets collateral token from collateral pool\\n        ICollateralPool(collateralPool).removeCollateral(lockedCollateralPoolTokenAmount);\\n\\n        // Checks that locked collateral is enough to pay back loan\\n        if (totalCollateralToken >= requiredCollateralToken && result == true) {\\n            // Approves exchange connector to use collateral token\\n            IERC20(collateralToken).approve(_exchangeConnector, requiredCollateralToken);\\n\\n            // Exchanges collateral token for teleBTC\\n            IExchangeConnector(_exchangeConnector).swap(\\n                requiredCollateralToken,\\n                paybackAmount,\\n                path,\\n                teleBTCInstantPool,\\n                block.timestamp + 1,\\n                false\\n            );\\n\\n            uint slasherReward = (totalCollateralToken - requiredCollateralToken)*slasherPercentageReward/100;\\n\\n            // Sends reward to slasher\\n            IERC20(collateralToken).transfer(msg.sender, slasherReward);\\n\\n            // Deposits rest of the tokens to collateral pool\\n            ICollateralPool(collateralPool).addCollateral(\\n                _user,\\n                totalCollateralToken - requiredCollateralToken - slasherReward\\n            );\\n\\n            emit SlashUser(_user, collateralToken, requiredCollateralToken, paybackAmount);\\n        } else {\\n            // Approves exchange connector to use collateral token\\n            IERC20(collateralToken).approve(_exchangeConnector, totalCollateralToken);\\n\\n            // Buys teleBTC as much as possible and sends it to instant pool\\n            IExchangeConnector(_exchangeConnector).swap(\\n                totalCollateralToken,\\n                0,\\n                path,\\n                teleBTCInstantPool,\\n                block.timestamp + 1,\\n                true\\n            );\\n\\n            emit SlashUser(_user, collateralToken, totalCollateralToken, paybackAmount);\\n        }\\n\\n        // Deletes the request after slashing user\\n        _removeElement(_user, _requestIndex);\\n\\n        return true;\\n    }\\n\\n    /// @notice             Removes an element of array of user's instant requests\\n    /// @dev                Deletes and shifts the array\\n    /// @param _user        Address of the user whose instant requests array is considered\\n    /// @param _index       Index of the element that will be deleted\\n    function _removeElement(address _user, uint _index) internal {\\n        require(_index < instantRequests[_user].length, \\\"InstantRouter: index is out of bound\\\");\\n        for (uint i = _index; i < instantRequests[_user].length - 1; i++) {\\n            instantRequests[_user][i] = instantRequests[_user][i+1];\\n        }\\n        instantRequests[_user].pop();\\n    }\\n\\n    /// @notice                   Locks the required amount of user's collateral\\n    /// @dev                      Records the instant request to be used in future\\n    /// @param _user              Address of the loan receiver\\n    /// @param _payBackAmount     Amount of the (loan + fee) that should be paid back\\n    /// @param _collateralToken   Address of the collateral\\n    /// @return                   True if collateral is locked successfully\\n    function _lockCollateral(\\n        address _user,\\n        uint _payBackAmount,\\n        address _collateralToken\\n    ) internal returns (bool) {\\n        // Checks that collateral token is acceptable\\n        require(\\n            ICollateralPoolFactory(collateralPoolFactory).isCollateral(_collateralToken),\\n            \\\"InstantRouter: collateral token is not acceptable\\\"\\n        );\\n\\n        // Gets the collateral pool address\\n        address collateralPool = ICollateralPoolFactory(collateralPoolFactory).getCollateralPoolByToken(\\n            _collateralToken\\n        );\\n\\n        // Gets collateralization ratio\\n        uint collateralizationRatio = ICollateralPool(collateralPool).collateralizationRatio();\\n\\n        // Gets the equivalent amount of collateral token\\n        uint equivalentCollateralToken = IPriceOracle(priceOracle).equivalentOutputAmount(\\n            _payBackAmount, // input amount\\n            IERC20(teleBTC).decimals(),\\n            IERC20(_collateralToken).decimals(),\\n            teleBTC,\\n            _collateralToken // output token\\n        );\\n\\n        // Finds needed collateral token for getting loan\\n        uint requiredCollateralToken = equivalentCollateralToken*collateralizationRatio/100;\\n        uint requiredCollateralPoolToken = ICollateralPool(collateralPool).equivalentCollateralPoolToken(\\n            requiredCollateralToken\\n        );\\n\\n        // Transfers collateral pool token from user to itself\\n        ICollateralPool(collateralPool).transferFrom(_user, address(this), requiredCollateralPoolToken);\\n\\n        // Records the instant request\\n        instantRequest memory request;\\n        request.user = _user;\\n        request.paybackAmount = _payBackAmount;\\n        request.lockedCollateralPoolTokenAmount = requiredCollateralPoolToken;\\n        request.collateralPool = collateralPool;\\n        request.collateralToken = _collateralToken;\\n        request.deadline = IBitcoinRelay(relay).lastSubmittedHeight() + paybackDeadline;\\n        instantRequests[_user].push(request);\\n\\n        return true;\\n    }\\n}\",\"keccak256\":\"0x5b637a4788e4cec89cde0a27a5b049e853ab3efac8518e2282744b8f67f263f3\",\"license\":\"MIT\"},\"contracts/routers/interfaces/IInstantRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IInstantRouter {\\n    // Structures\\n\\n    /// @notice                                 Structure for recording instant requests\\n    /// @param user                             Address of user who recieves loan\\n    /// @param collateralPool                   Address of collateral pool\\n    /// @param paybackAmount                    Amount of requested loan\\n    /// @param collateralToken                  Address of underlying collateral token\\n    /// @param lockedCollateralPoolTokenAmount  Amount of locked collateral pool token for getting loan\\n    /// @param deadline                         Deadline of paying back the loan\\n    struct instantRequest {\\n        address user;\\n        address collateralPool;\\n\\t\\taddress collateralToken;\\n        uint paybackAmount;\\n        uint lockedCollateralPoolTokenAmount;\\n        uint deadline;\\n    }\\n\\n    // Events\\n\\n    /// @notice                            Emits when a loan gets paid back\\n    /// @param user                        Address of user who recieves loan\\n    /// @param paybackAmount               Amount of (loan + fee) that should be paid back\\n    /// @param collateralToken             Address of underlying collateral token\\n    /// @param lockedCollateralPoolToken   Amount of locked collateral pool token for getting loan\\n    event PaybackLoan(\\n\\t\\taddress indexed user, \\n\\t\\tuint paybackAmount, \\n\\t\\taddress indexed collateralToken, \\n\\t\\tuint lockedCollateralPoolToken\\n\\t);\\n\\n    /// @notice                         Emits when a user gets slashed\\n    /// @param user                     Address of user who recieves loan\\n    /// @param collateralToken          Address of collateral underlying token\\n\\t/// @param slashedAmount            How much user got slashed\\n\\t/// @param paybackAmount            Address of collateral underlying token\\n    event SlashUser(\\n\\t\\taddress indexed user, \\n\\t\\taddress indexed collateralToken, \\n\\t\\tuint slashedAmount, \\n\\t\\tuint paybackAmount\\n\\t);\\n\\n    /// @notice                     Emits when a user submits instant transfer request\\n    /// @param user                 Address of the user who made the request\\n    /// @param receiver             Address of the loan receiver\\n    /// @param loanAmount           Amount of the loan\\n    /// @param instantFee           Amount of the instant loan fee\\n    /// @param deadline             Deadline of paying back the loan\\n    /// @param collateralToken      Address of the collateral token\\n    event InstantTransfer(\\n        address indexed user, \\n        address receiver, \\n        uint loanAmount, \\n        uint instantFee, \\n        uint indexed deadline, \\n        address indexed collateralToken\\n    );\\n\\n    /// @notice                     Emits when a user submits instant exchange request\\n    /// @param user                 Address of the user who made the request\\n    /// @param receiver             Address of the loan receiver\\n    /// @param loanAmount           Amount of the loan\\n    /// @param instantFee           Amount of the instant loan fee\\n    /// @param amountOut            Amount of the output token\\n    /// @param path                 Path of exchanging tokens\\n    /// @param isFixed              Shows whether input or output is fixed in exchange\\n    /// @param deadline             Deadline of getting the loan\\n    /// @param collateralToken      Address of the collateral token\\n    event InstantExchange(\\n        address indexed user, \\n        address receiver, \\n        uint loanAmount, \\n        uint instantFee,\\n        uint amountOut,\\n        address[] path,\\n        bool isFixed,\\n        uint indexed deadline, \\n        address indexed collateralToken\\n    );\\n\\n    // Read-only functions\\n\\n    function teleBTCInstantPool() external view returns (address);\\n\\n    function teleBTC() external view returns (address);\\n\\n    function relay() external view returns (address);\\n\\n\\tfunction collateralPoolFactory() external view returns (address);\\n\\n\\tfunction priceOracle() external view returns (address);\\n\\n    function slasherPercentageReward() external view returns (uint);\\n\\n    function paybackDeadline() external view returns (uint);\\n    \\n    function getLockedCollateralPoolTokenAmount(address _user, uint _index) external view returns (uint);\\n\\n    function getUserRequestsLength(address _user) external view returns (uint);\\n\\n    function getUserRequestDeadline(address _user, uint _index) external view returns (uint);\\n\\n    // State-changing functions\\n\\n    function setPaybackDeadline(uint _paybackDeadline) external;\\n\\n    function setSlasherPercentageReward(uint _slasherPercentageReward) external;\\n\\n    function setTeleBTCInstantPool(address _teleBTCInstantPool) external;\\n\\n    function instantCCTransfer(\\n        address _receiver,\\n        uint _loanAmount,\\n        uint _deadline,\\n        address _collateralPool\\n    ) external returns (bool);\\n\\n    function instantCCExchange(\\n\\t\\taddress _exchangeConnector,\\n        address _receiver,\\n        uint _loanAmount, \\n        uint _amountOut, \\n        address[] memory _path, \\n        uint _deadline,\\n        address _collateralToken,\\n        bool _isFixedToken\\n    ) external returns (uint[] memory);\\n\\n    function payBackLoan(address _user, uint _teleBTCAmount) external returns (bool);\\n\\n    function slashUser(\\t\\t\\n\\t\\taddress _exchangeConnector, \\n\\t\\taddress _user, \\n\\t\\tuint _requestIndex\\n\\t) external returns (bool);\\n\\n}\",\"keccak256\":\"0x51f45d4153195518bf003644ba076906d77b20e84b2e7ee30cb72cdee163d212\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002e0a38038062002e0a83398101604081905262000034916200010d565b6200003f33620000a0565b60018055600580546001600160a01b039788166001600160a01b03199182161790915560078054968816968216969096179095556008805494871694861694909417909355600980549290951691909316179092556003556004556200017b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200010857600080fd5b919050565b60008060008060008060c0878903121562000126578182fd5b6200013187620000f0565b95506200014160208801620000f0565b94506200015160408801620000f0565b93506200016160608801620000f0565b92506080870151915060a087015190509295509295509295565b612c7f806200018b6000396000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c80636f6ef7c9116100b857806397091b891161007c57806397091b891461028c578063a36be9a1146102dd578063b59589d1146102e6578063b701b1cf146102f9578063db1cb5581461030c578063f2fde38b1461031f57610137565b80636f6ef7c91461022d578063715018a61461024d578063763360db146102555780638d3d78cd146102685780638da5cb5b1461027b57610137565b80634782bc36116100ff5780634782bc36146101be5780634cf46825146101d15780634d61878e146101e457806369539c70146101f7578063697380b21461020a57610137565b8063059d02381461013c5780632630c12f14610151578063387bb22d14610181578063419cba7f146101a257806346e897fd146101ab575b600080fd5b61014f61014a366004612607565b610332565b005b600854610164906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61019461018f366004612607565b610387565b604051908152602001610178565b61019460035481565b600654610164906001600160a01b031681565b61014f6101cc3660046128ef565b6103a6565b61014f6101df3660046128ef565b6103d5565b6101946101f236600461278b565b610404565b61019461020536600461278b565b610456565b61021d6102183660046127b6565b6104a8565b6040519015158152602001610178565b61024061023b366004612686565b6106e6565b60405161017891906129cb565b61014f610b41565b600954610164906001600160a01b031681565b600554610164906001600160a01b031681565b6000546001600160a01b0316610164565b61029f61029a36600461278b565b610b77565b604080516001600160a01b039788168152958716602087015293909516928401929092526060830152608082015260a081019190915260c001610178565b61019460045481565b600754610164906001600160a01b031681565b61021d610307366004612646565b610bd8565b61021d61031a36600461278b565b61168e565b61014f61032d366004612607565b611cc5565b6000546001600160a01b031633146103655760405162461bcd60e51b815260040161035c90612a51565b60405180910390fd5b600680546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0381166000908152600260205260409020545b919050565b6000546001600160a01b031633146103d05760405162461bcd60e51b815260040161035c90612a51565b600355565b6000546001600160a01b031633146103ff5760405162461bcd60e51b815260040161035c90612a51565b600455565b6001600160a01b038216600090815260026020526040812080548390811061043c57634e487b7160e01b600052603260045260246000fd5b906000526020600020906006020160050154905092915050565b6001600160a01b038216600090815260026020526040812080548390811061048e57634e487b7160e01b600052603260045260246000fd5b906000526020600020906006020160040154905092915050565b6000600260015414156104cd5760405162461bcd60e51b815260040161035c90612a86565b6002600155428310156104f25760405162461bcd60e51b815260040161035c90612a0f565b600061271085600660009054906101000a90046001600160a01b03166001600160a01b031663e49bce3c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561054657600080fd5b505afa15801561055a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057e9190612907565b6105889190612b92565b6105929190612b72565b90506105a8336105a28388612b5a565b85611d60565b506006546040516350e28ac360e11b81526001600160a01b038881166004830152602482018890529091169063a1c5158690604401602060405180830381600087803b1580156105f757600080fd5b505af115801561060b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062f91906127ff565b5033600090815260026020526040902080546001600160a01b038516919061065990600190612bb1565b8154811061067757634e487b7160e01b600052603260045260246000fd5b600091825260209182902060056006909202010154604080516001600160a01b038b16815292830189905282018490529033907f0b2045d07f2d7eb237fca6d4f5f6f90d2862df59632c726bb4c5aacca23bf01e9060600160405180910390a450506001808055949350505050565b60606002600154141561070b5760405162461bcd60e51b815260040161035c90612a86565b6002600155428410156107305760405162461bcd60e51b815260040161035c90612a0f565b60055485516001600160a01b0390911690869060009061076057634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316146107ce5760405162461bcd60e51b815260206004820152602760248201527f496e7374616e74526f757465723a20696e70757420746f6b656e206973206e6f6044820152661d081d985b1a5960ca1b606482015260840161035c565b600061271088600660009054906101000a90046001600160a01b03166001600160a01b031663e49bce3c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561082257600080fd5b505afa158015610836573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085a9190612907565b6108649190612b92565b61086e9190612b72565b90506108843361087e838b612b5a565b86611d60565b506006546040516350e28ac360e11b8152306004820152602481018a90526001600160a01b039091169063a1c5158690604401602060405180830381600087803b1580156108d157600080fd5b505af11580156108e5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090991906127ff565b5060055460405163095ea7b360e01b81526001600160a01b038c81166004830152602482018b90529091169063095ea7b390604401602060405180830381600087803b15801561095857600080fd5b505af115801561096c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099091906127ff565b506000808b6001600160a01b031663b0bbcd888b8b8b8f8c8b6040518763ffffffff1660e01b81526004016109ca96959493929190612abd565b600060405180830381600087803b1580156109e457600080fd5b505af11580156109f8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a20919081019061281b565b9092509050600182151514610a8a5760405162461bcd60e51b815260206004820152602a60248201527f496e7374616e74526f757465723a2065786368616e676520776173206e6f74206044820152691cdd58d8d95cdcd99d5b60b21b606482015260840161035c565b33600090815260026020526040902080546001600160a01b0388169190610ab390600190612bb1565b81548110610ad157634e487b7160e01b600052603260045260246000fd5b906000526020600020906006020160050154336001600160a01b03167fd828a9b1563fcc52e2c0a608016ad8117306786d7adf9a7810dd683103cb1a5d8e8e888f8f8d604051610b2696959493929190612983565b60405180910390a4600180559b9a5050505050505050505050565b6000546001600160a01b03163314610b6b5760405162461bcd60e51b815260040161035c90612a51565b610b75600061235c565b565b60026020528160005260406000208181548110610b9357600080fd5b60009182526020909120600690910201805460018201546002830154600384015460048501546005909501546001600160a01b03948516975092841695509216929086565b600060026001541415610bfd5760405162461bcd60e51b815260040161035c90612a86565b600260015560085460405163d86faec760e01b81526001600160a01b038681166004830152600092169063d86faec79060240160206040518083038186803b158015610c4857600080fd5b505afa158015610c5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c80919061262a565b90506001600160a01b038116610cf45760405162461bcd60e51b815260206004820152603360248201527f496e7374616e74526f757465723a2065786368616e676520636f6e6e6563746f60448201527272206973206e6f742061636365707461626c6560681b606482015260840161035c565b6001600160a01b0384166000908152600260205260409020548310610d6f5760405162461bcd60e51b815260206004820152602b60248201527f496e7374616e74526f757465723a207265717565737420696e64657820646f6560448201526a1cc81b9bdd08195e1a5cdd60aa1b606482015260840161035c565b600754604080516302f796d960e41b815290516000926001600160a01b031691632f796d90916004808301926020929190829003018186803b158015610db457600080fd5b505afa158015610dc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dec9190612907565b6001600160a01b03861660009081526002602052604090208054919250829186908110610e2957634e487b7160e01b600052603260045260246000fd5b90600052602060002090600602016005015410610e9b5760405162461bcd60e51b815260206004820152602a60248201527f496e7374616e74526f757465723a20646561646c696e6520686173206e6f74206044820152691c185cdcd959081e595d60b21b606482015260840161035c565b6001600160a01b0385166000908152600260205260408120805486908110610ed357634e487b7160e01b600052603260045260246000fd5b9060005260206000209060060201600401549050600060026000886001600160a01b03166001600160a01b031681526020019081526020016000208681548110610f2d57634e487b7160e01b600052603260045260246000fd5b6000918252602080832060026006909302018201546001600160a01b038b81168552929091526040832080549290911693509088908110610f7e57634e487b7160e01b600052603260045260246000fd5b60009182526020808320600160069093020191909101546001600160a01b038b8116845260029092526040832080549290911693509089908110610fd257634e487b7160e01b600052603260045260246000fd5b60009182526020822060069190910201600301546005546040516322620c1d60e21b8152600481018390526001600160a01b03878116602483015291821660448201529193508291908916906389883074906064016040805180830381600087803b15801561104057600080fd5b505af1158015611054573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107891906128c2565b60405163392f2ddd60e01b81526004810189905291935091506000906001600160a01b0386169063392f2ddd9060240160206040518083038186803b1580156110c057600080fd5b505afa1580156110d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f89190612907565b6040805160028082526060820183529293506000929091602083019080368337019050509050868160008151811061114057634e487b7160e01b600052603260045260246000fd5b6001600160a01b03928316602091820292909201015260055482519116908290600190811061117f57634e487b7160e01b600052603260045260246000fd5b6001600160a01b039283166020918202929092010152604051630646f82b60e31b8152600481018a905290871690633237c15890602401602060405180830381600087803b1580156111d057600080fd5b505af11580156111e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120891906127ff565b5082821015801561121b57506001841515145b156114f05760405163095ea7b360e01b81526001600160a01b038b811660048301526024820185905288169063095ea7b390604401602060405180830381600087803b15801561126a57600080fd5b505af115801561127e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a291906127ff565b506006546001600160a01b03808c169163b0bbcd8891869189918691166112ca426001612b5a565b60006040518763ffffffff1660e01b81526004016112ed96959493929190612abd565b600060405180830381600087803b15801561130757600080fd5b505af115801561131b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611343919081019061281b565b50506000606460035485856113589190612bb1565b6113629190612b92565b61136c9190612b72565b60405163a9059cbb60e01b8152336004820152602481018290529091506001600160a01b0389169063a9059cbb90604401602060405180830381600087803b1580156113b757600080fd5b505af11580156113cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ef91906127ff565b506001600160a01b038716636d75b9ee8f8361140b8888612bb1565b6114159190612bb1565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561145b57600080fd5b505af115801561146f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149391906127ff565b50876001600160a01b03168e6001600160a01b03167f02328bbf482c913c71ddadcaf039f13cdb6499e9341bfa670de43de6f2fc35a086896040516114e2929190918252602082015260400190565b60405180910390a35061166d565b60405163095ea7b360e01b81526001600160a01b038b811660048301526024820184905288169063095ea7b390604401602060405180830381600087803b15801561153a57600080fd5b505af115801561154e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157291906127ff565b506006546001600160a01b03808c169163b0bbcd8891859160009186911661159b426001612b5a565b60016040518763ffffffff1660e01b81526004016115be96959493929190612abd565b600060405180830381600087803b1580156115d857600080fd5b505af11580156115ec573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611614919081019061281b565b5050866001600160a01b03168d6001600160a01b03167f02328bbf482c913c71ddadcaf039f13cdb6499e9341bfa670de43de6f2fc35a08488604051611664929190918252602082015260400190565b60405180910390a35b6116778d8d6123ac565b505060018080559c9b505050505050505050505050565b6000600260015414156116b35760405162461bcd60e51b815260040161035c90612a86565b6002600155600754604080516302f796d960e41b8152905184926000926001600160a01b0390911691632f796d9091600480820192602092909190829003018186803b15801561170257600080fd5b505afa158015611716573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173a9190612907565b905060015b6001600160a01b0386166000908152600260205260409020548111611c22576001600160a01b0386166000908152600260205260409020611781600183612bb1565b8154811061179f57634e487b7160e01b600052603260045260246000fd5b906000526020600020906006020160030154831015801561181357506001600160a01b038616600090815260026020526040902082906117e0600184612bb1565b815481106117fe57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600602016005015410155b15611c06576001600160a01b038616600090815260026020526040902061183b600183612bb1565b8154811061185957634e487b7160e01b600052603260045260246000fd5b906000526020600020906006020160030154836118769190612bb1565b6005546006546001600160a01b038981166000908152600260205260409020939650918216926323b872dd92339216906118b1600187612bb1565b815481106118cf57634e487b7160e01b600052603260045260246000fd5b60009182526020909120600360069092020101546040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401602060405180830381600087803b15801561193257600080fd5b505af1158015611946573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061196a91906127ff565b506001600160a01b038616600090815260026020526040902061198e600183612bb1565b815481106119ac57634e487b7160e01b600052603260045260246000fd5b6000918252602080832060016006909302018201546001600160a01b038a811685526002909252604090932092169163a9059cbb918991906119ee9086612bb1565b81548110611a0c57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060060201600401546040518363ffffffff1660e01b8152600401611a4f9291906001600160a01b03929092168252602082015260400190565b602060405180830381600087803b158015611a6957600080fd5b505af1158015611a7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa191906127ff565b506001600160a01b0386166000908152600260205260409020611ac5600183612bb1565b81548110611ae357634e487b7160e01b600052603260045260246000fd5b6000918252602080832060026006909302018201546001600160a01b038a81168086529390925260409093209216917f343bb576b6b598ba7c85893ea7b9f4c8d595035329a0dd23a96aafabb291519d90611b3f600186612bb1565b81548110611b5d57634e487b7160e01b600052603260045260246000fd5b60009182526020808320600360069093020191909101546001600160a01b038c16835260029091526040909120611b95600187612bb1565b81548110611bb357634e487b7160e01b600052603260045260246000fd5b906000526020600020906006020160040154604051611bdc929190918252602082015260400190565b60405180910390a3611bf886611bf3600184612bb1565b6123ac565b80611c0281612bc8565b9150505b82611c1057611c22565b80611c1a81612bdf565b91505061173f565b508115611cb7576005546040516323b872dd60e01b81523360048201526001600160a01b03878116602483015260448201859052909116906323b872dd90606401602060405180830381600087803b158015611c7d57600080fd5b505af1158015611c91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb591906127ff565b505b505060018080559392505050565b6000546001600160a01b03163314611cef5760405162461bcd60e51b815260040161035c90612a51565b6001600160a01b038116611d545760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161035c565b611d5d8161235c565b50565b6009546040516303b8879560e21b81526001600160a01b0383811660048301526000921690630ee21e549060240160206040518083038186803b158015611da657600080fd5b505afa158015611dba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dde91906127ff565b611e445760405162461bcd60e51b815260206004820152603160248201527f496e7374616e74526f757465723a20636f6c6c61746572616c20746f6b656e206044820152706973206e6f742061636365707461626c6560781b606482015260840161035c565b600954604051636e2f809f60e11b81526001600160a01b038481166004830152600092169063dc5f013e9060240160206040518083038186803b158015611e8a57600080fd5b505afa158015611e9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ec2919061262a565b90506000816001600160a01b031663dcaf9c446040518163ffffffff1660e01b815260040160206040518083038186803b158015611eff57600080fd5b505afa158015611f13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f379190612907565b6008546005546040805163313ce56760e01b815290519394506000936001600160a01b03938416936316fac92a938b9391169163313ce56791600480820192602092909190829003018186803b158015611f9057600080fd5b505afa158015611fa4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fc8919061291f565b886001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561200157600080fd5b505afa158015612015573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612039919061291f565b60055460405160e086901b6001600160e01b0319168152600481019490945260ff9283166024850152911660448301526001600160a01b0390811660648301528816608482015260a40160206040518083038186803b15801561209b57600080fd5b505afa1580156120af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d39190612907565b9050600060646120e38484612b92565b6120ed9190612b72565b6040516309fad23760e11b8152600481018290529091506000906001600160a01b038616906313f5a46e9060240160206040518083038186803b15801561213357600080fd5b505afa158015612147573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061216b9190612907565b6040516323b872dd60e01b81526001600160a01b038b8116600483015230602483015260448201839052919250908616906323b872dd90606401602060405180830381600087803b1580156121bf57600080fd5b505af11580156121d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121f791906127ff565b506040805160c081018252600060a08201526001600160a01b038b81168252606082018b9052608082018490528781166020808401919091528a8216838501526004805460075486516302f796d960e41b8152965195969195941693632f796d9093828401939092829003018186803b15801561227357600080fd5b505afa158015612287573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ab9190612907565b6122b59190612b5a565b60a082019081526001600160a01b03808c16600090815260026020818152604080842080546001818101835591865294839020885160069096020180549587166001600160a01b03199687161781559288015183820180549188169187169190911790559087015192820180549390951692909316919091179092556060840151600383015560809093015160048201559051600590910155955050505050509392505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038216600090815260026020526040902054811061241f5760405162461bcd60e51b8152602060048201526024808201527f496e7374616e74526f757465723a20696e646578206973206f7574206f6620626044820152631bdd5b9960e21b606482015260840161035c565b805b6001600160a01b03831660009081526002602052604090205461244690600190612bb1565b811015612569576001600160a01b0383166000908152600260205260409020612470826001612b5a565b8154811061248e57634e487b7160e01b600052603260045260246000fd5b906000526020600020906006020160026000856001600160a01b03166001600160a01b0316815260200190815260200160002082815481106124e057634e487b7160e01b600052603260045260246000fd5b60009182526020909120825460069092020180546001600160a01b039283166001600160a01b0319918216178255600180850154908301805491851691831691909117905560028085015490830180549190941691161790915560038083015490820155600480830154908201556005918201549101558061256181612bdf565b915050612421565b506001600160a01b038216600090815260026020526040902080548061259f57634e487b7160e01b600052603160045260246000fd5b60008281526020812060066000199093019283020180546001600160a01b0319908116825560018201805482169055600282018054909116905560038101829055600481018290556005015590555050565b80356103a181612c26565b80356103a181612c3b565b600060208284031215612618578081fd5b813561262381612c26565b9392505050565b60006020828403121561263b578081fd5b815161262381612c26565b60008060006060848603121561265a578182fd5b833561266581612c26565b9250602084013561267581612c26565b929592945050506040919091013590565b600080600080600080600080610100898b0312156126a2578384fd5b88356126ad81612c26565b97506020898101356126be81612c26565b975060408a0135965060608a0135955060808a013567ffffffffffffffff8111156126e7578586fd5b8a01601f81018c136126f7578586fd5b803561270a61270582612b36565b612b05565b8082825284820191508484018f86878602870101111561272857898afd5b8994505b8385101561275357803561273f81612c26565b83526001949094019391850191850161272c565b50975050505060a08a0135935061276e905060c08a016125f1565b915061277c60e08a016125fc565b90509295985092959890939650565b6000806040838503121561279d578182fd5b82356127a881612c26565b946020939093013593505050565b600080600080608085870312156127cb578384fd5b84356127d681612c26565b9350602085013592506040850135915060608501356127f481612c26565b939692955090935050565b600060208284031215612810578081fd5b815161262381612c3b565b6000806040838503121561282d578182fd5b825161283881612c3b565b8092505060208084015167ffffffffffffffff811115612856578283fd5b8401601f81018613612866578283fd5b805161287461270582612b36565b81815283810190838501858402850186018a1015612890578687fd5b8694505b838510156128b2578051835260019490940193918501918501612894565b5080955050505050509250929050565b600080604083850312156128d4578182fd5b82516128df81612c3b565b6020939093015192949293505050565b600060208284031215612900578081fd5b5035919050565b600060208284031215612918578081fd5b5051919050565b600060208284031215612930578081fd5b815160ff81168114612623578182fd5b6000815180845260208085019450808401835b838110156129785781516001600160a01b031687529582019590820190600101612953565b509495945050505050565b600060018060a01b038816825286602083015285604083015284606083015260c060808301526129b660c0830185612940565b905082151560a0830152979650505050505050565b6020808252825182820181905260009190848201906040850190845b81811015612a03578351835292840192918401916001016129e7565b50909695505050505050565b60208082526022908201527f496e7374616e74526f757465723a20646561646c696e65206861732070617373604082015261195960f21b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b600087825286602083015260c06040830152612adc60c0830187612940565b6001600160a01b03959095166060830152506080810192909252151560a0909101529392505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715612b2e57612b2e612c10565b604052919050565b600067ffffffffffffffff821115612b5057612b50612c10565b5060209081020190565b60008219821115612b6d57612b6d612bfa565b500190565b600082612b8d57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612bac57612bac612bfa565b500290565b600082821015612bc357612bc3612bfa565b500390565b600081612bd757612bd7612bfa565b506000190190565b6000600019821415612bf357612bf3612bfa565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114611d5d57600080fd5b8015158114611d5d57600080fdfea2646970667358221220f9dea155e23cb2d7313c497a43a4cba29c7e2476400d9da84aaec37f6717178d64736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101375760003560e01c80636f6ef7c9116100b857806397091b891161007c57806397091b891461028c578063a36be9a1146102dd578063b59589d1146102e6578063b701b1cf146102f9578063db1cb5581461030c578063f2fde38b1461031f57610137565b80636f6ef7c91461022d578063715018a61461024d578063763360db146102555780638d3d78cd146102685780638da5cb5b1461027b57610137565b80634782bc36116100ff5780634782bc36146101be5780634cf46825146101d15780634d61878e146101e457806369539c70146101f7578063697380b21461020a57610137565b8063059d02381461013c5780632630c12f14610151578063387bb22d14610181578063419cba7f146101a257806346e897fd146101ab575b600080fd5b61014f61014a366004612607565b610332565b005b600854610164906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61019461018f366004612607565b610387565b604051908152602001610178565b61019460035481565b600654610164906001600160a01b031681565b61014f6101cc3660046128ef565b6103a6565b61014f6101df3660046128ef565b6103d5565b6101946101f236600461278b565b610404565b61019461020536600461278b565b610456565b61021d6102183660046127b6565b6104a8565b6040519015158152602001610178565b61024061023b366004612686565b6106e6565b60405161017891906129cb565b61014f610b41565b600954610164906001600160a01b031681565b600554610164906001600160a01b031681565b6000546001600160a01b0316610164565b61029f61029a36600461278b565b610b77565b604080516001600160a01b039788168152958716602087015293909516928401929092526060830152608082015260a081019190915260c001610178565b61019460045481565b600754610164906001600160a01b031681565b61021d610307366004612646565b610bd8565b61021d61031a36600461278b565b61168e565b61014f61032d366004612607565b611cc5565b6000546001600160a01b031633146103655760405162461bcd60e51b815260040161035c90612a51565b60405180910390fd5b600680546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0381166000908152600260205260409020545b919050565b6000546001600160a01b031633146103d05760405162461bcd60e51b815260040161035c90612a51565b600355565b6000546001600160a01b031633146103ff5760405162461bcd60e51b815260040161035c90612a51565b600455565b6001600160a01b038216600090815260026020526040812080548390811061043c57634e487b7160e01b600052603260045260246000fd5b906000526020600020906006020160050154905092915050565b6001600160a01b038216600090815260026020526040812080548390811061048e57634e487b7160e01b600052603260045260246000fd5b906000526020600020906006020160040154905092915050565b6000600260015414156104cd5760405162461bcd60e51b815260040161035c90612a86565b6002600155428310156104f25760405162461bcd60e51b815260040161035c90612a0f565b600061271085600660009054906101000a90046001600160a01b03166001600160a01b031663e49bce3c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561054657600080fd5b505afa15801561055a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057e9190612907565b6105889190612b92565b6105929190612b72565b90506105a8336105a28388612b5a565b85611d60565b506006546040516350e28ac360e11b81526001600160a01b038881166004830152602482018890529091169063a1c5158690604401602060405180830381600087803b1580156105f757600080fd5b505af115801561060b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061062f91906127ff565b5033600090815260026020526040902080546001600160a01b038516919061065990600190612bb1565b8154811061067757634e487b7160e01b600052603260045260246000fd5b600091825260209182902060056006909202010154604080516001600160a01b038b16815292830189905282018490529033907f0b2045d07f2d7eb237fca6d4f5f6f90d2862df59632c726bb4c5aacca23bf01e9060600160405180910390a450506001808055949350505050565b60606002600154141561070b5760405162461bcd60e51b815260040161035c90612a86565b6002600155428410156107305760405162461bcd60e51b815260040161035c90612a0f565b60055485516001600160a01b0390911690869060009061076057634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316146107ce5760405162461bcd60e51b815260206004820152602760248201527f496e7374616e74526f757465723a20696e70757420746f6b656e206973206e6f6044820152661d081d985b1a5960ca1b606482015260840161035c565b600061271088600660009054906101000a90046001600160a01b03166001600160a01b031663e49bce3c6040518163ffffffff1660e01b815260040160206040518083038186803b15801561082257600080fd5b505afa158015610836573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061085a9190612907565b6108649190612b92565b61086e9190612b72565b90506108843361087e838b612b5a565b86611d60565b506006546040516350e28ac360e11b8152306004820152602481018a90526001600160a01b039091169063a1c5158690604401602060405180830381600087803b1580156108d157600080fd5b505af11580156108e5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090991906127ff565b5060055460405163095ea7b360e01b81526001600160a01b038c81166004830152602482018b90529091169063095ea7b390604401602060405180830381600087803b15801561095857600080fd5b505af115801561096c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061099091906127ff565b506000808b6001600160a01b031663b0bbcd888b8b8b8f8c8b6040518763ffffffff1660e01b81526004016109ca96959493929190612abd565b600060405180830381600087803b1580156109e457600080fd5b505af11580156109f8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a20919081019061281b565b9092509050600182151514610a8a5760405162461bcd60e51b815260206004820152602a60248201527f496e7374616e74526f757465723a2065786368616e676520776173206e6f74206044820152691cdd58d8d95cdcd99d5b60b21b606482015260840161035c565b33600090815260026020526040902080546001600160a01b0388169190610ab390600190612bb1565b81548110610ad157634e487b7160e01b600052603260045260246000fd5b906000526020600020906006020160050154336001600160a01b03167fd828a9b1563fcc52e2c0a608016ad8117306786d7adf9a7810dd683103cb1a5d8e8e888f8f8d604051610b2696959493929190612983565b60405180910390a4600180559b9a5050505050505050505050565b6000546001600160a01b03163314610b6b5760405162461bcd60e51b815260040161035c90612a51565b610b75600061235c565b565b60026020528160005260406000208181548110610b9357600080fd5b60009182526020909120600690910201805460018201546002830154600384015460048501546005909501546001600160a01b03948516975092841695509216929086565b600060026001541415610bfd5760405162461bcd60e51b815260040161035c90612a86565b600260015560085460405163d86faec760e01b81526001600160a01b038681166004830152600092169063d86faec79060240160206040518083038186803b158015610c4857600080fd5b505afa158015610c5c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c80919061262a565b90506001600160a01b038116610cf45760405162461bcd60e51b815260206004820152603360248201527f496e7374616e74526f757465723a2065786368616e676520636f6e6e6563746f60448201527272206973206e6f742061636365707461626c6560681b606482015260840161035c565b6001600160a01b0384166000908152600260205260409020548310610d6f5760405162461bcd60e51b815260206004820152602b60248201527f496e7374616e74526f757465723a207265717565737420696e64657820646f6560448201526a1cc81b9bdd08195e1a5cdd60aa1b606482015260840161035c565b600754604080516302f796d960e41b815290516000926001600160a01b031691632f796d90916004808301926020929190829003018186803b158015610db457600080fd5b505afa158015610dc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dec9190612907565b6001600160a01b03861660009081526002602052604090208054919250829186908110610e2957634e487b7160e01b600052603260045260246000fd5b90600052602060002090600602016005015410610e9b5760405162461bcd60e51b815260206004820152602a60248201527f496e7374616e74526f757465723a20646561646c696e6520686173206e6f74206044820152691c185cdcd959081e595d60b21b606482015260840161035c565b6001600160a01b0385166000908152600260205260408120805486908110610ed357634e487b7160e01b600052603260045260246000fd5b9060005260206000209060060201600401549050600060026000886001600160a01b03166001600160a01b031681526020019081526020016000208681548110610f2d57634e487b7160e01b600052603260045260246000fd5b6000918252602080832060026006909302018201546001600160a01b038b81168552929091526040832080549290911693509088908110610f7e57634e487b7160e01b600052603260045260246000fd5b60009182526020808320600160069093020191909101546001600160a01b038b8116845260029092526040832080549290911693509089908110610fd257634e487b7160e01b600052603260045260246000fd5b60009182526020822060069190910201600301546005546040516322620c1d60e21b8152600481018390526001600160a01b03878116602483015291821660448201529193508291908916906389883074906064016040805180830381600087803b15801561104057600080fd5b505af1158015611054573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107891906128c2565b60405163392f2ddd60e01b81526004810189905291935091506000906001600160a01b0386169063392f2ddd9060240160206040518083038186803b1580156110c057600080fd5b505afa1580156110d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f89190612907565b6040805160028082526060820183529293506000929091602083019080368337019050509050868160008151811061114057634e487b7160e01b600052603260045260246000fd5b6001600160a01b03928316602091820292909201015260055482519116908290600190811061117f57634e487b7160e01b600052603260045260246000fd5b6001600160a01b039283166020918202929092010152604051630646f82b60e31b8152600481018a905290871690633237c15890602401602060405180830381600087803b1580156111d057600080fd5b505af11580156111e4573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061120891906127ff565b5082821015801561121b57506001841515145b156114f05760405163095ea7b360e01b81526001600160a01b038b811660048301526024820185905288169063095ea7b390604401602060405180830381600087803b15801561126a57600080fd5b505af115801561127e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112a291906127ff565b506006546001600160a01b03808c169163b0bbcd8891869189918691166112ca426001612b5a565b60006040518763ffffffff1660e01b81526004016112ed96959493929190612abd565b600060405180830381600087803b15801561130757600080fd5b505af115801561131b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611343919081019061281b565b50506000606460035485856113589190612bb1565b6113629190612b92565b61136c9190612b72565b60405163a9059cbb60e01b8152336004820152602481018290529091506001600160a01b0389169063a9059cbb90604401602060405180830381600087803b1580156113b757600080fd5b505af11580156113cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ef91906127ff565b506001600160a01b038716636d75b9ee8f8361140b8888612bb1565b6114159190612bb1565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b15801561145b57600080fd5b505af115801561146f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149391906127ff565b50876001600160a01b03168e6001600160a01b03167f02328bbf482c913c71ddadcaf039f13cdb6499e9341bfa670de43de6f2fc35a086896040516114e2929190918252602082015260400190565b60405180910390a35061166d565b60405163095ea7b360e01b81526001600160a01b038b811660048301526024820184905288169063095ea7b390604401602060405180830381600087803b15801561153a57600080fd5b505af115801561154e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157291906127ff565b506006546001600160a01b03808c169163b0bbcd8891859160009186911661159b426001612b5a565b60016040518763ffffffff1660e01b81526004016115be96959493929190612abd565b600060405180830381600087803b1580156115d857600080fd5b505af11580156115ec573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611614919081019061281b565b5050866001600160a01b03168d6001600160a01b03167f02328bbf482c913c71ddadcaf039f13cdb6499e9341bfa670de43de6f2fc35a08488604051611664929190918252602082015260400190565b60405180910390a35b6116778d8d6123ac565b505060018080559c9b505050505050505050505050565b6000600260015414156116b35760405162461bcd60e51b815260040161035c90612a86565b6002600155600754604080516302f796d960e41b8152905184926000926001600160a01b0390911691632f796d9091600480820192602092909190829003018186803b15801561170257600080fd5b505afa158015611716573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173a9190612907565b905060015b6001600160a01b0386166000908152600260205260409020548111611c22576001600160a01b0386166000908152600260205260409020611781600183612bb1565b8154811061179f57634e487b7160e01b600052603260045260246000fd5b906000526020600020906006020160030154831015801561181357506001600160a01b038616600090815260026020526040902082906117e0600184612bb1565b815481106117fe57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600602016005015410155b15611c06576001600160a01b038616600090815260026020526040902061183b600183612bb1565b8154811061185957634e487b7160e01b600052603260045260246000fd5b906000526020600020906006020160030154836118769190612bb1565b6005546006546001600160a01b038981166000908152600260205260409020939650918216926323b872dd92339216906118b1600187612bb1565b815481106118cf57634e487b7160e01b600052603260045260246000fd5b60009182526020909120600360069092020101546040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401602060405180830381600087803b15801561193257600080fd5b505af1158015611946573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061196a91906127ff565b506001600160a01b038616600090815260026020526040902061198e600183612bb1565b815481106119ac57634e487b7160e01b600052603260045260246000fd5b6000918252602080832060016006909302018201546001600160a01b038a811685526002909252604090932092169163a9059cbb918991906119ee9086612bb1565b81548110611a0c57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060060201600401546040518363ffffffff1660e01b8152600401611a4f9291906001600160a01b03929092168252602082015260400190565b602060405180830381600087803b158015611a6957600080fd5b505af1158015611a7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa191906127ff565b506001600160a01b0386166000908152600260205260409020611ac5600183612bb1565b81548110611ae357634e487b7160e01b600052603260045260246000fd5b6000918252602080832060026006909302018201546001600160a01b038a81168086529390925260409093209216917f343bb576b6b598ba7c85893ea7b9f4c8d595035329a0dd23a96aafabb291519d90611b3f600186612bb1565b81548110611b5d57634e487b7160e01b600052603260045260246000fd5b60009182526020808320600360069093020191909101546001600160a01b038c16835260029091526040909120611b95600187612bb1565b81548110611bb357634e487b7160e01b600052603260045260246000fd5b906000526020600020906006020160040154604051611bdc929190918252602082015260400190565b60405180910390a3611bf886611bf3600184612bb1565b6123ac565b80611c0281612bc8565b9150505b82611c1057611c22565b80611c1a81612bdf565b91505061173f565b508115611cb7576005546040516323b872dd60e01b81523360048201526001600160a01b03878116602483015260448201859052909116906323b872dd90606401602060405180830381600087803b158015611c7d57600080fd5b505af1158015611c91573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cb591906127ff565b505b505060018080559392505050565b6000546001600160a01b03163314611cef5760405162461bcd60e51b815260040161035c90612a51565b6001600160a01b038116611d545760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161035c565b611d5d8161235c565b50565b6009546040516303b8879560e21b81526001600160a01b0383811660048301526000921690630ee21e549060240160206040518083038186803b158015611da657600080fd5b505afa158015611dba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dde91906127ff565b611e445760405162461bcd60e51b815260206004820152603160248201527f496e7374616e74526f757465723a20636f6c6c61746572616c20746f6b656e206044820152706973206e6f742061636365707461626c6560781b606482015260840161035c565b600954604051636e2f809f60e11b81526001600160a01b038481166004830152600092169063dc5f013e9060240160206040518083038186803b158015611e8a57600080fd5b505afa158015611e9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ec2919061262a565b90506000816001600160a01b031663dcaf9c446040518163ffffffff1660e01b815260040160206040518083038186803b158015611eff57600080fd5b505afa158015611f13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f379190612907565b6008546005546040805163313ce56760e01b815290519394506000936001600160a01b03938416936316fac92a938b9391169163313ce56791600480820192602092909190829003018186803b158015611f9057600080fd5b505afa158015611fa4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fc8919061291f565b886001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b15801561200157600080fd5b505afa158015612015573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612039919061291f565b60055460405160e086901b6001600160e01b0319168152600481019490945260ff9283166024850152911660448301526001600160a01b0390811660648301528816608482015260a40160206040518083038186803b15801561209b57600080fd5b505afa1580156120af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d39190612907565b9050600060646120e38484612b92565b6120ed9190612b72565b6040516309fad23760e11b8152600481018290529091506000906001600160a01b038616906313f5a46e9060240160206040518083038186803b15801561213357600080fd5b505afa158015612147573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061216b9190612907565b6040516323b872dd60e01b81526001600160a01b038b8116600483015230602483015260448201839052919250908616906323b872dd90606401602060405180830381600087803b1580156121bf57600080fd5b505af11580156121d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121f791906127ff565b506040805160c081018252600060a08201526001600160a01b038b81168252606082018b9052608082018490528781166020808401919091528a8216838501526004805460075486516302f796d960e41b8152965195969195941693632f796d9093828401939092829003018186803b15801561227357600080fd5b505afa158015612287573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122ab9190612907565b6122b59190612b5a565b60a082019081526001600160a01b03808c16600090815260026020818152604080842080546001818101835591865294839020885160069096020180549587166001600160a01b03199687161781559288015183820180549188169187169190911790559087015192820180549390951692909316919091179092556060840151600383015560809093015160048201559051600590910155955050505050509392505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b038216600090815260026020526040902054811061241f5760405162461bcd60e51b8152602060048201526024808201527f496e7374616e74526f757465723a20696e646578206973206f7574206f6620626044820152631bdd5b9960e21b606482015260840161035c565b805b6001600160a01b03831660009081526002602052604090205461244690600190612bb1565b811015612569576001600160a01b0383166000908152600260205260409020612470826001612b5a565b8154811061248e57634e487b7160e01b600052603260045260246000fd5b906000526020600020906006020160026000856001600160a01b03166001600160a01b0316815260200190815260200160002082815481106124e057634e487b7160e01b600052603260045260246000fd5b60009182526020909120825460069092020180546001600160a01b039283166001600160a01b0319918216178255600180850154908301805491851691831691909117905560028085015490830180549190941691161790915560038083015490820155600480830154908201556005918201549101558061256181612bdf565b915050612421565b506001600160a01b038216600090815260026020526040902080548061259f57634e487b7160e01b600052603160045260246000fd5b60008281526020812060066000199093019283020180546001600160a01b0319908116825560018201805482169055600282018054909116905560038101829055600481018290556005015590555050565b80356103a181612c26565b80356103a181612c3b565b600060208284031215612618578081fd5b813561262381612c26565b9392505050565b60006020828403121561263b578081fd5b815161262381612c26565b60008060006060848603121561265a578182fd5b833561266581612c26565b9250602084013561267581612c26565b929592945050506040919091013590565b600080600080600080600080610100898b0312156126a2578384fd5b88356126ad81612c26565b97506020898101356126be81612c26565b975060408a0135965060608a0135955060808a013567ffffffffffffffff8111156126e7578586fd5b8a01601f81018c136126f7578586fd5b803561270a61270582612b36565b612b05565b8082825284820191508484018f86878602870101111561272857898afd5b8994505b8385101561275357803561273f81612c26565b83526001949094019391850191850161272c565b50975050505060a08a0135935061276e905060c08a016125f1565b915061277c60e08a016125fc565b90509295985092959890939650565b6000806040838503121561279d578182fd5b82356127a881612c26565b946020939093013593505050565b600080600080608085870312156127cb578384fd5b84356127d681612c26565b9350602085013592506040850135915060608501356127f481612c26565b939692955090935050565b600060208284031215612810578081fd5b815161262381612c3b565b6000806040838503121561282d578182fd5b825161283881612c3b565b8092505060208084015167ffffffffffffffff811115612856578283fd5b8401601f81018613612866578283fd5b805161287461270582612b36565b81815283810190838501858402850186018a1015612890578687fd5b8694505b838510156128b2578051835260019490940193918501918501612894565b5080955050505050509250929050565b600080604083850312156128d4578182fd5b82516128df81612c3b565b6020939093015192949293505050565b600060208284031215612900578081fd5b5035919050565b600060208284031215612918578081fd5b5051919050565b600060208284031215612930578081fd5b815160ff81168114612623578182fd5b6000815180845260208085019450808401835b838110156129785781516001600160a01b031687529582019590820190600101612953565b509495945050505050565b600060018060a01b038816825286602083015285604083015284606083015260c060808301526129b660c0830185612940565b905082151560a0830152979650505050505050565b6020808252825182820181905260009190848201906040850190845b81811015612a03578351835292840192918401916001016129e7565b50909695505050505050565b60208082526022908201527f496e7374616e74526f757465723a20646561646c696e65206861732070617373604082015261195960f21b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b600087825286602083015260c06040830152612adc60c0830187612940565b6001600160a01b03959095166060830152506080810192909252151560a0909101529392505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715612b2e57612b2e612c10565b604052919050565b600067ffffffffffffffff821115612b5057612b50612c10565b5060209081020190565b60008219821115612b6d57612b6d612bfa565b500190565b600082612b8d57634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615612bac57612bac612bfa565b500290565b600082821015612bc357612bc3612bfa565b500390565b600081612bd757612bd7612bfa565b506000190190565b6000600019821415612bf357612bf3612bfa565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114611d5d57600080fd5b8015158114611d5d57600080fdfea2646970667358221220f9dea155e23cb2d7313c497a43a4cba29c7e2476400d9da84aaec37f6717178d64736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "It manages instant pool contract",
        "params": {
          "_collateralPoolFactory": "Address of relay contract",
          "_paybackDeadline": "Dealine of paying back the borrowed tokens from instant pool",
          "_priceOracle": "Address of collateral pool factory contract",
          "_relay": "Address of price oracle contract",
          "_slasherPercentageReward": "Percentage of total collateral that goes to slasher",
          "_teleBTC": "Address of teleBTC contract"
        }
      },
      "getLockedCollateralPoolTokenAmount(address,uint256)": {
        "params": {
          "_index": "Number of the instant request",
          "_user": "Address of the user"
        },
        "returns": {
          "_0": "Amount of locked collateral"
        }
      },
      "getUserRequestDeadline(address,uint256)": {
        "params": {
          "_index": "Index of the request in user request list",
          "_user": "Address of the user"
        },
        "returns": {
          "_0": "The deadline of that request"
        }
      },
      "getUserRequestsLength(address)": {
        "params": {
          "_user": "Address of the user"
        },
        "returns": {
          "_0": "The total number of user's requests"
        }
      },
      "instantCCExchange(address,address,uint256,uint256,address[],uint256,address,bool)": {
        "details": "Locks the required collateral amount of the user",
        "params": {
          "_amountOut": "Amount of the output token",
          "_collateralToken": "Address of collateral token",
          "_deadline": "Deadline of getting the loan",
          "_isFixedToken": "Shows whether input or output is fixed in exchange",
          "_loanAmount": "Amount of the loan",
          "_path": "Path of exchanging tokens",
          "_receiver": "Address of the loan receiver"
        },
        "returns": {
          "_0": ""
        }
      },
      "instantCCTransfer(address,uint256,uint256,address)": {
        "details": "Transfes required collateral pool token of user to itself",
        "params": {
          "_collateralToken": "Address of the collateral token",
          "_deadline": "Deadline of getting the loan",
          "_loanAmount": "Amount of the loan",
          "_receiver": "Address of the loan receiver"
        },
        "returns": {
          "_0": "True if getting loan was successful"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "payBackLoan(address,uint256)": {
        "params": {
          "_teleBTCAmount": "Amount of available teleBTC to pay back loans",
          "_user": "Address of the user who wants to pay back loans"
        },
        "returns": {
          "_0": "True if paying back is successful"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setPaybackDeadline(uint256)": {
        "details": "Only owner can call this",
        "params": {
          "_paybackDeadline": "The new payback _deadline"
        }
      },
      "setSlasherPercentageReward(uint256)": {
        "details": "Only owner can call this",
        "params": {
          "_slasherPercentageReward": "The new slasher reward"
        }
      },
      "setTeleBTCInstantPool(address)": {
        "details": "Only owner can call this",
        "params": {
          "_teleBTCInstantPool": "The new teleBTC instant pool address"
        }
      },
      "slashUser(address,address,uint256)": {
        "details": "Buys teleBTC using the collateral",
        "params": {
          "_exchangeRouter": "Address of exchange router that is used to exchange collateral tokens to teleBTC",
          "_requestIndex": "Index of the request that have not been paid back before deadline",
          "_user": "Address of the slashed user"
        },
        "returns": {
          "_0": "True if slashing is successful"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "InstantExchange(address,address,uint256,uint256,uint256,address[],bool,uint256,address)": {
        "notice": "Emits when a user submits instant exchange request"
      },
      "InstantTransfer(address,address,uint256,uint256,uint256,address)": {
        "notice": "Emits when a user submits instant transfer request"
      },
      "PaybackLoan(address,uint256,address,uint256)": {
        "notice": "Emits when a loan gets paid back"
      },
      "SlashUser(address,address,uint256,uint256)": {
        "notice": "Emits when a user gets slashed"
      }
    },
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "This contract handles instant transfer and instant exchange requests"
      },
      "getLockedCollateralPoolTokenAmount(address,uint256)": {
        "notice": "Gives the collateral amount corresponding to the request"
      },
      "getUserRequestDeadline(address,uint256)": {
        "notice": "Gives the user request deadline"
      },
      "getUserRequestsLength(address)": {
        "notice": "Gives the total number of user's requests"
      },
      "instantCCExchange(address,address,uint256,uint256,address[],uint256,address,bool)": {
        "notice": "Exchanges the loan amount instantly for the user"
      },
      "instantCCTransfer(address,uint256,uint256,address)": {
        "notice": "Transfers the loan amount to the user"
      },
      "payBackLoan(address,uint256)": {
        "notice": "Settles loans of the user"
      },
      "setPaybackDeadline(uint256)": {
        "notice": "Changes the payback _deadline"
      },
      "setSlasherPercentageReward(uint256)": {
        "notice": "Changes the slasher reward"
      },
      "setTeleBTCInstantPool(address)": {
        "notice": "Sets the teleBTC instant pool address"
      },
      "slashUser(address,address,uint256)": {
        "notice": "Slashes collateral of user who did not pay back loan"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 807,
        "contract": "contracts/routers/InstantRouter.sol:InstantRouter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1006,
        "contract": "contracts/routers/InstantRouter.sol:InstantRouter",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 16982,
        "contract": "contracts/routers/InstantRouter.sol:InstantRouter",
        "label": "instantRequests",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_array(t_struct(instantRequest)18537_storage)dyn_storage)"
      },
      {
        "astId": 16985,
        "contract": "contracts/routers/InstantRouter.sol:InstantRouter",
        "label": "slasherPercentageReward",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 16988,
        "contract": "contracts/routers/InstantRouter.sol:InstantRouter",
        "label": "paybackDeadline",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 16991,
        "contract": "contracts/routers/InstantRouter.sol:InstantRouter",
        "label": "teleBTC",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 16994,
        "contract": "contracts/routers/InstantRouter.sol:InstantRouter",
        "label": "teleBTCInstantPool",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 16997,
        "contract": "contracts/routers/InstantRouter.sol:InstantRouter",
        "label": "relay",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 17000,
        "contract": "contracts/routers/InstantRouter.sol:InstantRouter",
        "label": "priceOracle",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 17003,
        "contract": "contracts/routers/InstantRouter.sol:InstantRouter",
        "label": "collateralPoolFactory",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(instantRequest)18537_storage)dyn_storage": {
        "base": "t_struct(instantRequest)18537_storage",
        "encoding": "dynamic_array",
        "label": "struct IInstantRouter.instantRequest[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_struct(instantRequest)18537_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IInstantRouter.instantRequest[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(instantRequest)18537_storage)dyn_storage"
      },
      "t_struct(instantRequest)18537_storage": {
        "encoding": "inplace",
        "label": "struct IInstantRouter.instantRequest",
        "members": [
          {
            "astId": 18526,
            "contract": "contracts/routers/InstantRouter.sol:InstantRouter",
            "label": "user",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 18528,
            "contract": "contracts/routers/InstantRouter.sol:InstantRouter",
            "label": "collateralPool",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 18530,
            "contract": "contracts/routers/InstantRouter.sol:InstantRouter",
            "label": "collateralToken",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 18532,
            "contract": "contracts/routers/InstantRouter.sol:InstantRouter",
            "label": "paybackAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 18534,
            "contract": "contracts/routers/InstantRouter.sol:InstantRouter",
            "label": "lockedCollateralPoolTokenAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 18536,
            "contract": "contracts/routers/InstantRouter.sol:InstantRouter",
            "label": "deadline",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}