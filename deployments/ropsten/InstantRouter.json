{
  "address": "0x9a8F2a331FB0539fd8393495bFf5cBFe46174dDd",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_teleBTC",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_relay",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceOracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralPoolFactory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_slasherPercentageReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_paybackDeadline",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_defaultExchangeConnector",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "loanAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "instantFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isFixed",
          "type": "bool"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockedCollateralPoolToken",
          "type": "uint256"
        }
      ],
      "name": "InstantExchange",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "loanAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "instantFee",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockedCollateralPoolToken",
          "type": "uint256"
        }
      ],
      "name": "InstantTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "paybackAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lockedCollateralPoolToken",
          "type": "uint256"
        }
      ],
      "name": "PaybackLoan",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slashedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "paybackAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "slasher",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slasherReward",
          "type": "uint256"
        }
      ],
      "name": "SlashUser",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "collateralPoolFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "defaultExchangeConnector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getLockedCollateralPoolTokenAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getUserRequestDeadline",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserRequestsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_exchangeConnector",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_loanAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isFixedToken",
          "type": "bool"
        }
      ],
      "name": "instantCCExchange",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_loanAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        }
      ],
      "name": "instantCCTransfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "instantRequests",
      "outputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "collateralPool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "paybackAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lockedCollateralPoolTokenAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_teleBTCAmount",
          "type": "uint256"
        }
      ],
      "name": "payBackLoan",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paybackDeadline",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceOracle",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relay",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_collateralPoolFactory",
          "type": "address"
        }
      ],
      "name": "setCollateralPoolFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_defaultExchangeConnector",
          "type": "address"
        }
      ],
      "name": "setDefaultExchangeConnector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_paybackDeadline",
          "type": "uint256"
        }
      ],
      "name": "setPaybackDeadline",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceOracle",
          "type": "address"
        }
      ],
      "name": "setPriceOracle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_relay",
          "type": "address"
        }
      ],
      "name": "setRelay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_slasherPercentageReward",
          "type": "uint256"
        }
      ],
      "name": "setSlasherPercentageReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_teleBTC",
          "type": "address"
        }
      ],
      "name": "setTeleBTC",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_teleBTCInstantPool",
          "type": "address"
        }
      ],
      "name": "setTeleBTCInstantPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_requestIndex",
          "type": "uint256"
        }
      ],
      "name": "slashUser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slasherPercentageReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "teleBTC",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "teleBTCInstantPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb2348709c9df8563459100e42cc29e28d4ce658426726c9b6ef26e03edd64dc1",
  "receipt": {
    "to": null,
    "from": "0x5364E3557572bd5D5903C0e9C21BE359F2Eac1dA",
    "contractAddress": "0x9a8F2a331FB0539fd8393495bFf5cBFe46174dDd",
    "transactionIndex": 0,
    "gasUsed": "3215310",
    "logsBloom": "0x
    "blockHash": "0xd60affb6a6bd2a07e9775919e411b6653b69113f2d7c32121737cc60cd75a1bf",
    "transactionHash": "0xb2348709c9df8563459100e42cc29e28d4ce658426726c9b6ef26e03edd64dc1",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 12889619,
        "transactionHash": "0xb2348709c9df8563459100e42cc29e28d4ce658426726c9b6ef26e03edd64dc1",
        "address": "0x9a8F2a331FB0539fd8393495bFf5cBFe46174dDd",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005364e3557572bd5d5903c0e9c21be359f2eac1da"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xd60affb6a6bd2a07e9775919e411b6653b69113f2d7c32121737cc60cd75a1bf"
      }
    ],
    "blockNumber": 12889619,
    "cumulativeGasUsed": "3215310",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD9472041c61Fb6d33F94A6D7EA4a496226349788",
    "0x3c0dc39dD04717510359c231f11bA28C9e4Bfb22",
    "0x179039a93d238b04Fe71D96033Ecc00Ef2B440cb",
    "0x19D92a13ecA56bC8d788d3559F7f0a183fadc1dA",
    10,
    12,
    "0x90B38c9cd898691c0AB276B89A617A71E4d0174b"
  ],
  "numDeployments": 1,
  "solcInputHash": "e7939e14552e724dbcf98b821fe06d72",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teleBTC\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_relay\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceOracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralPoolFactory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_slasherPercentageReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_paybackDeadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_defaultExchangeConnector\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"instantFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isFixed\",\"type\":\"bool\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedCollateralPoolToken\",\"type\":\"uint256\"}],\"name\":\"InstantExchange\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"loanAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"instantFee\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedCollateralPoolToken\",\"type\":\"uint256\"}],\"name\":\"InstantTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paybackAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lockedCollateralPoolToken\",\"type\":\"uint256\"}],\"name\":\"PaybackLoan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slashedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"paybackAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"slasher\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slasherReward\",\"type\":\"uint256\"}],\"name\":\"SlashUser\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"collateralPoolFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"defaultExchangeConnector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getLockedCollateralPoolTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getUserRequestDeadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserRequestsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchangeConnector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_loanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isFixedToken\",\"type\":\"bool\"}],\"name\":\"instantCCExchange\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_loanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"}],\"name\":\"instantCCTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"instantRequests\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralPool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"paybackAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockedCollateralPoolTokenAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_teleBTCAmount\",\"type\":\"uint256\"}],\"name\":\"payBackLoan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paybackDeadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceOracle\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relay\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_collateralPoolFactory\",\"type\":\"address\"}],\"name\":\"setCollateralPoolFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_defaultExchangeConnector\",\"type\":\"address\"}],\"name\":\"setDefaultExchangeConnector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_paybackDeadline\",\"type\":\"uint256\"}],\"name\":\"setPaybackDeadline\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceOracle\",\"type\":\"address\"}],\"name\":\"setPriceOracle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_relay\",\"type\":\"address\"}],\"name\":\"setRelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slasherPercentageReward\",\"type\":\"uint256\"}],\"name\":\"setSlasherPercentageReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teleBTC\",\"type\":\"address\"}],\"name\":\"setTeleBTC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teleBTCInstantPool\",\"type\":\"address\"}],\"name\":\"setTeleBTCInstantPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_requestIndex\",\"type\":\"uint256\"}],\"name\":\"slashUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slasherPercentageReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teleBTC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teleBTCInstantPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"It manages instant pool contract to give loan to users\",\"params\":{\"_collateralPoolFactory\":\"Address of collateral pool factory contrac\",\"_defaultExchangeConnector\":\"Exchange connector that is used for exchanging user's collateral to teleBTC (in the case of slashing)\",\"_paybackDeadline\":\"Dealine of paying back the borrowed tokens\",\"_priceOracle\":\"Address of price oracle contract\",\"_relay\":\"Address of relay contract\",\"_slasherPercentageReward\":\"Percentage of total collateral that goes to slasher\",\"_teleBTC\":\"Address of teleBTC contract\"}},\"getLockedCollateralPoolTokenAmount(address,uint256)\":{\"params\":{\"_index\":\"Index of the request in user's request list\",\"_user\":\"Address of the user\"},\"returns\":{\"_0\":\"Amount of locked collateral pool token (not collateral token)\"}},\"getUserRequestDeadline(address,uint256)\":{\"params\":{\"_index\":\"Index of the request in user's request list\",\"_user\":\"Address of the user\"},\"returns\":{\"_0\":\"Deadline of that request\"}},\"getUserRequestsLength(address)\":{\"params\":{\"_user\":\"Address of the user\"},\"returns\":{\"_0\":\"The total number of user's requests\"}},\"instantCCExchange(address,address,uint256,uint256,address[],uint256,address,bool)\":{\"details\":\"Locks the required collateral amount of the user. Only works when contract is not paused.\",\"params\":{\"_amountOut\":\"Amount of the output token\",\"_collateralToken\":\"Address of collateral token\",\"_deadline\":\"Deadline for getting the loan\",\"_exchangeConnector\":\"Address of exchange connector that user wants to exchange the borrowed teleBTC in it\",\"_isFixedToken\":\"Shows whether input or output is fixed in exchange\",\"_loanAmount\":\"Amount of the loan\",\"_path\":\"Path of exchanging tokens\",\"_receiver\":\"Address of the loan receiver\"},\"returns\":{\"_amounts\":\"         Amounts of tokens involved in the exchange\"}},\"instantCCTransfer(address,uint256,uint256,address)\":{\"details\":\"Transfes required collateral pool token of user to itself. Only works when contract is not paused.\",\"params\":{\"_collateralToken\":\"Address of the collateral token\",\"_deadline\":\"Deadline for getting the loan\",\"_loanAmount\":\"Amount of the loan\",\"_receiver\":\"Address of the loan receiver\"},\"returns\":{\"_0\":\"True if getting loan was successful\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"payBackLoan(address,uint256)\":{\"details\":\"Caller should give allowance for teleBTC to instant router\",\"params\":{\"_teleBTCAmount\":\"Amount of available teleBTC to pay back loans\",\"_user\":\"Address of user who wants to pay back loans\"},\"returns\":{\"_0\":\"True if paying back is successful\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setCollateralPoolFactory(address)\":{\"details\":\"Only owner can call this\",\"params\":{\"_collateralPoolFactory\":\"The new teleBTC instant pool address\"}},\"setDefaultExchangeConnector(address)\":{\"details\":\"Only owner can call this\",\"params\":{\"_defaultExchangeConnector\":\"The new defaultExchangeConnector address\"}},\"setPaybackDeadline(uint256)\":{\"details\":\"Only owner can call this. It should be greater than relay finalization parameter so user has enough time to payback loan\",\"params\":{\"_paybackDeadline\":\"The new payback deadline\"}},\"setPriceOracle(address)\":{\"details\":\"Only owner can call this\",\"params\":{\"_priceOracle\":\"The new teleBTC instant pool address\"}},\"setRelay(address)\":{\"details\":\"Only owner can call this\",\"params\":{\"_relay\":\"The new teleBTC instant pool address\"}},\"setSlasherPercentageReward(uint256)\":{\"details\":\"Only owner can call this\",\"params\":{\"_slasherPercentageReward\":\"The new slasher reward\"}},\"setTeleBTC(address)\":{\"details\":\"Only owner can call this\",\"params\":{\"_teleBTC\":\"The new teleBTC instant pool address\"}},\"setTeleBTCInstantPool(address)\":{\"details\":\"Only owner can call this\",\"params\":{\"_teleBTCInstantPool\":\"The new teleBTC instant pool address\"}},\"slashUser(address,uint256)\":{\"details\":\"Buys teleBTC using the collateral and sends it to instant pool\",\"params\":{\"_requestIndex\":\"Index of the request that have not been paid back before deadline\",\"_user\":\"Address of the slashed user\"},\"returns\":{\"_0\":\"True if slashing is successful\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"events\":{\"InstantExchange(address,address,uint256,uint256,uint256,address[],bool,uint256,address,uint256)\":{\"notice\":\"Emits when a user gets loan for exchange\"},\"InstantTransfer(address,address,uint256,uint256,uint256,address,uint256)\":{\"notice\":\"Emits when a user gets loan for transfer\"},\"PaybackLoan(address,uint256,address,uint256)\":{\"notice\":\"Emits when a loan gets paid back\"},\"SlashUser(address,address,uint256,uint256,address,uint256)\":{\"notice\":\"Emits when a user gets slashed\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"This contract handles instant transfer and instant exchange requests\"},\"getLockedCollateralPoolTokenAmount(address,uint256)\":{\"notice\":\"Gives the locked collateral pool token corresponding to a request\"},\"getUserRequestDeadline(address,uint256)\":{\"notice\":\"Gives deadline of a specefic request\"},\"getUserRequestsLength(address)\":{\"notice\":\"Gives the total number of user's unpaid loans\"},\"instantCCExchange(address,address,uint256,uint256,address[],uint256,address,bool)\":{\"notice\":\"Exchanges the loan amount (in teleBTC) for the user\"},\"instantCCTransfer(address,uint256,uint256,address)\":{\"notice\":\"Transfers the loan amount (in teleBTC) to the user \"},\"pause()\":{\"notice\":\"Pause the contract\"},\"payBackLoan(address,uint256)\":{\"notice\":\"Settles loans of the user\"},\"setCollateralPoolFactory(address)\":{\"notice\":\"Setter for teleBTC instant pool\"},\"setDefaultExchangeConnector(address)\":{\"notice\":\"Setter for default exchange connector\"},\"setPaybackDeadline(uint256)\":{\"notice\":\"Setter for payback deadline\"},\"setPriceOracle(address)\":{\"notice\":\"Setter for teleBTC instant pool\"},\"setRelay(address)\":{\"notice\":\"Setter for teleBTC instant pool\"},\"setSlasherPercentageReward(uint256)\":{\"notice\":\"Setter for slasher percentage reward\"},\"setTeleBTC(address)\":{\"notice\":\"Setter for teleBTC instant pool\"},\"setTeleBTCInstantPool(address)\":{\"notice\":\"Setter for teleBTC instant pool\"},\"slashUser(address,uint256)\":{\"notice\":\"Slashes collateral of user who did not pay back loan before its deadline\"},\"unpause()\":{\"notice\":\"Unpause the contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/routers/InstantRouter.sol\":\"InstantRouter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/connectors/interfaces/IExchangeConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IExchangeConnector {\\n\\n    // Events\\n    \\n    event Swap(address[] path, uint[] amounts, address receiver);\\n\\n    // Read-only functions\\n\\n    function name() external view returns (string memory);\\n\\n    function exchangeRouter() external view returns (address);\\n\\n    function liquidityPoolFactory() external view returns (address);\\n\\n    function wrappedNativeToken() external view returns (address);\\n\\n    function getInputAmount(\\n        uint _outputAmount,\\n        address _inputToken,\\n        address _outputToken\\n    ) external returns (bool, uint);\\n\\n    function getOutputAmount(\\n        uint _inputAmount,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view returns (bool, uint);\\n\\n    // State-changing functions\\n\\n    function setExchangeRouter(address _exchangeRouter) external;\\n\\n    function setLiquidityPoolFactory() external;\\n\\n    function setWrappedNativeToken(address _wrappedNativeToken) external;\\n\\n    function swap(\\n        uint256 _inputAmount,\\n        uint256 _outputAmount,\\n        address[] memory _path,\\n        address _to,\\n        uint256 _deadline,\\n        bool _isFixedToken\\n    ) external returns (bool, uint[] memory);\\n\\n    function isPathValid(address[] memory _path) external view returns(bool);\\n}\",\"keccak256\":\"0x551597c7686a214d5576d7bebe51da9411e67301c16e2e2496b4fa6d43699c9f\",\"license\":\"MIT\"},\"contracts/erc20/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    // events\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    // read-only functions\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    // state-changing functions\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9210fa056ea67b530890ea968948270e0d22a15bd428a2edd4915ef25c4eb918\",\"license\":\"MIT\"},\"contracts/oracle/interfaces/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IPriceOracle {\\n\\n    /// @notice                     Emits when new exchange router is added\\n    /// @param exchangeRouter       Address of new exchange router\\n    /// @param exchangeConnector    Address of exchange connector\\n    event ExchangeConnectorAdded(address exchangeRouter, address exchangeConnector);\\n\\n    /// @notice                     Emits when an exchange router is removed\\n    /// @param exchangeRouter       Address of removed exchange router\\n    event ExchangeConnectorRemoved(address exchangeRouter);\\n\\n    /// @notice                     Emits when a price proxy is set\\n    /// @param _firstToken          Address of the first token\\n    /// @param _secondToken         Address of the second token\\n    /// @param _priceProxyAddress   Address of price proxy contract\\n    event SetPriceProxy(address _firstToken, address _secondToken, address _priceProxyAddress);\\n\\n    // Read-only functions\\n    \\n    /// @notice                     Gives price proxy address for a pair of tokens\\n    /// @param _firstToken          Address of the first token\\n    /// @param _secondToken         Address of the second token\\n    /// @return                     Address of price proxy contract\\n    function ChainlinkPriceProxy(address _firstToken, address _secondToken) external view returns (address);\\n\\n    /// @notice                     Gives exchange connector address for an exchange router\\n    /// @param _exchangeRouter      Address of exchange router\\n    /// @return                     Address of exchange connector\\n    function exchangeConnector(address _exchangeRouter) external view returns (address);\\n\\n    /// @notice                     Gives address of an exchange router from exchange routers list\\n    /// @param _index               Index of exchange router\\n    /// @return                     Address of exchange router\\n    function exchangeRoutersList(uint _index) external view returns (address);\\n\\n    function getExchangeRoutersListLength() external view returns (uint);\\n\\n    function acceptableDelay() external view returns (uint);\\n\\n    function oracleNativeToken() external view returns (address);\\n\\n    function equivalentOutputAmount(\\n        uint _inputAmount,\\n        uint _inputDecimals,\\n        uint _outputDecimals,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view returns (uint);\\n\\n    function equivalentOutputAmountFromOracle(\\n        uint _inputAmount,\\n        uint _inputDecimals,\\n        uint _outputDecimals,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view returns (uint);\\n\\n    function equivalentOutputAmountFromExchange(\\n        address _exchangeRouter,\\n        uint _inputAmount,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view returns (uint);\\n    \\n    // State-changing functions\\n    \\n    function addExchangeConnector(address _exchangeRouter, address _exchangeConnector) external;\\n\\n    function removeExchangeConnector(uint _exchangeRouterIndex) external;\\n\\n    function setPriceProxy(address _firstToken, address _secondToken, address _priceProxyAddress) external;\\n\\n    function setAcceptableDelay(uint _acceptableDelay) external;\\n\\n    function setOracleNativeToken(address _oracleNativeToken) external;\\n}\",\"keccak256\":\"0xe3d068b7ac931f03318f0b47b3ace494b576ad81c9b8bbd44b5b6cdf4ab6b2dc\",\"license\":\"MIT\"},\"contracts/pools/interfaces/ICollateralPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '../../erc20/interfaces/IERC20.sol';\\n\\ninterface ICollateralPool is IERC20 {\\n\\n\\t// Events\\n\\n\\tevent AddCollateral(address indexed user, uint amount, uint collateralPoolTokenAmount);\\n\\n\\tevent RemoveCollateral(address indexed user, uint amount, uint collateralPoolTokenAmount);\\n\\n\\t// Read-only functions\\n\\n\\tfunction collateralToken() external view returns (address);\\n\\n\\tfunction collateralizationRatio() external view returns(uint);\\n\\n\\tfunction totalAddedCollateral() external view returns (uint);\\n\\n\\tfunction equivalentCollateralToken(uint _collateralPoolTokenAmount) external view returns (uint);\\n\\n\\tfunction equivalentCollateralPoolToken(uint _collateralTokenAmount) external view returns (uint);\\n\\n\\t// State-changing functions\\n\\n\\tfunction setCollateralizationRatio(uint _collateralizationRatio) external;\\n\\n\\tfunction addCollateral(address _user, uint _amount) external returns (bool);\\n\\n\\tfunction removeCollateral(uint _collateralPoolTokenAmount) external returns (bool);\\n\\n}\",\"keccak256\":\"0xaf2c77d0d394a3dd1d1c3e84fbe46c36079f5443d23473eda74bbced316b878a\",\"license\":\"MIT\"},\"contracts/pools/interfaces/ICollateralPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICollateralPoolFactory {\\n\\n    // Events\\n\\n    /// @notice                             Emits when a collateral pool is created\\n    /// @param name                         Name of the collateral token\\n    /// @param collateralToken              Collateral token address\\n    /// @param collateralizationRatio       At most (collateral value)/(collateralization ratio) can be moved instantly by the user\\n    /// @param collateralPool               Collateral pool contract address\\n    event CreateCollateralPool(\\n        string name,\\n        address indexed collateralToken,\\n        uint collateralizationRatio,\\n        address collateralPool\\n    );\\n\\n    /// @notice                 Emits when a collateral pool is removed\\n    /// @param collateralToken  Collateral token address\\n    /// @param collateralPool   Collateral pool contract address\\n    event RemoveCollateralPool(\\n        address indexed collateralToken,\\n        address collateralPool\\n    );\\n\\n    // Read-only functions\\n\\n    function instantRouter() external view returns (address);\\n\\n    function getCollateralPoolByToken(address _collateralToken) external view returns (address);\\n\\n    function allCollateralPools(uint _index) external view returns (address);\\n\\n    function allCollateralPoolsLength() external view returns (uint);\\n\\n    function isCollateral(address _collateralToken) external view returns (bool);\\n\\n    // State-changing functions\\n\\n    function setInstantRouter(address _instantRouter) external;\\n\\n    function createCollateralPool(address _collateralToken, uint _collateralizationRatio) external returns (address);\\n\\n    function removeCollateralPool(address _collateralToken, uint _index) external returns (bool);\\n}\",\"keccak256\":\"0xef366390efc83efd7d7fe5d04dcf138eb9c3cdf41746e9b4ada6267d2f8e2454\",\"license\":\"MIT\"},\"contracts/pools/interfaces/IInstantPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0; \\n\\nimport '../../erc20/interfaces/IERC20.sol';\\n\\ninterface IInstantPool is IERC20 {\\n\\n\\t// Events\\n\\n\\t/// @notice                             emits when some liquidity gets added to the pool               \\n\\t/// @param user                         User who added the liquidity\\n\\t/// @param teleBTCAmount                Amount of teleBTC added to the pool\\n\\t/// @param instantPoolTokenAmount       User's share from the pool\\n\\tevent AddLiquidity(address indexed user, uint teleBTCAmount, uint instantPoolTokenAmount); \\n\\n\\t/// @notice                             Emits when some liquidity gets removed from the pool\\n\\t/// @param user                         User who removed the liquidity\\n\\t/// @param teleBTCAmount                Amount of teleBTC removed from the pool\\n\\t/// @param instantPoolTokenAmount       User's share from the pool\\n\\tevent RemoveLiquidity(address indexed user, uint teleBTCAmount, uint instantPoolTokenAmount);\\n\\n\\t/// @notice                       Adds collateral to collateral pool\\n\\t/// @param user                   User who wants to get the loan\\n\\t/// @param requestedAmount        Amount of loan requested and sent to the user\\n\\t/// @param instantFee             Amount of fee that the user should pay back later with the loan\\n\\tevent InstantLoan(address indexed user, uint256 requestedAmount, uint instantFee);\\n\\n\\t// Read-only functions\\n\\n\\tfunction teleBTC() external view returns (address);\\n\\n\\tfunction instantRouter() external view returns (address);\\n\\n\\tfunction totalAddedTeleBTC() external view returns (uint);\\n\\n\\tfunction availableTeleBTC() external view returns (uint);\\n\\n\\tfunction totalUnpaidLoan() external view returns (uint);\\n\\n\\tfunction instantPercentageFee() external view returns (uint);\\n\\n\\tfunction getFee(uint _loanAmount) external view returns (uint);\\n\\n\\t// State-changing functions\\n\\n\\tfunction setInstantRouter(address _instantRouter) external;\\n\\n\\tfunction setInstantPercentageFee(uint _instantPercentageFee) external;\\n\\n\\tfunction setTeleBTC(address _teleBTC) external;\\n\\n\\tfunction addLiquidity(address _user, uint _amount) external returns (uint);\\n\\n\\tfunction addLiquidityWithoutMint(uint _amount) external returns (bool);\\n\\n\\tfunction removeLiquidity(address _user, uint _instantPoolTokenAmount) external returns (uint);\\n\\n\\tfunction getLoan(address _user, uint _amount) external returns (bool);\\n\\n}\",\"keccak256\":\"0xca939654c5bf8a8c355c45ba48c67f93704e8439d56b7df2dba4e5e89961de57\",\"license\":\"MIT\"},\"contracts/relay/interfaces/IBitcoinRelay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBitcoinRelay {\\n    // Structures\\n\\n    /// @notice                 \\tStructure for recording block header\\n    /// @param selfHash             Hash of block header\\n    /// @param parentHash          \\tHash of parent block header\\n    /// @param merkleRoot       \\tMerkle root of transactions in the block\\n    /// @param relayer              Address of relayer who submitted the block header\\n    struct blockHeader {\\n        bytes32 selfHash;\\n        bytes32 parentHash;\\n        bytes32 merkleRoot;\\n        address relayer;\\n        uint gasPrice;\\n    }\\n\\n    // Events\\n\\n    /// @notice                     Emits when a block header is added\\n    /// @param height               Height of submitted header\\n    /// @param selfHash             Hash of submitted header\\n    /// @param parentHash           Parent hash of submitted header\\n    /// @param relayer              Address of relayer who submitted the block header\\n    event BlockAdded(\\n        uint indexed height,\\n        bytes32 selfHash,\\n        bytes32 indexed parentHash,\\n        address indexed relayer\\n    );\\n\\n    /// @notice                     Emits when a block header gets finalized\\n    /// @param height               Height of the header\\n    /// @param selfHash             Hash of the header\\n    /// @param parentHash           Parent hash of the header\\n    /// @param relayer              Address of relayer who submitted the block header\\n    /// @param rewardAmountTNT      Amount of reward that the relayer receives in target native token\\n    /// @param rewardAmountTDT      Amount of reward that the relayer receives in TDT\\n    event BlockFinalized(\\n        uint indexed height,\\n        bytes32 selfHash,\\n        bytes32 parentHash,\\n        address indexed relayer,\\n        uint rewardAmountTNT,\\n        uint rewardAmountTDT\\n    );\\n\\n    // Read-only functions\\n\\n    function relayGenesisHash() external view returns (bytes32);\\n\\n    function initialHeight() external view returns(uint);\\n\\n    function lastSubmittedHeight() external view returns(uint);\\n\\n    function finalizationParameter() external view returns(uint);\\n\\n    function TeleportDAOToken() external view returns(address);\\n\\n    function relayerPercentageFee() external view returns(uint);\\n\\n    function epochLength() external view returns(uint);\\n\\n    function lastEpochQueries() external view returns(uint);\\n\\n    function currentEpochQueries() external view returns(uint);\\n\\n    function baseQueries() external view returns(uint);\\n\\n    function submissionGasUsed() external view returns(uint);\\n\\n    function getBlockHeaderHash(uint height, uint index) external view returns(bytes32);\\n\\n    function getBlockHeaderFee (uint _height, uint _index) external view returns(uint);\\n\\n    function getNumberOfSubmittedHeaders(uint height) external view returns (uint);\\n\\n    function availableTDT() external view returns(uint);\\n\\n    function availableTNT() external view returns(uint);\\n\\n    function findHeight(bytes32 _hash) external view returns (uint256);\\n\\n    function findAncestor(bytes32 _hash, uint256 _offset) external view returns (bytes32); // see if it's needed\\n\\n    function isAncestor(bytes32 _ancestor, bytes32 _descendant, uint256 _limit) external view returns (bool); // see if it's needed\\n\\n    function rewardAmountInTDT() external view returns (uint);\\n\\n    // State-changing functions\\n\\n    function pauseRelay() external;\\n\\n    function unpauseRelay() external;\\n\\n    function setRewardAmountInTDT(uint _rewardAmountInTDT) external;\\n\\n    function setFinalizationParameter(uint _finalizationParameter) external;\\n\\n    function setRelayerPercentageFee(uint _relayerPercentageFee) external;\\n\\n    function setEpochLength(uint _epochLength) external;\\n\\n    function setBaseQueries(uint _baseQueries) external;\\n\\n    function setSubmissionGasUsed(uint _submissionGasUsed) external;\\n\\n    function checkTxProof(\\n        bytes32 txid,\\n        uint blockHeight,\\n        bytes calldata intermediateNodes,\\n        uint index\\n    ) external payable returns (bool);\\n\\n    function addHeaders(bytes calldata _anchor, bytes calldata _headers) external returns (bool);\\n\\n    function addHeadersWithRetarget(\\n        bytes calldata _oldPeriodStartHeader,\\n        bytes calldata _oldPeriodEndHeader,\\n        bytes calldata _headers\\n    ) external returns (bool);\\n\\n    function ownerAddHeaders(bytes calldata _anchor, bytes calldata _headers) external returns (bool);\\n\\n    function ownerAddHeadersWithRetarget(\\n        bytes calldata _oldPeriodStartHeader,\\n        bytes calldata _oldPeriodEndHeader,\\n        bytes calldata _headers\\n    ) external returns (bool);\\n}\",\"keccak256\":\"0x76e6e6f0f9f8e23df923f9da5a5f2583ed08716560b1cf35107b26791fb36813\",\"license\":\"MIT\"},\"contracts/routers/InstantRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport './interfaces/IInstantRouter.sol';\\nimport '../connectors/interfaces/IExchangeConnector.sol';\\nimport '../pools/interfaces/IInstantPool.sol';\\nimport '../pools/interfaces/ICollateralPool.sol';\\nimport '../pools/interfaces/ICollateralPoolFactory.sol';\\nimport '../erc20/interfaces/IERC20.sol';\\nimport '../oracle/interfaces/IPriceOracle.sol';\\nimport \\\"../relay/interfaces/IBitcoinRelay.sol\\\";\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport '@openzeppelin/contracts/security/Pausable.sol';\\nimport \\\"hardhat/console.sol\\\"; // Just for test\\n\\ncontract InstantRouter is IInstantRouter, Ownable, ReentrancyGuard, Pausable {\\n    \\n    modifier nonZeroAddress(address _address) {\\n        require(_address != address(0), \\\"InstantRouter: zero address\\\");\\n        _;\\n    }\\n\\n    // Constants \\n    uint constant MAX_SLASHER_PERCENTAGE_REWARD = 100;\\n\\n    // Public variables\\n    mapping(address => instantRequest[]) public instantRequests; // Mapping from user address to user's unpaid instant requests\\n    uint public override slasherPercentageReward;\\n    uint public override paybackDeadline;\\n    address public override teleBTC;\\n    address public override teleBTCInstantPool;\\n    address public override relay;\\n    address public override priceOracle;\\n    address public override collateralPoolFactory;\\n    address public override defaultExchangeConnector;\\n\\n    /// @notice                             This contract handles instant transfer and instant exchange requests\\n    /// @dev                                It manages instant pool contract to give loan to users\\n    /// @param _teleBTC                     Address of teleBTC contract\\n    /// @param _relay                       Address of relay contract\\n    /// @param _priceOracle                 Address of price oracle contract\\n    /// @param _collateralPoolFactory       Address of collateral pool factory contrac\\n    /// @param _slasherPercentageReward     Percentage of total collateral that goes to slasher\\n    /// @param _paybackDeadline             Dealine of paying back the borrowed tokens\\n    /// @param _defaultExchangeConnector    Exchange connector that is used for exchanging user's collateral to teleBTC (in the case of slashing)\\n    constructor(\\n        address _teleBTC,\\n        address _relay,\\n        address _priceOracle,\\n        address _collateralPoolFactory,\\n        uint _slasherPercentageReward,\\n        uint _paybackDeadline,\\n        address _defaultExchangeConnector\\n    ) {\\n        teleBTC = _teleBTC;\\n        relay = _relay;\\n        priceOracle = _priceOracle;\\n        collateralPoolFactory = _collateralPoolFactory;\\n        slasherPercentageReward = _slasherPercentageReward;\\n        require(\\n            slasherPercentageReward <= MAX_SLASHER_PERCENTAGE_REWARD, \\n            \\\"InstantRouter: wrong slasher percentage reward\\\"\\n        );\\n        paybackDeadline = _paybackDeadline;\\n        defaultExchangeConnector = _defaultExchangeConnector;\\n    }\\n\\n    /// @notice       Pause the contract\\n    function pause() external override onlyOwner {\\n        _pause();\\n    }\\n\\n    /// @notice       Unpause the contract\\n    function unpause() external override onlyOwner {\\n        _unpause();\\n    }\\n\\n    /// @notice                  Gives the locked collateral pool token corresponding to a request\\n    /// @param _user             Address of the user\\n    /// @param _index            Index of the request in user's request list\\n    /// @return                  Amount of locked collateral pool token (not collateral token)\\n    function getLockedCollateralPoolTokenAmount(\\n        address _user, \\n        uint _index\\n    ) external view override returns (uint) {\\n        require(_index < instantRequests[_user].length, \\\"InstantRouter: wrong index\\\");\\n        return instantRequests[_user][_index].lockedCollateralPoolTokenAmount;\\n    }\\n\\n    /// @notice                   Gives the total number of user's unpaid loans\\n    /// @param _user              Address of the user\\n    /// @return                   The total number of user's requests\\n    function getUserRequestsLength(address _user) external view override returns (uint) {\\n        return instantRequests[_user].length;\\n    }\\n\\n    /// @notice                   Gives deadline of a specefic request\\n    /// @param _user              Address of the user\\n    /// @param _index             Index of the request in user's request list\\n    /// @return                   Deadline of that request\\n    function getUserRequestDeadline(address _user, uint _index) external view override returns (uint) {\\n        require(_index < instantRequests[_user].length, \\\"InstantRouter: wrong index\\\");\\n        return instantRequests[_user][_index].deadline;\\n    }\\n\\n    /// @notice                   Setter for payback deadline\\n    /// @dev                      Only owner can call this. It should be greater than relay finalization parameter so user has enough time to payback loan\\n    /// @param _paybackDeadline   The new payback deadline\\n    function setPaybackDeadline(uint _paybackDeadline) external override onlyOwner {\\n        uint _finalizationParameter = IBitcoinRelay(relay).finalizationParameter();\\n        // Gives users enough time to pay back loans\\n        require(_paybackDeadline >= _finalizationParameter, \\\"InstantRouter: wrong payback deadline\\\");\\n        paybackDeadline = _paybackDeadline;\\n    }\\n\\n    /// @notice                             Setter for slasher percentage reward\\n    /// @dev                                Only owner can call this\\n    /// @param _slasherPercentageReward     The new slasher reward\\n    function setSlasherPercentageReward(uint _slasherPercentageReward) external override onlyOwner {\\n        require(\\n            _slasherPercentageReward <= MAX_SLASHER_PERCENTAGE_REWARD, \\n            \\\"InstantRouter: wrong slasher percentage reward\\\"\\n        );\\n        slasherPercentageReward = _slasherPercentageReward;\\n    }\\n\\n    /// @notice                                 Setter for teleBTC instant pool\\n    /// @dev                                    Only owner can call this\\n    /// @param _teleBTC                         The new teleBTC instant pool address\\n    function setTeleBTC(\\n        address _teleBTC\\n    ) external nonZeroAddress(_teleBTC) override onlyOwner {\\n        teleBTC = _teleBTC;\\n    }\\n\\n    /// @notice                                 Setter for teleBTC instant pool\\n    /// @dev                                    Only owner can call this\\n    /// @param _relay              The new teleBTC instant pool address\\n    function setRelay(\\n        address _relay\\n    ) external nonZeroAddress(_relay) override onlyOwner {\\n        relay = _relay;\\n    }\\n\\n    /// @notice                                 Setter for teleBTC instant pool\\n    /// @dev                                    Only owner can call this\\n    /// @param _collateralPoolFactory              The new teleBTC instant pool address\\n    function setCollateralPoolFactory(\\n        address _collateralPoolFactory\\n    ) external nonZeroAddress(_collateralPoolFactory) override onlyOwner {\\n        collateralPoolFactory = _collateralPoolFactory;\\n    }\\n\\n    /// @notice                                 Setter for teleBTC instant pool\\n    /// @dev                                    Only owner can call this\\n    /// @param _priceOracle              The new teleBTC instant pool address\\n    function setPriceOracle(\\n        address _priceOracle\\n    ) external nonZeroAddress(_priceOracle) override onlyOwner {\\n        priceOracle = _priceOracle;\\n    }\\n\\n    /// @notice                                 Setter for teleBTC instant pool\\n    /// @dev                                    Only owner can call this\\n    /// @param _teleBTCInstantPool              The new teleBTC instant pool address\\n    function setTeleBTCInstantPool(\\n        address _teleBTCInstantPool\\n    ) external nonZeroAddress(_teleBTCInstantPool) override onlyOwner {\\n        teleBTCInstantPool = _teleBTCInstantPool;\\n    }\\n\\n    /// @notice                                 Setter for default exchange connector\\n    /// @dev                                    Only owner can call this\\n    /// @param _defaultExchangeConnector        The new defaultExchangeConnector address\\n    function setDefaultExchangeConnector(\\n        address _defaultExchangeConnector\\n    ) external nonZeroAddress(_defaultExchangeConnector) override onlyOwner {\\n        defaultExchangeConnector = _defaultExchangeConnector;\\n    }\\n\\n    /// @notice                   Transfers the loan amount (in teleBTC) to the user \\n    /// @dev                      Transfes required collateral pool token of user to itself. Only works when contract is not paused.\\n    /// @param _receiver          Address of the loan receiver\\n    /// @param _loanAmount        Amount of the loan\\n    /// @param _deadline          Deadline for getting the loan\\n    /// @param _collateralToken   Address of the collateral token\\n    /// @return                   True if getting loan was successful\\n    function instantCCTransfer(\\n        address _receiver,\\n        uint _loanAmount,\\n        uint _deadline,\\n        address _collateralToken\\n    ) external nonReentrant nonZeroAddress(_receiver) nonZeroAddress(_collateralToken) \\n        whenNotPaused override returns (bool) {\\n        // Checks that deadline for getting loan has not passed\\n        require(_deadline >= block.timestamp, \\\"InstantRouter: deadline has passed\\\");\\n\\n        // Gets the instant fee\\n        uint instantFee = IInstantPool(teleBTCInstantPool).getFee(_loanAmount);\\n\\n        // Locks the required amount of user's collateral\\n        _lockCollateral(msg.sender, _loanAmount + instantFee, _collateralToken);\\n\\n        // Gets loan from instant pool for receiver\\n        IInstantPool(teleBTCInstantPool).getLoan(_receiver, _loanAmount);\\n\\n        emit InstantTransfer(\\n            msg.sender,\\n            _receiver,\\n            _loanAmount,\\n            instantFee,\\n            instantRequests[msg.sender][instantRequests[msg.sender].length - 1].deadline,\\n            _collateralToken,\\n            instantRequests[msg.sender][instantRequests[msg.sender].length - 1].lockedCollateralPoolTokenAmount\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @notice                   Exchanges the loan amount (in teleBTC) for the user\\n    /// @dev                      Locks the required collateral amount of the user. Only works when contract is not paused.\\n    /// @param _exchangeConnector Address of exchange connector that user wants to exchange the borrowed teleBTC in it\\n    /// @param _receiver          Address of the loan receiver\\n    /// @param _loanAmount        Amount of the loan\\n    /// @param _amountOut         Amount of the output token\\n    /// @param _path              Path of exchanging tokens\\n    /// @param _deadline          Deadline for getting the loan\\n    /// @param _collateralToken   Address of collateral token\\n    /// @param _isFixedToken      Shows whether input or output is fixed in exchange\\n    /// @return _amounts          Amounts of tokens involved in the exchange\\n    function instantCCExchange(\\n        address _exchangeConnector,\\n        address _receiver,\\n        uint _loanAmount,\\n        uint _amountOut,\\n        address[] memory _path,\\n        uint _deadline,\\n        address _collateralToken,\\n        bool _isFixedToken\\n    ) external nonReentrant nonZeroAddress(_exchangeConnector) \\n        whenNotPaused override returns(uint[] memory _amounts) {\\n        // Checks that deadline for exchanging has not passed\\n        require(_deadline >= block.timestamp, \\\"InstantRouter: deadline has passed\\\");\\n\\n        // Checks that the first token of path is teleBTC and its length is greater than one\\n        require(_path[0] == teleBTC && _path.length > 1, \\\"InstantRouter: path is invalid\\\");\\n\\n        // Calculates the instant fee\\n        uint instantFee = IInstantPool(teleBTCInstantPool).getFee(_loanAmount);\\n\\n        // Locks the required amount of user's collateral\\n        _lockCollateral(msg.sender, _loanAmount + instantFee, _collateralToken);\\n\\n        // Gets loan from instant pool\\n        IInstantPool(teleBTCInstantPool).getLoan(address(this), _loanAmount);\\n\\n        // Gives allowance to exchange connector\\n        IERC20(teleBTC).approve(_exchangeConnector, _loanAmount);\\n\\n        // Exchanges teleBTC for output token\\n        bool result;\\n        (result, _amounts) = IExchangeConnector(_exchangeConnector).swap(\\n            _loanAmount,\\n            _amountOut,\\n            _path,\\n            _receiver,\\n            _deadline,\\n            _isFixedToken\\n        );\\n\\n        /* \\n            Reverts if exchanging was not successful since\\n            user doesn't want to lock collateral without exchanging\\n        */\\n        require(result == true, \\\"InstantRouter: exchange was not successful\\\");\\n\\n        emit InstantExchange(\\n            msg.sender,\\n            _receiver,\\n            _loanAmount,\\n            instantFee,\\n            _amountOut,\\n            _path,\\n            _isFixedToken,\\n            instantRequests[msg.sender][instantRequests[msg.sender].length - 1].deadline, // payback deadline\\n            _collateralToken, \\n            instantRequests[msg.sender][instantRequests[msg.sender].length - 1].lockedCollateralPoolTokenAmount\\n        );\\n    }\\n\\n    /// @notice                             Settles loans of the user\\n    /// @dev                                Caller should give allowance for teleBTC to instant router\\n    /// @param _user                        Address of user who wants to pay back loans\\n    /// @param _teleBTCAmount               Amount of available teleBTC to pay back loans\\n    /// @return                             True if paying back is successful\\n    function payBackLoan(\\n        address _user, \\n        uint _teleBTCAmount\\n    ) external nonReentrant nonZeroAddress(_user) override returns (bool) {\\n        uint remainedAmount = _teleBTCAmount;\\n        uint lastSubmittedHeight = IBitcoinRelay(relay).lastSubmittedHeight();\\n\\n        for (uint i = 1; i <= instantRequests[_user].length; i++) {\\n            // Checks that remained teleBTC is enough to pay back the loan and payback deadline has not passed\\n            if (\\n                remainedAmount >= instantRequests[_user][i-1].paybackAmount &&\\n                instantRequests[_user][i-1].deadline >= lastSubmittedHeight\\n            ) {\\n                remainedAmount = remainedAmount - instantRequests[_user][i-1].paybackAmount;\\n\\n                // Pays back the loan to instant pool\\n                IERC20(teleBTC).transferFrom(\\n                    msg.sender,\\n                    teleBTCInstantPool,\\n                    instantRequests[_user][i-1].paybackAmount\\n                );\\n\\n                // Unlocks the locked collateral pool token after paying the loan\\n                ICollateralPool(instantRequests[_user][i-1].collateralPool).transfer(\\n                    _user,\\n                    instantRequests[_user][i-1].lockedCollateralPoolTokenAmount\\n                );\\n\\n                emit PaybackLoan(\\n                    _user,\\n                    instantRequests[_user][i-1].paybackAmount,\\n                    instantRequests[_user][i-1].collateralToken,\\n                    instantRequests[_user][i-1].lockedCollateralPoolTokenAmount\\n                );\\n\\n                // Deletes the request after paying it\\n                _removeElement(_user, i-1);\\n                i--;\\n            }\\n\\n            if (remainedAmount == 0) {\\n                break;\\n            }\\n        }\\n\\n        // Transfers remained teleBTC to user\\n        if (remainedAmount > 0) {\\n            IERC20(teleBTC).transferFrom(msg.sender, _user, remainedAmount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @notice                           Slashes collateral of user who did not pay back loan before its deadline\\n    /// @dev                              Buys teleBTC using the collateral and sends it to instant pool\\n    /// @param _user                      Address of the slashed user\\n    /// @param _requestIndex              Index of the request that have not been paid back before deadline\\n    /// @return                           True if slashing is successful\\n    function slashUser(\\n        address _user,\\n        uint _requestIndex\\n    ) override nonReentrant nonZeroAddress(_user) external returns (bool) {\\n\\n        require(instantRequests[_user].length > _requestIndex, \\\"InstantRouter: request index does not exist\\\");\\n\\n        // Gets last submitted height on relay\\n        uint lastSubmittedHeight = IBitcoinRelay(relay).lastSubmittedHeight();\\n\\n        // Checks that deadline has passed\\n        require(\\n            instantRequests[_user][_requestIndex].deadline < lastSubmittedHeight,\\n            \\\"InstantRouter: deadline has not passed yet\\\"\\n        );\\n\\n        // Gets loan information\\n        uint lockedCollateralPoolTokenAmount = instantRequests[_user][_requestIndex].lockedCollateralPoolTokenAmount;\\n        address collateralToken = instantRequests[_user][_requestIndex].collateralToken;\\n        address collateralPool = instantRequests[_user][_requestIndex].collateralPool;\\n        uint paybackAmount = instantRequests[_user][_requestIndex].paybackAmount;\\n\\n        // Finds needed collateral token to pay back loan\\n        (bool result, uint requiredCollateralToken) = IExchangeConnector(defaultExchangeConnector).getInputAmount(\\n            paybackAmount, // Output amount\\n            collateralToken, // Input token\\n            teleBTC // Output token\\n        );\\n\\n        require(result == true, \\\"InstantRouter: liquidity pool doesn't exist\\\");\\n\\n        uint totalCollateralToken = ICollateralPool(collateralPool).equivalentCollateralToken(\\n            lockedCollateralPoolTokenAmount\\n        );\\n\\n        // Path of exchanging\\n        address[] memory path = new address[](2);\\n        path[0] = collateralToken;\\n        path[1] = teleBTC;\\n\\n        // Gets collateral token from collateral pool\\n        ICollateralPool(collateralPool).removeCollateral(lockedCollateralPoolTokenAmount);\\n\\n        // Checks that locked collateral is enough to pay back loan\\n        if (totalCollateralToken >= requiredCollateralToken) {\\n            // Approves exchange connector to use collateral token\\n            IERC20(collateralToken).approve(defaultExchangeConnector, requiredCollateralToken);\\n\\n            // Exchanges collateral token for teleBTC\\n            IExchangeConnector(defaultExchangeConnector).swap(\\n                requiredCollateralToken,\\n                paybackAmount, // Output amount\\n                path,\\n                teleBTCInstantPool,\\n                block.timestamp + 1,\\n                false // Output amount is fixed\\n            );\\n\\n            // Sends reward to slasher\\n            uint slasherReward = (totalCollateralToken - requiredCollateralToken)\\n            *slasherPercentageReward/MAX_SLASHER_PERCENTAGE_REWARD;\\n            IERC20(collateralToken).transfer(msg.sender, slasherReward);\\n\\n            // Deposits rest of the tokens to collateral pool on behalf of the user\\n            ICollateralPool(collateralPool).addCollateral(\\n                _user,\\n                totalCollateralToken - requiredCollateralToken - slasherReward\\n            );\\n\\n            emit SlashUser(\\n                _user, \\n                collateralToken, \\n                requiredCollateralToken, \\n                paybackAmount,\\n                msg.sender,\\n                slasherReward\\n            );\\n        } else { // Handles situations where locked collateral is not enough to pay back the loan\\n\\n            // Approves exchange connector to use collateral token\\n            IERC20(collateralToken).approve(defaultExchangeConnector, totalCollateralToken);\\n            \\n            // Buys teleBTC as much as possible and sends it to instant pool\\n            IExchangeConnector(defaultExchangeConnector).swap(\\n                totalCollateralToken,\\n                0,\\n                path,\\n                teleBTCInstantPool,\\n                block.timestamp + 1,\\n                true // Input amount is fixed \\n            );\\n\\n            emit SlashUser(\\n                _user, \\n                collateralToken, \\n                totalCollateralToken, \\n                paybackAmount,\\n                msg.sender,\\n                0 // Slasher reward is zero\\n            );\\n        }\\n\\n        // Deletes the request after slashing user\\n        _removeElement(_user, _requestIndex);\\n\\n        return true;\\n    }\\n\\n    /// @notice             Removes an element of array of user's instant requests\\n    /// @dev                Deletes and shifts the array\\n    /// @param _user        Address of the user whose instant requests array is considered\\n    /// @param _index       Index of the element that will be deleted\\n    function _removeElement(address _user, uint _index) private {\\n        require(_index < instantRequests[_user].length, \\\"InstantRouter: index is out of bound\\\");\\n        for (uint i = _index; i < instantRequests[_user].length - 1; i++) {\\n            instantRequests[_user][i] = instantRequests[_user][i+1];\\n        }\\n        instantRequests[_user].pop();\\n    }\\n\\n    /// @notice                   Locks the required amount of user's collateral\\n    /// @dev                      Records the instant request to be used in future\\n    /// @param _user              Address of the loan receiver\\n    /// @param _paybackAmount     Amount of the (loan + fee) that should be paid back by user\\n    /// @param _collateralToken   Address of the collateral token\\n    function _lockCollateral(\\n        address _user,\\n        uint _paybackAmount,\\n        address _collateralToken\\n    ) private nonZeroAddress(_collateralToken) {\\n        // Checks that collateral token is acceptable\\n        require(\\n            ICollateralPoolFactory(collateralPoolFactory).isCollateral(_collateralToken),\\n            \\\"InstantRouter: collateral token is not acceptable\\\"\\n        );\\n\\n        // Gets the collateral pool address\\n        address collateralPool = ICollateralPoolFactory(collateralPoolFactory).getCollateralPoolByToken(\\n            _collateralToken\\n        );\\n\\n        // Gets collateralization ratio\\n        uint collateralizationRatio = ICollateralPool(collateralPool).collateralizationRatio();\\n\\n        // Gets the equivalent amount of collateral token\\n        uint equivalentCollateralToken = IPriceOracle(priceOracle).equivalentOutputAmount(\\n            _paybackAmount, // input amount\\n            IERC20(teleBTC).decimals(),\\n            IERC20(_collateralToken).decimals(),\\n            teleBTC, // input token\\n            _collateralToken // output token\\n        );\\n\\n        // Finds needed collateral token for getting loan\\n        uint requiredCollateralToken = equivalentCollateralToken*collateralizationRatio/100;\\n\\n        // Finds needed collateral pool token for getting loan\\n        uint requiredCollateralPoolToken = ICollateralPool(collateralPool).equivalentCollateralPoolToken(\\n            requiredCollateralToken\\n        );\\n\\n        // Transfers collateral pool token from user to itself\\n        ICollateralPool(collateralPool).transferFrom(_user, address(this), requiredCollateralPoolToken);\\n\\n        // Records the instant request for user\\n        instantRequest memory request;\\n        request.user = _user;\\n        request.paybackAmount = _paybackAmount;\\n        request.lockedCollateralPoolTokenAmount = requiredCollateralPoolToken;\\n        request.collateralPool = collateralPool;\\n        request.collateralToken = _collateralToken;\\n        request.deadline = IBitcoinRelay(relay).lastSubmittedHeight() + paybackDeadline;\\n        instantRequests[_user].push(request);\\n\\n    }\\n}\",\"keccak256\":\"0x1675d0f61deb0e4e6f5fcf19c509b2c108d5e8fdb87fd37b79b9a3afb93e36e5\",\"license\":\"MIT\"},\"contracts/routers/interfaces/IInstantRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IInstantRouter {\\n    // Structures\\n\\n    /// @notice                                 Structure for recording instant requests\\n    /// @param user                             Address of user who recieves loan\\n    /// @param collateralPool                   Address of collateral pool\\n    /// @param paybackAmount                    Amount of (loan + instant fee)\\n    /// @param collateralToken                  Address of underlying collateral token\\n    /// @param lockedCollateralPoolTokenAmount  Amount of locked collateral pool token for getting loan\\n    /// @param deadline                         Deadline for paying back the loan\\n    struct instantRequest {\\n        address user;\\n        address collateralPool;\\n\\t\\taddress collateralToken;\\n        uint paybackAmount;\\n        uint lockedCollateralPoolTokenAmount;\\n        uint deadline;\\n    }\\n\\n    // Events\\n\\n    /// @notice                             Emits when a user gets loan for transfer\\n    /// @param user                         Address of the user who made the request\\n    /// @param receiver                     Address of the loan receiver\\n    /// @param loanAmount                   Amount of the loan\\n    /// @param instantFee                   Amount of the instant loan fee\\n    /// @param deadline                     Deadline of paying back the loan\\n    /// @param collateralToken              Address of the collateral token\\n    /// @param lockedCollateralPoolToken    Amount of collateral pool token that got locked\\n    event InstantTransfer(\\n        address indexed user, \\n        address receiver, \\n        uint loanAmount, \\n        uint instantFee, \\n        uint indexed deadline, \\n        address indexed collateralToken,\\n        uint lockedCollateralPoolToken\\n    );\\n\\n    /// @notice                             Emits when a user gets loan for exchange\\n    /// @param user                         Address of the user who made the request\\n    /// @param receiver                     Address of the loan receiver\\n    /// @param loanAmount                   Amount of the loan\\n    /// @param instantFee                   Amount of the instant loan fee\\n    /// @param amountOut                    Amount of the output token\\n    /// @param path                         Path of exchanging tokens\\n    /// @param isFixed                      Shows whether input or output is fixed in exchange\\n    /// @param deadline                     Deadline of getting the loan\\n    /// @param collateralToken              Address of the collateral token\\n    /// @param lockedCollateralPoolToken    Amount of collateral pool token that got locked\\n    event InstantExchange(\\n        address indexed user, \\n        address receiver, \\n        uint loanAmount, \\n        uint instantFee,\\n        uint amountOut,\\n        address[] path,\\n        bool isFixed,\\n        uint indexed deadline, \\n        address indexed collateralToken,\\n        uint lockedCollateralPoolToken\\n    );\\n\\n    /// @notice                            Emits when a loan gets paid back\\n    /// @param user                        Address of user who recieves loan\\n    /// @param paybackAmount               Amount of (loan + fee) that should be paid back\\n    /// @param collateralToken             Address of underlying collateral token\\n    /// @param lockedCollateralPoolToken   Amount of locked collateral pool token for getting loan\\n    event PaybackLoan(\\n\\t\\taddress indexed user, \\n\\t\\tuint paybackAmount, \\n\\t\\taddress indexed collateralToken, \\n\\t\\tuint lockedCollateralPoolToken\\n\\t);\\n\\n    /// @notice                         Emits when a user gets slashed\\n    /// @param user                     Address of user who recieves loan\\n    /// @param collateralToken          Address of collateral underlying token\\n\\t/// @param slashedAmount            How much user got slashed\\n\\t/// @param paybackAmount            Address of collateral underlying token\\n\\t/// @param slasher                  Address of slasher\\n\\t/// @param slasherReward            Slasher reward (in collateral token)\\n    event SlashUser(\\n\\t\\taddress indexed user, \\n\\t\\taddress indexed collateralToken, \\n\\t\\tuint slashedAmount, \\n\\t\\tuint paybackAmount,\\n        address slasher,\\n        uint slasherReward\\n\\t);\\n\\n    // Read-only functions\\n\\n    function pause() external;\\n\\n    function unpause() external;\\n\\n    function teleBTCInstantPool() external view returns (address);\\n\\n    function teleBTC() external view returns (address);\\n\\n    function relay() external view returns (address);\\n\\n\\tfunction collateralPoolFactory() external view returns (address);\\n\\n\\tfunction priceOracle() external view returns (address);\\n\\n    function slasherPercentageReward() external view returns (uint);\\n\\n    function paybackDeadline() external view returns (uint);\\n\\n    function defaultExchangeConnector() external view returns (address);\\n    \\n    function getLockedCollateralPoolTokenAmount(address _user, uint _index) external view returns (uint);\\n\\n    function getUserRequestsLength(address _user) external view returns (uint);\\n\\n    function getUserRequestDeadline(address _user, uint _index) external view returns (uint);\\n\\n    // State-changing functions\\n\\n    function setPaybackDeadline(uint _paybackDeadline) external;\\n\\n    function setSlasherPercentageReward(uint _slasherPercentageReward) external;\\n\\n    function setPriceOracle(address _priceOracle) external;\\n\\n    function setCollateralPoolFactory(address _collateralPoolFactory) external;\\n\\n    function setRelay(address _relay) external;\\n\\n    function setTeleBTC(address _teleBTC) external;\\n\\n    function setTeleBTCInstantPool(address _teleBTCInstantPool) external;\\n\\n    function setDefaultExchangeConnector(address _defaultExchangeConnector) external;\\n\\n    function instantCCTransfer(\\n        address _receiver,\\n        uint _loanAmount,\\n        uint _deadline,\\n        address _collateralPool\\n    ) external returns (bool);\\n\\n    function instantCCExchange(\\n\\t\\taddress _exchangeConnector,\\n        address _receiver,\\n        uint _loanAmount, \\n        uint _amountOut, \\n        address[] memory _path, \\n        uint _deadline,\\n        address _collateralToken,\\n        bool _isFixedToken\\n    ) external returns (uint[] memory);\\n\\n    function payBackLoan(address _user, uint _teleBTCAmount) external returns (bool);\\n\\n    function slashUser(\\n\\t\\taddress _user, \\n\\t\\tuint _requestIndex\\n\\t) external returns (bool);\\n\\n}\",\"keccak256\":\"0x859d74e7e205ceeb4afde4486e5ca3bdb9f5d0a9ca3083a452bb60cb78043d1b\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200378e3803806200378e8339810160408190526200003491620001a7565b6200003f336200013a565b600180556002805460ff19169055600680546001600160a01b03808a166001600160a01b0319928316179092556008805489841690831617905560098054888416908316179055600a80549287169290911691909117905560048390556064831115620001095760405162461bcd60e51b815260206004820152602e60248201527f496e7374616e74526f757465723a2077726f6e6720736c61736865722070657260448201526d18d95b9d1859d9481c995dd85c9960921b606482015260840160405180910390fd5b600591909155600b80546001600160a01b0319166001600160a01b0390921691909117905550620002299350505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b0381168114620001a257600080fd5b919050565b600080600080600080600060e0888a031215620001c2578283fd5b620001cd886200018a565b9650620001dd602089016200018a565b9550620001ed604089016200018a565b9450620001fd606089016200018a565b93506080880151925060a088015191506200021b60c089016200018a565b905092959891949750929550565b61355580620002396000396000f3fe608060405234801561001057600080fd5b50600436106101da5760003560e01c80636f6ef7c9116101045780638da5cb5b116100a2578063c805f68b11610071578063c805f68b14610412578063d7aa5e7a14610425578063db1cb55814610438578063f2fde38b1461044b576101da565b80638da5cb5b1461039457806397091b89146103a5578063a36be9a1146103f6578063b59589d1146103ff576101da565b806378b58675116100de57806378b58675146103535780637f0f1817146103665780638456cb59146103795780638d3d78cd14610381576101da565b80636f6ef7c914610318578063715018a614610338578063763360db14610340576101da565b80634782bc361161017c5780635c975abb1161014b5780635c975abb146102c857806369539c70146102df578063697380b2146102f25780636dd3d58914610305576101da565b80634782bc361461027c5780634cf468251461028f5780634d61878e146102a2578063530e784f146102b5576101da565b8063387bb22d116101b8578063387bb22d146102375780633f4ba83a14610258578063419cba7f1461026057806346e897fd14610269576101da565b8063059d0238146101df5780631c9d583c146101f45780632630c12f14610207575b600080fd5b6101f26101ed366004612ebb565b61045e565b005b6101f2610202366004612ebb565b6104db565b60095461021a906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61024a610245366004612ebb565b61054f565b60405190815260200161022e565b6101f261056e565b61024a60045481565b60075461021a906001600160a01b031681565b6101f261028a366004613163565b6105a2565b6101f261029d366004613163565b610639565b61024a6102b0366004612fff565b610746565b6101f26102c3366004612ebb565b6107ff565b60025460ff165b604051901515815260200161022e565b61024a6102ed366004612fff565b610873565b6102cf61030036600461302a565b61092c565b6101f2610313366004612ebb565b610c12565b61032b610326366004612efa565b610c86565b60405161022e9190613240565b6101f2611187565b600a5461021a906001600160a01b031681565b6102cf610361366004612fff565b6111bb565b6101f2610374366004612ebb565b611c29565b6101f2611c9d565b60065461021a906001600160a01b031681565b6000546001600160a01b031661021a565b6103b86103b3366004612fff565b611ccf565b604080516001600160a01b039788168152958716602087015293909516928401929092526060830152608082015260a081019190915260c00161022e565b61024a60055481565b60085461021a906001600160a01b031681565b6101f2610420366004612ebb565b611d30565b600b5461021a906001600160a01b031681565b6102cf610446366004612fff565b611da4565b6101f2610459366004612ebb565b612402565b806001600160a01b03811661048e5760405162461bcd60e51b815260040161048590613284565b60405180910390fd5b6000546001600160a01b031633146104b85760405162461bcd60e51b815260040161048590613327565b50600780546001600160a01b0319166001600160a01b0392909216919091179055565b806001600160a01b0381166105025760405162461bcd60e51b815260040161048590613284565b6000546001600160a01b0316331461052c5760405162461bcd60e51b815260040161048590613327565b50600b80546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0381166000908152600360205260409020545b919050565b6000546001600160a01b031633146105985760405162461bcd60e51b815260040161048590613327565b6105a061249d565b565b6000546001600160a01b031633146105cc5760405162461bcd60e51b815260040161048590613327565b60648111156106345760405162461bcd60e51b815260206004820152602e60248201527f496e7374616e74526f757465723a2077726f6e6720736c61736865722070657260448201526d18d95b9d1859d9481c995dd85c9960921b6064820152608401610485565b600455565b6000546001600160a01b031633146106635760405162461bcd60e51b815260040161048590613327565b60085460408051630a072bc560e41b815290516000926001600160a01b03169163a072bc50916004808301926020929190829003018186803b1580156106a857600080fd5b505afa1580156106bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e0919061317b565b9050808210156107405760405162461bcd60e51b815260206004820152602560248201527f496e7374616e74526f757465723a2077726f6e67207061796261636b20646561604482015264646c696e6560d81b6064820152608401610485565b50600555565b6001600160a01b03821660009081526003602052604081205482106107ad5760405162461bcd60e51b815260206004820152601a60248201527f496e7374616e74526f757465723a2077726f6e6720696e6465780000000000006044820152606401610485565b6001600160a01b03831660009081526003602052604090208054839081106107e557634e487b7160e01b600052603260045260246000fd5b906000526020600020906006020160050154905092915050565b806001600160a01b0381166108265760405162461bcd60e51b815260040161048590613284565b6000546001600160a01b031633146108505760405162461bcd60e51b815260040161048590613327565b50600980546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03821660009081526003602052604081205482106108da5760405162461bcd60e51b815260206004820152601a60248201527f496e7374616e74526f757465723a2077726f6e6720696e6465780000000000006044820152606401610485565b6001600160a01b038316600090815260036020526040902080548390811061091257634e487b7160e01b600052603260045260246000fd5b906000526020600020906006020160040154905092915050565b6000600260015414156109515760405162461bcd60e51b81526004016104859061335c565b6002600155846001600160a01b03811661097d5760405162461bcd60e51b815260040161048590613284565b826001600160a01b0381166109a45760405162461bcd60e51b815260040161048590613284565b60025460ff16156109c75760405162461bcd60e51b8152600401610485906132bb565b428510156109e75760405162461bcd60e51b8152600401610485906132e5565b600754604051633f3b917d60e21b8152600481018890526000916001600160a01b03169063fcee45f49060240160206040518083038186803b158015610a2c57600080fd5b505afa158015610a40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a64919061317b565b9050610a7a33610a74838a613430565b87612530565b6007546040516350e28ac360e11b81526001600160a01b038a81166004830152602482018a90529091169063a1c5158690604401602060405180830381600087803b158015610ac857600080fd5b505af1158015610adc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b009190613073565b5033600090815260036020526040902080546001600160a01b0387169190610b2a90600190613487565b81548110610b4857634e487b7160e01b600052603260045260246000fd5b6000918252602080832060056006909302019190910154338084526003909252604090922080547f6cbcd45e47c0a945676f3fdfa81e4f0dd5f3315732eae250095a9147b9886c6c918d918d918891610ba390600190613487565b81548110610bc157634e487b7160e01b600052603260045260246000fd5b600091825260209182902060046006909202010154604080516001600160a01b03909616865291850193909352830152606082015260800160405180910390a4505060018080559695505050505050565b806001600160a01b038116610c395760405162461bcd60e51b815260040161048590613284565b6000546001600160a01b03163314610c635760405162461bcd60e51b815260040161048590613327565b50600a80546001600160a01b0319166001600160a01b0392909216919091179055565b606060026001541415610cab5760405162461bcd60e51b81526004016104859061335c565b6002600155886001600160a01b038116610cd75760405162461bcd60e51b815260040161048590613284565b60025460ff1615610cfa5760405162461bcd60e51b8152600401610485906132bb565b42851015610d1a5760405162461bcd60e51b8152600401610485906132e5565b60065486516001600160a01b03909116908790600090610d4a57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316148015610d69575060018651115b610db55760405162461bcd60e51b815260206004820152601e60248201527f496e7374616e74526f757465723a207061746820697320696e76616c696400006044820152606401610485565b600754604051633f3b917d60e21b8152600481018a90526000916001600160a01b03169063fcee45f49060240160206040518083038186803b158015610dfa57600080fd5b505afa158015610e0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e32919061317b565b9050610e4233610a74838c613430565b6007546040516350e28ac360e11b8152306004820152602481018b90526001600160a01b039091169063a1c5158690604401602060405180830381600087803b158015610e8e57600080fd5b505af1158015610ea2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec69190613073565b5060065460405163095ea7b360e01b81526001600160a01b038d81166004830152602482018c90529091169063095ea7b390604401602060405180830381600087803b158015610f1557600080fd5b505af1158015610f29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4d9190613073565b5060008b6001600160a01b031663b0bbcd888b8b8b8f8c8b6040518763ffffffff1660e01b8152600401610f8696959493929190613393565b600060405180830381600087803b158015610fa057600080fd5b505af1158015610fb4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fdc919081019061308f565b945090506001811515146110455760405162461bcd60e51b815260206004820152602a60248201527f496e7374616e74526f757465723a2065786368616e676520776173206e6f74206044820152691cdd58d8d95cdcd99d5b60b21b6064820152608401610485565b33600090815260036020526040902080546001600160a01b038816919061106e90600190613487565b8154811061108c57634e487b7160e01b600052603260045260246000fd5b906000526020600020906006020160050154336001600160a01b03167f9f227756a563d8a9f09961e8a35cb707aab5866ccbd60786b6152279e4a6a79d8e8e878f8f8d60036000336001600160a01b03166001600160a01b03168152602001908152602001600020600160036000336001600160a01b03166001600160a01b03168152602001908152602001600020805490506111299190613487565b8154811061114757634e487b7160e01b600052603260045260246000fd5b90600052602060002090600602016004015460405161116c97969594939291906131f7565b60405180910390a45050600180555098975050505050505050565b6000546001600160a01b031633146111b15760405162461bcd60e51b815260040161048590613327565b6105a06000612bb8565b6000600260015414156111e05760405162461bcd60e51b81526004016104859061335c565b6002600155826001600160a01b03811661120c5760405162461bcd60e51b815260040161048590613284565b6001600160a01b03841660009081526003602052604090205483106112875760405162461bcd60e51b815260206004820152602b60248201527f496e7374616e74526f757465723a207265717565737420696e64657820646f6560448201526a1cc81b9bdd08195e1a5cdd60aa1b6064820152608401610485565b600854604080516302f796d960e41b815290516000926001600160a01b031691632f796d90916004808301926020929190829003018186803b1580156112cc57600080fd5b505afa1580156112e0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611304919061317b565b6001600160a01b0386166000908152600360205260409020805491925082918690811061134157634e487b7160e01b600052603260045260246000fd5b906000526020600020906006020160050154106113b35760405162461bcd60e51b815260206004820152602a60248201527f496e7374616e74526f757465723a20646561646c696e6520686173206e6f74206044820152691c185cdcd959081e595d60b21b6064820152608401610485565b6001600160a01b03851660009081526003602052604081208054869081106113eb57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060060201600401549050600060036000886001600160a01b03166001600160a01b03168152602001908152602001600020868154811061144557634e487b7160e01b600052603260045260246000fd5b60009182526020808320600260069093020191909101546001600160a01b038a811684526003909252604083208054929091169350908890811061149957634e487b7160e01b600052603260045260246000fd5b60009182526020808320600160069093020191909101546001600160a01b038b81168452600390925260408320805492909116935090899081106114ed57634e487b7160e01b600052603260045260246000fd5b60009182526020822060069182020160030154600b5491546040516322620c1d60e21b8152600481018390526001600160a01b0388811660248301529182166044820152919450839216906389883074906064016040805180830381600087803b15801561155a57600080fd5b505af115801561156e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115929190613136565b90925090506001821515146115fd5760405162461bcd60e51b815260206004820152602b60248201527f496e7374616e74526f757465723a206c697175696469747920706f6f6c20646f60448201526a195cdb89dd08195e1a5cdd60aa1b6064820152608401610485565b60405163392f2ddd60e01b8152600481018790526000906001600160a01b0386169063392f2ddd9060240160206040518083038186803b15801561164057600080fd5b505afa158015611654573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611678919061317b565b604080516002808252606082018352929350600092909160208301908036833701905050905086816000815181106116c057634e487b7160e01b600052603260045260246000fd5b6001600160a01b0392831660209182029290920101526006548251911690829060019081106116ff57634e487b7160e01b600052603260045260246000fd5b6001600160a01b039283166020918202929092010152604051630646f82b60e31b8152600481018a905290871690633237c15890602401602060405180830381600087803b15801561175057600080fd5b505af1158015611764573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117889190613073565b50828210611a8157600b5460405163095ea7b360e01b81526001600160a01b039182166004820152602481018590529088169063095ea7b390604401602060405180830381600087803b1580156117de57600080fd5b505af11580156117f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118169190613073565b50600b546007546001600160a01b039182169163b0bbcd889186918991869116611841426001613430565b60006040518763ffffffff1660e01b815260040161186496959493929190613393565b600060405180830381600087803b15801561187e57600080fd5b505af1158015611892573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118ba919081019061308f565b50506000606460045485856118cf9190613487565b6118d99190613468565b6118e39190613448565b60405163a9059cbb60e01b8152336004820152602481018290529091506001600160a01b0389169063a9059cbb90604401602060405180830381600087803b15801561192e57600080fd5b505af1158015611942573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119669190613073565b506001600160a01b038716636d75b9ee8f836119828888613487565b61198c9190613487565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b1580156119d257600080fd5b505af11580156119e6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a0a9190613073565b50876001600160a01b03168e6001600160a01b03167f470cffa057aa8791c299e511965581b7e2d7703729b4a3def4c175e70913cbf786893386604051611a73949392919093845260208401929092526001600160a01b03166040830152606082015260800190565b60405180910390a350611c09565b600b5460405163095ea7b360e01b81526001600160a01b039182166004820152602481018490529088169063095ea7b390604401602060405180830381600087803b158015611acf57600080fd5b505af1158015611ae3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b079190613073565b50600b546007546001600160a01b039182169163b0bbcd88918591600091869116611b33426001613430565b60016040518763ffffffff1660e01b8152600401611b5696959493929190613393565b600060405180830381600087803b158015611b7057600080fd5b505af1158015611b84573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611bac919081019061308f565b505060408051838152602081018790523391810191909152600060608201526001600160a01b0380891691908f16907f470cffa057aa8791c299e511965581b7e2d7703729b4a3def4c175e70913cbf79060800160405180910390a35b611c138d8d612c08565b505060018080559b9a5050505050505050505050565b806001600160a01b038116611c505760405162461bcd60e51b815260040161048590613284565b6000546001600160a01b03163314611c7a5760405162461bcd60e51b815260040161048590613327565b50600680546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314611cc75760405162461bcd60e51b815260040161048590613327565b6105a0612e4d565b60036020528160005260406000208181548110611ceb57600080fd5b60009182526020909120600690910201805460018201546002830154600384015460048501546005909501546001600160a01b03948516975092841695509216929086565b806001600160a01b038116611d575760405162461bcd60e51b815260040161048590613284565b6000546001600160a01b03163314611d815760405162461bcd60e51b815260040161048590613327565b50600880546001600160a01b0319166001600160a01b0392909216919091179055565b600060026001541415611dc95760405162461bcd60e51b81526004016104859061335c565b6002600155826001600160a01b038116611df55760405162461bcd60e51b815260040161048590613284565b600854604080516302f796d960e41b8152905185926000926001600160a01b0390911691632f796d9091600480820192602092909190829003018186803b158015611e3f57600080fd5b505afa158015611e53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e77919061317b565b905060015b6001600160a01b038716600090815260036020526040902054811161235e576001600160a01b0387166000908152600360205260409020611ebe600183613487565b81548110611edc57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060060201600301548310158015611f5057506001600160a01b03871660009081526003602052604090208290611f1d600184613487565b81548110611f3b57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600602016005015410155b15612342576001600160a01b0387166000908152600360205260409020611f78600183613487565b81548110611f9657634e487b7160e01b600052603260045260246000fd5b90600052602060002090600602016003015483611fb39190613487565b6006546007546001600160a01b038a81166000908152600360205260409020939650918216926323b872dd9233921690611fee600187613487565b8154811061200c57634e487b7160e01b600052603260045260246000fd5b60009182526020909120600360069092020101546040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401602060405180830381600087803b15801561206f57600080fd5b505af1158015612083573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120a79190613073565b506001600160a01b03871660009081526003602052604090206120cb600183613487565b815481106120e957634e487b7160e01b600052603260045260246000fd5b6000918252602080832060016006909302018201546001600160a01b038b811685526003909252604090932092169163a9059cbb918a919061212b9086613487565b8154811061214957634e487b7160e01b600052603260045260246000fd5b9060005260206000209060060201600401546040518363ffffffff1660e01b815260040161218c9291906001600160a01b03929092168252602082015260400190565b602060405180830381600087803b1580156121a657600080fd5b505af11580156121ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121de9190613073565b506001600160a01b0387166000908152600360205260409020612202600183613487565b8154811061222057634e487b7160e01b600052603260045260246000fd5b60009182526020808320600260069093020191909101546001600160a01b038a8116808552600390935260409093209216917f343bb576b6b598ba7c85893ea7b9f4c8d595035329a0dd23a96aafabb291519d9061227f600186613487565b8154811061229d57634e487b7160e01b600052603260045260246000fd5b6000918252602080832060036006909302018201546001600160a01b038e16845291905260409091206122d1600187613487565b815481106122ef57634e487b7160e01b600052603260045260246000fd5b906000526020600020906006020160040154604051612318929190918252602082015260400190565b60405180910390a36123348761232f600184613487565b612c08565b8061233e8161349e565b9150505b8261234c5761235e565b80612356816134b5565b915050611e7c565b5081156123f3576006546040516323b872dd60e01b81523360048201526001600160a01b03888116602483015260448201859052909116906323b872dd90606401602060405180830381600087803b1580156123b957600080fd5b505af11580156123cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123f19190613073565b505b50506001808055949350505050565b6000546001600160a01b0316331461242c5760405162461bcd60e51b815260040161048590613327565b6001600160a01b0381166124915760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610485565b61249a81612bb8565b50565b60025460ff166124e65760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610485565b6002805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b806001600160a01b0381166125575760405162461bcd60e51b815260040161048590613284565b600a546040516303b8879560e21b81526001600160a01b03848116600483015290911690630ee21e549060240160206040518083038186803b15801561259c57600080fd5b505afa1580156125b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125d49190613073565b61263a5760405162461bcd60e51b815260206004820152603160248201527f496e7374616e74526f757465723a20636f6c6c61746572616c20746f6b656e206044820152706973206e6f742061636365707461626c6560781b6064820152608401610485565b600a54604051636e2f809f60e11b81526001600160a01b038481166004830152600092169063dc5f013e9060240160206040518083038186803b15801561268057600080fd5b505afa158015612694573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126b89190612ede565b90506000816001600160a01b031663dcaf9c446040518163ffffffff1660e01b815260040160206040518083038186803b1580156126f557600080fd5b505afa158015612709573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061272d919061317b565b6009546006546040805163313ce56760e01b815290519394506000936001600160a01b03938416936316fac92a938b9391169163313ce56791600480820192602092909190829003018186803b15801561278657600080fd5b505afa15801561279a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127be9190613193565b886001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156127f757600080fd5b505afa15801561280b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061282f9190613193565b60065460405160e086901b6001600160e01b0319168152600481019490945260ff9283166024850152911660448301526001600160a01b0390811660648301528816608482015260a40160206040518083038186803b15801561289157600080fd5b505afa1580156128a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128c9919061317b565b9050600060646128d98484613468565b6128e39190613448565b6040516309fad23760e11b8152600481018290529091506000906001600160a01b038616906313f5a46e9060240160206040518083038186803b15801561292957600080fd5b505afa15801561293d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612961919061317b565b6040516323b872dd60e01b81526001600160a01b038b8116600483015230602483015260448201839052919250908616906323b872dd90606401602060405180830381600087803b1580156129b557600080fd5b505af11580156129c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129ed9190613073565b506040805160c081018252600060a08201526001600160a01b038b81168252606082018b9052608082018490528781166020808401919091528a82168385015260055460085485516302f796d960e41b8152955194959194931692632f796d9092600480840193919291829003018186803b158015612a6b57600080fd5b505afa158015612a7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aa3919061317b565b612aad9190613430565b8160a0018181525050600360008b6001600160a01b03166001600160a01b0316815260200190815260200160002081908060018154018082558091505060019003906000526020600020906006020160009091909190915060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550606082015181600301556080820151816004015560a08201518160050155505050505050505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0382166000908152600360205260409020548110612c7b5760405162461bcd60e51b8152602060048201526024808201527f496e7374616e74526f757465723a20696e646578206973206f7574206f6620626044820152631bdd5b9960e21b6064820152608401610485565b805b6001600160a01b038316600090815260036020526040902054612ca290600190613487565b811015612dc5576001600160a01b0383166000908152600360205260409020612ccc826001613430565b81548110612cea57634e487b7160e01b600052603260045260246000fd5b906000526020600020906006020160036000856001600160a01b03166001600160a01b031681526020019081526020016000208281548110612d3c57634e487b7160e01b600052603260045260246000fd5b60009182526020909120825460069092020180546001600160a01b039283166001600160a01b03199182161782556001808501549083018054918516918316919091179055600280850154908301805491909416911617909155600380830154908201556004808301549082015560059182015491015580612dbd816134b5565b915050612c7d565b506001600160a01b0382166000908152600360205260409020805480612dfb57634e487b7160e01b600052603160045260246000fd5b60008281526020812060066000199093019283020180546001600160a01b0319908116825560018201805482169055600282018054909116905560038101829055600481018290556005015590555050565b60025460ff1615612e705760405162461bcd60e51b8152600401610485906132bb565b6002805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586125133390565b8035610569816134fc565b803561056981613511565b600060208284031215612ecc578081fd5b8135612ed7816134fc565b9392505050565b600060208284031215612eef578081fd5b8151612ed7816134fc565b600080600080600080600080610100898b031215612f16578384fd5b8835612f21816134fc565b9750602089810135612f32816134fc565b975060408a0135965060608a0135955060808a013567ffffffffffffffff811115612f5b578586fd5b8a01601f81018c13612f6b578586fd5b8035612f7e612f798261340c565b6133db565b8082825284820191508484018f868786028701011115612f9c57898afd5b8994505b83851015612fc7578035612fb3816134fc565b835260019490940193918501918501612fa0565b50975050505060a08a01359350612fe2905060c08a01612ea5565b9150612ff060e08a01612eb0565b90509295985092959890939650565b60008060408385031215613011578182fd5b823561301c816134fc565b946020939093013593505050565b6000806000806080858703121561303f578384fd5b843561304a816134fc565b935060208501359250604085013591506060850135613068816134fc565b939692955090935050565b600060208284031215613084578081fd5b8151612ed781613511565b600080604083850312156130a1578182fd5b82516130ac81613511565b8092505060208084015167ffffffffffffffff8111156130ca578283fd5b8401601f810186136130da578283fd5b80516130e8612f798261340c565b81815283810190838501858402850186018a1015613104578687fd5b8694505b83851015613126578051835260019490940193918501918501613108565b5080955050505050509250929050565b60008060408385031215613148578182fd5b825161315381613511565b6020939093015192949293505050565b600060208284031215613174578081fd5b5035919050565b60006020828403121561318c578081fd5b5051919050565b6000602082840312156131a4578081fd5b815160ff81168114612ed7578182fd5b6000815180845260208085019450808401835b838110156131ec5781516001600160a01b0316875295820195908201906001016131c7565b509495945050505050565b600060018060a01b038916825287602083015286604083015285606083015260e0608083015261322a60e08301866131b4565b93151560a08301525060c0015295945050505050565b6020808252825182820181905260009190848201906040850190845b818110156132785783518352928401929184019160010161325c565b50909695505050505050565b6020808252601b908201527f496e7374616e74526f757465723a207a65726f20616464726573730000000000604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526022908201527f496e7374616e74526f757465723a20646561646c696e65206861732070617373604082015261195960f21b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b600087825286602083015260c060408301526133b260c08301876131b4565b6001600160a01b03959095166060830152506080810192909252151560a0909101529392505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715613404576134046134e6565b604052919050565b600067ffffffffffffffff821115613426576134266134e6565b5060209081020190565b60008219821115613443576134436134d0565b500190565b60008261346357634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615613482576134826134d0565b500290565b600082821015613499576134996134d0565b500390565b6000816134ad576134ad6134d0565b506000190190565b60006000198214156134c9576134c96134d0565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461249a57600080fd5b801515811461249a57600080fdfea264697066735822122095c533c30fb871eb110c9e0a73086fc8ee9d7a5e01bf21a9374f6f323ea6463764736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101da5760003560e01c80636f6ef7c9116101045780638da5cb5b116100a2578063c805f68b11610071578063c805f68b14610412578063d7aa5e7a14610425578063db1cb55814610438578063f2fde38b1461044b576101da565b80638da5cb5b1461039457806397091b89146103a5578063a36be9a1146103f6578063b59589d1146103ff576101da565b806378b58675116100de57806378b58675146103535780637f0f1817146103665780638456cb59146103795780638d3d78cd14610381576101da565b80636f6ef7c914610318578063715018a614610338578063763360db14610340576101da565b80634782bc361161017c5780635c975abb1161014b5780635c975abb146102c857806369539c70146102df578063697380b2146102f25780636dd3d58914610305576101da565b80634782bc361461027c5780634cf468251461028f5780634d61878e146102a2578063530e784f146102b5576101da565b8063387bb22d116101b8578063387bb22d146102375780633f4ba83a14610258578063419cba7f1461026057806346e897fd14610269576101da565b8063059d0238146101df5780631c9d583c146101f45780632630c12f14610207575b600080fd5b6101f26101ed366004612ebb565b61045e565b005b6101f2610202366004612ebb565b6104db565b60095461021a906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b61024a610245366004612ebb565b61054f565b60405190815260200161022e565b6101f261056e565b61024a60045481565b60075461021a906001600160a01b031681565b6101f261028a366004613163565b6105a2565b6101f261029d366004613163565b610639565b61024a6102b0366004612fff565b610746565b6101f26102c3366004612ebb565b6107ff565b60025460ff165b604051901515815260200161022e565b61024a6102ed366004612fff565b610873565b6102cf61030036600461302a565b61092c565b6101f2610313366004612ebb565b610c12565b61032b610326366004612efa565b610c86565b60405161022e9190613240565b6101f2611187565b600a5461021a906001600160a01b031681565b6102cf610361366004612fff565b6111bb565b6101f2610374366004612ebb565b611c29565b6101f2611c9d565b60065461021a906001600160a01b031681565b6000546001600160a01b031661021a565b6103b86103b3366004612fff565b611ccf565b604080516001600160a01b039788168152958716602087015293909516928401929092526060830152608082015260a081019190915260c00161022e565b61024a60055481565b60085461021a906001600160a01b031681565b6101f2610420366004612ebb565b611d30565b600b5461021a906001600160a01b031681565b6102cf610446366004612fff565b611da4565b6101f2610459366004612ebb565b612402565b806001600160a01b03811661048e5760405162461bcd60e51b815260040161048590613284565b60405180910390fd5b6000546001600160a01b031633146104b85760405162461bcd60e51b815260040161048590613327565b50600780546001600160a01b0319166001600160a01b0392909216919091179055565b806001600160a01b0381166105025760405162461bcd60e51b815260040161048590613284565b6000546001600160a01b0316331461052c5760405162461bcd60e51b815260040161048590613327565b50600b80546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0381166000908152600360205260409020545b919050565b6000546001600160a01b031633146105985760405162461bcd60e51b815260040161048590613327565b6105a061249d565b565b6000546001600160a01b031633146105cc5760405162461bcd60e51b815260040161048590613327565b60648111156106345760405162461bcd60e51b815260206004820152602e60248201527f496e7374616e74526f757465723a2077726f6e6720736c61736865722070657260448201526d18d95b9d1859d9481c995dd85c9960921b6064820152608401610485565b600455565b6000546001600160a01b031633146106635760405162461bcd60e51b815260040161048590613327565b60085460408051630a072bc560e41b815290516000926001600160a01b03169163a072bc50916004808301926020929190829003018186803b1580156106a857600080fd5b505afa1580156106bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e0919061317b565b9050808210156107405760405162461bcd60e51b815260206004820152602560248201527f496e7374616e74526f757465723a2077726f6e67207061796261636b20646561604482015264646c696e6560d81b6064820152608401610485565b50600555565b6001600160a01b03821660009081526003602052604081205482106107ad5760405162461bcd60e51b815260206004820152601a60248201527f496e7374616e74526f757465723a2077726f6e6720696e6465780000000000006044820152606401610485565b6001600160a01b03831660009081526003602052604090208054839081106107e557634e487b7160e01b600052603260045260246000fd5b906000526020600020906006020160050154905092915050565b806001600160a01b0381166108265760405162461bcd60e51b815260040161048590613284565b6000546001600160a01b031633146108505760405162461bcd60e51b815260040161048590613327565b50600980546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b03821660009081526003602052604081205482106108da5760405162461bcd60e51b815260206004820152601a60248201527f496e7374616e74526f757465723a2077726f6e6720696e6465780000000000006044820152606401610485565b6001600160a01b038316600090815260036020526040902080548390811061091257634e487b7160e01b600052603260045260246000fd5b906000526020600020906006020160040154905092915050565b6000600260015414156109515760405162461bcd60e51b81526004016104859061335c565b6002600155846001600160a01b03811661097d5760405162461bcd60e51b815260040161048590613284565b826001600160a01b0381166109a45760405162461bcd60e51b815260040161048590613284565b60025460ff16156109c75760405162461bcd60e51b8152600401610485906132bb565b428510156109e75760405162461bcd60e51b8152600401610485906132e5565b600754604051633f3b917d60e21b8152600481018890526000916001600160a01b03169063fcee45f49060240160206040518083038186803b158015610a2c57600080fd5b505afa158015610a40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a64919061317b565b9050610a7a33610a74838a613430565b87612530565b6007546040516350e28ac360e11b81526001600160a01b038a81166004830152602482018a90529091169063a1c5158690604401602060405180830381600087803b158015610ac857600080fd5b505af1158015610adc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b009190613073565b5033600090815260036020526040902080546001600160a01b0387169190610b2a90600190613487565b81548110610b4857634e487b7160e01b600052603260045260246000fd5b6000918252602080832060056006909302019190910154338084526003909252604090922080547f6cbcd45e47c0a945676f3fdfa81e4f0dd5f3315732eae250095a9147b9886c6c918d918d918891610ba390600190613487565b81548110610bc157634e487b7160e01b600052603260045260246000fd5b600091825260209182902060046006909202010154604080516001600160a01b03909616865291850193909352830152606082015260800160405180910390a4505060018080559695505050505050565b806001600160a01b038116610c395760405162461bcd60e51b815260040161048590613284565b6000546001600160a01b03163314610c635760405162461bcd60e51b815260040161048590613327565b50600a80546001600160a01b0319166001600160a01b0392909216919091179055565b606060026001541415610cab5760405162461bcd60e51b81526004016104859061335c565b6002600155886001600160a01b038116610cd75760405162461bcd60e51b815260040161048590613284565b60025460ff1615610cfa5760405162461bcd60e51b8152600401610485906132bb565b42851015610d1a5760405162461bcd60e51b8152600401610485906132e5565b60065486516001600160a01b03909116908790600090610d4a57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316148015610d69575060018651115b610db55760405162461bcd60e51b815260206004820152601e60248201527f496e7374616e74526f757465723a207061746820697320696e76616c696400006044820152606401610485565b600754604051633f3b917d60e21b8152600481018a90526000916001600160a01b03169063fcee45f49060240160206040518083038186803b158015610dfa57600080fd5b505afa158015610e0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e32919061317b565b9050610e4233610a74838c613430565b6007546040516350e28ac360e11b8152306004820152602481018b90526001600160a01b039091169063a1c5158690604401602060405180830381600087803b158015610e8e57600080fd5b505af1158015610ea2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec69190613073565b5060065460405163095ea7b360e01b81526001600160a01b038d81166004830152602482018c90529091169063095ea7b390604401602060405180830381600087803b158015610f1557600080fd5b505af1158015610f29573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f4d9190613073565b5060008b6001600160a01b031663b0bbcd888b8b8b8f8c8b6040518763ffffffff1660e01b8152600401610f8696959493929190613393565b600060405180830381600087803b158015610fa057600080fd5b505af1158015610fb4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fdc919081019061308f565b945090506001811515146110455760405162461bcd60e51b815260206004820152602a60248201527f496e7374616e74526f757465723a2065786368616e676520776173206e6f74206044820152691cdd58d8d95cdcd99d5b60b21b6064820152608401610485565b33600090815260036020526040902080546001600160a01b038816919061106e90600190613487565b8154811061108c57634e487b7160e01b600052603260045260246000fd5b906000526020600020906006020160050154336001600160a01b03167f9f227756a563d8a9f09961e8a35cb707aab5866ccbd60786b6152279e4a6a79d8e8e878f8f8d60036000336001600160a01b03166001600160a01b03168152602001908152602001600020600160036000336001600160a01b03166001600160a01b03168152602001908152602001600020805490506111299190613487565b8154811061114757634e487b7160e01b600052603260045260246000fd5b90600052602060002090600602016004015460405161116c97969594939291906131f7565b60405180910390a45050600180555098975050505050505050565b6000546001600160a01b031633146111b15760405162461bcd60e51b815260040161048590613327565b6105a06000612bb8565b6000600260015414156111e05760405162461bcd60e51b81526004016104859061335c565b6002600155826001600160a01b03811661120c5760405162461bcd60e51b815260040161048590613284565b6001600160a01b03841660009081526003602052604090205483106112875760405162461bcd60e51b815260206004820152602b60248201527f496e7374616e74526f757465723a207265717565737420696e64657820646f6560448201526a1cc81b9bdd08195e1a5cdd60aa1b6064820152608401610485565b600854604080516302f796d960e41b815290516000926001600160a01b031691632f796d90916004808301926020929190829003018186803b1580156112cc57600080fd5b505afa1580156112e0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611304919061317b565b6001600160a01b0386166000908152600360205260409020805491925082918690811061134157634e487b7160e01b600052603260045260246000fd5b906000526020600020906006020160050154106113b35760405162461bcd60e51b815260206004820152602a60248201527f496e7374616e74526f757465723a20646561646c696e6520686173206e6f74206044820152691c185cdcd959081e595d60b21b6064820152608401610485565b6001600160a01b03851660009081526003602052604081208054869081106113eb57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060060201600401549050600060036000886001600160a01b03166001600160a01b03168152602001908152602001600020868154811061144557634e487b7160e01b600052603260045260246000fd5b60009182526020808320600260069093020191909101546001600160a01b038a811684526003909252604083208054929091169350908890811061149957634e487b7160e01b600052603260045260246000fd5b60009182526020808320600160069093020191909101546001600160a01b038b81168452600390925260408320805492909116935090899081106114ed57634e487b7160e01b600052603260045260246000fd5b60009182526020822060069182020160030154600b5491546040516322620c1d60e21b8152600481018390526001600160a01b0388811660248301529182166044820152919450839216906389883074906064016040805180830381600087803b15801561155a57600080fd5b505af115801561156e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115929190613136565b90925090506001821515146115fd5760405162461bcd60e51b815260206004820152602b60248201527f496e7374616e74526f757465723a206c697175696469747920706f6f6c20646f60448201526a195cdb89dd08195e1a5cdd60aa1b6064820152608401610485565b60405163392f2ddd60e01b8152600481018790526000906001600160a01b0386169063392f2ddd9060240160206040518083038186803b15801561164057600080fd5b505afa158015611654573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611678919061317b565b604080516002808252606082018352929350600092909160208301908036833701905050905086816000815181106116c057634e487b7160e01b600052603260045260246000fd5b6001600160a01b0392831660209182029290920101526006548251911690829060019081106116ff57634e487b7160e01b600052603260045260246000fd5b6001600160a01b039283166020918202929092010152604051630646f82b60e31b8152600481018a905290871690633237c15890602401602060405180830381600087803b15801561175057600080fd5b505af1158015611764573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117889190613073565b50828210611a8157600b5460405163095ea7b360e01b81526001600160a01b039182166004820152602481018590529088169063095ea7b390604401602060405180830381600087803b1580156117de57600080fd5b505af11580156117f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118169190613073565b50600b546007546001600160a01b039182169163b0bbcd889186918991869116611841426001613430565b60006040518763ffffffff1660e01b815260040161186496959493929190613393565b600060405180830381600087803b15801561187e57600080fd5b505af1158015611892573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526118ba919081019061308f565b50506000606460045485856118cf9190613487565b6118d99190613468565b6118e39190613448565b60405163a9059cbb60e01b8152336004820152602481018290529091506001600160a01b0389169063a9059cbb90604401602060405180830381600087803b15801561192e57600080fd5b505af1158015611942573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119669190613073565b506001600160a01b038716636d75b9ee8f836119828888613487565b61198c9190613487565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b1580156119d257600080fd5b505af11580156119e6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a0a9190613073565b50876001600160a01b03168e6001600160a01b03167f470cffa057aa8791c299e511965581b7e2d7703729b4a3def4c175e70913cbf786893386604051611a73949392919093845260208401929092526001600160a01b03166040830152606082015260800190565b60405180910390a350611c09565b600b5460405163095ea7b360e01b81526001600160a01b039182166004820152602481018490529088169063095ea7b390604401602060405180830381600087803b158015611acf57600080fd5b505af1158015611ae3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b079190613073565b50600b546007546001600160a01b039182169163b0bbcd88918591600091869116611b33426001613430565b60016040518763ffffffff1660e01b8152600401611b5696959493929190613393565b600060405180830381600087803b158015611b7057600080fd5b505af1158015611b84573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611bac919081019061308f565b505060408051838152602081018790523391810191909152600060608201526001600160a01b0380891691908f16907f470cffa057aa8791c299e511965581b7e2d7703729b4a3def4c175e70913cbf79060800160405180910390a35b611c138d8d612c08565b505060018080559b9a5050505050505050505050565b806001600160a01b038116611c505760405162461bcd60e51b815260040161048590613284565b6000546001600160a01b03163314611c7a5760405162461bcd60e51b815260040161048590613327565b50600680546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314611cc75760405162461bcd60e51b815260040161048590613327565b6105a0612e4d565b60036020528160005260406000208181548110611ceb57600080fd5b60009182526020909120600690910201805460018201546002830154600384015460048501546005909501546001600160a01b03948516975092841695509216929086565b806001600160a01b038116611d575760405162461bcd60e51b815260040161048590613284565b6000546001600160a01b03163314611d815760405162461bcd60e51b815260040161048590613327565b50600880546001600160a01b0319166001600160a01b0392909216919091179055565b600060026001541415611dc95760405162461bcd60e51b81526004016104859061335c565b6002600155826001600160a01b038116611df55760405162461bcd60e51b815260040161048590613284565b600854604080516302f796d960e41b8152905185926000926001600160a01b0390911691632f796d9091600480820192602092909190829003018186803b158015611e3f57600080fd5b505afa158015611e53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e77919061317b565b905060015b6001600160a01b038716600090815260036020526040902054811161235e576001600160a01b0387166000908152600360205260409020611ebe600183613487565b81548110611edc57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060060201600301548310158015611f5057506001600160a01b03871660009081526003602052604090208290611f1d600184613487565b81548110611f3b57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600602016005015410155b15612342576001600160a01b0387166000908152600360205260409020611f78600183613487565b81548110611f9657634e487b7160e01b600052603260045260246000fd5b90600052602060002090600602016003015483611fb39190613487565b6006546007546001600160a01b038a81166000908152600360205260409020939650918216926323b872dd9233921690611fee600187613487565b8154811061200c57634e487b7160e01b600052603260045260246000fd5b60009182526020909120600360069092020101546040516001600160e01b031960e086901b1681526001600160a01b0393841660048201529290911660248301526044820152606401602060405180830381600087803b15801561206f57600080fd5b505af1158015612083573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120a79190613073565b506001600160a01b03871660009081526003602052604090206120cb600183613487565b815481106120e957634e487b7160e01b600052603260045260246000fd5b6000918252602080832060016006909302018201546001600160a01b038b811685526003909252604090932092169163a9059cbb918a919061212b9086613487565b8154811061214957634e487b7160e01b600052603260045260246000fd5b9060005260206000209060060201600401546040518363ffffffff1660e01b815260040161218c9291906001600160a01b03929092168252602082015260400190565b602060405180830381600087803b1580156121a657600080fd5b505af11580156121ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121de9190613073565b506001600160a01b0387166000908152600360205260409020612202600183613487565b8154811061222057634e487b7160e01b600052603260045260246000fd5b60009182526020808320600260069093020191909101546001600160a01b038a8116808552600390935260409093209216917f343bb576b6b598ba7c85893ea7b9f4c8d595035329a0dd23a96aafabb291519d9061227f600186613487565b8154811061229d57634e487b7160e01b600052603260045260246000fd5b6000918252602080832060036006909302018201546001600160a01b038e16845291905260409091206122d1600187613487565b815481106122ef57634e487b7160e01b600052603260045260246000fd5b906000526020600020906006020160040154604051612318929190918252602082015260400190565b60405180910390a36123348761232f600184613487565b612c08565b8061233e8161349e565b9150505b8261234c5761235e565b80612356816134b5565b915050611e7c565b5081156123f3576006546040516323b872dd60e01b81523360048201526001600160a01b03888116602483015260448201859052909116906323b872dd90606401602060405180830381600087803b1580156123b957600080fd5b505af11580156123cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123f19190613073565b505b50506001808055949350505050565b6000546001600160a01b0316331461242c5760405162461bcd60e51b815260040161048590613327565b6001600160a01b0381166124915760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610485565b61249a81612bb8565b50565b60025460ff166124e65760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610485565b6002805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b806001600160a01b0381166125575760405162461bcd60e51b815260040161048590613284565b600a546040516303b8879560e21b81526001600160a01b03848116600483015290911690630ee21e549060240160206040518083038186803b15801561259c57600080fd5b505afa1580156125b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125d49190613073565b61263a5760405162461bcd60e51b815260206004820152603160248201527f496e7374616e74526f757465723a20636f6c6c61746572616c20746f6b656e206044820152706973206e6f742061636365707461626c6560781b6064820152608401610485565b600a54604051636e2f809f60e11b81526001600160a01b038481166004830152600092169063dc5f013e9060240160206040518083038186803b15801561268057600080fd5b505afa158015612694573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126b89190612ede565b90506000816001600160a01b031663dcaf9c446040518163ffffffff1660e01b815260040160206040518083038186803b1580156126f557600080fd5b505afa158015612709573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061272d919061317b565b6009546006546040805163313ce56760e01b815290519394506000936001600160a01b03938416936316fac92a938b9391169163313ce56791600480820192602092909190829003018186803b15801561278657600080fd5b505afa15801561279a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127be9190613193565b886001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b1580156127f757600080fd5b505afa15801561280b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061282f9190613193565b60065460405160e086901b6001600160e01b0319168152600481019490945260ff9283166024850152911660448301526001600160a01b0390811660648301528816608482015260a40160206040518083038186803b15801561289157600080fd5b505afa1580156128a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128c9919061317b565b9050600060646128d98484613468565b6128e39190613448565b6040516309fad23760e11b8152600481018290529091506000906001600160a01b038616906313f5a46e9060240160206040518083038186803b15801561292957600080fd5b505afa15801561293d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612961919061317b565b6040516323b872dd60e01b81526001600160a01b038b8116600483015230602483015260448201839052919250908616906323b872dd90606401602060405180830381600087803b1580156129b557600080fd5b505af11580156129c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129ed9190613073565b506040805160c081018252600060a08201526001600160a01b038b81168252606082018b9052608082018490528781166020808401919091528a82168385015260055460085485516302f796d960e41b8152955194959194931692632f796d9092600480840193919291829003018186803b158015612a6b57600080fd5b505afa158015612a7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aa3919061317b565b612aad9190613430565b8160a0018181525050600360008b6001600160a01b03166001600160a01b0316815260200190815260200160002081908060018154018082558091505060019003906000526020600020906006020160009091909190915060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550606082015181600301556080820151816004015560a08201518160050155505050505050505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b0382166000908152600360205260409020548110612c7b5760405162461bcd60e51b8152602060048201526024808201527f496e7374616e74526f757465723a20696e646578206973206f7574206f6620626044820152631bdd5b9960e21b6064820152608401610485565b805b6001600160a01b038316600090815260036020526040902054612ca290600190613487565b811015612dc5576001600160a01b0383166000908152600360205260409020612ccc826001613430565b81548110612cea57634e487b7160e01b600052603260045260246000fd5b906000526020600020906006020160036000856001600160a01b03166001600160a01b031681526020019081526020016000208281548110612d3c57634e487b7160e01b600052603260045260246000fd5b60009182526020909120825460069092020180546001600160a01b039283166001600160a01b03199182161782556001808501549083018054918516918316919091179055600280850154908301805491909416911617909155600380830154908201556004808301549082015560059182015491015580612dbd816134b5565b915050612c7d565b506001600160a01b0382166000908152600360205260409020805480612dfb57634e487b7160e01b600052603160045260246000fd5b60008281526020812060066000199093019283020180546001600160a01b0319908116825560018201805482169055600282018054909116905560038101829055600481018290556005015590555050565b60025460ff1615612e705760405162461bcd60e51b8152600401610485906132bb565b6002805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586125133390565b8035610569816134fc565b803561056981613511565b600060208284031215612ecc578081fd5b8135612ed7816134fc565b9392505050565b600060208284031215612eef578081fd5b8151612ed7816134fc565b600080600080600080600080610100898b031215612f16578384fd5b8835612f21816134fc565b9750602089810135612f32816134fc565b975060408a0135965060608a0135955060808a013567ffffffffffffffff811115612f5b578586fd5b8a01601f81018c13612f6b578586fd5b8035612f7e612f798261340c565b6133db565b8082825284820191508484018f868786028701011115612f9c57898afd5b8994505b83851015612fc7578035612fb3816134fc565b835260019490940193918501918501612fa0565b50975050505060a08a01359350612fe2905060c08a01612ea5565b9150612ff060e08a01612eb0565b90509295985092959890939650565b60008060408385031215613011578182fd5b823561301c816134fc565b946020939093013593505050565b6000806000806080858703121561303f578384fd5b843561304a816134fc565b935060208501359250604085013591506060850135613068816134fc565b939692955090935050565b600060208284031215613084578081fd5b8151612ed781613511565b600080604083850312156130a1578182fd5b82516130ac81613511565b8092505060208084015167ffffffffffffffff8111156130ca578283fd5b8401601f810186136130da578283fd5b80516130e8612f798261340c565b81815283810190838501858402850186018a1015613104578687fd5b8694505b83851015613126578051835260019490940193918501918501613108565b5080955050505050509250929050565b60008060408385031215613148578182fd5b825161315381613511565b6020939093015192949293505050565b600060208284031215613174578081fd5b5035919050565b60006020828403121561318c578081fd5b5051919050565b6000602082840312156131a4578081fd5b815160ff81168114612ed7578182fd5b6000815180845260208085019450808401835b838110156131ec5781516001600160a01b0316875295820195908201906001016131c7565b509495945050505050565b600060018060a01b038916825287602083015286604083015285606083015260e0608083015261322a60e08301866131b4565b93151560a08301525060c0015295945050505050565b6020808252825182820181905260009190848201906040850190845b818110156132785783518352928401929184019160010161325c565b50909695505050505050565b6020808252601b908201527f496e7374616e74526f757465723a207a65726f20616464726573730000000000604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b60208082526022908201527f496e7374616e74526f757465723a20646561646c696e65206861732070617373604082015261195960f21b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b600087825286602083015260c060408301526133b260c08301876131b4565b6001600160a01b03959095166060830152506080810192909252151560a0909101529392505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715613404576134046134e6565b604052919050565b600067ffffffffffffffff821115613426576134266134e6565b5060209081020190565b60008219821115613443576134436134d0565b500190565b60008261346357634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615613482576134826134d0565b500290565b600082821015613499576134996134d0565b500390565b6000816134ad576134ad6134d0565b506000190190565b60006000198214156134c9576134c96134d0565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461249a57600080fd5b801515811461249a57600080fdfea264697066735822122095c533c30fb871eb110c9e0a73086fc8ee9d7a5e01bf21a9374f6f323ea6463764736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "It manages instant pool contract to give loan to users",
        "params": {
          "_collateralPoolFactory": "Address of collateral pool factory contrac",
          "_defaultExchangeConnector": "Exchange connector that is used for exchanging user's collateral to teleBTC (in the case of slashing)",
          "_paybackDeadline": "Dealine of paying back the borrowed tokens",
          "_priceOracle": "Address of price oracle contract",
          "_relay": "Address of relay contract",
          "_slasherPercentageReward": "Percentage of total collateral that goes to slasher",
          "_teleBTC": "Address of teleBTC contract"
        }
      },
      "getLockedCollateralPoolTokenAmount(address,uint256)": {
        "params": {
          "_index": "Index of the request in user's request list",
          "_user": "Address of the user"
        },
        "returns": {
          "_0": "Amount of locked collateral pool token (not collateral token)"
        }
      },
      "getUserRequestDeadline(address,uint256)": {
        "params": {
          "_index": "Index of the request in user's request list",
          "_user": "Address of the user"
        },
        "returns": {
          "_0": "Deadline of that request"
        }
      },
      "getUserRequestsLength(address)": {
        "params": {
          "_user": "Address of the user"
        },
        "returns": {
          "_0": "The total number of user's requests"
        }
      },
      "instantCCExchange(address,address,uint256,uint256,address[],uint256,address,bool)": {
        "details": "Locks the required collateral amount of the user. Only works when contract is not paused.",
        "params": {
          "_amountOut": "Amount of the output token",
          "_collateralToken": "Address of collateral token",
          "_deadline": "Deadline for getting the loan",
          "_exchangeConnector": "Address of exchange connector that user wants to exchange the borrowed teleBTC in it",
          "_isFixedToken": "Shows whether input or output is fixed in exchange",
          "_loanAmount": "Amount of the loan",
          "_path": "Path of exchanging tokens",
          "_receiver": "Address of the loan receiver"
        },
        "returns": {
          "_amounts": "         Amounts of tokens involved in the exchange"
        }
      },
      "instantCCTransfer(address,uint256,uint256,address)": {
        "details": "Transfes required collateral pool token of user to itself. Only works when contract is not paused.",
        "params": {
          "_collateralToken": "Address of the collateral token",
          "_deadline": "Deadline for getting the loan",
          "_loanAmount": "Amount of the loan",
          "_receiver": "Address of the loan receiver"
        },
        "returns": {
          "_0": "True if getting loan was successful"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "payBackLoan(address,uint256)": {
        "details": "Caller should give allowance for teleBTC to instant router",
        "params": {
          "_teleBTCAmount": "Amount of available teleBTC to pay back loans",
          "_user": "Address of user who wants to pay back loans"
        },
        "returns": {
          "_0": "True if paying back is successful"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setCollateralPoolFactory(address)": {
        "details": "Only owner can call this",
        "params": {
          "_collateralPoolFactory": "The new teleBTC instant pool address"
        }
      },
      "setDefaultExchangeConnector(address)": {
        "details": "Only owner can call this",
        "params": {
          "_defaultExchangeConnector": "The new defaultExchangeConnector address"
        }
      },
      "setPaybackDeadline(uint256)": {
        "details": "Only owner can call this. It should be greater than relay finalization parameter so user has enough time to payback loan",
        "params": {
          "_paybackDeadline": "The new payback deadline"
        }
      },
      "setPriceOracle(address)": {
        "details": "Only owner can call this",
        "params": {
          "_priceOracle": "The new teleBTC instant pool address"
        }
      },
      "setRelay(address)": {
        "details": "Only owner can call this",
        "params": {
          "_relay": "The new teleBTC instant pool address"
        }
      },
      "setSlasherPercentageReward(uint256)": {
        "details": "Only owner can call this",
        "params": {
          "_slasherPercentageReward": "The new slasher reward"
        }
      },
      "setTeleBTC(address)": {
        "details": "Only owner can call this",
        "params": {
          "_teleBTC": "The new teleBTC instant pool address"
        }
      },
      "setTeleBTCInstantPool(address)": {
        "details": "Only owner can call this",
        "params": {
          "_teleBTCInstantPool": "The new teleBTC instant pool address"
        }
      },
      "slashUser(address,uint256)": {
        "details": "Buys teleBTC using the collateral and sends it to instant pool",
        "params": {
          "_requestIndex": "Index of the request that have not been paid back before deadline",
          "_user": "Address of the slashed user"
        },
        "returns": {
          "_0": "True if slashing is successful"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "InstantExchange(address,address,uint256,uint256,uint256,address[],bool,uint256,address,uint256)": {
        "notice": "Emits when a user gets loan for exchange"
      },
      "InstantTransfer(address,address,uint256,uint256,uint256,address,uint256)": {
        "notice": "Emits when a user gets loan for transfer"
      },
      "PaybackLoan(address,uint256,address,uint256)": {
        "notice": "Emits when a loan gets paid back"
      },
      "SlashUser(address,address,uint256,uint256,address,uint256)": {
        "notice": "Emits when a user gets slashed"
      }
    },
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "This contract handles instant transfer and instant exchange requests"
      },
      "getLockedCollateralPoolTokenAmount(address,uint256)": {
        "notice": "Gives the locked collateral pool token corresponding to a request"
      },
      "getUserRequestDeadline(address,uint256)": {
        "notice": "Gives deadline of a specefic request"
      },
      "getUserRequestsLength(address)": {
        "notice": "Gives the total number of user's unpaid loans"
      },
      "instantCCExchange(address,address,uint256,uint256,address[],uint256,address,bool)": {
        "notice": "Exchanges the loan amount (in teleBTC) for the user"
      },
      "instantCCTransfer(address,uint256,uint256,address)": {
        "notice": "Transfers the loan amount (in teleBTC) to the user "
      },
      "pause()": {
        "notice": "Pause the contract"
      },
      "payBackLoan(address,uint256)": {
        "notice": "Settles loans of the user"
      },
      "setCollateralPoolFactory(address)": {
        "notice": "Setter for teleBTC instant pool"
      },
      "setDefaultExchangeConnector(address)": {
        "notice": "Setter for default exchange connector"
      },
      "setPaybackDeadline(uint256)": {
        "notice": "Setter for payback deadline"
      },
      "setPriceOracle(address)": {
        "notice": "Setter for teleBTC instant pool"
      },
      "setRelay(address)": {
        "notice": "Setter for teleBTC instant pool"
      },
      "setSlasherPercentageReward(uint256)": {
        "notice": "Setter for slasher percentage reward"
      },
      "setTeleBTC(address)": {
        "notice": "Setter for teleBTC instant pool"
      },
      "setTeleBTCInstantPool(address)": {
        "notice": "Setter for teleBTC instant pool"
      },
      "slashUser(address,uint256)": {
        "notice": "Slashes collateral of user who did not pay back loan before its deadline"
      },
      "unpause()": {
        "notice": "Unpause the contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 807,
        "contract": "contracts/routers/InstantRouter.sol:InstantRouter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1634,
        "contract": "contracts/routers/InstantRouter.sol:InstantRouter",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1549,
        "contract": "contracts/routers/InstantRouter.sol:InstantRouter",
        "label": "_paused",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 17729,
        "contract": "contracts/routers/InstantRouter.sol:InstantRouter",
        "label": "instantRequests",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_array(t_struct(instantRequest)19495_storage)dyn_storage)"
      },
      {
        "astId": 17732,
        "contract": "contracts/routers/InstantRouter.sol:InstantRouter",
        "label": "slasherPercentageReward",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 17735,
        "contract": "contracts/routers/InstantRouter.sol:InstantRouter",
        "label": "paybackDeadline",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 17738,
        "contract": "contracts/routers/InstantRouter.sol:InstantRouter",
        "label": "teleBTC",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 17741,
        "contract": "contracts/routers/InstantRouter.sol:InstantRouter",
        "label": "teleBTCInstantPool",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 17744,
        "contract": "contracts/routers/InstantRouter.sol:InstantRouter",
        "label": "relay",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 17747,
        "contract": "contracts/routers/InstantRouter.sol:InstantRouter",
        "label": "priceOracle",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 17750,
        "contract": "contracts/routers/InstantRouter.sol:InstantRouter",
        "label": "collateralPoolFactory",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 17753,
        "contract": "contracts/routers/InstantRouter.sol:InstantRouter",
        "label": "defaultExchangeConnector",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(instantRequest)19495_storage)dyn_storage": {
        "base": "t_struct(instantRequest)19495_storage",
        "encoding": "dynamic_array",
        "label": "struct IInstantRouter.instantRequest[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_struct(instantRequest)19495_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IInstantRouter.instantRequest[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(instantRequest)19495_storage)dyn_storage"
      },
      "t_struct(instantRequest)19495_storage": {
        "encoding": "inplace",
        "label": "struct IInstantRouter.instantRequest",
        "members": [
          {
            "astId": 19484,
            "contract": "contracts/routers/InstantRouter.sol:InstantRouter",
            "label": "user",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 19486,
            "contract": "contracts/routers/InstantRouter.sol:InstantRouter",
            "label": "collateralPool",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 19488,
            "contract": "contracts/routers/InstantRouter.sol:InstantRouter",
            "label": "collateralToken",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 19490,
            "contract": "contracts/routers/InstantRouter.sol:InstantRouter",
            "label": "paybackAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 19492,
            "contract": "contracts/routers/InstantRouter.sol:InstantRouter",
            "label": "lockedCollateralPoolTokenAmount",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 19494,
            "contract": "contracts/routers/InstantRouter.sol:InstantRouter",
            "label": "deadline",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}