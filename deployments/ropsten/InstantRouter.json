{
  "address": "0x77bf396455E6552cBD5DB2a4ad94d01a4397Deb6",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ccTransferRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_exchangeRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_TeleportDAOToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_liquidityPoolFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_staking",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_bitcoinRelay",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_punisherReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_paybackDeadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_collateralRatio",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_instantFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bitcoinAmount",
          "type": "uint256"
        }
      ],
      "name": "PaybackInstantLoan",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "slashedAmount",
          "type": "uint256"
        }
      ],
      "name": "PunishUser",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "TeleportDAOToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WAVAX",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "wrappedBitcoinAmount",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bitcoinInstantPool",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bitcoinRelay",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ccTransferRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "changeOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "debts",
      "outputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "wrappedBitcoinAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "instantCCExchange",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bool",
          "name": "result",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "instantCCExchangeWithPermit",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "bool",
          "name": "result",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "instantCCTransfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "signer",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "signature",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "instantCCTransferWithPermit",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "isUsed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidityPoolFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bitcoinAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "payBackInstantTransfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paybackDeadline",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "debtIndex",
          "type": "uint256[]"
        }
      ],
      "name": "punishUser",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "instantPoolTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "messageHash",
          "type": "bytes32"
        }
      ],
      "name": "requestCollateralAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "requests",
      "outputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "wrappedBitcoinAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "creationTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "paybackDeadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isPaidback",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isUsed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_ccTransferRouter",
          "type": "address"
        }
      ],
      "name": "setCCTransferRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_paybackDeadline",
          "type": "uint256"
        }
      ],
      "name": "setCollateralRatio",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_exchangeRouter",
          "type": "address"
        }
      ],
      "name": "setExchangeRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_paybackDeadline",
          "type": "uint256"
        }
      ],
      "name": "setPaybackDeadline",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_punisherReward",
          "type": "uint256"
        }
      ],
      "name": "setPunisherReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "staking",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrappedBitcoin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xa4617c888d8e4fdc92a2222c04f5ff1e8d37f4eef07ef4bbd8790b6eb7bc035e",
  "receipt": {
    "to": null,
    "from": "0x5364E3557572bd5D5903C0e9C21BE359F2Eac1dA",
    "contractAddress": "0x77bf396455E6552cBD5DB2a4ad94d01a4397Deb6",
    "transactionIndex": 0,
    "gasUsed": "4295890",
    "logsBloom": "0x
    "blockHash": "0x6cb0283687efc637f6677f0e7af7684b1fc39e6ccc279df0b28908cb1fc165c0",
    "transactionHash": "0xa4617c888d8e4fdc92a2222c04f5ff1e8d37f4eef07ef4bbd8790b6eb7bc035e",
    "logs": [],
    "blockNumber": 12331694,
    "cumulativeGasUsed": "4295890",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xd2d0BDa00f2f0B0C64C2c14E8BF7627B7De052f2",
    "0xB4f6A712e212319f43C04824ea7630e55D2867FF",
    "0x0B47E8d6F8Ea758aE125963974b10A016Da8ce36",
    "0x6295e9cd42E6641E4c18063544759adf6fFd6aA9",
    "0x8214210869038ca711A01f73285d963A387bC943",
    "0x85c374D4aece0fe8D63bd131e1fd1d00420aE989",
    10,
    10,
    100,
    10
  ],
  "numDeployments": 1,
  "solcInputHash": "b766d894e7507eaf09e41e8de1c94935",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ccTransferRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_exchangeRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_TeleportDAOToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_liquidityPoolFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_bitcoinRelay\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_punisherReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_paybackDeadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_collateralRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_instantFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bitcoinAmount\",\"type\":\"uint256\"}],\"name\":\"PaybackInstantLoan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slashedAmount\",\"type\":\"uint256\"}],\"name\":\"PunishUser\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TeleportDAOToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WAVAX\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wrappedBitcoinAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bitcoinInstantPool\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bitcoinRelay\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ccTransferRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"debts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"wrappedBitcoinAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"instantCCExchange\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"instantCCExchangeWithPermit\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"instantCCTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"instantCCTransferWithPermit\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"isUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityPoolFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bitcoinAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"payBackInstantTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paybackDeadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"debtIndex\",\"type\":\"uint256[]\"}],\"name\":\"punishUser\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"instantPoolTokenAmount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"messageHash\",\"type\":\"bytes32\"}],\"name\":\"requestCollateralAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requests\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"wrappedBitcoinAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"creationTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"paybackDeadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isPaidback\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isUsed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_ccTransferRouter\",\"type\":\"address\"}],\"name\":\"setCCTransferRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_paybackDeadline\",\"type\":\"uint256\"}],\"name\":\"setCollateralRatio\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchangeRouter\",\"type\":\"address\"}],\"name\":\"setExchangeRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_paybackDeadline\",\"type\":\"uint256\"}],\"name\":\"setPaybackDeadline\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_punisherReward\",\"type\":\"uint256\"}],\"name\":\"setPunisherReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"staking\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedBitcoin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/routers/InstantRouter.sol\":\"InstantRouter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/erc20/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\",\"keccak256\":\"0x9487ba287d6d9b15151de0ac35dfd739366f830c44205edbab7c4298166f7a47\",\"license\":\"MIT\"},\"contracts/erc20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.6;\\n\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./Context.sol\\\";\\nimport '../libraries/SafeMath.sol';\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint;\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_, uint initialMintedAmount) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        if (initialMintedAmount > 0) {\\n            _mint(msg.sender, initialMintedAmount);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        // require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\",\"keccak256\":\"0xd3fbcc112f6825c2c4505b86c1c20f84782d5f0a3689a707e7b7d946a8600a28\",\"license\":\"MIT\"},\"contracts/erc20/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: <SPDX-License>\\npragma solidity 0.7.6;\\n\\ninterface IERC20 {\\n    // events\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    // read-only functions\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    // state-changing functions\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xbfce47b32957e65d24a0a087221880a77cde7bd13f0bb3af913cb9b0877ddad5\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: <SPDX-License>\\npragma solidity 0.7.6;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMath {\\n    function add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x, 'ds-math-add-overflow');\\n    }\\n\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\\n    }\\n\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\\n    }\\n    \\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b; //TODO: edit it\\n    }\\n}\\n\",\"keccak256\":\"0x8d7c458d27f34a0512d902ee3b662022a586ce1c27a79a0c260c676fd55c454d\"},\"contracts/libraries/TeleportDAOLibrary.sol\":{\"content\":\"// SPDX-License-Identifier: <SPDX-License>\\npragma solidity 0.7.6;\\n\\nimport '../pools/interfaces/ILiquidityPool.sol';\\nimport '../pools/interfaces/ILiquidityPoolFactory.sol';\\nimport \\\"./SafeMath.sol\\\";\\n\\nlibrary TeleportDAOLibrary {\\n    using SafeMath for uint;\\n\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB) internal pure returns (address token0, address token1) {\\n        require(tokenA != tokenB, 'TeleportDAOLibrary: IDENTICAL_ADDRESSES');\\n        (token0, token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\n        require(token0 != address(0), 'TeleportDAOLibrary: ZERO_ADDRESS');\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    // function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\\n    //     (address token0, address token1) = sortTokens(tokenA, tokenB);\\n    //     pair = address(uint(keccak256(abi.encodePacked(\\n    //             hex'ff',\\n    //             factory,\\n    //             keccak256(abi.encodePacked(token0, token1)),\\n    //             hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f' // init code hash\\n    //         ))));\\n    // }\\n    \\n    //Instead of TeleportDAOLibrary\\n    function pairFor(address factory, address tokenA, address tokenB) internal view returns (address pair) {\\n        // (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = ILiquidityPoolFactory(factory).getLiquidityPool(tokenA, tokenB);\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    // function getReserves(address factory, address tokenA, address tokenB) internal view returns (uint reserveA, uint reserveB) {\\n    //     (address token0,) = sortTokens(tokenA, tokenB);\\n    //     (uint reserve0, uint reserve1,) = ITeleportDAOPair(pairFor(factory, tokenA, tokenB)).getReserves();\\n    //     (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n    // }\\n    \\n    //Instead of TeleportDAOLibrary\\n    function getReserves(address factory, address tokenA, address tokenB) internal returns (uint reserveA, uint reserveB) {\\n        (address token0,) = sortTokens(tokenA, tokenB);\\n        (uint reserve0, uint reserve1,) = ILiquidityPool(pairFor(factory, tokenA, tokenB)).getReserves();\\n        (reserveA, reserveB) = tokenA == token0 ? (reserve0, reserve1) : (reserve1, reserve0);\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(uint amountA, uint reserveA, uint reserveB) internal pure returns (uint amountB) {\\n        require(amountA > 0, 'TeleportDAOLibrary: INSUFFICIENT_AMOUNT');\\n        require(reserveA > 0 && reserveB > 0, 'TeleportDAOLibrary: INSUFFICIENT_LIQUIDITY');\\n        amountB = amountA.mul(reserveB) / reserveA;\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) internal pure returns (uint amountOut) {\\n        require(amountIn > 0, 'TeleportDAOLibrary: INSUFFICIENT_INPUT_AMOUNT');\\n        require(reserveIn > 0 && reserveOut > 0, 'TeleportDAOLibrary: INSUFFICIENT_LIQUIDITY');\\n        uint amountInWithFee = amountIn.mul(997);\\n        uint numerator = amountInWithFee.mul(reserveOut);\\n        uint denominator = reserveIn.mul(1000).add(amountInWithFee);\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) internal pure returns (uint amountIn) {\\n        require(amountOut > 0, 'TeleportDAOLibrary: INSUFFICIENT_OUTPUT_AMOUNT');\\n        require(reserveIn > 0 && reserveOut > 0, 'TeleportDAOLibrary: INSUFFICIENT_LIQUIDITY');\\n        uint numerator = reserveIn.mul(amountOut).mul(1000);\\n        uint denominator = reserveOut.sub(amountOut).mul(997);\\n        amountIn = (numerator / denominator).add(1);\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    // function getAmountsOut(address factory, uint amountIn, address[] memory path) internal view returns (uint[] memory amounts) {\\n    //     require(path.length >= 2, 'TeleportDAOLibrary: INVALID_PATH');\\n    //     amounts = new uint[](path.length);\\n    //     amounts[0] = amountIn;\\n    //     for (uint i; i < path.length - 1; i++) {\\n    //         (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\\n    //         amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n    //     }\\n    // }\\n    \\n    //Instead of TeleportDAOLibrary\\n    function getAmountsOut(address factory, uint amountIn, address[] memory path) internal returns (uint[] memory amounts) {\\n        require(path.length >= 2, 'TeleportDAOLibrary: INVALID_PATH');\\n        amounts = new uint[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint i; i < path.length - 1; i++) {\\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i], path[i + 1]);\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // performs chained getAmountIn calculations on any number of pairs\\n    // function getAmountsIn(address factory, uint amountOut, address[] memory path) internal view returns (uint[] memory amounts) {\\n    //     require(path.length >= 2, 'TeleportDAOLibrary: INVALID_PATH');\\n    //     amounts = new uint[](path.length);\\n    //     amounts[amounts.length - 1] = amountOut;\\n    //     for (uint i = path.length - 1; i > 0; i--) {\\n    //         (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\\n    //         amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n    //     }\\n    // }\\n    \\n    //Instead of TeleportDAOLibrary\\n    function getAmountsIn(address factory, uint amountOut, address[] memory path) internal returns (uint[] memory amounts) {\\n        require(path.length >= 2, 'TeleportDAOLibrary: INVALID_PATH');\\n        amounts = new uint[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint i = path.length - 1; i > 0; i--) {\\n            (uint reserveIn, uint reserveOut) = getReserves(factory, path[i - 1], path[i]);\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x03a5272548efe0c985e326d3b480dd2a2c780d2b021b48ebbaa74eeca8b462bd\"},\"contracts/pools/InstantPool.sol\":{\"content\":\"pragma solidity ^0.7.6;\\n\\nimport './interfaces/IInstantPool.sol';\\nimport '../libraries/SafeMath.sol';\\nimport '../erc20/ERC20.sol';\\n\\ncontract InstantPool is IInstantPool, ERC20{\\n\\n  using SafeMath for uint256;\\n  address public override wrappedBitcoin;\\n  address public instantRouter;\\n  address public override owner;\\n  mapping (address => uint256) private _balances;\\n  mapping (address => mapping (address => uint256)) private _allowances;\\n  uint256 private _totalSupply;\\n  string private _name;\\n  string private _symbol;\\n  uint public override instantFee; // percentage of total amount \\n\\n  modifier onlyOwner {\\n    require(msg.sender == owner);\\n    _;\\n  }\\n\\n  constructor(\\n    address _instantRouter, \\n    address _wrappedBitcoin, \\n    string memory _name, \\n    string memory _symbol,\\n    address _owner,\\n    uint _instantFee\\n  ) ERC20(_name, _symbol, 0) public {\\n    instantRouter = _instantRouter;\\n    wrappedBitcoin = _wrappedBitcoin;\\n    owner = _owner;\\n    instantFee = _instantFee;\\n  }\\n\\n  function changeOwner(address _owner) external override onlyOwner {\\n    owner = _owner;\\n  }\\n\\n  function setInstantRouter(address _instantRouter) external override onlyOwner {\\n    instantRouter = _instantRouter;\\n  }\\n\\n  function setInstantFee (uint _instantFee) external override onlyOwner {\\n    instantFee = _instantFee;\\n  }\\n    \\n  function addLiquidity(address user, uint wrappedBitcoinAmount) external override returns(uint) {\\n    uint liquidity;\\n    uint totalWrappedBitcoin = totalWrappedBitcoin();\\n    if (totalWrappedBitcoin == 0) {\\n      liquidity = wrappedBitcoinAmount;\\n    } else {\\n      liquidity = wrappedBitcoinAmount*_totalSupply/totalWrappedBitcoin;\\n    }\\n    IERC20(wrappedBitcoin).transferFrom(msg.sender, address(this), wrappedBitcoinAmount);\\n    _mint(user, liquidity); // mint instant pool token for user\\n    emit AddLiquidity(user, wrappedBitcoinAmount);\\n    return wrappedBitcoinAmount;\\n  }\\n\\n  function removeLiquidity(address user, uint instantPoolTokenAmount) external override returns(uint){\\n    require(_balances[msg.sender] >= instantPoolTokenAmount, \\\"balance is not sufficient\\\"); // cannot burn more than his ip token balance\\n    uint userShare = (instantPoolTokenAmount*totalWrappedBitcoin())/_totalSupply;\\n    IERC20(wrappedBitcoin).transfer(msg.sender, userShare); // give msg.sender his share of fees\\n    _burn(msg.sender, instantPoolTokenAmount); \\n    emit RemoveLiquidity(msg.sender, userShare);\\n    return userShare;\\n  }\\n  \\n  function instantTransfer(address user, uint amount) override external returns(bool){\\n    require(msg.sender == instantRouter, \\\"sender is not instant router\\\");\\n    uint transferredAmount = amount*(100-instantFee)/100; // get instant fee from user\\n    IERC20(wrappedBitcoin).transfer(user, transferredAmount);\\n    emit InstantTransfer(user, amount, transferredAmount);\\n    return true;\\n  }\\n  \\n  function totalWrappedBitcoin() override public view returns(uint){\\n    return IERC20(wrappedBitcoin).balanceOf(address(this));\\n  }\\n     \\n}\",\"keccak256\":\"0xf30620fef9321a9f2a7967c38002dc721a27b4858cc5364b447b6389d48b1103\"},\"contracts/pools/interfaces/IInstantPool.sol\":{\"content\":\"pragma solidity ^0.7.6;\\n\\nimport '../../erc20/interfaces/IERC20.sol';\\n\\ninterface IInstantPool is IERC20{\\n  // events\\n  event AddLiquidity(address user, uint wrappedBitcoinAmount); \\n  event RemoveLiquidity(address user, uint wrappedBitcoinAmount);\\n  event InstantTransfer(address user, uint256 requestedAmount, uint transferredAmount);\\n\\n  // read-only functions\\n  function owner() external view returns (address);\\n  function wrappedBitcoin() external view returns (address);\\n  function totalWrappedBitcoin() external view returns(uint);\\n  function instantFee() external view returns(uint);\\n  \\n  // state-changing fucntions\\n  function changeOwner(address _owner) external;\\n  function setInstantRouter(address _instantRouter) external;\\n  function setInstantFee(uint _instantFee) external;\\n  function addLiquidity(address user, uint wrappedBitcoinAmount) external returns(uint);\\n  function removeLiquidity(address user, uint instantPoolTokenAmount) external returns (uint);\\n  function instantTransfer(address user, uint amount) external returns(bool);\\n}\",\"keccak256\":\"0xc2b97f8754264233288acaf27f9a5734be9f134d02b307a5496b6358cbdcec63\"},\"contracts/pools/interfaces/ILiquidityPool.sol\":{\"content\":\"// SPDX-License-Identifier: <SPDX-License>\\npragma solidity 0.7.6;\\n\\nimport '../../erc20/interfaces/IERC20.sol';\\n\\ninterface ILiquidityPool is IERC20 {\\n    // events\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n    // read-only functions\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n    // state-changing functions\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n    // function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x38d1961bb850ffcc3bccd3de2803e231b1b3fd5bbea9b85875dd005afc600181\"},\"contracts/pools/interfaces/ILiquidityPoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: <SPDX-License>\\npragma solidity 0.7.6;\\n\\ninterface ILiquidityPoolFactory {\\n    // events\\n    event LiquidityPoolCreated(address indexed token0, address indexed token1, address pair, uint liquidityPoolsLength);\\n\\n    // read-only functions\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n    function getLiquidityPool(address tokenA, address tokenB) external view returns (address pair);\\n    function allLiquidityPools(uint number) external view returns (address pair);\\n    function allLiquidityPoolsLength() external view returns (uint);\\n\\n    // state-changing functions\\n    function createLiquidityPool(address tokenA, address tokenB) external returns (address pair);\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0x11e8a406afd3e558ca821261ed8ab8745c595f948353cf71af72b85f8f880d6e\"},\"contracts/relay/interfaces/IBitcoinRelay.sol\":{\"content\":\"pragma solidity 0.7.6;\\n\\ninterface IBitcoinRelay {\\n    // structures\\n    struct blockHeader{\\n        bytes32 selfHash;\\n\\t\\tbytes32 parentHash;\\n\\t\\tbytes32 merkleRoot;\\n    }\\n\\n    // events\\n    event BlockAdded(uint256 firstHeight, uint256 lastHeight, address relayer, uint rewardAmount, bool isTDT);\\n    event NewTip(bytes32 indexed _from, bytes32 indexed _to, bytes32 indexed _gcd);\\n\\n    // read-only functions\\n    function owner() external view returns (address);\\n    function getCurrentEpochDifficulty() external view returns (uint256);\\n    function getPrevEpochDifficulty() external view returns (uint256);\\n    function getRelayGenesis() external view returns (bytes32);\\n    function getBestKnownDigest() external view returns (bytes32);\\n    function getLastReorgCommonAncestor() external view returns (bytes32);\\n    function initialHeight() external view returns(uint);\\n    function lastSubmittedHeight() external view returns(uint);\\n    function finalizationParameter() external view returns(uint);\\n    function TeleportDAOToken() external view returns(address);\\n\\tfunction feeRatio() external view returns(uint);\\n\\tfunction epochLength() external view returns(uint);\\n\\tfunction lastEpochQueries() external view returns(uint);\\n\\tfunction baseQueries() external view returns(uint);\\n\\tfunction submissionGasUsed() external view returns(uint);\\n\\t// function chain(uint) external returns(blockHeader[] memory);\\n\\tfunction getBlockHeaderHash (uint height, uint index) external returns(bytes32);\\n\\tfunction getNumberOfSubmittedHeaders (uint height) external view returns (uint);\\n\\t// function availableTDT() external view returns(uint);\\n    // function availableTNT() external view returns(uint);\\n\\tfunction lastBuyBack() external view returns(uint);\\n\\tfunction buyBackPeriod() external view returns(uint);\\n\\tfunction exchangeRouter() external view returns(address);\\n\\tfunction WAVAX() external view returns(address);\\n    function findHeight(bytes32 _digest) external view returns (uint256);\\n    function findAncestor(bytes32 _digest, uint256 _offset) external view returns (bytes32);\\n    function isAncestor(bytes32 _ancestor, bytes32 _descendant, uint256 _limit) external view returns (bool);\\n\\n    // state-changing functions\\n    function changeOwner(address _owner) external;\\n    function setFinalizationParameter(uint _finalizationParameter) external;\\n    function setFeeRatio(uint _feeRatio) external;\\n    function setEpochLength(uint _epochLength) external;\\n    function setBuyBackPeriod(uint _buyBackPeriod) external;\\n    function setBaseQueries(uint _baseQueries) external;\\n    function setSubmissionGasUsed(uint _submissionGasUsed) external;\\n    function setExchangeRouter(address _exchangeRouter) external;\\n    function checkTxProof(\\n        bytes32 txid,\\n        uint blockHeight,\\n        bytes calldata intermediateNodes,\\n        uint index,\\n        bool payWithTDT,\\n        uint neededConfirmations\\n    ) external returns (bool);\\n    function addHeaders(bytes calldata _anchor, bytes calldata _headers) external returns (bool);\\n    function addHeadersWithRetarget(\\n        bytes calldata _oldPeriodStartHeader,\\n        bytes calldata _oldPeriodEndHeader,\\n        bytes calldata _headers\\n    ) external returns (bool);\\n    function markNewHeaviest(\\n        bytes32 _ancestor,\\n        bytes calldata _currentBest,\\n        bytes calldata _newBest,\\n        uint256 _limit\\n    ) external returns (bool);\\n    function calculateTxId (\\n        bytes4 _version,\\n        bytes memory _vin,\\n        bytes memory _vout,\\n        bytes4 _locktime\\n    ) external returns(bytes32);\\n\\n}\",\"keccak256\":\"0x3b8ad1a1ea89e7fb16e802ad6afb59bbca9bd991242aeb8385c09dad77563851\"},\"contracts/routers/InstantRouter.sol\":{\"content\":\"pragma solidity 0.7.6;\\n\\n\\nimport '../libraries/TeleportDAOLibrary.sol';\\nimport '../libraries/SafeMath.sol';\\nimport './interfaces/IInstantRouter.sol';\\nimport './interfaces/IExchangeRouter.sol';\\nimport './interfaces/ICCTransferRouter.sol';\\nimport '../pools/interfaces/IInstantPool.sol';\\nimport '../erc20/interfaces/IERC20.sol';\\nimport '../pools/interfaces/IInstantPool.sol';\\nimport '../pools/InstantPool.sol';\\nimport '../staking/interfaces/IStaking.sol';\\nimport \\\"../relay/interfaces/IBitcoinRelay.sol\\\";\\nimport 'hardhat/console.sol';\\n\\ncontract InstantRouter is IInstantRouter {\\n    \\n    using SafeMath for uint;\\n    // mapping(address => uint) override public lockedTDT;\\n    mapping(bytes32 => InstantTransferRequest) public requests;\\n    mapping(bytes32 => bool) public isUsed;\\n    mapping(address => debt[]) public debts;\\n    uint punisherReward;\\n    uint override public paybackDeadline; // this is the deadline for paying back the borrowed amount \\n    address public liquidityPoolFactory;\\n    address public override wrappedBitcoin;\\n    address public override ccTransferRouter;\\n    address public override bitcoinInstantPool;\\n    address public TeleportDAOToken;\\n    address public WAVAX;\\n    address public exchangeRouter;\\n    address public staking;\\n    address public bitcoinRelay;\\n    uint public override collateralRatio; // multplied by 100\\n    address public override owner; \\n    \\n    modifier onlyOwner {\\n        require(msg.sender == owner);\\n        _;\\n    }\\n\\n    constructor (\\n        address _ccTransferRouter,\\n        address _exchangeRouter,\\n        address _TeleportDAOToken, \\n        address _liquidityPoolFactory, \\n        address _staking,\\n        address _bitcoinRelay,\\n        uint _punisherReward,\\n        uint _paybackDeadline,\\n        uint _collateralRatio,\\n        uint _instantFee\\n    ) public {\\n        ccTransferRouter = _ccTransferRouter;\\n        wrappedBitcoin = ICCTransferRouter(ccTransferRouter).wrappedBitcoin();\\n        exchangeRouter = _exchangeRouter;\\n        WAVAX = IExchangeRouter(exchangeRouter).WAVAX();\\n        TeleportDAOToken = _TeleportDAOToken;\\n        staking = _staking;\\n        bitcoinRelay = _bitcoinRelay;\\n        punisherReward = _punisherReward;\\n        liquidityPoolFactory = _liquidityPoolFactory;\\n        paybackDeadline = _paybackDeadline;\\n        collateralRatio = _collateralRatio;\\n        InstantPool _bitcoinInstantPool;\\n        _bitcoinInstantPool = new InstantPool(\\n            address(this), \\n            wrappedBitcoin, \\n            \\\"BitcoinInstantPoolToken\\\", \\n            \\\"BIPT\\\", \\n            msg.sender, \\n            _instantFee\\n        );\\n        bitcoinInstantPool = address(_bitcoinInstantPool);\\n        owner = msg.sender;\\n    }\\n\\n    function changeOwner(address _owner) external override onlyOwner {\\n        owner = _owner;\\n    }\\n    \\n    function setExchangeRouter (address _exchangeRouter) external override onlyOwner {\\n        exchangeRouter = _exchangeRouter;\\n        WAVAX = IExchangeRouter(exchangeRouter).WAVAX();\\n    }\\n\\n    function setCCTransferRouter (address _ccTransferRouter) external override onlyOwner {\\n        ccTransferRouter = _ccTransferRouter;\\n    }\\n\\n    function setPaybackDeadline (uint _paybackDeadline) external override onlyOwner {\\n        paybackDeadline = _paybackDeadline;\\n    }\\n\\n    function setPunisherReward (uint _punisherReward) external override onlyOwner {\\n        punisherReward = _punisherReward;\\n    }\\n\\n    function setCollateralRatio (uint _paybackDeadline) external override onlyOwner {\\n        paybackDeadline = _paybackDeadline;\\n    }\\n\\n    function requestCollateralAmount (bytes32 messageHash) public view override returns(uint) {\\n        return requests[messageHash].collateralAmount;\\n    }\\n\\n    function addLiquidity(address user, uint wrappedBitcoinAmount) public override returns(uint) {\\n        IERC20(wrappedBitcoin).transferFrom(msg.sender, address(this), wrappedBitcoinAmount);\\n        // InstantRouter allows instantPool to transfer from it \\n        IERC20(wrappedBitcoin).approve(bitcoinInstantPool, wrappedBitcoinAmount);\\n        return IInstantPool(bitcoinInstantPool).addLiquidity(user, wrappedBitcoinAmount);\\n    }\\n\\n    function removeLiquidity(address user, uint instantPoolTokenAmount) public override returns(uint) {\\n        uint ipBalance = IInstantPool(bitcoinInstantPool).balanceOf(msg.sender);\\n        require(ipBalance >= instantPoolTokenAmount, \\\"instant pool token is not enough\\\");\\n        // send ipToken to InstantRouter\\n        IInstantPool(bitcoinInstantPool).transferFrom(msg.sender, address(this), instantPoolTokenAmount);\\n        // remove liquidity from instant pool\\n        return IInstantPool(bitcoinInstantPool).removeLiquidity(user, instantPoolTokenAmount); \\n    }\\n\\n    function _instantTransfer (\\n        address user, \\n        address receiver, \\n        uint amount, \\n        uint deadline,\\n        bytes32 messageHash\\n    ) internal returns(bool) {\\n        require(deadline >= block.number, \\\"deadline has passed\\\");\\n        uint _requiredTDT = requiredTDT(amount)*(collateralRatio/100);\\n        uint requiredStakingShare = IStaking(staking).equivalentStakingShare(_requiredTDT);\\n        uint userStakingShare = IStaking(staking).stakingShare(user);\\n        require(userStakingShare >= requiredStakingShare,\\\"TDT staked amount is not sufficient\\\");\\n        IStaking(staking).unstake(user, requiredStakingShare);\\n        // transfer wrappedBitcoin to user \\n        require(\\n            IInstantPool(bitcoinInstantPool).instantTransfer(receiver, amount), \\n            \\\"transfer was not succesfull\\\"\\n        ); \\n        debt memory _debt;\\n        _debt.user = user;\\n        _debt.wrappedBitcoinAmount = amount;\\n        _debt.collateralAmount = _requiredTDT;\\n        _debt.deadline = IBitcoinRelay(bitcoinRelay).lastSubmittedHeight() + paybackDeadline;\\n        debts[user].push(_debt);\\n        isUsed[messageHash] = true;\\n\\n    }\\n\\n    function _instantExchange (\\n        address user, \\n        address receiver, \\n        uint amountIn, \\n        uint amountOutMin,\\n        address[] memory path,\\n        uint deadline,\\n        bytes32 messageHash\\n    ) internal returns(uint[] memory amounts, bool result) {\\n        require(deadline >= block.number, \\\"deadline has passed\\\");\\n        // check that path[0] is wrapped bitcoin\\n        require(path[0] == wrappedBitcoin, \\\"input token is not correct\\\");\\n        // check that the signer has locked enough TDT\\n        uint _requiredTDT = requiredTDT(amountIn)*(collateralRatio/100);\\n        uint requiredStakingShare = IStaking(staking).equivalentStakingShare(_requiredTDT);\\n        require(IStaking(staking).stakingShare(user) >= requiredStakingShare,\\\"TDT staked amount is not sufficient\\\");\\n        IStaking(staking).unstake(user, requiredStakingShare);\\n        // transfer wrappedBitcoin to the instant router\\n        require(\\n            IInstantPool(bitcoinInstantPool).instantTransfer(address(this), amountIn), \\n            \\\"transfer was not succesfull\\\"\\n        ); \\n        debt memory _debt;\\n        _debt.user = user;\\n        _debt.wrappedBitcoinAmount = amountIn;\\n        _debt.collateralAmount = _requiredTDT;\\n        _debt.deadline = IBitcoinRelay(bitcoinRelay).lastSubmittedHeight() + paybackDeadline;\\n        debts[user].push(_debt);\\n        isUsed[messageHash] = true;\\n        // reduce the instant fee from amountIn\\n        amountIn = amountIn*(100-InstantPool(bitcoinInstantPool).instantFee())/100;\\n        // give allowance to exchangeRouter\\n        IERC20(path[0]).approve(exchangeRouter, amountIn);\\n        // call exchangeRouter\\n        if (path[path.length-1] == WAVAX) {\\n            (amounts, result) = IExchangeRouter(exchangeRouter).swapExactTokensForAVAX(\\n                amountIn,\\n                amountOutMin,\\n                path,\\n                receiver,\\n                deadline\\n            );\\n        } else {\\n            (amounts, result) = IExchangeRouter(exchangeRouter).swapExactTokensForTokens(\\n                amountIn,\\n                amountOutMin,\\n                path,\\n                receiver,\\n                deadline\\n            );\\n        }\\n\\n    }\\n    \\n    function instantCCTransfer (address receiver, uint amount, uint deadline) public override returns (bool) {\\n        bytes32 messageHash = keccak256(abi.encodePacked(msg.sender, amount, deadline));\\n        _instantTransfer(msg.sender, receiver, amount, deadline, messageHash);\\n    }\\n\\n    // TODO: give time to user to pay back the instant transfer based on the last finalized block header of the relay\\n    // user signs the request using the target blockchain wallet\\n    function instantCCTransferWithPermit (\\n        address signer,\\n        bytes memory signature,\\n        address receiver, \\n        uint amount,\\n        uint deadline\\n    ) public override returns(bool) {\\n        bytes32 messageHash = keccak256(abi.encodePacked(signer, amount, deadline));\\n        // require(requests[messageHash].isUsed == false, \\\"request has been executed before\\\");\\n        require(isUsed[messageHash] == false, \\\"request has been executed before\\\");\\n        require(\\n            verifySignature(signer, signature, messageHash),\\n            \\\"signature is not valid\\\"\\n        );\\n        _instantTransfer(signer, receiver, amount, deadline, messageHash);\\n    }\\n\\n    function instantCCExchange (\\n        uint amountIn, \\n        uint amountOutMin, \\n        address[] memory path, \\n        address receiver, \\n        uint deadline\\n    ) public override returns(uint[] memory amounts, bool result) {\\n        bytes32 messageHash = keccak256(\\n            abi.encodePacked(amountIn, amountOutMin, path[path.length-1], msg.sender, deadline)\\n        );\\n        return _instantExchange(msg.sender, receiver, amountIn, amountOutMin, path, deadline, messageHash);\\n    }\\n\\n    function instantCCExchangeWithPermit(\\n        address signer,\\n        bytes memory signature,\\n        uint amountIn, \\n        uint amountOutMin, \\n        address[] memory path, \\n        address receiver, \\n        uint deadline\\n    ) public override returns(uint[] memory amounts, bool result) {\\n        bytes32 messageHash = keccak256(\\n            abi.encodePacked(amountIn, amountOutMin, path[path.length-1], receiver, deadline)\\n        );\\n        require(isUsed[messageHash] == false, \\\"request has been executed before\\\");\\n        // require(requests[messageHash].isUsed == false, \\\"request has been executed before\\\");\\n        // verify the correctness of signature\\n        require(\\n            verifySignature(signer, signature, messageHash),\\n            \\\"signature is not valid\\\"\\n        );\\n        return _instantExchange(signer, receiver, amountIn, amountOutMin, path, deadline, messageHash);\\n    }\\n\\n    function payBackInstantTransfer (uint bitcoinAmount, address user) public override returns (bool) {\\n\\n        uint unlockedCollateralAmount;\\n        uint _bitcoinAmount = bitcoinAmount;\\n        uint lastSubmittedHeight = IBitcoinRelay(bitcoinRelay).lastSubmittedHeight();\\n        for (uint i = 0; i < debts[user].length; i++) {\\n            if (_bitcoinAmount >= debts[user][i].wrappedBitcoinAmount && debts[user][i].deadline >= lastSubmittedHeight) {\\n                IERC20(wrappedBitcoin).transferFrom(msg.sender, bitcoinInstantPool, debts[user][i].wrappedBitcoinAmount);\\n                unlockedCollateralAmount = unlockedCollateralAmount + debts[user][i].collateralAmount;\\n                _bitcoinAmount = _bitcoinAmount - debts[user][i].wrappedBitcoinAmount;\\n                // delete debt after user pay it\\n                delete debts[user][i];\\n            } else if (debts[user][i].deadline <= lastSubmittedHeight) {\\n                IERC20(wrappedBitcoin).transferFrom(ccTransferRouter, bitcoinInstantPool, _bitcoinAmount);\\n                debts[user][i].wrappedBitcoinAmount = debts[user][i].wrappedBitcoinAmount - _bitcoinAmount;\\n                _bitcoinAmount = 0;\\n                break;\\n            }\\n        }\\n        \\n        if (_bitcoinAmount > 0) {\\n            IERC20(wrappedBitcoin).transferFrom(msg.sender, user, _bitcoinAmount);\\n        }\\n\\n        // stake the unlocked collateral\\n        if (unlockedCollateralAmount > 0) {\\n            IERC20(TeleportDAOToken).approve(staking, unlockedCollateralAmount);\\n            IStaking(staking).stake(user, unlockedCollateralAmount);\\n        }\\n\\n        emit PaybackInstantLoan(user, bitcoinAmount);\\n        return true;\\n\\n    }\\n\\n    function requiredTDT (uint wrappedBitcoinAmount) private returns(uint){\\n        (uint wrappedBitcoinReserve, uint TeleportDAOTokenReserve) = TeleportDAOLibrary.getReserves(\\n            liquidityPoolFactory, \\n            wrappedBitcoin, \\n            TeleportDAOToken);\\n        uint _requiredTDT = TeleportDAOLibrary.getAmountIn(wrappedBitcoinAmount, TeleportDAOTokenReserve, wrappedBitcoinReserve);\\n        return _requiredTDT;\\n    }\\n\\n    function punishUser (address user, uint[] memory debtIndex) override external returns (bool) {\\n        \\n        require(debts[user].length >= debtIndex.length, \\\"too many indexes\\\");\\n        uint wrappedBitcoinAmount;\\n        uint collateralAmount;\\n        uint lastSubmittedHeight = IBitcoinRelay(bitcoinRelay).lastSubmittedHeight();\\n        \\n        for (uint i = 0; i < debtIndex.length; i++) {\\n            require(debts[user][debtIndex[i]].deadline < lastSubmittedHeight, \\\"deadline has not passed\\\");\\n            wrappedBitcoinAmount = wrappedBitcoinAmount + debts[user][debtIndex[i]].wrappedBitcoinAmount;\\n            collateralAmount = collateralAmount + debts[user][debtIndex[i]].collateralAmount;\\n            delete debts[user][debtIndex[i]];\\n            // TODO: delete operation leaves gaps. remove gaps\\n        }\\n        uint _requiredTDT = requiredTDT(wrappedBitcoinAmount); // needed TDT amount to buy wrappedBitcoin\\n        // address[] memory path;\\n        address[] memory path = new address[](2);\\n        path[0] = TeleportDAOToken;\\n        path[1] = wrappedBitcoin;\\n        buyWrappedBitcoinUsingTDT(\\n            _requiredTDT, \\n            wrappedBitcoinAmount,\\n            path,\\n            bitcoinInstantPool, \\n            2*block.timestamp\\n        );\\n       \\n        // send rest of TDT to TeleportDAOTreasury and punisher \\n        uint remainedTDT = collateralAmount - _requiredTDT;\\n        IERC20(TeleportDAOToken).transfer(msg.sender, punisherReward*remainedTDT/100); // send reward to punisher \\n        emit PunishUser(user, wrappedBitcoinAmount);\\n        return true;\\n    }\\n\\n    function buyWrappedBitcoinUsingTDT (\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] memory path,\\n        address to,\\n        uint deadline\\n    ) internal {\\n        IERC20(TeleportDAOToken).approve(exchangeRouter, amountIn);\\n        IExchangeRouter(exchangeRouter).swapExactTokensForTokens(\\n            amountIn,\\n            amountOutMin,\\n            path,\\n            to,\\n            deadline\\n        );\\n    }\\n    // TODO: replace the buyWrappedBitcoinUsingTDT with the below function\\n    function _buyWrappedBitcoinUsingTDT(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] memory path,\\n        address to,\\n        uint deadline\\n    ) internal {\\n        IERC20(TeleportDAOToken).approve(exchangeRouter, amountInMax);\\n        IExchangeRouter(exchangeRouter).swapTokensForExactTokens(\\n            amountOut,\\n            amountInMax,\\n            path,\\n            to,\\n            deadline\\n        ); \\n    }\\n\\n    function verifySignature(\\n        address signer,\\n        bytes memory signature,\\n        bytes32 messageHash\\n    ) internal pure returns (bool) {\\n        bytes32 ethSignedMessageHash = keccak256(\\n            abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", messageHash)\\n        );\\n        return recoverSigner(ethSignedMessageHash, signature) == signer;\\n    }\\n\\n    function recoverSigner(\\n        bytes32 ethSignedMessageHash, \\n        bytes memory signature\\n    ) internal pure returns (address) {\\n        (bytes32 r, bytes32 s, uint8 v) = splitSignature(signature);\\n\\n        return ecrecover(ethSignedMessageHash, v, r, s);\\n    }\\n\\n    function splitSignature(bytes memory signature) internal pure returns (bytes32 r, bytes32 s, uint8 v) {\\n        require(signature.length == 65, \\\"invalid signature length\\\");\\n        assembly {\\n            r := mload(add(signature, 32))\\n            s := mload(add(signature, 64))\\n            v := byte(0, mload(add(signature, 96)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13f63c689bdeb131032545bd9a384c703dbf64774e85a9f1fec3d8f48ace6e44\"},\"contracts/routers/interfaces/ICCTransferRouter.sol\":{\"content\":\"// SPDX-License-Identifier: <SPDX-License>\\npragma solidity ^0.7.6;\\n\\ninterface ICCTransferRouter {\\n\\n  struct wrapRequest {\\n    uint bitcoinAmount;\\n    address recipientAddress;\\n    bool isExchange;\\n    uint teleporterFee; // TODO: should I change it to uint8?\\n    uint256 speed;\\n    bool isUsed;\\n    uint deadline;\\n    uint blockNumber; // only store for fast transfers\\n    bytes intermediateNodes; // only store for fast transfers\\n    uint index; // only store for fast transfers\\n    bool isMinted; // initially is false for fast tranfer\\n    uint exchangeAmount;\\n    address exchangeToken;\\n  }\\n\\n  // events\\n  event CCTransfer(address user, address inputToken, uint inputAmount, uint speed);\\n  event PaybackFastLoan(address user, uint amount);\\n\\n  // read-only functions\\n  function owner() external view returns (address);\\n  function isRequestUsed(bytes32 txId) external view returns(bool);\\n  function isRequestMinted(bytes32 txId) external view returns(bool);\\n  function wrappedBitcoin() external view returns(address);\\n  function bitcoinFastPool() external view returns(address);\\n  function normalConfirmationParameter() external view returns(uint);\\n\\n  // state-changing functions\\n  function changeOwner (address _owner) external;\\n  function setNormalConfirmationParameter (uint _normalConfirmationParameter) external;\\n  function setBitcoinRelay (address _bitcoinRelay) external;\\n  function setFastRouter (address _fastRouter) external;\\n  function setWrappedBitcoin (address _wrappedBitcoin) external returns (bool);\\n  function setInstantRouter (address _instantRouter) external;\\n  function setCCExchangeRouter (address _ccExchangeRouter) external;\\n\\n  function ccTransfer(\\n    bytes4 version,\\n    bytes memory vin,\\n    bytes calldata vout,\\n    bytes4 locktime,\\n    uint256 blockNumber,\\n    bytes calldata intermediateNodes,\\n    uint index,\\n    bool payWithTDT\\n  ) external returns(bool);\\n  function mintAfterFinalization(bytes32 txId) external returns(bool);\\n  function instantCCTransferWithPermit(\\n    address signer,\\n    bytes memory signature,\\n    address receiver,\\n    uint instantTokenAmount,\\n    uint deadline\\n  ) external returns(bool);\\n}\",\"keccak256\":\"0x5d66660880a3baefbd1c6518ef26d375e175ceba302b16617e464b1f11f1bc82\"},\"contracts/routers/interfaces/IExchangeRouter.sol\":{\"content\":\"// SPDX-License-Identifier: <SPDX-License>\\npragma solidity 0.7.6;\\n\\ninterface IExchangeRouter {\\n    // read-only functions\\n    function liquidityPoolFactory() external view returns (address);\\n    // function bitcoinInstantPool() external view returns (address);\\n    // function wrappedBitcoin() external view returns (address);\\n    function WAVAX() external view returns (address);\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external returns (uint[] memory amounts);\\n\\n    // state-changing functions\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityAVAX(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountAVAXMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountAVAX, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityAVAX(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountAVAXMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountAVAX);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts, bool result);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactAVAXForTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint[] memory amounts);\\n    function swapTokensForExactAVAX(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to, uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactTokensForAVAX(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to, uint deadline\\n    ) external returns (uint[] memory amounts, bool result);\\n    function swapAVAXForExactTokens(\\n        uint amountOut,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint[] memory amounts);\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactAVAXForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForAVAXSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\",\"keccak256\":\"0x498fbfb3d4028594c685b3b7c6b6b293bf25ff877399fe54626ae224d3552aa4\"},\"contracts/routers/interfaces/IInstantRouter.sol\":{\"content\":\"pragma solidity >=0.7.6;\\n\\ninterface IInstantRouter {\\n    // structures\\n    struct InstantTransferRequest {\\n        address user;\\n        uint collateralAmount;\\n        uint wrappedBitcoinAmount;\\n        uint creationTime;\\n        uint deadline;\\n        uint paybackDeadline;\\n        bool isPaidback;\\n        bool isUsed;\\n    }\\n    struct debt {\\n        address user;\\n        uint wrappedBitcoinAmount;\\n        uint collateralAmount;\\n        uint deadline;\\n    }\\n\\n    // events\\n    event PaybackInstantLoan(address user, uint bitcoinAmount);\\n    event PunishUser(address user, uint slashedAmount);\\n\\n    // read-only functions\\n    function owner() external view returns(address);\\n    function bitcoinInstantPool() external view returns(address);\\n    function wrappedBitcoin() external view returns(address);\\n    function ccTransferRouter() external view returns(address);\\n    function requestCollateralAmount(bytes32 messageHash) external view returns(uint);\\n    function paybackDeadline() external returns(uint);\\n    function collateralRatio() external returns(uint);\\n\\n    // state-changing functions\\n    function changeOwner(address _owner) external;\\n    function setExchangeRouter(address _ExchangeRouter) external;\\n    function setPaybackDeadline(uint _paybackDeadline) external;\\n    function setCollateralRatio(uint _paybackDeadline) external;\\n    function setCCTransferRouter (address _ccTransferRouter) external;\\n    function setPunisherReward (uint _punisherReward) external;\\n    function addLiquidity(address user, uint instantPoolTokenAmount) external returns(uint);\\n    function removeLiquidity(address user, uint instantPoolTokenAmount) external returns(uint);\\n    function instantCCTransfer (address receiver, uint amount, uint deadline) external returns (bool);\\n    function instantCCTransferWithPermit(\\n        address signer,\\n        bytes memory signature,\\n        address receiver,\\n        uint amount,\\n        uint nonce\\n    ) external returns(bool);\\n    function instantCCExchange (\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] memory path,\\n        address receiver,\\n        uint deadline\\n    ) external returns(uint[] memory amounts, bool result);\\n    function instantCCExchangeWithPermit(\\n        address signer,\\n        bytes memory signature,\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] memory path,\\n        address receiver,\\n        uint deadline\\n    ) external returns(uint[] memory amounts, bool result);\\n    function payBackInstantTransfer (uint bitcoinAmount, address user) external returns (bool);\\n    function punishUser (address user, uint[] memory debtIndex) external returns (bool);\\n\\n}\",\"keccak256\":\"0xeaabb34c7330bab37bdda379df374ff23fc0636d3aeba9aad5f5754b7242583d\"},\"contracts/staking/interfaces/IStaking.sol\":{\"content\":\"pragma solidity ^0.7.6;\\n\\ninterface IStaking {\\n  // events\\n  event Stake(address user, uint TDTAmount);\\n  event Unstake(address user, uint TDTAmount);\\n\\n  // read-only functions\\n  function owner() external view returns (address);\\n  function TeleportDAOToken() external view returns (address);\\n  function instantRouter() external view returns (address);\\n  function totalStakingShare() external view returns(uint);\\n  function stakedAmount (address user) external returns(uint);\\n  function stakingShare (address user) external returns(uint);\\n  function earnedTDT (address user) external view returns (uint);\\n  \\n  // state-changing fucntions\\n  function changeOwner (address _owner) external;\\n  function setInstantRouter (address _instantRouter) external;\\n  function stake (address user, uint amount) external;\\n  function unstake (address user, uint _stakingShare) external;\\n  function claimReward (address user) external returns (bool);\\n  function equivalentStakingShare (uint TDTAmount) external returns (uint);\\n  function equivalentTDT (uint stakingShare) external returns (uint);\\n}\",\"keccak256\":\"0x35601c5143e0b1f5d359e0aaad2f471e7c0f8516d92b44374403af8560d9c446\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101da5760003560e01c8063838b7ccb11610104578063a6f9dae1116100a2578063e75d75d511610071578063e75d75d51461087e578063f5ded51814610886578063f7459aec1461088e578063fe255a18146108ab576101da565b8063a6f9dae114610816578063a8c15dd81461083c578063aafcad751461086e578063b4eae1cb14610876576101da565b80638da5cb5b116100de5780638da5cb5b1461076e5780639d86698514610776578063a201ccf6146107e2578063a36be9a11461080e576101da565b8063838b7ccb146105cf5780638a0a71c5146105f55780638c99247b146106a6576101da565b80634cf088d91161017c5780636060663e1161014b5780636060663e146104e25780636f81a8011461054557806373b295c2146105a15780637f3c8b21146105a9576101da565b80634cf088d9146104da5780634cf46825146104e25780635615e16f146104ff5780635668870014610507576101da565b80631cb85818116101b85780631cb85818146103235780632f1ed7cb1461032b57806332aa59761461047b5780634324a0001461049a576101da565b806302b0b472146101df578063108f438d146102035780631bfd1c811461020b575b600080fd5b6101e76108c8565b604080516001600160a01b039092168252519081900360200190f35b6101e76108d7565b6102c6600480360360a081101561022157600080fd5b813591602081013591810190606081016040820135600160201b81111561024757600080fd5b82018360208201111561025957600080fd5b803590602001918460208302840111600160201b8311171561027a57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550506001600160a01b0383351693505050602001356108e6565b60405180806020018315158152602001828103825284818151815260200191508051906020019060200280838360005b8381101561030e5781810151838201526020016102f6565b50505050905001935050505060405180910390f35b6101e7610981565b6102c6600480360360e081101561034157600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561036b57600080fd5b82018360208201111561037d57600080fd5b803590602001918460018302840111600160201b8311171561039e57600080fd5b91908080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152509295843595602086013595919450925060608101915060400135600160201b8111156103fc57600080fd5b82018360208201111561040e57600080fd5b803590602001918460208302840111600160201b8311171561042f57600080fd5b919080806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250929550506001600160a01b038335169350505060200135610990565b6104986004803603602081101561049157600080fd5b5035610ae4565b005b6104c6600480360360408110156104b057600080fd5b50803590602001356001600160a01b0316610b00565b604080519115158252519081900360200190f35b6101e7611107565b610498600480360360208110156104f857600080fd5b5035611116565b6101e7611132565b6105336004803603604081101561051d57600080fd5b506001600160a01b038135169060200135611141565b60408051918252519081900360200190f35b6105716004803603604081101561055b57600080fd5b506001600160a01b0381351690602001356112d3565b604080516001600160a01b0390951685526020850193909352838301919091526060830152519081900360800190f35b6101e7611323565b610498600480360360208110156105bf57600080fd5b50356001600160a01b0316611332565b610498600480360360208110156105e557600080fd5b50356001600160a01b031661136b565b6104c66004803603604081101561060b57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b81111561063557600080fd5b82018360208201111561064757600080fd5b803590602001918460208302840111600160201b8311171561066857600080fd5b91908080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525092955061142c945050505050565b6104c6600480360360a08110156106bc57600080fd5b6001600160a01b038235169190810190604081016020820135600160201b8111156106e657600080fd5b8201836020820111156106f857600080fd5b803590602001918460018302840111600160201b8311171561071957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250929550506001600160a01b038335169350505060208101359060400135611861565b6101e761197e565b6107936004803603602081101561078c57600080fd5b503561198d565b604080516001600160a01b0390991689526020890197909752878701959095526060870193909352608086019190915260a0850152151560c0840152151560e083015251908190036101000190f35b610533600480360360408110156107f857600080fd5b506001600160a01b0381351690602001356119e0565b610533611bc3565b6104986004803603602081101561082c57600080fd5b50356001600160a01b0316611bc9565b6104c66004803603606081101561085257600080fd5b506001600160a01b038135169060208101359060400135611c02565b6101e7611c60565b610533611c6f565b6101e7611c75565b6101e7611c84565b610533600480360360208110156108a457600080fd5b5035611c93565b6104c6600480360360208110156108c157600080fd5b5035611ca8565b6008546001600160a01b031681565b6009546001600160a01b031681565b60606000808787876001895103815181106108fd57fe5b6020026020010151338760405160200180868152602001858152602001846001600160a01b031660601b8152601401836001600160a01b031660601b81526014018281526020019550505050505060405160208183030381529060405280519060200120905061097233868a8a8a8987611cbd565b92509250509550959350505050565b600b546001600160a01b031681565b60606000808787876001895103815181106109a757fe5b6020908102919091018101516040805180840195909552848101939093526bffffffffffffffffffffffff19606091821b8116828601529089901b16607484015260888084018890528251808503909101815260a890930182528251928101929092206000818152600190935291205490915060ff1615610a6f576040805162461bcd60e51b815260206004820181905260248201527f7265717565737420686173206265656e206578656375746564206265666f7265604482015290519081900360640190fd5b610a7a8a8a836125bd565b610ac4576040805162461bcd60e51b81526020600482015260166024820152751cda59db985d1d5c99481a5cc81b9bdd081d985b1a5960521b604482015290519081900360640190fd5b610ad38a868a8a8a8987611cbd565b925092505097509795505050505050565b600f546001600160a01b03163314610afb57600080fd5b600355565b600d54604080516302f796d960e41b815290516000928392869284926001600160a01b031691632f796d90916004808301926020929190829003018186803b158015610b4b57600080fd5b505afa158015610b5f573d6000803e3d6000fd5b505050506040513d6020811015610b7557600080fd5b5051905060005b6001600160a01b038616600090815260026020526040902054811015610f2c576001600160a01b0386166000908152600260205260409020805482908110610bc057fe5b9060005260206000209060040201600101548310158015610c1857506001600160a01b0386166000908152600260205260409020805483919083908110610c0357fe5b90600052602060002090600402016003015410155b15610dcf576006546008546001600160a01b0388811660009081526002602052604090208054938216936323b872dd93339316919086908110610c5757fe5b9060005260206000209060040201600101546040518463ffffffff1660e01b815260040180846001600160a01b03168152602001836001600160a01b031681526020018281526020019350505050602060405180830381600087803b158015610cbf57600080fd5b505af1158015610cd3573d6000803e3d6000fd5b505050506040513d6020811015610ce957600080fd5b50506001600160a01b0386166000908152600260205260409020805482908110610d0f57fe5b9060005260206000209060040201600201548401935060026000876001600160a01b03166001600160a01b031681526020019081526020016000208181548110610d5557fe5b9060005260206000209060040201600101548303925060026000876001600160a01b03166001600160a01b031681526020019081526020016000208181548110610d9b57fe5b60009182526020822060049091020180546001600160a01b0319168155600181018290556002810182905560030155610f24565b6001600160a01b0386166000908152600260205260409020805483919083908110610df657fe5b90600052602060002090600402016003015411610f2457600654600754600854604080516323b872dd60e01b81526001600160a01b0393841660048201529183166024830152604482018790525191909216916323b872dd9160648083019260209291908290030181600087803b158015610e7057600080fd5b505af1158015610e84573d6000803e3d6000fd5b505050506040513d6020811015610e9a57600080fd5b50506001600160a01b0386166000908152600260205260409020805484919083908110610ec357fe5b9060005260206000209060040201600101540360026000886001600160a01b03166001600160a01b031681526020019081526020016000208281548110610f0657fe5b90600052602060002090600402016001018190555060009250610f2c565b600101610b7c565b508115610fbc57600654604080516323b872dd60e01b81523360048201526001600160a01b03888116602483015260448201869052915191909216916323b872dd9160648083019260209291908290030181600087803b158015610f8f57600080fd5b505af1158015610fa3573d6000803e3d6000fd5b505050506040513d6020811015610fb957600080fd5b50505b82156110b557600954600c546040805163095ea7b360e01b81526001600160a01b039283166004820152602481018790529051919092169163095ea7b39160448083019260209291908290030181600087803b15801561101b57600080fd5b505af115801561102f573d6000803e3d6000fd5b505050506040513d602081101561104557600080fd5b5050600c54604080516356e4bb9760e11b81526001600160a01b038881166004830152602482018790529151919092169163adc9772e91604480830192600092919082900301818387803b15801561109c57600080fd5b505af11580156110b0573d6000803e3d6000fd5b505050505b604080516001600160a01b03871681526020810188905281517f28520e61686cee221ace76f701c84e093d0d7d515df88144bdce3b0e599423d0929181900390910190a1600193505050505b92915050565b600c546001600160a01b031681565b600f546001600160a01b0316331461112d57600080fd5b600455565b6006546001600160a01b031681565b600654604080516323b872dd60e01b81523360048201523060248201526044810184905290516000926001600160a01b0316916323b872dd91606480830192602092919082900301818787803b15801561119a57600080fd5b505af11580156111ae573d6000803e3d6000fd5b505050506040513d60208110156111c457600080fd5b50506006546008546040805163095ea7b360e01b81526001600160a01b039283166004820152602481018690529051919092169163095ea7b39160448083019260209291908290030181600087803b15801561121f57600080fd5b505af1158015611233573d6000803e3d6000fd5b505050506040513d602081101561124957600080fd5b5050600854604080516256688760e81b81526001600160a01b038681166004830152602482018690529151919092169163566887009160448083019260209291908290030181600087803b1580156112a057600080fd5b505af11580156112b4573d6000803e3d6000fd5b505050506040513d60208110156112ca57600080fd5b50519392505050565b600260205281600052604060002081815481106112ef57600080fd5b600091825260209091206004909102018054600182015460028301546003909301546001600160a01b039092169450925084565b600a546001600160a01b031681565b600f546001600160a01b0316331461134957600080fd5b600780546001600160a01b0319166001600160a01b0392909216919091179055565b600f546001600160a01b0316331461138257600080fd5b600b80546001600160a01b0319166001600160a01b038381169190911791829055604080516339d94ae160e11b8152905192909116916373b295c291600480820192602092909190829003018186803b1580156113de57600080fd5b505afa1580156113f2573d6000803e3d6000fd5b505050506040513d602081101561140857600080fd5b5051600a80546001600160a01b0319166001600160a01b0390921691909117905550565b80516001600160a01b0383166000908152600260205260408120549091111561148f576040805162461bcd60e51b815260206004820152601060248201526f746f6f206d616e7920696e646578657360801b604482015290519081900360640190fd5b6000806000600d60009054906101000a90046001600160a01b03166001600160a01b0316632f796d906040518163ffffffff1660e01b815260040160206040518083038186803b1580156114e257600080fd5b505afa1580156114f6573d6000803e3d6000fd5b505050506040513d602081101561150c57600080fd5b5051905060005b85518110156116e0576001600160a01b0387166000908152600260205260409020865183919088908490811061154557fe5b60200260200101518154811061155757fe5b906000526020600020906004020160030154106115bb576040805162461bcd60e51b815260206004820152601760248201527f646561646c696e6520686173206e6f7420706173736564000000000000000000604482015290519081900360640190fd5b6001600160a01b038716600090815260026020526040902086518790839081106115e157fe5b6020026020010151815481106115f357fe5b9060005260206000209060040201600101548401935060026000886001600160a01b03166001600160a01b0316815260200190815260200160002086828151811061163a57fe5b60200260200101518154811061164c57fe5b9060005260206000209060040201600201548301925060026000886001600160a01b03166001600160a01b0316815260200190815260200160002086828151811061169357fe5b6020026020010151815481106116a557fe5b60009182526020822060049091020180546001600160a01b031916815560018082018390556002820183905560039091019190915501611513565b5060006116ec84612638565b6040805160028082526060820183529293506000929091602083019080368337505060095482519293506001600160a01b03169183915060009061172c57fe5b6001600160a01b03928316602091820292909201015260065482519116908290600190811061175757fe5b6001600160a01b03928316602091820292909201015260085461178491849188918591166002420261267b565b6009546003546040805163a9059cbb60e01b81523360048201526064868903938402046024820152905191926001600160a01b03169163a9059cbb916044808201926020929091908290030181600087803b1580156117e257600080fd5b505af11580156117f6573d6000803e3d6000fd5b505050506040513d602081101561180c57600080fd5b5050604080516001600160a01b038b1681526020810188905281517f3422ace09a4c49424f8dd89efa0bc1c023631ccea374fd574054090605a4f9ab929181900390910190a150600198975050505050505050565b604080516bffffffffffffffffffffffff19606088901b166020808301919091526034820185905260548083018590528351808403909101815260749092018352815191810191909120600081815260019092529181205490919060ff1615611911576040805162461bcd60e51b815260206004820181905260248201527f7265717565737420686173206265656e206578656375746564206265666f7265604482015290519081900360640190fd5b61191c8787836125bd565b611966576040805162461bcd60e51b81526020600482015260166024820152751cda59db985d1d5c99481a5cc81b9bdd081d985b1a5960521b604482015290519081900360640190fd5b6119738786868685612882565b505095945050505050565b600f546001600160a01b031681565b60006020819052908152604090208054600182015460028301546003840154600485015460058601546006909601546001600160a01b039095169593949293919290919060ff8082169161010090041688565b600854604080516370a0823160e01b8152336004820152905160009283926001600160a01b03909116916370a0823191602480820192602092909190829003018186803b158015611a3057600080fd5b505afa158015611a44573d6000803e3d6000fd5b505050506040513d6020811015611a5a57600080fd5b5051905082811015611ab3576040805162461bcd60e51b815260206004820181905260248201527f696e7374616e7420706f6f6c20746f6b656e206973206e6f7420656e6f756768604482015290519081900360640190fd5b600854604080516323b872dd60e01b81523360048201523060248201526044810186905290516001600160a01b03909216916323b872dd916064808201926020929091908290030181600087803b158015611b0d57600080fd5b505af1158015611b21573d6000803e3d6000fd5b505050506040513d6020811015611b3757600080fd5b505060085460408051635100e67b60e11b81526001600160a01b038781166004830152602482018790529151919092169163a201ccf69160448083019260209291908290030181600087803b158015611b8f57600080fd5b505af1158015611ba3573d6000803e3d6000fd5b505050506040513d6020811015611bb957600080fd5b5051949350505050565b60045481565b600f546001600160a01b03163314611be057600080fd5b600f80546001600160a01b0319166001600160a01b0392909216919091179055565b60008033848460405160200180846001600160a01b031660601b81526014018381526020018281526020019350505050604051602081830303815290604052805190602001209050611c573386868685612882565b50509392505050565b600d546001600160a01b031681565b600e5481565b6005546001600160a01b031681565b6007546001600160a01b031681565b60009081526020819052604090206001015490565b60016020526000908152604090205460ff1681565b6060600043841015611d0c576040805162461bcd60e51b8152602060048201526013602482015272191958591b1a5b99481a185cc81c185cdcd959606a1b604482015290519081900360640190fd5b60065485516001600160a01b03909116908690600090611d2857fe5b60200260200101516001600160a01b031614611d8b576040805162461bcd60e51b815260206004820152601a60248201527f696e70757420746f6b656e206973206e6f7420636f7272656374000000000000604482015290519081900360640190fd5b60006064600e5481611d9957fe5b04611da389612638565b0290506000600c60009054906101000a90046001600160a01b03166001600160a01b0316633b845eb9836040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b158015611e0357600080fd5b505af1158015611e17573d6000803e3d6000fd5b505050506040513d6020811015611e2d57600080fd5b5051600c5460408051632848362760e11b81526001600160a01b038f811660048301529151939450849391909216916350906c4e9160248083019260209291908290030181600087803b158015611e8357600080fd5b505af1158015611e97573d6000803e3d6000fd5b505050506040513d6020811015611ead57600080fd5b50511015611eec5760405162461bcd60e51b81526004018080602001828103825260238152602001806132956023913960400191505060405180910390fd5b600c5460408051630615339760e51b81526001600160a01b038e81166004830152602482018590529151919092169163c2a672e091604480830192600092919082900301818387803b158015611f4157600080fd5b505af1158015611f55573d6000803e3d6000fd5b50506008546040805163d084d91760e01b8152306004820152602481018e905290516001600160a01b03909216935063d084d91792506044808201926020929091908290030181600087803b158015611fad57600080fd5b505af1158015611fc1573d6000803e3d6000fd5b505050506040513d6020811015611fd757600080fd5b505161202a576040805162461bcd60e51b815260206004820152601b60248201527f7472616e7366657220776173206e6f742073756363657366756c6c0000000000604482015290519081900360640190fd5b6120326131e4565b6001600160a01b03808d16825260208083018c9052604080840186905260048054600d5483516302f796d960e41b8152935191951693632f796d90938084019391929190829003018186803b15801561208a57600080fd5b505afa15801561209e573d6000803e3d6000fd5b505050506040513d60208110156120b457600080fd5b505101606082019081526001600160a01b038d811660009081526002602081815260408084208054600180820183559186528386208951600492830290910180546001600160a01b031916918916919091178155848a015181840155838a01519581019590955596516003909401939093558b845282825292839020805460ff1916909217909155600854825163623ea8df60e11b81529251606495919094169363c47d51be93808301939290829003018186803b15801561217557600080fd5b505afa158015612189573d6000803e3d6000fd5b505050506040513d602081101561219f57600080fd5b50516064038b02816121ad57fe5b049950876000815181106121bd57fe5b602090810291909101810151600b546040805163095ea7b360e01b81526001600160a01b039283166004820152602481018f90529051919092169263095ea7b392604480820193918290030181600087803b15801561221b57600080fd5b505af115801561222f573d6000803e3d6000fd5b505050506040513d602081101561224557600080fd5b5050600a5488516001600160a01b03909116908990600019810190811061226857fe5b60200260200101516001600160a01b0316141561241957600b60009054906101000a90046001600160a01b03166001600160a01b031663676528d18b8b8b8f8c6040518663ffffffff1660e01b81526004018086815260200185815260200180602001846001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b83811015612318578181015183820152602001612300565b505050509050019650505050505050600060405180830381600087803b15801561234157600080fd5b505af1158015612355573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604090815281101561237e57600080fd5b8101908080516040519392919084600160201b82111561239d57600080fd5b9083019060208201858111156123b257600080fd5b82518660208202830111600160201b821117156123ce57600080fd5b82525081516020918201928201910280838360005b838110156123fb5781810151838201526020016123e3565b505050509190910160405250602001519297509195506125ae915050565b600b60009054906101000a90046001600160a01b03166001600160a01b03166338ed17398b8b8b8f8c6040518663ffffffff1660e01b81526004018086815260200185815260200180602001846001600160a01b03168152602001838152602001828103825285818151815260200191508051906020019060200280838360005b838110156124b257818101518382015260200161249a565b505050509050019650505050505050600060405180830381600087803b1580156124db57600080fd5b505af11580156124ef573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604090815281101561251857600080fd5b8101908080516040519392919084600160201b82111561253757600080fd5b90830190602082018581111561254c57600080fd5b82518660208202830111600160201b8211171561256857600080fd5b82525081516020918201928201910280838360005b8381101561259557818101518382015260200161257d565b5050505091909101604052506020015192975091955050505b50505097509795505050505050565b6000808260405160200180807f19457468657265756d205369676e6564204d6573736167653a0a333200000000815250601c01828152602001915050604051602081830303815290604052805190602001209050846001600160a01b03166126258286612ced565b6001600160a01b03161495945050505050565b60055460065460095460009283928392612661926001600160a01b039081169281169116612d71565b915091506000612672858385612e3f565b95945050505050565b600954600b546040805163095ea7b360e01b81526001600160a01b039283166004820152602481018990529051919092169163095ea7b39160448083019260209291908290030181600087803b1580156126d457600080fd5b505af11580156126e8573d6000803e3d6000fd5b505050506040513d60208110156126fe57600080fd5b5050600b546040516338ed173960e01b815260048101878152602482018790526001600160a01b0385811660648401526084830185905260a060448401908152875160a4850152875191909416936338ed1739938a938a938a938a938a939260c4909101906020878101910280838360005b83811015612788578181015183820152602001612770565b505050509050019650505050505050600060405180830381600087803b1580156127b157600080fd5b505af11580156127c5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160409081528110156127ee57600080fd5b8101908080516040519392919084600160201b82111561280d57600080fd5b90830190602082018581111561282257600080fd5b82518660208202830111600160201b8211171561283e57600080fd5b82525081516020918201928201910280838360005b8381101561286b578181015183820152602001612853565b505050509190910160405250505050505050505050565b6000438310156128cf576040805162461bcd60e51b8152602060048201526013602482015272191958591b1a5b99481a185cc81c185cdcd959606a1b604482015290519081900360640190fd5b60006064600e54816128dd57fe5b046128e786612638565b0290506000600c60009054906101000a90046001600160a01b03166001600160a01b0316633b845eb9836040518263ffffffff1660e01b815260040180828152602001915050602060405180830381600087803b15801561294757600080fd5b505af115801561295b573d6000803e3d6000fd5b505050506040513d602081101561297157600080fd5b5051600c5460408051632848362760e11b81526001600160a01b038c81166004830152915193945060009391909216916350906c4e91602480830192602092919082900301818787803b1580156129c757600080fd5b505af11580156129db573d6000803e3d6000fd5b505050506040513d60208110156129f157600080fd5b5051905081811015612a345760405162461bcd60e51b81526004018080602001828103825260238152602001806132956023913960400191505060405180910390fd5b600c5460408051630615339760e51b81526001600160a01b038c81166004830152602482018690529151919092169163c2a672e091604480830192600092919082900301818387803b158015612a8957600080fd5b505af1158015612a9d573d6000803e3d6000fd5b50506008546040805163d084d91760e01b81526001600160a01b038d81166004830152602482018d9052915191909216935063d084d917925060448083019260209291908290030181600087803b158015612af757600080fd5b505af1158015612b0b573d6000803e3d6000fd5b505050506040513d6020811015612b2157600080fd5b5051612b74576040805162461bcd60e51b815260206004820152601b60248201527f7472616e7366657220776173206e6f742073756363657366756c6c0000000000604482015290519081900360640190fd5b612b7c6131e4565b6001600160a01b03808b16825260208083018a9052604080840187905260048054600d5483516302f796d960e41b8152935191951693632f796d90938084019391929190829003018186803b158015612bd457600080fd5b505afa158015612be8573d6000803e3d6000fd5b505050506040513d6020811015612bfe57600080fd5b810190808051906020019092919050505001816060018181525050600260008b6001600160a01b03166001600160a01b0316815260200190815260200160002081908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506020820151816001015560408201518160020155606082015181600301555050600180600088815260200190815260200160002060006101000a81548160ff0219169083151502179055505050505095945050505050565b600080600080612cfc85612f17565b92509250925060018682858560405160008152602001604052604051808581526020018460ff1681526020018381526020018281526020019450505050506020604051602081039080840390855afa158015612d5c573d6000803e3d6000fd5b5050604051601f190151979650505050505050565b6000806000612d808585612f90565b509050600080612d9188888861306e565b6001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015612dc957600080fd5b505afa158015612ddd573d6000803e3d6000fd5b505050506040513d6060811015612df357600080fd5b5080516020909101516dffffffffffffffffffffffffffff91821693501690506001600160a01b0387811690841614612e2d578082612e30565b81815b90999098509650505050505050565b6000808411612e7f5760405162461bcd60e51b815260040180806020018281038252602e815260200180613267602e913960400191505060405180910390fd5b600083118015612e8f5750600082115b612eca5760405162461bcd60e51b815260040180806020018281038252602a81526020018061323d602a913960400191505060405180910390fd5b6000612ee26103e8612edc86886130e2565b906130e2565b90506000612ef66103e5612edc8689613145565b9050612f0d6001828481612f0657fe5b0490613195565b9695505050505050565b60008060008351604114612f72576040805162461bcd60e51b815260206004820152601860248201527f696e76616c6964207369676e6174757265206c656e6774680000000000000000604482015290519081900360640190fd5b50505060208101516040820151606090920151909260009190911a90565b600080826001600160a01b0316846001600160a01b03161415612fe45760405162461bcd60e51b81526004018080602001828103825260278152602001806132166027913960400191505060405180910390fd5b826001600160a01b0316846001600160a01b031610613004578284613007565b83835b90925090506001600160a01b038216613067576040805162461bcd60e51b815260206004820181905260248201527f54656c65706f727444414f4c6962726172793a205a45524f5f41444452455353604482015290519081900360640190fd5b9250929050565b6000836001600160a01b031663f4f31ede84846040518363ffffffff1660e01b815260040180836001600160a01b03168152602001826001600160a01b031681526020019250505060206040518083038186803b1580156130ce57600080fd5b505afa158015611ba3573d6000803e3d6000fd5b60008115806130fd575050808202828282816130fa57fe5b04145b611101576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b604482015290519081900360640190fd5b80820382811115611101576040805162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b604482015290519081900360640190fd5b80820182811015611101576040805162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b604482015290519081900360640190fd5b604051806080016040528060006001600160a01b03168152602001600081526020016000815260200160008152509056fe54656c65706f727444414f4c6962726172793a204944454e544943414c5f41444452455353455354656c65706f727444414f4c6962726172793a20494e53554646494349454e545f4c495155494449545954656c65706f727444414f4c6962726172793a20494e53554646494349454e545f4f55545055545f414d4f554e54544454207374616b656420616d6f756e74206973206e6f742073756666696369656e74a2646970667358221220eaedaf27eef57f7ce7c83afaf4ee3836caeb7a052b02864f1b69526c942578dc64736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 16201,
        "contract": "contracts/routers/InstantRouter.sol:InstantRouter",
        "label": "requests",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(InstantTransferRequest)18427_storage)"
      },
      {
        "astId": 16205,
        "contract": "contracts/routers/InstantRouter.sol:InstantRouter",
        "label": "isUsed",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 16210,
        "contract": "contracts/routers/InstantRouter.sol:InstantRouter",
        "label": "debts",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_array(t_struct(debt)18436_storage)dyn_storage)"
      },
      {
        "astId": 16212,
        "contract": "contracts/routers/InstantRouter.sol:InstantRouter",
        "label": "punisherReward",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 16215,
        "contract": "contracts/routers/InstantRouter.sol:InstantRouter",
        "label": "paybackDeadline",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 16217,
        "contract": "contracts/routers/InstantRouter.sol:InstantRouter",
        "label": "liquidityPoolFactory",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 16220,
        "contract": "contracts/routers/InstantRouter.sol:InstantRouter",
        "label": "wrappedBitcoin",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 16223,
        "contract": "contracts/routers/InstantRouter.sol:InstantRouter",
        "label": "ccTransferRouter",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 16226,
        "contract": "contracts/routers/InstantRouter.sol:InstantRouter",
        "label": "bitcoinInstantPool",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 16228,
        "contract": "contracts/routers/InstantRouter.sol:InstantRouter",
        "label": "TeleportDAOToken",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 16230,
        "contract": "contracts/routers/InstantRouter.sol:InstantRouter",
        "label": "WAVAX",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 16232,
        "contract": "contracts/routers/InstantRouter.sol:InstantRouter",
        "label": "exchangeRouter",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 16234,
        "contract": "contracts/routers/InstantRouter.sol:InstantRouter",
        "label": "staking",
        "offset": 0,
        "slot": "12",
        "type": "t_address"
      },
      {
        "astId": 16236,
        "contract": "contracts/routers/InstantRouter.sol:InstantRouter",
        "label": "bitcoinRelay",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 16239,
        "contract": "contracts/routers/InstantRouter.sol:InstantRouter",
        "label": "collateralRatio",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 16242,
        "contract": "contracts/routers/InstantRouter.sol:InstantRouter",
        "label": "owner",
        "offset": 0,
        "slot": "15",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(debt)18436_storage)dyn_storage": {
        "base": "t_struct(debt)18436_storage",
        "encoding": "dynamic_array",
        "label": "struct IInstantRouter.debt[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_struct(debt)18436_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IInstantRouter.debt[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(debt)18436_storage)dyn_storage"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(InstantTransferRequest)18427_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct IInstantRouter.InstantTransferRequest)",
        "numberOfBytes": "32",
        "value": "t_struct(InstantTransferRequest)18427_storage"
      },
      "t_struct(InstantTransferRequest)18427_storage": {
        "encoding": "inplace",
        "label": "struct IInstantRouter.InstantTransferRequest",
        "members": [
          {
            "astId": 18412,
            "contract": "contracts/routers/InstantRouter.sol:InstantRouter",
            "label": "user",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 18414,
            "contract": "contracts/routers/InstantRouter.sol:InstantRouter",
            "label": "collateralAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 18416,
            "contract": "contracts/routers/InstantRouter.sol:InstantRouter",
            "label": "wrappedBitcoinAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 18418,
            "contract": "contracts/routers/InstantRouter.sol:InstantRouter",
            "label": "creationTime",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 18420,
            "contract": "contracts/routers/InstantRouter.sol:InstantRouter",
            "label": "deadline",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 18422,
            "contract": "contracts/routers/InstantRouter.sol:InstantRouter",
            "label": "paybackDeadline",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 18424,
            "contract": "contracts/routers/InstantRouter.sol:InstantRouter",
            "label": "isPaidback",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 18426,
            "contract": "contracts/routers/InstantRouter.sol:InstantRouter",
            "label": "isUsed",
            "offset": 1,
            "slot": "6",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(debt)18436_storage": {
        "encoding": "inplace",
        "label": "struct IInstantRouter.debt",
        "members": [
          {
            "astId": 18429,
            "contract": "contracts/routers/InstantRouter.sol:InstantRouter",
            "label": "user",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 18431,
            "contract": "contracts/routers/InstantRouter.sol:InstantRouter",
            "label": "wrappedBitcoinAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 18433,
            "contract": "contracts/routers/InstantRouter.sol:InstantRouter",
            "label": "collateralAmount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 18435,
            "contract": "contracts/routers/InstantRouter.sol:InstantRouter",
            "label": "deadline",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}