{
  "address": "0xdaa95209fd0bbF839A1F2B02b279E53492C58937",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_relay",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lockers",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_transferDeadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_protocolPercentageFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_slasherPercentageReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_bitcoinFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userTargetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "userPubKeyHash",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isScriptHash",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isSegwit",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remainedAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "lockerTargetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "CCBurn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_lockerTargetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_blockNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "txId",
          "type": "bytes32"
        }
      ],
      "name": "LockerDispute",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userTargetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "userPubKeyHash",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "remainedAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "lockerTargetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "PaidCCBurn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "bitcoinFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_version",
          "type": "bytes4"
        },
        {
          "internalType": "bytes",
          "name": "_vin",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_vout",
          "type": "bytes"
        },
        {
          "internalType": "bytes4",
          "name": "_locktime",
          "type": "bytes4"
        },
        {
          "internalType": "uint256",
          "name": "_blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_intermediateNodes",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_lockerScriptHash",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_startIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endIndex",
          "type": "uint256"
        }
      ],
      "name": "burnProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "burnRequests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "remainedAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "userPubKeyHash",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isScriptHash",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "isSegwit",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isTransferred",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_userPubKeyHash",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_isScriptHash",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_isSegwit",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_lockerScriptHash",
          "type": "address"
        }
      ],
      "name": "ccBurn",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lockerScriptHash",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_indices",
          "type": "uint256[]"
        }
      ],
      "name": "disputeBurn",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lockerScriptHash",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_inputIndex",
          "type": "uint256"
        },
        {
          "internalType": "bytes4",
          "name": "_version",
          "type": "bytes4"
        },
        {
          "internalType": "bytes",
          "name": "_vin",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_vout",
          "type": "bytes"
        },
        {
          "internalType": "bytes4",
          "name": "_locktime",
          "type": "bytes4"
        },
        {
          "internalType": "uint256",
          "name": "_blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_intermediateNodes",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "disputeLocker",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lockerTargetAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "isTransferred",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolPercentageFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relay",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bitcoinFee",
          "type": "uint256"
        }
      ],
      "name": "setBitcoinFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lockers",
          "type": "address"
        }
      ],
      "name": "setLockers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_protocolPercentageFee",
          "type": "uint256"
        }
      ],
      "name": "setProtocolPercentageFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_relay",
          "type": "address"
        }
      ],
      "name": "setRelay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_slasherPercentageReward",
          "type": "uint256"
        }
      ],
      "name": "setSlasherPercentageReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_teleBTC",
          "type": "address"
        }
      ],
      "name": "setTeleBTC",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_transferDeadline",
          "type": "uint256"
        }
      ],
      "name": "setTransferDeadline",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slasherPercentageReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "teleBTC",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferDeadline",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x903bd5b8d243549745a5021eeee54d5d59c84488412ec14b8a7fcc23eee7f347",
  "receipt": {
    "to": null,
    "from": "0x1DE72A1935Df9b4E02315BDa3C3cDbDF2A640583",
    "contractAddress": "0xdaa95209fd0bbF839A1F2B02b279E53492C58937",
    "transactionIndex": 0,
    "gasUsed": "4281732",
    "logsBloom": "0x
    "blockHash": "0x6b67d22e38fdee3eebb90abf36e692f31c80b685f6ad33c9b72fea4a90a86158",
    "transactionHash": "0x903bd5b8d243549745a5021eeee54d5d59c84488412ec14b8a7fcc23eee7f347",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 12805059,
        "transactionHash": "0x903bd5b8d243549745a5021eeee54d5d59c84488412ec14b8a7fcc23eee7f347",
        "address": "0xdaa95209fd0bbF839A1F2B02b279E53492C58937",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001de72a1935df9b4e02315bda3c3cdbdf2a640583"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x6b67d22e38fdee3eebb90abf36e692f31c80b685f6ad33c9b72fea4a90a86158"
      }
    ],
    "blockNumber": 12805059,
    "cumulativeGasUsed": "4281732",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8ed36B08134B84698C898f0A4314905e1cA7aE1d",
    "0x6c89ca66B217cA2eA87AB118De25D54013d4c891",
    "0x5364E3557572bd5D5903C0e9C21BE359F2Eac1dA",
    10,
    50,
    50,
    50
  ],
  "numDeployments": 1,
  "solcInputHash": "e12c7c9cd263aabdb11ed9046c0bd066",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_relay\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lockers\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_transferDeadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_protocolPercentageFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slasherPercentageReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bitcoinFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userPubKeyHash\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isScriptHash\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isSegwit\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainedAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lockerTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"CCBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_lockerTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"txId\",\"type\":\"bytes32\"}],\"name\":\"LockerDispute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"userPubKeyHash\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"remainedAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lockerTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"PaidCCBurn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bitcoinFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_version\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"_vin\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_vout\",\"type\":\"bytes\"},{\"internalType\":\"bytes4\",\"name\":\"_locktime\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_intermediateNodes\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_lockerScriptHash\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_startIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endIndex\",\"type\":\"uint256\"}],\"name\":\"burnProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"burnRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"remainedAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"userPubKeyHash\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isScriptHash\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"isSegwit\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isTransferred\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_userPubKeyHash\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_isScriptHash\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_isSegwit\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_lockerScriptHash\",\"type\":\"address\"}],\"name\":\"ccBurn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockerScriptHash\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_indices\",\"type\":\"uint256[]\"}],\"name\":\"disputeBurn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockerScriptHash\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_inputIndex\",\"type\":\"uint256\"},{\"internalType\":\"bytes4\",\"name\":\"_version\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"_vin\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_vout\",\"type\":\"bytes\"},{\"internalType\":\"bytes4\",\"name\":\"_locktime\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_intermediateNodes\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"disputeLocker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockerTargetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"isTransferred\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolPercentageFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relay\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bitcoinFee\",\"type\":\"uint256\"}],\"name\":\"setBitcoinFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockers\",\"type\":\"address\"}],\"name\":\"setLockers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolPercentageFee\",\"type\":\"uint256\"}],\"name\":\"setProtocolPercentageFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_relay\",\"type\":\"address\"}],\"name\":\"setRelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slasherPercentageReward\",\"type\":\"uint256\"}],\"name\":\"setSlasherPercentageReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teleBTC\",\"type\":\"address\"}],\"name\":\"setTeleBTC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transferDeadline\",\"type\":\"uint256\"}],\"name\":\"setTransferDeadline\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slasherPercentageReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teleBTC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDeadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"burnProof(bytes4,bytes,bytes,bytes4,uint256,bytes,uint256,address,uint256,uint256)\":{\"details\":\"Makes isTransferred flag true for the paid requests\",\"params\":{\"_blockNumber\":\"Height of the block containing the burn transaction\",\"_endIndex\":\"Index to finish searching for unpaid burn requests in the list\",\"_index\":\"Index of transaction containing the burn transaction in the block\",\"_intermediateNodes\":\"Merkle inclusion proof for transaction containing the burn transaction\",\"_lockerScriptHash\":\"Locker's address on Bitcoin that this burn request belongs to\",\"_locktime\":\"Lock time of the transaction containing the burn transaction\",\"_startIndex\":\"Index to start searching for unpaid burn requests in the list\",\"_version\":\"Version of the transaction containing the burn transaction\",\"_vin\":\"Inputs of the transaction containing the burn transaction\",\"_vout\":\"Outputs of the transaction containing the burn transaction\"},\"returns\":{\"_0\":\"\"}},\"ccBurn(uint256,address,bool,bool,address)\":{\"details\":\"After submitting the burn request, lockers have a limited time to send BTC\",\"params\":{\"_amount\":\"Amount of wrapped tokens that user wants to burn\",\"_isScriptHash\":\"Whether the user's Bitcoin address is script hash or pubKey hash\",\"_isSegwit\":\"Whether the user's Bitcoin address is Segwit or nonSegwit\",\"_lockerScriptHash\":\"Locker's address on Bitcoin\",\"_userPubKeyHash\":\"Address of user on Bitcoin\"},\"returns\":{\"_0\":\"True if request is recorded successfully\"}},\"constructor\":{\"details\":\"Lockers use this contract for coordinating of burning wrapped tokens\",\"params\":{\"_bitcoinFee\":\"Transaction fee on Bitcoin that lockers pay\",\"_lockers\":\"Address of lockers contract\",\"_protocolPercentageFee\":\"Percentage of tokens that user pays to protocol for burning\",\"_relay\":\"Address of relay contract\",\"_transferDeadline\":\"Dealine of sending BTC to user\",\"_treasury\":\"Address of the treasury of the protocol\"}},\"disputeBurn(address,uint256[])\":{\"details\":\"@param _lockerScriptHash locker's Bitcoin address that the unpaid request belongs to\",\"params\":{\"_indices\":\"Array of indices of the requests for that locker\"},\"returns\":{\"_0\":\"True if dispute is successfull\"}},\"disputeLocker(address,uint256,bytes4,bytes,bytes,bytes4,uint256,bytes,uint256)\":{\"details\":\"@param _lockerScriptHash                Suspicious locker's script hash\",\"params\":{\"_blockNumber\":\"The block number in which the malicious tx has happened\",\"_index\":\"Index of transaction containing the malicious tx\",\"_inputIndex\":\"Index of the input in vin that is from the locker\",\"_intermediateNodes\":\"Merkle inclusion proof for the malicious transaction\",\"_locktime\":\"Lock time of the malicious transaction\",\"_version\":\"Version of the malicious transaction\",\"_vin\":\"Inputs of the malicious transaction\",\"_vout\":\"Outputs of the malicious transaction\"},\"returns\":{\"_0\":\"True if dispute is successfull\"}},\"isTransferred(address,uint256)\":{\"params\":{\"_index\":\"The index number of the request for the locker\",\"_lockerTargetAddress\":\"Locker's address on the target chain\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setBitcoinFee(uint256)\":{\"details\":\"Only owner can call this\",\"params\":{\"_bitcoinFee\":\"The new Bitcoin transaction fee\"}},\"setLockers(address)\":{\"details\":\"Only owner can call this\",\"params\":{\"_lockers\":\"The new lockers contract address\"}},\"setProtocolPercentageFee(uint256)\":{\"details\":\"Only owner can call this\",\"params\":{\"_protocolPercentageFee\":\"The new protocol percentage fee\"}},\"setRelay(address)\":{\"details\":\"Only owner can call this\",\"params\":{\"_relay\":\"The new relay contract address\"}},\"setSlasherPercentageReward(uint256)\":{\"details\":\"Only owner can call this\",\"params\":{\"_slasherPercentageReward\":\"The new slasher percentage reward\"}},\"setTeleBTC(address)\":{\"details\":\"Only owner can call this\",\"params\":{\"_teleBTC\":\"The new wrapped token contract address\"}},\"setTransferDeadline(uint256)\":{\"details\":\"Only owner can call this\",\"params\":{\"_transferDeadline\":\"The new transfer deadline\"}},\"setTreasury(address)\":{\"details\":\"Only owner can call this\",\"params\":{\"_treasury\":\"The new treasury address\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"events\":{\"CCBurn(address,address,bool,bool,uint256,uint256,address,uint256,uint256)\":{\"notice\":\"Emits when a burn request gets submitted\"},\"LockerDispute(address,uint256,bytes32)\":{\"notice\":\"Emits when a locker gets slashed for withdrawing BTC\"},\"PaidCCBurn(address,address,uint256,address,uint256)\":{\"notice\":\"Emits when a burn request gets executed\"}},\"kind\":\"user\",\"methods\":{\"burnProof(bytes4,bytes,bytes,bytes4,uint256,bytes,uint256,address,uint256,uint256)\":{\"notice\":\"Checks the correctness of burn proof\"},\"ccBurn(uint256,address,bool,bool,address)\":{\"notice\":\"Burns wrapped tokens and records the burn request\"},\"constructor\":{\"notice\":\"Handles cross-chain burn requests\"},\"disputeBurn(address,uint256[])\":{\"notice\":\"Slashes lockers if they did not paid burn request before its deadline\"},\"disputeLocker(address,uint256,bytes4,bytes,bytes,bytes4,uint256,bytes,uint256)\":{\"notice\":\"Slashes a locker if they issue a tx that doesn't match any burn request\"},\"isTransferred(address,uint256)\":{\"notice\":\"Shows if a burn request has been done or not\"},\"setBitcoinFee(uint256)\":{\"notice\":\"Changes Bitcoin transaction fee\"},\"setLockers(address)\":{\"notice\":\"Changes lockers contract address\"},\"setProtocolPercentageFee(uint256)\":{\"notice\":\"Changes protocol percentage fee for burning tokens\"},\"setRelay(address)\":{\"notice\":\"Changes relay contract address\"},\"setSlasherPercentageReward(uint256)\":{\"notice\":\"Changes slasher percentage reward for disputing lockers\"},\"setTeleBTC(address)\":{\"notice\":\"Changes wrapped token contract address\"},\"setTransferDeadline(uint256)\":{\"notice\":\"Changes deadline for sending tokens\"},\"setTreasury(address)\":{\"notice\":\"Changes protocol treasury address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/routers/CCBurnRouter.sol\":\"CCBurnRouter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/erc20/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    // events\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    // read-only functions\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    // state-changing functions\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9210fa056ea67b530890ea968948270e0d22a15bd428a2edd4915ef25c4eb918\",\"license\":\"MIT\"},\"contracts/erc20/interfaces/ITeleBTC.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport './IERC20.sol';\\n\\ninterface ITeleBTC is IERC20 {\\n\\n    // Events\\n\\n    event Mint(address indexed to, uint value);\\n\\n    event Burn(address indexed to, uint value);\\n\\n    // state-changing functions\\n\\n    function addMinter(address account) external;\\n\\n    function removeMinter(address account) external;\\n\\n    function addBurner(address account) external;\\n\\n    function removeBurner(address account) external;\\n\\n    function mint(address receiver, uint amount) external returns(bool);\\n\\n    function burn(uint256 amount) external returns(bool);\\n\\n    function mintTestToken() external; // Just for test TODO: remove it\\n\\n}\",\"keccak256\":\"0xc25be86646cc193d8a5a4504d98b69c7003f7bc0b2ee4d10faf3d35060404ccc\",\"license\":\"MIT\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMath {\\n    function add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x, 'ds-math-add-overflow');\\n    }\\n\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\\n    }\\n\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\\n    }\\n    \\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b; //TODO: edit it\\n    }\\n}\",\"keccak256\":\"0x0e9e1f6ce97bc6b4de34121b05b78ef753eb8399f1087e8daf8cb5ac0e33954c\",\"license\":\"MIT\"},\"contracts/libraries/TxHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./TypedMemView.sol\\\";\\nimport \\\"./ViewBTC.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n\\n// A library for parsing bitcoin transactions\\nlibrary TxHelper {\\n\\n    using TypedMemView for bytes;\\n    using TypedMemView for bytes29;\\n    using ViewBTC for bytes29;\\n\\n    /// @notice                           Parse the bitcoin amount and the op_return of a transaction as data\\n    /// @dev                              Support 3 types of transaction outputs, p2pkh, p2sh and p2wpkh\\n    /// @param _vout                      The vout of a bitcoin transaction\\n    /// @param _desiredRecipient          20 bytes, public_key hash or redeem_script hash which is using in bitcoin locking script\\n    /// @return                           bitcoinAmount of the _desiredRecipient (20 bytes, public_key hash or redeem_script hash)\\n    /// @return                           arbitraryData or the op_return of the transaction\\n    function parseValueAndData(\\n        bytes memory _vout,\\n        address _desiredRecipient\\n    ) internal view returns (uint64 bitcoinAmount, bytes memory arbitraryData) {\\n        bytes29 voutView = _vout.ref(0).tryAsVout();\\n        require(!voutView.isNull(), \\\"TxHelper: vout is null\\\");\\n\\n        bytes29 output;\\n        bytes29 scriptPubkey;\\n        bytes29 _arbitraryData;\\n        address bitcoinRecipient;\\n\\n        uint _numberOfOutputs = uint256(ViewBTC.indexCompactInt(voutView, 0));\\n\\n        for (uint index = 0; index < _numberOfOutputs; index++) {\\n            output = ViewBTC.indexVout(voutView, index);\\n            scriptPubkey = ViewBTC.scriptPubkey(output);\\n            _arbitraryData = ViewBTC.opReturnPayload(scriptPubkey);\\n\\n            // Checks whether the output is an arbitarary data or not\\n            if(_arbitraryData == 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) {\\n                // Output is not an arbitrary data\\n\\n                if (scriptPubkey.len() == 23 || scriptPubkey.len() == 24) {\\n                    // It is P2SH: OP_HASH160 ScriptHash OP_EQUAL\\n                    bitcoinRecipient = scriptPubkey.indexAddress(3);\\n                }\\n\\n                if (scriptPubkey.len() == 26) {\\n                    // It is P2PKH: OP_DUP OP_HASH160 PubKeyHash OP_EQUALVERIFY OP_CHECKSIG\\n                    bitcoinRecipient = scriptPubkey.indexAddress(4);\\n                }\\n\\n                if (scriptPubkey.len() == 21) {\\n                    // It is P2WPKH: 0 PubKeyHash\\n                    bitcoinRecipient = scriptPubkey.indexAddress(2);\\n                }\\n\\n                if (scriptPubkey.len() == 33) {\\n                    // It is P2WSH: 0 ScriptHash\\n                    bitcoinRecipient = scriptPubkey.indexAddress(2);\\n                }\\n\\n                if (bitcoinRecipient == _desiredRecipient) {\\n                    bitcoinAmount = ViewBTC.value(output);\\n                }\\n\\n            } else {\\n                arbitraryData = _arbitraryData.clone(); // bytes29.clone() returns the whole bytes array\\n            }\\n        }\\n\\n        return (bitcoinAmount, arbitraryData);\\n    }\\n\\n    function _parseValueAndData(\\n        bytes memory _vout,\\n        bytes memory _desiredRecipient\\n    ) internal view returns (uint64 bitcoinAmount, bytes memory arbitraryData) {\\n        bytes29 voutView = _vout.ref(0).tryAsVout();\\n        require(!voutView.isNull(), \\\"TxHelper: vout is null\\\");\\n\\n        bytes29 output;\\n        bytes29 scriptPubkey;\\n        bytes29 _arbitraryData;\\n        bytes memory bitcoinRecipient;\\n\\n        uint _numberOfOutputs = uint256(ViewBTC.indexCompactInt(voutView, 0));\\n\\n        for (uint index = 0; index < _numberOfOutputs; index++) {\\n            output = ViewBTC.indexVout(voutView, index);\\n            scriptPubkey = ViewBTC.scriptPubkey(output);\\n            _arbitraryData = ViewBTC.opReturnPayload(scriptPubkey);\\n\\n            // Checks whether the output is an arbitarary data or not\\n            if(_arbitraryData == 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) {\\n                // Output is not an arbitrary data\\n\\n                if (scriptPubkey.len() == 23 || scriptPubkey.len() == 24) {\\n                    // It is P2SH: OP_HASH160 ScriptHash OP_EQUAL (20 bytes)\\n                    bitcoinRecipient = abi.encodePacked(scriptPubkey.indexAddress(3));\\n                }\\n\\n                if (scriptPubkey.len() == 26) {\\n                    // It is P2PKH: OP_DUP OP_HASH160 PubKeyHash OP_EQUALVERIFY OP_CHECKSIG (20 bytes)\\n                    bitcoinRecipient = abi.encodePacked(scriptPubkey.indexAddress(4));\\n                }\\n\\n                if (scriptPubkey.len() == 21) {\\n                    // It is P2WPKH: 0 PubKeyHash (20 bytes)\\n                    bitcoinRecipient = abi.encodePacked(scriptPubkey.indexAddress(2));\\n                }\\n\\n                if (scriptPubkey.len() == 33) {\\n                    // It is P2WSH: 0 ScriptHash (32 bytes)\\n                    bitcoinRecipient = abi.encodePacked(scriptPubkey.index(2, 32));\\n                }\\n\\n                if (\\n                    keccak256(abi.encodePacked(bitcoinRecipient)) == keccak256(abi.encodePacked(_desiredRecipient))\\n                ) {\\n                    bitcoinAmount = ViewBTC.value(output);\\n                }\\n\\n            } else {\\n                arbitraryData = _arbitraryData.clone(); // bytes29.clone() returns the whole bytes array\\n            }\\n        }\\n\\n        return (bitcoinAmount, arbitraryData);\\n    }\\n\\n    function parseTotalValue(bytes memory vout) internal pure returns (uint64) {\\n        bytes29 voutView = vout.ref(0).tryAsVout();\\n        bytes29 output;\\n        uint64 totalValue;\\n\\n        uint _numberOfOutputs = uint256(ViewBTC.indexCompactInt(voutView, 0));\\n        for (uint index = 0; index < _numberOfOutputs; index++) {\\n            output = ViewBTC.indexVout(voutView, index);\\n            totalValue = totalValue + ViewBTC.value(output);\\n        }\\n\\n        return totalValue;\\n    }\\n\\n    function parseChainId(bytes memory arbitraryData) internal pure returns (uint8 parsedValue) {\\n        bytes memory slicedBytes = sliceBytes(arbitraryData, 0, 0);\\n        assembly {\\n            parsedValue := mload(add(slicedBytes, 1))\\n        }\\n    }\\n\\n    function parseAppId(bytes memory arbitraryData) internal pure returns (uint16 parsedValue) {\\n        bytes memory slicedBytes = sliceBytes(arbitraryData, 1, 2);\\n        assembly {\\n            parsedValue := mload(add(slicedBytes, 2))\\n        }\\n    }\\n\\n    function parseRecipientAddress(bytes memory arbitraryData) internal pure returns (address parsedValue) {\\n        bytes memory slicedBytes = sliceBytes(arbitraryData, 3, 22);\\n        assembly {\\n            parsedValue := mload(add(slicedBytes, 20))\\n        }\\n    }\\n\\n    function parsePercentageFee(bytes memory arbitraryData) internal pure returns (uint16 parsedValue) {\\n        bytes memory slicedBytes = sliceBytes(arbitraryData, 23, 24);\\n        assembly {\\n            parsedValue := mload(add(slicedBytes, 2))\\n        }\\n    }\\n\\n    function parseSpeed(bytes memory arbitraryData) internal pure returns (uint8 parsedValue) {\\n        bytes memory slicedBytes = sliceBytes(arbitraryData, 25, 25);\\n        assembly {\\n            parsedValue := mload(add(slicedBytes, 1))\\n        }\\n    }\\n\\n    function parseExchangeToken(bytes memory arbitraryData) internal pure returns (address parsedValue){\\n        bytes memory slicedBytes = sliceBytes(arbitraryData, 26, 45);\\n        assembly {\\n            parsedValue := mload(add(slicedBytes, 20))\\n        }\\n    }\\n\\n    function parseExchangeOutputAmount(bytes memory arbitraryData) internal pure returns (uint224 parsedValue){\\n        bytes memory slicedBytes = sliceBytes(arbitraryData, 46, 73);\\n        assembly {\\n            parsedValue := mload(add(slicedBytes, 28))\\n        }\\n    }\\n\\n    function parseDeadline(bytes memory arbitraryData) internal pure returns (uint32 parsedValue){\\n        bytes memory slicedBytes = sliceBytes(arbitraryData, 74, 77);\\n        assembly {\\n            parsedValue := mload(add(slicedBytes, 4))\\n        }\\n    }\\n\\n    function parseIsFixedToken(bytes memory arbitraryData) internal pure returns (uint8 parsedValue){\\n        bytes memory slicedBytes = sliceBytes(arbitraryData, 78, 78);\\n        assembly {\\n            parsedValue := mload(add(slicedBytes, 1))\\n        }\\n    }\\n\\n    // TODO: use parseExchangeToken to check if the request is a exchange or a transfer\\n    // function parseIsExchange (bytes memory arbitraryData) internal returns (bool parsedValue) {\\n    //     bytes memory slicedBytes = sliceBytes(arbitraryData, 28, 28);\\n    //     bytes1 zero = 0x00;\\n    //     if (slicedBytes[0] == zero) {\\n    //         parsedValue = false;\\n    //     } else {\\n    //         parsedValue = true;\\n    //     }\\n    // }\\n\\n    // function parseSpeed(bytes memory arbitraryData) internal returns (uint8 parsedValue){\\n    //     bytes memory slicedBytes = sliceBytes(arbitraryData, 29, 29);\\n    //     assembly {\\n    //         parsedValue := mload(add(slicedBytes, 1))\\n    //     }\\n    // }\\n\\n    function sliceBytes(\\n        bytes memory data,\\n        uint start,\\n        uint end\\n    ) internal pure returns (bytes memory result) {\\n        bytes1 temp;\\n        for (uint i = start; i < end + 1; i++) {\\n            temp = data[i];\\n            result = abi.encodePacked(result, temp);\\n        }\\n    }\\n\\n    function calculateTxId (\\n        bytes4 _version,\\n        bytes memory _vin,\\n        bytes calldata _vout,\\n        bytes4 _locktime\\n    ) internal pure returns (bytes32) {\\n        bytes32 inputHash1 = sha256(abi.encodePacked(_version, _vin, _vout, _locktime));\\n        bytes32 inputHash2 = sha256(abi.encodePacked(inputHash1));\\n        return revertBytes32(inputHash2);\\n    }\\n\\n    function revertBytes32(bytes32 input) internal pure returns (bytes32) {\\n        bytes memory temp;\\n        bytes32 result;\\n        for (uint i = 0; i < 32; i++) {\\n            temp = abi.encodePacked(temp, input[31-i]);\\n        }\\n        assembly {\\n            result := mload(add(temp, 32))\\n        }\\n        return result;\\n    }\\n\\n    function parseInput(bytes memory vin, uint index) internal pure returns (bytes29 input) {\\n        bytes29 vinView = vin.ref(0).tryAsVin();\\n        // Extract the desired input\\n        input = ViewBTC.indexVin(vinView, index);\\n    }\\n\\n    function parseInputScriptSig(bytes memory vin, uint index) internal view returns (bytes memory scriptSig) {\\n        // Extract the desired input\\n        bytes29 input = parseInput(vin, index);\\n        // Extract the script sig\\n        bytes29 scriptSigMemView = ViewBTC.scriptSig(input);\\n        // Extract redeem script from the script sig\\n        scriptSig = scriptSigMemView.clone();\\n    }\\n\\n    function numberOfOutputs(bytes memory vout) internal pure returns (uint _numberOfOutputs) {\\n        bytes29 voutView = vout.ref(0).tryAsVout();\\n        _numberOfOutputs = uint256(ViewBTC.indexCompactInt(voutView, 0));\\n    }\\n\\n    // TODO: add exchange path to arbitrary data (for now, user only gives us the exchnage token address)\\n    // function parsePath(bytes memory arbitraryData)\\n    //     internal\\n    //     returns (address[] memory)\\n    // {\\n    //     uint256 sizeofPath;\\n    //     assembly {\\n    //         sizeofPath := mload(add(arbitraryData, 356)) // bias = 4*32 + 4\\n    //     } // found the postion using testing\\n    //     address temp;\\n    //     uint256 index;\\n    //     index = 356 + 32;\\n\\n    //     for (uint256 i = 0; i < sizeofPath; i++) {\\n    //         assembly {\\n    //             temp := mload(add(arbitraryData, index))\\n    //         }\\n    //         parsedPath.push(temp);\\n    //         index = index + 32;\\n    //     }\\n    //     return parsedPath;\\n    // }\\n\\n}\\n\",\"keccak256\":\"0xed29c74bd9349b4592f9ef8b5d4b6a9aa55c5e3d79fe2eb638b995cf158858a9\",\"license\":\"MIT\"},\"contracts/libraries/TypedMemView.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./SafeMath.sol\\\";\\n\\nlibrary TypedMemView {\\n    using SafeMath for uint256;\\n\\n    // Why does this exist?\\n    // the solidity `bytes memory` type has a few weaknesses.\\n    // 1. You can't index ranges effectively\\n    // 2. You can't slice without copying\\n    // 3. The underlying data may represent any type\\n    // 4. Solidity never deallocates memory, and memory costs grow\\n    //    superlinearly\\n\\n    // By using a memory view instead of a `bytes memory` we get the following\\n    // advantages:\\n    // 1. Slices are done on the stack, by manipulating the pointer\\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\\n    // 3. We can insert type info into the pointer, and typecheck at runtime\\n\\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\\n    // algorithms.\\n\\n    // Why bytes29?\\n    // We want to avoid confusion between views, digests, and other common\\n    // types so we chose a large and uncommonly used odd number of bytes\\n    //\\n    // Note that while bytes are left-aligned in a word, integers and addresses\\n    // are right-aligned. This means when working in assembly we have to\\n    // account for the 3 unused bytes on the righthand side\\n    //\\n    // First 5 bytes are a type flag.\\n    // - ff_ffff_fffe is reserved for unknown type.\\n    // - ff_ffff_ffff is reserved for invalid types/errors.\\n    // next 12 are memory address\\n    // next 12 are len\\n    // bottom 3 bytes are empty\\n\\n    // Assumptions:\\n    // - non-modification of memory.\\n    // - No Solidity updates\\n    // - - wrt free mem point\\n    // - - wrt bytes representation in memory\\n    // - - wrt memory addressing in general\\n\\n    // Usage:\\n    // - create type constants\\n    // - use `assertType` for runtime type assertions\\n    // - - unfortunately we can't do this at compile time yet :(\\n    // - recommended: implement modifiers that perform type checking\\n    // - - e.g.\\n    // - - `uint40 constant MY_TYPE = 3;`\\n    // - - ` modifer onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\\n    // - instantiate a typed view from a bytearray using `ref`\\n    // - use `index` to inspect the contents of the view\\n    // - use `slice` to create smaller views into the same memory\\n    // - - `slice` can increase the offset\\n    // - - `slice can decrease the length`\\n    // - - must specify the output type of `slice`\\n    // - - `slice` will return a null view if you try to overrun\\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\\n    // - use `equal` for typed comparisons.\\n\\n\\n    // The null view\\n    bytes29 internal constant NULL = hex\\\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\\";\\n    uint256 constant LOW_12_MASK = 0xffffffffffffffffffffffff;\\n    uint8 constant TWELVE_BYTES = 96;\\n\\n    /**\\n     * @notice      Returns the encoded hex character that represents the lower 4 bits of the argument.\\n     * @param _b    The byte\\n     * @return      char - The encoded hex character\\n     */\\n    function nibbleHex(uint8 _b) internal pure returns (uint8 char) {\\n        // This can probably be done more efficiently, but it's only in error\\n        // paths, so we don't really care :)\\n        uint8 _nibble = _b | 0xf0; // set top 4, keep bottom 4\\n        if (_nibble == 0xf0) {return 0x30;} // 0\\n        if (_nibble == 0xf1) {return 0x31;} // 1\\n        if (_nibble == 0xf2) {return 0x32;} // 2\\n        if (_nibble == 0xf3) {return 0x33;} // 3\\n        if (_nibble == 0xf4) {return 0x34;} // 4\\n        if (_nibble == 0xf5) {return 0x35;} // 5\\n        if (_nibble == 0xf6) {return 0x36;} // 6\\n        if (_nibble == 0xf7) {return 0x37;} // 7\\n        if (_nibble == 0xf8) {return 0x38;} // 8\\n        if (_nibble == 0xf9) {return 0x39;} // 9\\n        if (_nibble == 0xfa) {return 0x61;} // a\\n        if (_nibble == 0xfb) {return 0x62;} // b\\n        if (_nibble == 0xfc) {return 0x63;} // c\\n        if (_nibble == 0xfd) {return 0x64;} // d\\n        if (_nibble == 0xfe) {return 0x65;} // e\\n        if (_nibble == 0xff) {return 0x66;} // f\\n    }\\n\\n    /**\\n     * @notice      Returns a uint16 containing the hex-encoded byte.\\n     *              `the first 8 bits of encoded is the nibbleHex of top 4 bits of _b`\\n     *              `the second 8 bits of encoded is the nibbleHex of lower 4 bits of _b`\\n     * @param _b    The byte\\n     * @return      encoded - The hex-encoded byte\\n     */\\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\\n        encoded |= nibbleHex(_b >> 4); // top 4 bits\\n        encoded <<= 8;\\n        encoded |= nibbleHex(_b); // lower 4 bits\\n    }\\n\\n    /**\\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\\n     *              `second` contains the encoded lower 16 bytes.\\n     *\\n     * @param _b    The 32 bytes as uint256\\n     * @return      first - The top 16 bytes\\n     * @return      second - The bottom 16 bytes\\n     */\\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\\n        for (uint8 i = 31; i > 15; i -= 1) {\\n            uint8 _byte = uint8(_b >> (i * 8));\\n            first |= byteHex(_byte);\\n            if (i != 16) {\\n                first <<= 16;\\n            }\\n        }\\n\\n        // abusing underflow here =_=\\n        for (uint8 i = 15; i < 255 ; i -= 1) {\\n            uint8 _byte = uint8(_b >> (i * 8));\\n            second |= byteHex(_byte);\\n            if (i != 0) {\\n                second <<= 16;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice          Changes the endianness of a uint256.\\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\\n     * @param _b        The unsigned integer to reverse\\n     * @return          v - The reversed value\\n     */\\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\\n        v = _b;\\n\\n        // swap bytes\\n        v = ((v >> 8) & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\\n        ((v & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) << 8);\\n        // swap 2-byte long pairs\\n        v = ((v >> 16) & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\\n        ((v & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) << 16);\\n        // swap 4-byte long pairs\\n        v = ((v >> 32) & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\\n        ((v & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) << 32);\\n        // swap 8-byte long pairs\\n        v = ((v >> 64) & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\\n        ((v & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) << 64);\\n        // swap 16-byte long pairs\\n        v = (v >> 128) | (v << 128);\\n    }\\n\\n    /**\\n     * @notice      Create a mask with the highest `_len` bits set.\\n     * @param _len  The length\\n     * @return      mask - The mask\\n     */\\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\\n        // ugly. redo without assembly?\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            mask := sar(\\n            sub(_len, 1),\\n            0x8000000000000000000000000000000000000000000000000000000000000000\\n            )\\n        }\\n    }\\n\\n    /**\\n     * @notice      Return the null view.\\n     * @return      bytes29 - The null view\\n     */\\n    function nullView() internal pure returns (bytes29) {\\n        return NULL;\\n    }\\n\\n    /**\\n     * @notice      Check if the view is null.\\n     * @return      bool - True if the view is null\\n     */\\n    function isNull(bytes29 memView) internal pure returns (bool) {\\n        return memView == NULL;\\n    }\\n\\n    /**\\n     * @notice      Check if the view is not null.\\n     * @return      bool - True if the view is not null\\n     */\\n    function notNull(bytes29 memView) internal pure returns (bool) {\\n        return !isNull(memView);\\n    }\\n\\n    /**\\n     * @notice          Check if the view is of a valid type and points to a valid location\\n     *                  in memory.\\n     * @dev             We perform this check by examining solidity's unallocated memory\\n     *                  pointer and ensuring that the view's upper bound is less than that.\\n     * @param memView   The view\\n     * @return          ret - True if the view is valid\\n     */\\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\\n        if (typeOf(memView) == 0xffffffffff) {return false;}\\n        uint256 _end = end(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ret := not(gt(_end, mload(0x40)))\\n        }\\n    }\\n\\n    /**\\n     * @notice          Require that a typed memory view be valid.\\n     * @dev             Returns the view for easy chaining.\\n     * @param memView   The view\\n     * @return          bytes29 - The validated view\\n     */\\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\\n        require(isValid(memView), \\\"Validity assertion failed\\\");\\n        return memView;\\n    }\\n\\n    /**\\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\\n     * @param memView   The view\\n     * @param _expected The expected type\\n     * @return          bool - True if the memview is of the expected type\\n     */\\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\\n        return typeOf(memView) == _expected;\\n    }\\n\\n    /**\\n     * @notice          Require that a typed memory view has a specific type.\\n     * @dev             Returns the view for easy chaining.\\n     * @param memView   The view\\n     * @param _expected The expected type\\n     * @return          bytes29 - The view with validated type\\n     */\\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\\n        if (!isType(memView, _expected)) {\\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\\n            (, uint256 e) = encodeHex(uint256(_expected));\\n            string memory err = string(\\n                abi.encodePacked(\\n                    \\\"Type assertion failed. Got 0x\\\",\\n                    uint80(g),\\n                    \\\". Expected 0x\\\",\\n                    uint80(e)\\n                )\\n            );\\n            revert(err);\\n        }\\n        return memView;\\n    }\\n\\n    /**\\n     * @notice          Return an identical view with a different type.\\n     * @param memView   The view\\n     * @param _newType  The new type\\n     * @return          newView - The new view with the specified type\\n     */\\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\\n        // then | in the new type\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n        // shift off the top 5 bytes\\n            newView := or(newView, shr(40, shl(40, memView)))\\n            newView := or(newView, shl(216, _newType))\\n        }\\n    }\\n\\n    /**\\n     * @notice          Unsafe raw pointer construction. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @dev             Unsafe raw pointer construction. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @param _type     The type\\n     * @param _loc      The memory address\\n     * @param _len      The length\\n     * @return          newView - The new view with the specified type, location and length\\n     */\\n    function unsafeBuildUnchecked(uint256 _type, uint256 _loc, uint256 _len) private pure returns (bytes29 newView) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            newView := shl(96, or(newView, _type)) // insert type\\n            newView := shl(96, or(newView, _loc))  // insert loc\\n            newView := shl(24, or(newView, _len))  // empty bottom 3 bytes\\n        }\\n    }\\n\\n    /**\\n     * @notice          Instantiate a new memory view. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @dev             Instantiate a new memory view. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @param _type     The type\\n     * @param _loc      The memory address\\n     * @param _len      The length\\n     * @return          newView - The new view with the specified type, location and length\\n     */\\n    function build(uint256 _type, uint256 _loc, uint256 _len) internal pure returns (bytes29 newView) {\\n        uint256 _end = _loc.add(_len);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            if gt(_end, mload(0x40)) {\\n                _end := 0\\n            }\\n        }\\n        if (_end == 0) {\\n            return NULL;\\n        }\\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\\n    }\\n\\n    /**\\n     * @notice          Instantiate a memory view from a byte array.\\n     * @dev             Note that due to Solidity memory representation, it is not possible to\\n     *                  implement a deref, as the `bytes` type stores its len in memory.\\n     * @param arr       The byte array\\n     * @param newType   The type\\n     * @return          bytes29 - The memory view\\n     */\\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\\n        uint256 _len = arr.length;\\n\\n        uint256 _loc;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            _loc := add(arr, 0x20)  // our view is of the data, not the struct\\n        }\\n\\n        return build(newType, _loc, _len);\\n    }\\n\\n    /**\\n     * @notice          Return the associated type information.\\n     * @param memView   The memory view\\n     * @return          _type - The type associated with the view\\n     */\\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n        // 216 == 256 - 40\\n            _type := shr(216, memView) // shift out lower 24 bytes\\n        }\\n    }\\n\\n    /**\\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the 5-byte type flag is equal\\n     */\\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        // XOR the inputs to check their difference\\n        return (left ^ right) >> (2 * TWELVE_BYTES) == 0;\\n    }\\n\\n    /**\\n     * @notice          Return the memory address of the underlying bytes.\\n     * @param memView   The view\\n     * @return          _loc - The memory address\\n     */\\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\\n        uint256 _mask = LOW_12_MASK;  // assembly can't use globals\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n        // 120 bits = 12 bytes (the encoded loc) + 3 bytes (empty low space)\\n            _loc := and(shr(120, memView), _mask)\\n        }\\n    }\\n\\n    /**\\n     * @notice          The number of memory words this memory view occupies, rounded up.\\n     * @param memView   The view\\n     * @return          uint256 - The number of memory words\\n     */\\n    function words(bytes29 memView) internal pure returns (uint256) {\\n        return uint256(len(memView)).add(32) / 32;\\n    }\\n\\n    /**\\n     * @notice          The in-memory footprint of a fresh copy of the view.\\n     * @param memView   The view\\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\\n     */\\n    function footprint(bytes29 memView) internal pure returns (uint256) {\\n        return words(memView) * 32;\\n    }\\n\\n    /**\\n     * @notice          The number of bytes of the view.\\n     * @param memView   The view\\n     * @return          _len - The length of the view\\n     */\\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\\n        uint256 _mask = LOW_12_MASK;  // assembly can't use globals\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            _len := and(shr(24, memView), _mask)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Returns the endpoint of `memView`.\\n     * @param memView   The view\\n     * @return          uint256 - The endpoint of `memView`\\n     */\\n    function end(bytes29 memView) internal pure returns (uint256) {\\n        return loc(memView) + len(memView);\\n    }\\n\\n    /**\\n     * @notice          Safe slicing without memory modification.\\n     * @param memView   The view\\n     * @param _index    The start index\\n     * @param _len      The length\\n     * @param newType   The new type\\n     * @return          bytes29 - The new view\\n     */\\n    function slice(bytes29 memView, uint256 _index, uint256 _len, uint40 newType) internal pure returns (bytes29) {\\n        uint256 _loc = loc(memView);\\n\\n        // Ensure it doesn't overrun the view\\n        if (_loc.add(_index).add(_len) > end(memView)) {\\n            return NULL;\\n        }\\n\\n        _loc = _loc.add(_index);\\n        return build(newType, _loc, _len);\\n    }\\n\\n    /**\\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\\n     * @param memView   The view\\n     * @param _len      The length\\n     * @param newType   The new type\\n     * @return          bytes29 - The new view\\n     */\\n    function prefix(bytes29 memView, uint256 _len, uint40 newType) internal pure returns (bytes29) {\\n        return slice(memView, 0, _len, newType);\\n    }\\n\\n    /**\\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\\n     * @param memView   The view\\n     * @param _len      The length\\n     * @param newType   The new type\\n     * @return          bytes29 - The new view\\n     */\\n    function postfix(bytes29 memView, uint256 _len, uint40 newType) internal pure returns (bytes29) {\\n        return slice(memView, uint256(len(memView)).sub(_len), _len, newType);\\n    }\\n\\n    /**\\n     * @notice          Construct an error message for an indexing overrun.\\n     * @param _loc      The memory address\\n     * @param _len      The length\\n     * @param _index    The index\\n     * @param _slice    The slice where the overrun occurred\\n     * @return          err - The err\\n     */\\n    function indexErrOverrun(\\n        uint256 _loc,\\n        uint256 _len,\\n        uint256 _index,\\n        uint256 _slice\\n    ) internal pure returns (string memory err) {\\n        (, uint256 a) = encodeHex(_loc);\\n        (, uint256 b) = encodeHex(_len);\\n        (, uint256 c) = encodeHex(_index);\\n        (, uint256 d) = encodeHex(_slice);\\n        err = string(\\n            abi.encodePacked(\\n                \\\"TypedMemView/index - Overran the view. Slice is at 0x\\\",\\n                uint48(a),\\n                \\\" with length 0x\\\",\\n                uint48(b),\\n                \\\". Attempted to index at offset 0x\\\",\\n                uint48(c),\\n                \\\" with length 0x\\\",\\n                uint48(d),\\n                \\\".\\\"\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice          Load up to 32 bytes from the view onto the stack.\\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\\n     *                  This can be immediately cast to a smaller fixed-length byte array.\\n     *                  To automatically cast to an integer, use `indexUint`.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @param _bytes    The bytes\\n     * @return          result - The 32 byte result\\n     */\\n    function index(bytes29 memView, uint256 _index, uint8 _bytes) internal pure returns (bytes32 result) {\\n        if (_bytes == 0) {return bytes32(0);}\\n        if (_index.add(_bytes) > len(memView)) {\\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\\n        }\\n        require(_bytes <= 32, \\\"TypedMemView/index - Attempted to index more than 32 bytes\\\");\\n\\n        // FIXME: why the following lines need `unchecked`\\n        unchecked {\\n            uint8 bitLength = _bytes * 8;\\n            uint256 _loc = loc(memView);\\n            uint256 _mask = leftMask(bitLength);\\n            assembly {\\n                // solium-disable-previous-line security/no-inline-assembly\\n                result := and(mload(add(_loc, _index)), _mask)\\n            }   \\n        }\\n\\n    }\\n\\n    /**\\n     * @notice          Parse an unsigned integer from the view at `_index`.\\n     * @dev             Requires that the view have >= `_bytes` bytes following that index.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @param _bytes    The bytes\\n     * @return          result - The unsigned integer\\n     */\\n    function indexUint(bytes29 memView, uint256 _index, uint8 _bytes) internal pure returns (uint256 result) {\\n        return uint256(index(memView, _index, _bytes)) >> ((32 - _bytes) * 8);\\n    }\\n\\n    /**\\n     * @notice          Parse an unsigned integer from LE bytes.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @param _bytes    The bytes\\n     * @return          result - The unsigned integer\\n     */\\n    function indexLEUint(bytes29 memView, uint256 _index, uint8 _bytes) internal pure returns (uint256 result) {\\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\\n    }\\n\\n    /**\\n     * @notice          Parse an address from the view at `_index`. Requires that the view have >= 20 bytes\\n     *                  following that index.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @return          address - The address\\n     */\\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\\n        return address(uint160(indexUint(memView, _index, 20)));\\n    }\\n\\n    /**\\n     * @notice          Return the keccak256 hash of the underlying memory\\n     * @param memView   The view\\n     * @return          digest - The keccak256 hash of the underlying memory\\n     */\\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            digest := keccak256(_loc, _len)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Return the sha2 digest of the underlying memory.\\n     * @dev             We explicitly deallocate memory afterwards.\\n     * @param memView   The view\\n     * @return          digest - The sha2 hash of the underlying memory\\n     */\\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\\n            digest := mload(ptr)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\\n     * @param memView   The pre-image\\n     * @return          digest - the Digest\\n     */\\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2\\n            pop(staticcall(gas(), 3, ptr, 0x20, ptr, 0x20)) // rmd160\\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\\n        }\\n    }\\n\\n    /**\\n     * @notice          Implements bitcoin's hash256 (double sha2)\\n     * @param memView   A view of the preimage\\n     * @return          digest - the Digest\\n     */\\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\\n            pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha2 #2\\n            digest := mload(ptr)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Return true if the underlying memory is equal. Else false.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the underlying memory is equal\\n     */\\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        return (loc(left) == loc(right) && len(left) == len(right)) || keccak(left) == keccak(right);\\n    }\\n\\n    /**\\n     * @notice          Return false if the underlying memory is equal. Else true.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - False if the underlying memory is equal\\n     */\\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        return !untypedEqual(left, right);\\n    }\\n\\n    /**\\n     * @notice          Compares type equality.\\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the types are the same\\n     */\\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        return left == right || (typeOf(left) == typeOf(right) && keccak(left) == keccak(right));\\n    }\\n\\n    /**\\n     * @notice          Compares type inequality.\\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the types are not the same\\n     */\\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        return !equal(left, right);\\n    }\\n\\n    /**\\n     * @notice          Copy the view to a location, return an unsafe memory reference\\n     * @dev             Super Dangerous direct memory access.\\n     *\\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\\n     *                  As such it MUST be consumed IMMEDIATELY.\\n     *                  This function is private to prevent unsafe usage by callers.\\n     * @param memView   The view\\n     * @param _newLoc   The new location\\n     * @return          written - the unsafe memory reference\\n     */\\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\\n        require(notNull(memView), \\\"TypedMemView/copyTo - Null pointer deref\\\");\\n        require(isValid(memView), \\\"TypedMemView/copyTo - Invalid pointer deref\\\");\\n        uint256 _len = len(memView);\\n        uint256 _oldLoc = loc(memView);\\n\\n        uint256 ptr;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40)\\n        // revert if we're writing in occupied memory\\n            if gt(ptr, _newLoc) {\\n                revert(0x60, 0x20) // empty revert message\\n            }\\n\\n        // use the identity precompile to copy\\n        // guaranteed not to fail, so pop the success\\n            pop(staticcall(gas(), 4, _oldLoc, _len, _newLoc, _len))\\n        }\\n\\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\\n    }\\n\\n    /**\\n     * @notice          Copies the referenced memory to a new loc in memory, returning a `bytes` pointing to\\n     *                  the new memory\\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n     * @param memView   The view\\n     * @return          ret - The view pointing to the new memory\\n     */\\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\\n        uint256 ptr;\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n            ret := ptr\\n        }\\n        unsafeCopyTo(memView, ptr + 0x20);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\\n            mstore(ptr, _len) // write len of new array (in bytes)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\\n     * @dev             Super Dangerous direct memory access.\\n     *\\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\\n     *                  As such it MUST be consumed IMMEDIATELY.\\n     *                  This function is private to prevent unsafe usage by callers.\\n     * @param memViews  The views\\n     * @return          unsafeView - The conjoined view pointing to the new memory\\n     */\\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location) private view returns (bytes29 unsafeView) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n        // revert if we're writing in occupied memory\\n            if gt(ptr, _location) {\\n                revert(0x60, 0x20) // empty revert message\\n            }\\n        }\\n\\n        uint256 _offset = 0;\\n        for (uint256 i = 0; i < memViews.length; i ++) {\\n            bytes29 memView = memViews[i];\\n            unsafeCopyTo(memView, _location + _offset);\\n            _offset += len(memView);\\n        }\\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\\n    }\\n\\n    /**\\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\\n     * @param memViews  The views\\n     * @return          bytes32 - The keccak256 digest\\n     */\\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\\n        uint256 ptr;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n        }\\n        return keccak(unsafeJoin(memViews, ptr));\\n    }\\n\\n    /**\\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\\n     * @param memViews  The views\\n     * @return          bytes32 - The sha256 digest\\n     */\\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\\n        uint256 ptr;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n        }\\n        return sha2(unsafeJoin(memViews, ptr));\\n    }\\n\\n    /**\\n     * @notice          copies all views, joins them into a new bytearray.\\n     * @param memViews  The views\\n     * @return          ret - The new byte array\\n     */\\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\\n        uint256 ptr;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n        }\\n\\n        bytes29 _newView = unsafeJoin(memViews, ptr + 0x20);\\n        uint256 _written = len(_newView);\\n        uint256 _footprint = footprint(_newView);\\n\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n        // store the legnth\\n            mstore(ptr, _written)\\n        // new pointer is old + 0x20 + the footprint of the body\\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\\n            ret := ptr\\n        }\\n    }\\n}\",\"keccak256\":\"0x07b6228f8fd945c89660e826ec237a12c2fb2fbb2401b29899e4cd72e97875b2\",\"license\":\"MIT\"},\"contracts/libraries/ViewBTC.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./TypedMemView.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\nlibrary ViewBTC {\\n    using TypedMemView for bytes29;\\n    using SafeMath for uint256;\\n\\n    // The target at minimum Difficulty. Also the target of the genesis block\\n    uint256 internal constant DIFF1_TARGET = 0xffff0000000000000000000000000000000000000000000000000000;\\n\\n    uint256 internal constant RETARGET_PERIOD = 2 * 7 * 24 * 60 * 60;  // 2 weeks in seconds\\n    uint256 internal constant RETARGET_PERIOD_BLOCKS = 2016;  // 2 weeks in blocks\\n\\n    enum BTCTypes {\\n        Unknown,            // 0x0\\n        CompactInt,         // 0x1\\n        ScriptSig,          // 0x2 - with length prefix\\n        Outpoint,           // 0x3\\n        TxIn,               // 0x4\\n        IntermediateTxIns,  // 0x5 - used in vin parsing\\n        Vin,                // 0x6\\n        ScriptPubkey,       // 0x7 - with length prefix\\n        PKH,                // 0x8 - the 20-byte payload digest\\n        WPKH,               // 0x9 - the 20-byte payload digest\\n        WSH,                // 0xa - the 32-byte payload digest\\n        SH,                 // 0xb - the 20-byte payload digest\\n        OpReturnPayload,    // 0xc\\n        TxOut,              // 0xd\\n        IntermediateTxOuts, // 0xe - used in vout parsing\\n        Vout,               // 0xf\\n        Header,             // 0x10\\n        HeaderArray,        // 0x11\\n        MerkleNode,         // 0x12\\n        MerkleStep,         // 0x13\\n        MerkleArray         // 0x14\\n    }\\n\\n    // TODO: any way to bubble up more info?\\n    // @notice             requires `memView` to be of a specified type\\n    // @param memView      a 29-byte view with a 5-byte type\\n    // @param t            the expected type (e.g. BTCTypes.Outpoint, BTCTypes.TxIn, etc)\\n    // @return             passes if it is the correct type, errors if not\\n    modifier typeAssert(bytes29 memView, BTCTypes t) {\\n        memView.assertType(uint40(t));\\n        _;\\n    }\\n\\n    // Revert with an error message re: non-minimal VarInts\\n    function revertNonMinimal(bytes29 ref) private pure returns (string memory) {\\n        (, uint256 g) = TypedMemView.encodeHex(ref.indexUint(0, uint8(ref.len())));\\n        string memory err = string(\\n            abi.encodePacked(\\n                \\\"Non-minimal var int. Got 0x\\\",\\n                uint144(g)\\n            )\\n        );\\n        revert(err);\\n    }\\n\\n    // @notice             reads a compact int from the view at the specified index\\n    // @param memView      a 29-byte view with a 5-byte type\\n    // @param _index       the index\\n    // @return             the compact int at the specified index\\n    function indexCompactInt(bytes29 memView, uint256 _index) internal pure returns (uint64 number) {\\n        uint256 flag = memView.indexUint(_index, 1);\\n        if (flag <= 0xfc) {\\n            return uint64(flag);\\n        } else if (flag == 0xfd) {\\n            number = uint64(memView.indexLEUint(_index + 1, 2));\\n            if (compactIntLength(number) != 3) {revertNonMinimal(memView.slice(_index, 3, 0));}\\n        } else if (flag == 0xfe) {\\n            number = uint64(memView.indexLEUint(_index + 1, 4));\\n            if (compactIntLength(number) != 5) {revertNonMinimal(memView.slice(_index, 5, 0));}\\n        } else if (flag == 0xff) {\\n            number = uint64(memView.indexLEUint(_index + 1, 8));\\n            if (compactIntLength(number) != 9) {revertNonMinimal(memView.slice(_index, 9, 0));}\\n        }\\n    }\\n\\n    // @notice         gives the total length (in bytes) of a CompactInt-encoded number\\n    // @param number   the number as uint64\\n    // @return         the compact integer as uint8\\n    function compactIntLength(uint64 number) internal pure returns (uint8) {\\n        if (number <= 0xfc) {\\n            return 1;\\n        } else if (number <= 0xffff) {\\n            return 3;\\n        } else if (number <= 0xffffffff) {\\n            return 5;\\n        } else {\\n            return 9;\\n        }\\n    }\\n\\n    // @notice             extracts the LE txid from an outpoint\\n    // @param _outpoint    the outpoint\\n    // @return             the LE txid\\n    function txidLE(bytes29 _outpoint) internal pure typeAssert(_outpoint, BTCTypes.Outpoint) returns (bytes32) {\\n        return _outpoint.index(0, 32);\\n    }\\n\\n    // @notice             extracts the index as an integer from the outpoint\\n    // @param _outpoint    the outpoint\\n    // @return             the index\\n    function outpointIdx(bytes29 _outpoint) internal pure typeAssert(_outpoint, BTCTypes.Outpoint) returns (uint32) {\\n        return uint32(_outpoint.indexLEUint(32, 4));\\n    }\\n\\n    // @notice          extracts the outpoint from an input\\n    // @param _input    the input\\n    // @return          the outpoint as a typed memory\\n    function outpoint(bytes29 _input) internal pure typeAssert(_input, BTCTypes.TxIn) returns (bytes29) {\\n        return _input.slice(0, 36, uint40(BTCTypes.Outpoint));\\n    }\\n\\n    // @notice           extracts the script sig from an input\\n    // @param _input     the input\\n    // @return           the script sig as a typed memory\\n    function scriptSig(bytes29 _input) internal pure typeAssert(_input, BTCTypes.TxIn) returns (bytes29) {\\n        uint64 scriptLength = indexCompactInt(_input, 36);\\n        return _input.slice(36, compactIntLength(scriptLength) + scriptLength, uint40(BTCTypes.ScriptSig));\\n    }\\n\\n    // @notice         extracts the sequence from an input\\n    // @param _input   the input\\n    // @return         the sequence\\n    function sequence(bytes29 _input) internal pure typeAssert(_input, BTCTypes.TxIn) returns (uint32) {\\n        uint64 scriptLength = indexCompactInt(_input, 36);\\n        uint256 scriptEnd = 36 + compactIntLength(scriptLength) + scriptLength;\\n        return uint32(_input.indexLEUint(scriptEnd, 4));\\n    }\\n\\n    // @notice         determines the length of the first input in an array of inputs\\n    // @param _inputs  the vin without its length prefix\\n    // @return         the input length\\n    function inputLength(bytes29 _inputs) internal pure typeAssert(_inputs, BTCTypes.IntermediateTxIns) returns (uint256) {\\n        uint64 scriptLength = indexCompactInt(_inputs, 36);\\n        return uint256(compactIntLength(scriptLength)) + uint256(scriptLength) + 36 + 4;\\n    }\\n\\n    // @notice         extracts the input at a specified index\\n    // @param _vin     the vin\\n    // @param _index   the index of the desired input\\n    // @return         the desired input\\n    function indexVin(bytes29 _vin, uint256 _index) internal pure typeAssert(_vin, BTCTypes.Vin) returns (bytes29) {\\n        uint256 _nIns = uint256(indexCompactInt(_vin, 0));\\n        uint256 _viewLen = _vin.len();\\n        require(_index < _nIns, \\\"Vin read overrun\\\");\\n\\n        uint256 _offset = uint256(compactIntLength(uint64(_nIns)));\\n        bytes29 _remaining;\\n        for (uint256 _i = 0; _i < _index; _i += 1) {\\n            _remaining = _vin.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxIns));\\n            _offset += inputLength(_remaining);\\n        }\\n\\n        _remaining = _vin.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxIns));\\n        uint256 _len = inputLength(_remaining);\\n        return _vin.slice(_offset, _len, uint40(BTCTypes.TxIn));\\n    }\\n\\n    // @notice         extracts the raw LE bytes of the output value\\n    // @param _output  the output\\n    // @return         the raw LE bytes of the output value\\n    function valueBytes(bytes29 _output) internal pure typeAssert(_output, BTCTypes.TxOut) returns (bytes8) {\\n        return bytes8(_output.index(0, 8));\\n    }\\n\\n    // @notice         extracts the value from an output\\n    // @param _output  the output\\n    // @return         the value\\n    // function value(bytes29 _output) internal pure typeAssert(_output, BTCTypes.TxOut) returns (uint64) {\\n    //     return uint64(_output.indexLEUint(0, 8));\\n    // }\\n    function value(bytes29 _output) internal pure returns (uint64) {\\n        return uint64(_output.indexLEUint(0, 8));\\n    }\\n\\n    // @notice             extracts the scriptPubkey from an output\\n    // @param _output      the output\\n    // @return             the scriptPubkey\\n    function scriptPubkey(bytes29 _output) internal pure typeAssert(_output, BTCTypes.TxOut) returns (bytes29) {\\n        uint64 scriptLength = indexCompactInt(_output, 8);\\n        return _output.slice(8, compactIntLength(scriptLength) + scriptLength, uint40(BTCTypes.ScriptPubkey));\\n    }\\n\\n    function scriptPubkeyBytes(bytes29 _output) internal pure typeAssert(_output, BTCTypes.TxOut) returns (bytes32) {\\n        uint64 scriptLength = indexCompactInt(_output, 8);\\n        bytes29 scriptPubkeyView = _output.slice(8, compactIntLength(scriptLength) + scriptLength, uint40(BTCTypes.ScriptPubkey));\\n        return scriptPubkeyView.index(compactIntLength(scriptLength), uint8(scriptLength));\\n    }\\n\\n    // @notice             determines the length of the first output in an array of outputs\\n    // @param _outputs     the vout without its length prefix\\n    // @return             the output length\\n    function outputLength(bytes29 _outputs) internal pure typeAssert(_outputs, BTCTypes.IntermediateTxOuts) returns (uint256) {\\n        uint64 scriptLength = indexCompactInt(_outputs, 8);\\n        return uint256(compactIntLength(scriptLength)) + uint256(scriptLength) + 8;\\n    }\\n\\n    // @notice         extracts the output at a specified index\\n    // @param _vout    the vout\\n    // @param _index   the index of the desired output\\n    // @return         the desired output\\n    // function indexVout(bytes29 _vout, uint256 _index) internal pure typeAssert(_vout, BTCTypes.Vout) returns (bytes29) {\\n    //     uint256 _nOuts = uint256(indexCompactInt(_vout, 0));\\n    //     uint256 _viewLen = _vout.len();\\n    //     require(_index < _nOuts, \\\"Vout read overrun\\\");\\n\\n    //     uint256 _offset = uint256(compactIntLength(uint64(_nOuts)));\\n    //     bytes29 _remaining;\\n    //     for (uint256 _i = 0; _i < _index; _i += 1) {\\n    //         _remaining = _vout.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxOuts));\\n    //         _offset += outputLength(_remaining);\\n    //     }\\n\\n    //     _remaining = _vout.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxOuts));\\n    //     uint256 _len = outputLength(_remaining);\\n    //     return _vout.slice(_offset, _len, uint40(BTCTypes.TxOut));\\n    // }\\n    function indexVout(bytes29 _vout, uint256 _index) internal pure returns (bytes29) {\\n        uint256 _nOuts = uint256(indexCompactInt(_vout, 0));\\n        uint256 _viewLen = _vout.len();\\n        require(_index < _nOuts, \\\"Vout read overrun\\\");\\n\\n        uint256 _offset = uint256(compactIntLength(uint64(_nOuts)));\\n        bytes29 _remaining;\\n        for (uint256 _i = 0; _i < _index; _i += 1) {\\n            _remaining = _vout.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxOuts));\\n            _offset += outputLength(_remaining);\\n        }\\n\\n        _remaining = _vout.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxOuts));\\n        uint256 _len = outputLength(_remaining);\\n        return _vout.slice(_offset, _len, uint40(BTCTypes.TxOut));\\n    }\\n\\n    // @notice         extracts the Op Return Payload\\n    // @param _spk     the scriptPubkey\\n    // @return         the Op Return Payload (or null if not a valid Op Return output)\\n    function opReturnPayload(bytes29 _spk) internal pure typeAssert(_spk, BTCTypes.ScriptPubkey) returns (bytes29) {\\n        uint64 _bodyLength = indexCompactInt(_spk, 0);\\n        uint64 _payloadLen = uint64(_spk.indexUint(3, 1));\\n\\n        // TODO: the max length of op return (with the prefixes) is 83, please check it for other consequences\\n        // Also the _spk.indexUint(3, 1) != _bodyLength - 3 has changed from _spk.indexUint(2, 1) != _bodyLength - 2\\n        if (_bodyLength > 83 || _bodyLength < 4 || _spk.indexUint(1, 1) != 0x6a || _spk.indexUint(3, 1) != _bodyLength - 3) {\\n            return TypedMemView.nullView();\\n        }\\n        // TODO: check, the previous starting index of slice was 3\\n        return _spk.slice(4, _payloadLen, uint40(BTCTypes.OpReturnPayload));\\n    }\\n\\n    // @notice         extracts the payload from a scriptPubkey\\n    // @param _spk     the scriptPubkey\\n    // @return         the payload (or null if not a valid PKH, SH, WPKH, or WSH output)\\n    function payload(bytes29 _spk) internal pure typeAssert(_spk, BTCTypes.ScriptPubkey) returns (bytes29) {\\n        uint256 _spkLength = _spk.len();\\n        uint256 _bodyLength = indexCompactInt(_spk, 0);\\n        if (_bodyLength > 0x22 || _bodyLength < 0x16 || _bodyLength + 1 != _spkLength) {\\n            return TypedMemView.nullView();\\n        }\\n\\n        // Legacy\\n        if (_bodyLength == 0x19 && _spk.indexUint(0, 4) == 0x1976a914 && _spk.indexUint(_spkLength - 2, 2) == 0x88ac) {\\n            return _spk.slice(4, 20, uint40(BTCTypes.PKH));\\n        } else if (_bodyLength == 0x17 && _spk.indexUint(0, 3) == 0x17a914 && _spk.indexUint(_spkLength - 1, 1) == 0x87) {\\n            return _spk.slice(3, 20, uint40(BTCTypes.SH));\\n        }\\n\\n        // Witness v0\\n        if (_spk.indexUint(1, 1) == 0) {\\n            uint256 _payloadLen = _spk.indexUint(2, 1);\\n            if (_bodyLength != 0x22 && _bodyLength != 0x16 || _payloadLen != _bodyLength - 2) {\\n                return TypedMemView.nullView();\\n            }\\n            uint40 newType = uint40(_payloadLen == 0x20 ? BTCTypes.WSH : BTCTypes.WPKH);\\n            return _spk.slice(3, _payloadLen, newType);\\n        }\\n\\n        return TypedMemView.nullView();\\n    }\\n\\n    // @notice     (loosely) verifies an spk and converts to a typed memory\\n    // @dev        will return null in error cases. Will not check for disabled opcodes.\\n    // @param _spk the spk\\n    // @return     the typed spk (or null if error)\\n    function tryAsSPK(bytes29 _spk) internal pure typeAssert(_spk, BTCTypes.Unknown) returns (bytes29) {\\n        if (_spk.len() == 0) {\\n            return TypedMemView.nullView();\\n        }\\n        uint64 _len = indexCompactInt(_spk, 0);\\n        if (_spk.len() == compactIntLength(_len) + _len) {\\n            return _spk.castTo(uint40(BTCTypes.ScriptPubkey));\\n        } else {\\n            return TypedMemView.nullView();\\n        }\\n    }\\n\\n    // @notice     verifies the vin and converts to a typed memory\\n    // @dev        will return null in error cases\\n    // @param _vin the vin\\n    // @return     the typed vin (or null if error)\\n    function tryAsVin(bytes29 _vin) internal pure typeAssert(_vin, BTCTypes.Unknown) returns (bytes29) {\\n        if (_vin.len() == 0) {\\n            return TypedMemView.nullView();\\n        }\\n        uint64 _nIns = indexCompactInt(_vin, 0);\\n        uint256 _viewLen = _vin.len();\\n        if (_nIns == 0) {\\n            return TypedMemView.nullView();\\n        }\\n\\n        uint256 _offset = uint256(compactIntLength(_nIns));\\n        for (uint256 i = 0; i < _nIns; i++) {\\n            if (_offset >= _viewLen) {\\n                // We've reached the end, but are still trying to read more\\n                return TypedMemView.nullView();\\n            }\\n            bytes29 _remaining = _vin.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxIns));\\n            _offset += inputLength(_remaining);\\n        }\\n        if (_offset != _viewLen) {\\n            return TypedMemView.nullView();\\n        }\\n        return _vin.castTo(uint40(BTCTypes.Vin));\\n    }\\n\\n    // @notice         verifies the vout and converts to a typed memory\\n    // @dev            will return null in error cases\\n    // @param _vout    the vout\\n    // @return         the typed vout (or null if error)\\n    function tryAsVout(bytes29 _vout) internal pure typeAssert(_vout, BTCTypes.Unknown) returns (bytes29) {\\n        if (_vout.len() == 0) {\\n            return TypedMemView.nullView();\\n        }\\n        uint64 _nOuts = indexCompactInt(_vout, 0);\\n\\n        uint256 _viewLen = _vout.len();\\n        if (_nOuts == 0) {\\n            return TypedMemView.nullView();\\n        }\\n\\n        uint256 _offset = uint256(compactIntLength(_nOuts));\\n        for (uint256 i = 0; i < _nOuts; i++) {\\n            if (_offset >= _viewLen) {\\n                // We've reached the end, but are still trying to read more\\n                return TypedMemView.nullView();\\n            }\\n            bytes29 _remaining = _vout.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxOuts));\\n            _offset += outputLength(_remaining);\\n        }\\n        if (_offset != _viewLen) {\\n            return TypedMemView.nullView();\\n        }\\n        return _vout.castTo(uint40(BTCTypes.Vout));\\n    }\\n\\n    // @notice         verifies the header and converts to a typed memory\\n    // @dev            will return null in error cases\\n    // @param _header  the header\\n    // @return         the typed header (or null if error)\\n    function tryAsHeader(bytes29 _header) internal pure typeAssert(_header, BTCTypes.Unknown) returns (bytes29) {\\n        if (_header.len() != 80) {\\n            return TypedMemView.nullView();\\n        }\\n        return _header.castTo(uint40(BTCTypes.Header));\\n    }\\n\\n\\n    // @notice         Index a header array.\\n    // @dev            Errors on overruns\\n    // @param _arr     The header array\\n    // @param index    The 0-indexed location of the header to get\\n    // @return         the typed header at `index`\\n    function indexHeaderArray(bytes29 _arr, uint256 index) internal pure typeAssert(_arr, BTCTypes.HeaderArray) returns (bytes29) {\\n        uint256 _start = index * (80);\\n        return _arr.slice(_start, 80, uint40(BTCTypes.Header));\\n    }\\n\\n\\n    // @notice     verifies the header array and converts to a typed memory\\n    // @dev        will return null in error cases\\n    // @param _arr the header array\\n    // @return     the typed header array (or null if error)\\n    function tryAsHeaderArray(bytes29 _arr) internal pure typeAssert(_arr, BTCTypes.Unknown) returns (bytes29) {\\n        if (_arr.len() % 80 != 0) {\\n            return TypedMemView.nullView();\\n        }\\n        return _arr.castTo(uint40(BTCTypes.HeaderArray));\\n    }\\n\\n    // @notice     verifies the merkle array and converts to a typed memory\\n    // @dev        will return null in error cases\\n    // @param _arr the merkle array\\n    // @return     the typed merkle array (or null if error)\\n    function tryAsMerkleArray(bytes29 _arr) internal pure typeAssert(_arr, BTCTypes.Unknown) returns (bytes29) {\\n        if (_arr.len() % 32 != 0) {\\n            return TypedMemView.nullView();\\n        }\\n        return _arr.castTo(uint40(BTCTypes.MerkleArray));\\n    }\\n\\n    // @notice         extracts the merkle root from the header\\n    // @param _header  the header\\n    // @return         the merkle root\\n    // function merkleRoot(bytes29 _header) internal pure typeAssert(_header, BTCTypes.Header) returns (bytes32) {\\n    //     return _header.index(36, 32);\\n    // }\\n\\n    function merkleRoot(bytes29 _header) internal pure returns (bytes32) {\\n        return _header.index(36, 32);\\n    }\\n\\n    // @notice         extracts the target from the header\\n    // @param _header  the header\\n    // @return         the target\\n    function target(bytes29  _header) internal pure typeAssert(_header, BTCTypes.Header) returns (uint256) {\\n        uint256 _mantissa = _header.indexLEUint(72, 3);\\n        require(_header.indexUint(75, 1) > 2, \\\"ViewBTC: invalid target difficulty\\\");\\n        uint256 _exponent = _header.indexUint(75, 1) - 3;\\n        return _mantissa * (256 ** _exponent);\\n    }\\n\\n    // @notice         calculates the difficulty from a target\\n    // @param _target  the target\\n    // @return         the difficulty\\n    function toDiff(uint256  _target) internal pure returns (uint256) {\\n        return DIFF1_TARGET / (_target);\\n    }\\n\\n    // @notice         extracts the difficulty from the header\\n    // @param _header  the header\\n    // @return         the difficulty\\n    function diff(bytes29  _header) internal pure typeAssert(_header, BTCTypes.Header) returns (uint256) {\\n        return toDiff(target(_header));\\n    }\\n\\n    // @notice         extracts the timestamp from the header\\n    // @param _header  the header\\n    // @return         the timestamp\\n    function time(bytes29  _header) internal pure typeAssert(_header, BTCTypes.Header) returns (uint32) {\\n        return uint32(_header.indexLEUint(68, 4));\\n    }\\n\\n    // @notice         extracts the parent hash from the header\\n    // @param _header  the header\\n    // @return         the parent hash\\n    function parent(bytes29 _header) internal pure typeAssert(_header, BTCTypes.Header) returns (bytes32) {\\n        return _header.index(4, 32);\\n    }\\n\\n    // @notice         calculates the Proof of Work hash of the header\\n    // @param _header  the header\\n    // @return         the Proof of Work hash\\n    function workHash(bytes29 _header) internal view typeAssert(_header, BTCTypes.Header) returns (bytes32) {\\n        return _header.hash256();\\n    }\\n\\n    // @notice         calculates the Proof of Work hash of the header, and converts to an integer\\n    // @param _header  the header\\n    // @return         the Proof of Work hash as an integer\\n    function work(bytes29 _header) internal view typeAssert(_header, BTCTypes.Header) returns (uint256) {\\n        return TypedMemView.reverseUint256(uint256(workHash(_header)));\\n    }\\n\\n    // @notice          Concatenates and hashes two inputs for merkle proving\\n    // @dev             Not recommended to call directly.\\n    // @param _a        The first hash\\n    // @param _b        The second hash\\n    // @return          The double-sha256 of the concatenated hashes\\n    function _merkleStep(bytes32 _a, bytes32 _b) internal view returns (bytes32 digest) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            mstore(ptr, _a)\\n            mstore(add(ptr, 0x20), _b)\\n            pop(staticcall(gas(), 2, ptr, 0x40, ptr, 0x20)) // sha2 #1\\n            pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha2 #2\\n            digest := mload(ptr)\\n        }\\n    }\\n\\n    // @notice         verifies a merkle proof\\n    // @param _leaf    the leaf in LE format\\n    // @param _proof   the proof nodes in LE format\\n    // @param _root    the merkle root in BE format (same as the merkle root that is stored in the block header)\\n    // @param _index   the index\\n    // @return         true if valid, false if otherwise\\n    function checkMerkle(\\n        bytes32 _leaf,\\n        bytes29 _proof,\\n        bytes32 _root,\\n        uint256 _index\\n    ) internal view returns (bool) {\\n        uint256 nodes = _proof.len() / 32;\\n        if (nodes == 0) {\\n            return _leaf == _root;\\n        }\\n\\n        uint256 _idx = _index;\\n        bytes32 _current = _leaf;\\n\\n        for (uint i = 0; i < nodes; i++) {\\n            bytes32 _next = _proof.index(i * 32, 32);\\n            if (_idx % 2 == 1) {\\n                _current = _merkleStep(_next, _current);\\n            } else {\\n                _current = _merkleStep(_current, _next);\\n            }\\n            _idx >>= 1;\\n        }\\n\\n        return revertBytes32(_current) == _root;\\n    }\\n\\n    function revertBytes32(bytes32 input) internal pure returns(bytes32) {\\n        bytes memory temp;\\n        bytes32 result;\\n        for (uint i = 0; i < 32; i++) {\\n            temp = abi.encodePacked(temp, input[31-i]);\\n        }\\n        assembly {\\n            result := mload(add(temp, 32))\\n        }\\n        return result;\\n    }\\n    // @notice                 performs the bitcoin difficulty retarget\\n    // @dev                    implements the Bitcoin algorithm precisely\\n    // @param _previousTarget  the target of the previous period\\n    // @param _firstTimestamp  the timestamp of the first block in the difficulty period\\n    // @param _secondTimestamp the timestamp of the last block in the difficulty period\\n    // @return                 the new period's target threshold\\n    function retargetAlgorithm(\\n        uint256 _previousTarget,\\n        uint256 _firstTimestamp,\\n        uint256 _secondTimestamp\\n    ) internal pure returns (uint256) {\\n        uint256 _elapsedTime = _secondTimestamp - _firstTimestamp;\\n\\n        // Normalize ratio to factor of 4 if very long or very short\\n        if (_elapsedTime < RETARGET_PERIOD / (4)) {\\n            _elapsedTime = RETARGET_PERIOD / (4);\\n        }\\n        if (_elapsedTime > RETARGET_PERIOD * (4)) {\\n            _elapsedTime = RETARGET_PERIOD * (4);\\n        }\\n\\n        /*\\n            NB: high targets e.g. ffff0020 can cause overflows here\\n                so we divide it by 256**2, then multiply by 256**2 later\\n                we know the target is evenly divisible by 256**2, so this isn't an issue\\n        */\\n        uint256 _adjusted = _previousTarget / (65536) * (_elapsedTime);\\n        return _adjusted.div(RETARGET_PERIOD) * (65536);\\n    }\\n}\",\"keccak256\":\"0x717642dd00a53999cd4098b9084db98c9228a2d39d5fcaa9dbd935c1673aa183\",\"license\":\"MIT\"},\"contracts/lockers/interfaces/ILockers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ILockers {\\n\\n    // Events\\n\\n    event RequestAddLocker(\\n        address indexed lockerTargetAddress,\\n        bytes lockerRedeemScript,\\n        uint TDTLockedAmount,\\n        uint nativeTokenLockedAmount,\\n        bool indexed isScriptHash\\n    );\\n\\n    event RequestRemoveLocker(\\n        address indexed lockerTargetAddress,\\n        bytes lockerRedeemScript,\\n        uint TDTUnlockedAmount,\\n        uint nativeTokenUnlockedAmount,\\n        uint netMinted        //   = totalMinted  - totalBurnt which needs to be burnt\\n    );\\n\\n    event LockerAdded(\\n        address indexed lockerTargetAddress,\\n        bytes lockerRedeemScript,\\n        uint TDTLockedAmount,\\n        uint nativeTokenLockedAmount,\\n        bool isScriptHash\\n    // uint addingTime\\n    );\\n\\n    event LockerRemoved(\\n        address indexed lockerTargetAddress,\\n        bytes lockerRedeemScript,\\n        uint TDTUnlockedAmount,\\n        uint nativeTokenUnlockedAmount\\n    );\\n\\n    event LockerSlashed(\\n        address indexed lockerTargetAddress,\\n        uint slashedCollateralAmount\\n    );\\n\\n    // Read-only functions\\n\\n    function getLockerTargetAddress(address  _lockerScriptHash) external view returns (address);\\n\\n    function isLocker(address _lockerScriptHash) external view returns (bool);\\n\\n    function getNumberOfLockers() external view returns (uint);\\n\\n    function getLockerRedeemScript(address _lockerTargetAddress) external view returns (bytes memory);\\n\\n    function isActive(address _lockerTargetAddress) external view returns (bool);\\n\\n    function getLockerCapacity(address _lockerTargetAddress) external view returns (uint);\\n\\n    // State-changing functions\\n\\n    function pauseLocker() external;\\n\\n    function unPauseLocker() external;\\n\\n    function addMinter(address _account) external;\\n\\n    function removeMinter(address _account) external;\\n\\n    function addBurner(address _account) external;\\n\\n    function removeBurner(address _account) external;\\n\\n    function mint(address _lockerScriptHash, address _receiver, uint _amount) external returns(uint);\\n\\n    function burn(address _lockerScriptHash, uint256 _amount) external returns(uint);\\n\\n    function setMinRequiredTDTLockedAmount(uint _minRequiredTDTLockedAmount) external;\\n\\n    function setMinRequiredTNTLockedAmount(uint _minRequiredTNTLockedAmount) external;\\n\\n    function setPriceOracle(address _priceOracle) external;\\n\\n    function setCCBurnRouter(address _ccBurnRouter) external;\\n\\n    function setExchangeConnector(address _exchangeConnector) external;\\n\\n    function setTeleBTC(address _teleBTC) external;\\n\\n    function setCollateralRatio(uint _collateralRatio) external;\\n\\n    function liquidateLocker(\\n        address _lockerTargetAddress,\\n        uint _btcAmount\\n    ) external returns (bool);\\n\\n    function requestToBecomeLocker(\\n        bytes memory _candidateBitcoinAddress,\\n        address _candidateBitcoinDecodedAddress,\\n        uint _lockedTDTAmount,\\n        uint _lockedNativeTokenAmount\\n    ) external payable returns (bool);\\n\\n    function revokeRequest() external returns (bool);\\n\\n    function addLocker(address _lockerTargetAddress) external returns (bool);\\n\\n    function requestToRemoveLocker() external returns (bool);\\n\\n    function removeLocker(address _lockerTargetAddress) external returns(bool);\\n\\n    function selfRemoveLocker() external returns (bool);\\n\\n    function slashLocker(\\n        address _lockerTargetAddress, \\n        uint _rewardAmount,\\n        address _rewardRecipient,\\n        uint _amount, \\n        address _recipient\\n    ) external returns(bool);\\n\\n}\",\"keccak256\":\"0x7f8291aecb443be2b4a41e6c24d78adab86acecf9ae97af4be5a6dc36b5c1354\",\"license\":\"MIT\"},\"contracts/relay/interfaces/IBitcoinRelay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBitcoinRelay {\\n    // Structures\\n\\n    /// @notice                 \\tStructure for recording block header\\n    /// @param selfHash             Hash of block header\\n    /// @param parentHash          \\tHash of parent block header\\n    /// @param merkleRoot       \\tMerkle root of transactions in the block\\n    /// @param relayer              Address of relayer who submitted the block header\\n    struct blockHeader {\\n        bytes32 selfHash;\\n        bytes32 parentHash;\\n        bytes32 merkleRoot;\\n        address relayer;\\n        uint gasPrice;\\n    }\\n\\n    // Events\\n\\n    /// @notice                     Emits when a block header is added\\n    /// @param height               Height of submitted header\\n    /// @param selfHash             Hash of submitted header\\n    /// @param parentHash           Parent hash of submitted header\\n    /// @param relayer              Address of relayer who submitted the block header\\n    event BlockAdded(\\n        uint indexed height,\\n        bytes32 selfHash,\\n        bytes32 indexed parentHash,\\n        address indexed relayer\\n    );\\n\\n    /// @notice                     Emits when a block header gets finalized\\n    /// @param height               Height of the header\\n    /// @param selfHash             Hash of the header\\n    /// @param parentHash           Parent hash of the header\\n    /// @param relayer              Address of relayer who submitted the block header\\n    /// @param rewardAmountTNT      Amount of reward that the relayer receives in target native token\\n    /// @param rewardAmountTDT      Amount of reward that the relayer receives in TDT\\n    event BlockFinalized(\\n        uint indexed height,\\n        bytes32 selfHash,\\n        bytes32 parentHash,\\n        address indexed relayer,\\n        uint rewardAmountTNT,\\n        uint rewardAmountTDT\\n    );\\n\\n    // Read-only functions\\n\\n    function relayGenesisHash() external view returns (bytes32);\\n\\n    function initialHeight() external view returns(uint);\\n\\n    function lastSubmittedHeight() external view returns(uint);\\n\\n    function finalizationParameter() external view returns(uint);\\n\\n    function TeleportDAOToken() external view returns(address);\\n\\n    function relayerPercentageFee() external view returns(uint);\\n\\n    function epochLength() external view returns(uint);\\n\\n    function lastEpochQueries() external view returns(uint);\\n\\n    function currentEpochQueries() external view returns(uint);\\n\\n    function baseQueries() external view returns(uint);\\n\\n    function submissionGasUsed() external view returns(uint);\\n\\n    function getBlockHeaderHash(uint height, uint index) external view returns(bytes32);\\n\\n    function getBlockHeaderFee (uint _height, uint _index) external view returns(uint);\\n\\n    function getNumberOfSubmittedHeaders(uint height) external view returns (uint);\\n\\n    function getCurrentEpochDifficulty() external view returns (uint256);\\n\\n    function getPrevEpochDifficulty() external view returns (uint256);\\n\\n    function availableTDT() external view returns(uint);\\n\\n    function availableTNT() external view returns(uint);\\n\\n    function findHeight(bytes32 _hash) external view returns (uint256);\\n\\n    function findAncestor(bytes32 _hash, uint256 _offset) external view returns (bytes32); // see if it's needed\\n\\n    function isAncestor(bytes32 _ancestor, bytes32 _descendant, uint256 _limit) external view returns (bool); // see if it's needed\\n\\n    function rewardAmountInTDT() external view returns (uint);\\n\\n    // State-changing functions\\n\\n    function pauseRelay() external;\\n\\n    function unPauseRelay() external;\\n\\n    function setRewardAmountInTDT(uint _rewardAmountInTDT) external;\\n\\n    function setFinalizationParameter(uint _finalizationParameter) external;\\n\\n    function setRelayerPercentageFee(uint _relayerPercentageFee) external;\\n\\n    function setEpochLength(uint _epochLength) external;\\n\\n    function setBaseQueries(uint _baseQueries) external;\\n\\n    function setSubmissionGasUsed(uint _submissionGasUsed) external;\\n\\n    function checkTxProof(\\n        bytes32 txid,\\n        uint blockHeight,\\n        bytes calldata intermediateNodes,\\n        uint index\\n    ) external payable returns (bool);\\n\\n    function addHeaders(bytes calldata _anchor, bytes calldata _headers) external returns (bool);\\n\\n    function addHeadersWithRetarget(\\n        bytes calldata _oldPeriodStartHeader,\\n        bytes calldata _oldPeriodEndHeader,\\n        bytes calldata _headers\\n    ) external returns (bool);\\n\\n}\",\"keccak256\":\"0x457fb0f8a6082c881c9da37003c8690061f911ada2a7bda96a7917f20a6877a9\",\"license\":\"MIT\"},\"contracts/routers/CCBurnRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../libraries/TxHelper.sol\\\";\\nimport \\\"./interfaces/ICCBurnRouter.sol\\\";\\nimport \\\"../erc20/interfaces/ITeleBTC.sol\\\";\\nimport \\\"../relay/interfaces/IBitcoinRelay.sol\\\";\\nimport \\\"../lockers/interfaces/ILockers.sol\\\";\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract CCBurnRouter is ICCBurnRouter, Ownable, ReentrancyGuard {\\n    address public override relay;\\n    address public override lockers;\\n    address public override teleBTC;\\n    address public override treasury;\\n    mapping(address => burnRequest[]) public burnRequests;\\n    mapping(bytes32 => bool) private isPaid;\\n    uint public override transferDeadline;\\n    uint public override protocolPercentageFee; // min amount is %0.01\\n    uint public override slasherPercentageReward; // min amount is %1\\n    uint public override bitcoinFee;\\n\\n    /// @notice                             Handles cross-chain burn requests\\n    /// @dev                                Lockers use this contract for coordinating of burning wrapped tokens\\n    /// @param _relay                       Address of relay contract\\n    /// @param _lockers                     Address of lockers contract\\n    /// @param _treasury                    Address of the treasury of the protocol\\n    /// @param _transferDeadline            Dealine of sending BTC to user\\n    /// @param _protocolPercentageFee       Percentage of tokens that user pays to protocol for burning\\n    /// @param _bitcoinFee                  Transaction fee on Bitcoin that lockers pay\\n    constructor(\\n        address _relay,\\n        address _lockers,\\n        address _treasury,\\n        uint _transferDeadline,\\n        uint _protocolPercentageFee,\\n        uint _slasherPercentageReward,\\n        uint _bitcoinFee\\n    ) {\\n        relay = _relay;\\n        lockers = _lockers;\\n        treasury = _treasury;\\n        transferDeadline = _transferDeadline;\\n        protocolPercentageFee = _protocolPercentageFee;\\n        slasherPercentageReward = _slasherPercentageReward;\\n        bitcoinFee = _bitcoinFee;\\n    }\\n\\n    /// @notice                         Shows if a burn request has been done or not\\n    /// @param _lockerTargetAddress\\t\\tLocker's address on the target chain\\n    /// @param _index                   The index number of the request for the locker\\n    function isTransferred(address _lockerTargetAddress, uint _index) external view override returns (bool) {\\n        return burnRequests[_lockerTargetAddress][_index].isTransferred;\\n    }\\n\\n    /// @notice               Changes relay contract address\\n    /// @dev                  Only owner can call this\\n    /// @param _relay         The new relay contract address\\n    function setRelay(address _relay) external override onlyOwner {\\n        relay = _relay;\\n    }\\n\\n    /// @notice               Changes lockers contract address\\n    /// @dev                  Only owner can call this\\n    /// @param _lockers       The new lockers contract address\\n    function setLockers(address _lockers) external override onlyOwner {\\n        lockers = _lockers;\\n    }\\n\\n    /// @notice                 Changes wrapped token contract address\\n    /// @dev                    Only owner can call this\\n    /// @param _teleBTC         The new wrapped token contract address\\n    function setTeleBTC(address _teleBTC) external override onlyOwner {\\n        teleBTC = _teleBTC;\\n    }\\n\\n    /// @notice                     Changes protocol treasury address\\n    /// @dev                        Only owner can call this\\n    /// @param _treasury            The new treasury address\\n    function setTreasury(address _treasury) external override onlyOwner {\\n        treasury = _treasury;\\n    }\\n\\n    /// @notice                             Changes deadline for sending tokens\\n    /// @dev                                Only owner can call this\\n    /// @param _transferDeadline            The new transfer deadline\\n    function setTransferDeadline(uint _transferDeadline) external override onlyOwner {\\n        transferDeadline = _transferDeadline;\\n    }\\n\\n    /// @notice                             Changes protocol percentage fee for burning tokens\\n    /// @dev                                Only owner can call this\\n    /// @param _protocolPercentageFee       The new protocol percentage fee\\n    function setProtocolPercentageFee(uint _protocolPercentageFee) external override onlyOwner {\\n        protocolPercentageFee = _protocolPercentageFee;\\n    }\\n\\n    /// @notice                            Changes slasher percentage reward for disputing lockers\\n    /// @dev                               Only owner can call this\\n    /// @param _slasherPercentageReward    The new slasher percentage reward\\n    function setSlasherPercentageReward(uint _slasherPercentageReward) external override onlyOwner {\\n        slasherPercentageReward = _slasherPercentageReward;\\n    }\\n\\n    /// @notice                       Changes Bitcoin transaction fee\\n    /// @dev                          Only owner can call this\\n    /// @param _bitcoinFee            The new Bitcoin transaction fee\\n    function setBitcoinFee(uint _bitcoinFee) external override onlyOwner {\\n        bitcoinFee = _bitcoinFee;\\n    }\\n\\n    /// @notice                             Burns wrapped tokens and records the burn request\\n    /// @dev                                After submitting the burn request, lockers have a limited time to send BTC\\n    /// @param _amount                      Amount of wrapped tokens that user wants to burn\\n    /// @param _userPubKeyHash   Address of user on Bitcoin\\n    /// @param _isScriptHash   \\t\\t        Whether the user's Bitcoin address is script hash or pubKey hash\\n    /// @param _isSegwit\\t\\t\\t   \\t    Whether the user's Bitcoin address is Segwit or nonSegwit\\n    /// @param _lockerScriptHash\\tLocker's address on Bitcoin\\n    /// @return                             True if request is recorded successfully\\n    function ccBurn(\\n        uint _amount,\\n        address _userPubKeyHash,\\n        bool _isScriptHash,\\n        bool _isSegwit,\\n        address _lockerScriptHash\\n    ) external nonReentrant override returns (bool) {\\n        // Checks if the locker address is valid\\n        require(\\n            ILockers(lockers).isLocker(_lockerScriptHash),\\n            \\\"CCBurnRouter: locker address is not valid\\\"\\n        );\\n\\n        // Transfers users's teleBTC\\n        ITeleBTC(teleBTC).transferFrom(msg.sender, address(this), _amount);\\n\\n        uint remainedAmount = _getFee(\\n            _amount,\\n            ILockers(lockers).getLockerTargetAddress(_lockerScriptHash)\\n        );\\n\\n        // Burns remained wrapped tokens\\n        ITeleBTC(teleBTC).approve(lockers, remainedAmount);\\n        uint burntAmount = ILockers(lockers).burn(_lockerScriptHash, remainedAmount);\\n\\n        // Get the target address of the locker from its Bitcoin address\\n        address _lockerTargetAddress = ILockers(lockers)\\n        .getLockerTargetAddress(_lockerScriptHash);\\n\\n        _saveBurnRequest(\\n            _amount,\\n            burntAmount,\\n            _userPubKeyHash,\\n            _isScriptHash,\\n            _isSegwit,\\n            IBitcoinRelay(relay).lastSubmittedHeight(),\\n            _lockerTargetAddress\\n        );\\n\\n        emit CCBurn(\\n            msg.sender,\\n            _userPubKeyHash,\\n            _isScriptHash,\\n            _isSegwit,\\n            _amount,\\n            burntAmount,\\n            _lockerTargetAddress,\\n            burnRequests[_lockerTargetAddress].length - 1, // index\\n            burnRequests[_lockerTargetAddress][burnRequests[_lockerTargetAddress].length - 1].deadline\\n        );\\n        return true;\\n    }\\n\\n    /// @notice                             Checks the correctness of burn proof\\n    /// @dev                                Makes isTransferred flag true for the paid requests\\n    /// @param _version                     Version of the transaction containing the burn transaction\\n    /// @param _vin                         Inputs of the transaction containing the burn transaction\\n    /// @param _vout                        Outputs of the transaction containing the burn transaction\\n    /// @param _locktime                    Lock time of the transaction containing the burn transaction\\n    /// @param _blockNumber                 Height of the block containing the burn transaction\\n    /// @param _intermediateNodes           Merkle inclusion proof for transaction containing the burn transaction\\n    /// @param _index                       Index of transaction containing the burn transaction in the block\\n    /// @param _lockerScriptHash Locker's address on Bitcoin that this burn request belongs to\\n    /// @param _startIndex                  Index to start searching for unpaid burn requests in the list\\n    /// @param _endIndex                    Index to finish searching for unpaid burn requests in the list\\n    /// @return\\n    function burnProof(\\n        bytes4 _version,\\n        bytes memory _vin,\\n        bytes calldata _vout,\\n        bytes4 _locktime,\\n        uint256 _blockNumber,\\n        bytes calldata _intermediateNodes,\\n        uint _index,\\n        address _lockerScriptHash,\\n        uint _startIndex,\\n        uint _endIndex\\n    ) external payable nonReentrant override returns (bool) {\\n        // Get the target address of the locker from its script hash\\n        address _lockerTargetAddress = ILockers(lockers)\\n        .getLockerTargetAddress(_lockerScriptHash);\\n\\n        // Checks the correctness of input indices\\n        require(\\n            _endIndex < burnRequests[_lockerTargetAddress].length &&\\n            _startIndex<= _endIndex,\\n            'CCBurnRouter: burnProof wrong index input'\\n        );\\n\\n        // Checks if the locker address is valid\\n        require(\\n            ILockers(lockers).isLocker(_lockerScriptHash),\\n            \\\"CCBurnRouter: locker address is not valid\\\"\\n        );\\n\\n        // Checks inclusion of transaction\\n        bytes32 txId = _calculateTxId(_version, _vin, _vout, _locktime);\\n        require(\\n            _isConfirmed(\\n                txId,\\n                _blockNumber,\\n                _intermediateNodes,\\n                _index\\n            ),\\n            \\\"CCBurnRouter: transaction has not finalized yet\\\"\\n        );\\n\\n        // Checks the paid burn requests\\n        uint paidOutputCounter = _checkPaidBurnRequests(\\n            _lockerTargetAddress,\\n            _vout,\\n            _startIndex,\\n            _endIndex\\n        );\\n\\n        // Checks if there is an output that goes back to the locker\\n        _updateIsPaid(paidOutputCounter, _vout, _lockerScriptHash, txId);\\n\\n        return true;\\n    }\\n\\n    /// @notice                             Slashes lockers if they did not paid burn request before its deadline\\n    /// @dev\\n    /// @param _lockerScriptHash locker's Bitcoin address that the unpaid request belongs to\\n    /// @param _indices                     Array of indices of the requests for that locker\\n    /// @return                             True if dispute is successfull\\n    function disputeBurn(address _lockerScriptHash, uint[] memory _indices) external nonReentrant override returns (bool) {\\n        // Checks if the locker address is valid\\n        require(ILockers(lockers).isLocker(_lockerScriptHash),\\n            \\\"CCBurnRouter: locker address is not valid\\\");\\n        // Get the target address of the locker from its Bitcoin address\\n        address _lockerTargetAddress = ILockers(lockers)\\n        .getLockerTargetAddress(_lockerScriptHash);\\n        // Goes through provided indexes of burn requests to see if locker should be slashed\\n        for (uint i = 0; i < _indices.length; i++) {\\n            require(\\n                !burnRequests[_lockerTargetAddress][_indices[i]].isTransferred,\\n                \\\"CCBurnRouter: request has been paid before\\\"\\n            );\\n            require(\\n                burnRequests[_lockerTargetAddress][_indices[i]].deadline < IBitcoinRelay(relay).lastSubmittedHeight(),\\n                \\\"CCBurnRouter: payback deadline has not passed yet\\\"\\n            );\\n\\n            // Slashes locker and sends the slashed amount to the user\\n            ILockers(lockers).slashLocker(\\n                _lockerTargetAddress,\\n                burnRequests[_lockerTargetAddress][_indices[i]].amount*slasherPercentageReward/100, // Slasher reward\\n                msg.sender, // Slasher address\\n                burnRequests[_lockerTargetAddress][_indices[i]].amount,\\n                burnRequests[_lockerTargetAddress][_indices[i]].sender\\n            );\\n        }\\n        return true;\\n    }\\n\\n    /// @notice                                 Slashes a locker if they issue a tx that doesn't match any burn request\\n    /// @dev\\n    /// @param _lockerScriptHash                Suspicious locker's script hash\\n    /// @param _inputIndex                      Index of the input in vin that is from the locker\\n    /// @param _version                         Version of the malicious transaction\\n    /// @param _vin                             Inputs of the malicious transaction\\n    /// @param _vout                            Outputs of the malicious transaction\\n    /// @param _locktime                        Lock time of the malicious transaction\\n    /// @param _blockNumber                     The block number in which the malicious tx has happened\\n    /// @param _intermediateNodes               Merkle inclusion proof for the malicious transaction\\n    /// @param _index                           Index of transaction containing the malicious tx\\n    /// @return                                 True if dispute is successfull\\n    function disputeLocker(\\n        address _lockerScriptHash,\\n        uint _inputIndex,\\n        bytes4 _version,\\n        bytes memory _vin,\\n        bytes calldata _vout,\\n        bytes4 _locktime,\\n        uint256 _blockNumber,\\n        bytes calldata _intermediateNodes,\\n        uint _index\\n    ) external payable nonReentrant override returns (bool) {\\n        // Checks if the locker address is valid\\n        require(\\n            ILockers(lockers).isLocker(_lockerScriptHash),\\n            \\\"CCBurnRouter: locker address is not valid\\\"\\n        );\\n\\n        // Checks if the provided transaction is valid:\\n        // 1. Checks inclusion of transaction\\n        bytes32 txId = _calculateTxId(_version, _vin, _vout, _locktime);\\n        require(\\n            _isConfirmed(\\n                txId,\\n                _blockNumber,\\n                _intermediateNodes,\\n                _index\\n            ),\\n            \\\"CCBurnRouter: transaction is not finalized\\\"\\n        );\\n\\n        // 2. Check if the transaction belongs to the locker\\n        // First get the target address of the locker from its Bitcoin address\\n        address _lockerTargetAddress = ILockers(lockers)\\n        .getLockerTargetAddress(_lockerScriptHash);\\n        bytes memory lockerRedeemScript = ILockers(lockers)\\n        .getLockerRedeemScript(_lockerTargetAddress);\\n        require(\\n            _isTxFromLocker(_vin, _inputIndex, lockerRedeemScript),\\n            \\\"CCBurnRouter: transaction doesn't belong to locker\\\"\\n        );\\n\\n        // 3. Check if transaction is not for any burn request\\n        // note: if the deadline for the transaction has passed and no proof has been provided\\n        // for it so that isPaid is still false for it, we assume the transaction was malicious\\n        require(\\n            !isPaid[txId],\\n            \\\"CCBurnRouter: transaction has been paid before\\\"\\n        );\\n        require(\\n            IBitcoinRelay(relay).lastSubmittedHeight() > (transferDeadline + _blockNumber),\\n            \\\"CCBurnRouter: payback deadline has not passed yet\\\"\\n        );\\n\\n        // Finds total outputs value\\n        uint totalValue = TxHelper.parseTotalValue(_vout);\\n\\n        // Slashes locker\\n        ILockers(lockers).slashLocker(\\n            _lockerTargetAddress,\\n            totalValue*slasherPercentageReward/100, // Slasher reward\\n            msg.sender, // Slasher address\\n            totalValue,\\n            lockers\\n        );\\n\\n        // Emit the event\\n        emit LockerDispute(\\n            _lockerTargetAddress,\\n            _blockNumber,\\n            txId\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @notice                             Checks the burn requests that get paid by this transaction\\n    /// @dev                                Counts the number of outputs that are paying a burn request\\n    /// @param _lockerTargetAddress         Address of the locker on the target chain\\n    /// @param _vout                        Outputs of a transaction\\n    /// @param _startIndex                  Index to start searching for unpaid burn requests in the list\\n    /// @param _endIndex                    Index to finish searching for unpaid burn requests in the list\\n    /// @return                             paidOutputCounter that is the number of the outputs that paid a burn request\\n    function _checkPaidBurnRequests(\\n        address _lockerTargetAddress,\\n        bytes memory _vout,\\n        uint _startIndex,\\n        uint _endIndex\\n    ) internal returns (uint paidOutputCounter) {\\n        uint parsedAmount;\\n        // Below variable is for checking that every output in vout is related to a burn request\\n        // so that we can set isPaid = true for the whole txId\\n        paidOutputCounter = 0;\\n        for (uint i = _startIndex; i <= _endIndex; i++) {\\n            // Checks that the request has not been paid and its deadline has not passed\\n            if (\\n                !burnRequests[_lockerTargetAddress][i].isTransferred &&\\n            burnRequests[_lockerTargetAddress][i].deadline >= block.number\\n            ) {\\n                (parsedAmount,) = TxHelper.parseValueAndData(\\n                    _vout,\\n                    burnRequests[_lockerTargetAddress][i].userPubKeyHash\\n                );\\n\\n                if (burnRequests[_lockerTargetAddress][i].remainedAmount == parsedAmount) {\\n                    burnRequests[_lockerTargetAddress][i].isTransferred = true;\\n                    paidOutputCounter = paidOutputCounter + 1;\\n                    emit PaidCCBurn(\\n                        burnRequests[_lockerTargetAddress][i].sender,\\n                        burnRequests[_lockerTargetAddress][i].userPubKeyHash,\\n                        parsedAmount,\\n                        _lockerTargetAddress,\\n                        i\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice                                 Checks if all outputs of the transaction paid a burn request\\n    /// @dev                                    One output might return the remaining value to the locker\\n    /// @param _paidOutputCounter               Number of the outputs that pay a burn request\\n    /// @param _vout                            Outputs of a transaction\\n    /// @param _lockerScriptHash                Address of the locker on Bitcoin\\n    /// @param _txId                            Transaction Id of the transaction\\n    function _updateIsPaid(\\n        uint _paidOutputCounter,\\n        bytes memory _vout,\\n        address _lockerScriptHash,\\n        bytes32 _txId\\n    ) internal {\\n        uint parsedAmount;\\n        (parsedAmount,) = TxHelper.parseValueAndData(_vout, _lockerScriptHash);\\n        if (parsedAmount != 0 &&\\n            _paidOutputCounter + 1 == TxHelper.numberOfOutputs(_vout)) {\\n            isPaid[_txId] = true;\\n        } else if (parsedAmount == 0 &&\\n            _paidOutputCounter == TxHelper.numberOfOutputs(_vout)) {\\n            isPaid[_txId] = true;\\n        }\\n    }\\n\\n    /// @notice                      Checks if the locker is among transaction senders\\n    /// @param _vin                  Inputs of the transaction\\n    /// @param _inputIndex           Index of the input that is from the locker\\n    /// @param _lockerRedeemScript   Address of the locker on Bitcoin\\n    /// @return                      True if the transaction sender is the locker\\n    function _isTxFromLocker(\\n        bytes memory _vin,\\n        uint _inputIndex,\\n        bytes memory _lockerRedeemScript\\n    ) internal view returns (bool) {\\n        bytes memory scriptSig;\\n        bytes memory txInputAddress;\\n        scriptSig = TxHelper.parseInputScriptSig(_vin, _inputIndex);\\n        txInputAddress = TxHelper.sliceBytes(\\n            scriptSig,\\n            scriptSig.length - _lockerRedeemScript.length,\\n            scriptSig.length - 1\\n        );\\n        return txInputAddress.length == _lockerRedeemScript.length &&\\n        keccak256(txInputAddress) == keccak256(_lockerRedeemScript);\\n    }\\n\\n    /// @notice                           Records burn request of user\\n    /// @param _amount                    Amount of wrapped token that user wants to burn\\n    /// @param _remainedAmount            Amount of wrapped token that actually gets burnt after deducting fees from the original value (_amount)\\n    /// @param _userPubKeyHash User's Bitcoin address\\n    /// @param _isScriptHash              Whether user's Bitcoin address is script hash or not\\n    /// @param _isSegwit                  Whether user's Bitcoin address is segwit or nonSegwit\\n    /// @param _lastSubmittedHeight       Last block header height submitted on the relay contract\\n    /// @param _lockerTargetAddress       Locker's target chain address that the request belongs to\\n    function _saveBurnRequest(\\n        uint _amount,\\n        uint _remainedAmount,\\n        address _userPubKeyHash,\\n        bool _isScriptHash,\\n        bool _isSegwit,\\n        uint _lastSubmittedHeight,\\n        address _lockerTargetAddress\\n    ) internal {\\n        burnRequest memory request;\\n        request.amount = _amount;\\n        request.remainedAmount = _remainedAmount;\\n        request.sender = msg.sender;\\n        request.userPubKeyHash = _userPubKeyHash;\\n        request.isScriptHash = _isScriptHash;\\n        request.isSegwit = _isSegwit;\\n        request.deadline = _lastSubmittedHeight + transferDeadline;\\n        request.isTransferred = false;\\n        burnRequests[_lockerTargetAddress].push(request);\\n    }\\n\\n    /// @notice                         Checks inclusion of the transaction in the specified block\\n    /// @dev                            Calls the relay contract to check Merkle inclusion proof\\n    /// @param _txId                    Id of the transaction\\n    /// @param _blockNumber             Height of the block containing the transaction\\n    /// @param _intermediateNodes       Merkle inclusion proof for the transaction\\n    /// @param _index                   Index of transaction in the block\\n    /// @return                         True if the transaction was included in the block\\n    function _isConfirmed(\\n        bytes32 _txId,\\n        uint256 _blockNumber,\\n        bytes memory _intermediateNodes,\\n        uint _index\\n    ) private returns (bool) {\\n        // Finds fee amount\\n        uint feeAmount = IBitcoinRelay(relay).getBlockHeaderFee(_blockNumber, 0);\\n        require(msg.value >= feeAmount, \\\"CCBurnRouter: relay fee is not sufficient\\\");\\n\\n        // Calls relay contract\\n        bytes memory data = Address.functionCallWithValue(\\n            relay,\\n            abi.encodeWithSignature(\\n                \\\"checkTxProof(bytes32,uint256,bytes,uint256)\\\",\\n                _txId,\\n                _blockNumber,\\n                _intermediateNodes,\\n                _index\\n            ),\\n            msg.value\\n        );\\n\\n        // Sends extra ETH back to msg.sender\\n        Address.sendValue(payable(msg.sender), msg.value - feeAmount);\\n\\n        return abi.decode(data, (bool));\\n    }\\n\\n    /// @notice                      Checks inclusion of the transaction in the specified block\\n    /// @dev                         Calls the relay contract to check Merkle inclusion proof\\n    /// @param _amount               Id of the transaction\\n    /// @param _lockerTargetAddress  Id of the transaction\\n    /// @return                      Remained amount after reducing fees\\n    function _getFee(\\n        uint _amount,\\n        address _lockerTargetAddress\\n    ) internal returns (uint) {\\n        // Calculates protocol fee\\n        uint protocolFee = _amount*protocolPercentageFee/10000;\\n\\n        uint remainedAmount = _amount - protocolFee - bitcoinFee;\\n        require(remainedAmount > 0, \\\"CCBurnRouter: amount is too low\\\");\\n\\n        // Transfers protocol fee\\n        ITeleBTC(teleBTC).transfer(treasury, protocolFee);\\n\\n        // Transfers bitcoin fee to locker\\n        ITeleBTC(teleBTC).transfer(_lockerTargetAddress, bitcoinFee);\\n\\n        return remainedAmount;\\n    }\\n\\n    /// @notice                      Calculates the required transaction Id from the transaction details\\n    /// @dev                         Calculates the hash of transaction details two consecutive times\\n    /// @param _version              Version of the transaction\\n    /// @param _vin                  Inputs of the transaction\\n    /// @param _vout                 Outputs of the transaction\\n    /// @param _locktime             Lock time of the transaction\\n    /// @return                      Transaction Id of the required transaction\\n    function _calculateTxId(\\n        bytes4 _version,\\n        bytes memory _vin,\\n        bytes calldata _vout,\\n        bytes4 _locktime\\n    ) internal pure returns (bytes32) {\\n        bytes32 inputHash1 = sha256(abi.encodePacked(_version, _vin, _vout, _locktime));\\n        bytes32 inputHash2 = sha256(abi.encodePacked(inputHash1));\\n        return _revertBytes32(inputHash2);\\n    }\\n\\n    /// @notice                      Reverts a Bytes32 input\\n    /// @param _input                Bytes32 input that we want to revert\\n    /// @return                      Reverted bytes32\\n    function _revertBytes32(bytes32 _input) internal pure returns (bytes32) {\\n        bytes memory temp;\\n        bytes32 result;\\n        for (uint i = 0; i < 32; i++) {\\n            temp = abi.encodePacked(temp, _input[31-i]);\\n        }\\n        assembly {\\n            result := mload(add(temp, 32))\\n        }\\n        return result;\\n    }\\n\\n}\",\"keccak256\":\"0xb263113ce86212395a5671ddf232d6d31e886dfbdb49576d0e9d3f6ebdb3d946\",\"license\":\"MIT\"},\"contracts/routers/interfaces/ICCBurnRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICCBurnRouter {\\n\\n\\t// Structures\\n\\n    /// @notice                 \\tStructure for recording burn requests\\n    /// @param amount         \\t\\tAmount of burnt tokens\\n    /// @param remainedAmount   \\tAmount that user gets (after paying fees)\\n    /// @param sender       \\t\\tAddress of user who requests burning\\n    /// @param userPubKeyHash   Public key hash of the user on Bitcoin\\n    /// @param isScriptHash   \\t\\tWhether the user's Bitcoin address is script hash or pubKey hash\\n    /// @param isSegwit\\t\\t\\t   \\tWhether the user's Bitcoin address is Segwit or nonSegwit\\n    /// @param deadline         \\tDeadline of lockers for executing the request\\n    /// @param isTransferred    \\tTrue if the request has been executed\\n    /// @param locker\\t\\t    \\tThe locker assigned to this burn request who should execute it\\n\\tstruct burnRequest {\\n\\t\\tuint amount;\\n\\t\\tuint remainedAmount;\\n\\t\\taddress sender;\\n\\t\\taddress userPubKeyHash;\\n\\t\\tbool isScriptHash;\\n\\t\\tbool isSegwit;\\n\\t\\tuint deadline;\\n\\t\\tbool isTransferred;\\n  \\t}\\n\\n  \\t// Events\\n\\n\\t/// @notice                 \\t\\tEmits when a burn request gets submitted\\n    /// @param userTargetAddress        Target address of the user\\n    /// @param userPubKeyHash       Public key hash of the user on Bitcoin\\n\\t/// @param isScriptHash   \\t\\t\\tWhether the user's Bitcoin address is script hash or pubKey hash\\n    /// @param isSegwit\\t\\t\\t   \\t\\tWhether the user's Bitcoin address is Segwit or nonSegwit\\n    /// @param amount         \\t\\t\\tAmount of burnt tokens\\n    /// @param remainedAmount   \\t\\tAmount that user gets (after paying fees)\\n\\t/// @param lockerTargetAddress\\t\\tLocker's address on the target chain\\n    /// @param index       \\t\\t\\t\\tThe index of a request for a locker\\n    /// @param deadline         \\t\\tDeadline of lockers for executing the request\\n  \\tevent CCBurn(\\n\\t\\taddress indexed userTargetAddress,\\n\\t\\taddress userPubKeyHash,\\n\\t\\tbool isScriptHash,\\n    \\tbool isSegwit,\\n\\t\\tuint amount, \\n\\t\\tuint remainedAmount, \\n\\t\\taddress indexed lockerTargetAddress,\\n\\t\\tuint index, \\n\\t\\tuint indexed deadline\\n\\t);\\n\\n\\t/// @notice                 \\t\\tEmits when a burn request gets executed\\n    /// @param userTargetAddress        Target address of the user\\n    /// @param userPubKeyHash       Public key hash of the user on Bitcoin\\n    /// @param remainedAmount   \\t\\tAmount that user gets (after paying fees)\\n\\t/// @param lockerTargetAddress\\t\\tLocker's address on the target chain\\n    /// @param index       \\t\\t\\t\\tThe index of a request for a locker\\n\\tevent PaidCCBurn(\\n\\t\\taddress indexed userTargetAddress, \\n\\t\\taddress userPubKeyHash, \\n\\t\\tuint remainedAmount, \\n\\t\\taddress indexed lockerTargetAddress, \\n\\t\\tuint index\\n\\t);\\n\\n\\t/// @notice                 \\t\\tEmits when a locker gets slashed for withdrawing BTC\\n\\t/// @param _lockerTargetAddress\\t\\tLocker's address on the target chain\\n\\t/// @param _blockNumber\\t\\t\\t\\tBlock number of the malicious tx\\n\\t/// @param txId\\t\\t\\t\\t\\t\\tTransaction ID of the malicious tx\\n\\tevent LockerDispute(\\n        address _lockerTargetAddress,\\n    \\tuint _blockNumber,\\n        bytes32 txId\\n    );\\n\\n\\t// Read-only functions\\n\\n\\tfunction relay() external view returns (address);\\n\\n\\tfunction lockers() external view returns (address);\\n\\n\\tfunction teleBTC() external view returns (address);\\n\\n\\tfunction treasury() external view returns (address);\\n\\n\\tfunction transferDeadline() external view returns (uint);\\n\\n\\tfunction protocolPercentageFee() external view returns (uint);\\n\\n\\tfunction slasherPercentageReward() external view returns (uint);\\n\\n\\tfunction bitcoinFee() external view returns (uint); // Bitcoin transaction fee\\n\\n\\tfunction isTransferred(address _lockerTargetAddress, uint _index) external view returns (bool);\\n\\n\\t// State-changing functions\\n\\n\\tfunction setRelay(address _relay) external;\\n\\n\\tfunction setLockers(address _lockers) external;\\n\\n\\tfunction setTeleBTC(address _teleBTC) external;\\n\\n\\tfunction setTreasury(address _treasury) external;\\n\\n\\tfunction setTransferDeadline(uint _transferDeadline) external;\\n\\n\\tfunction setProtocolPercentageFee(uint _protocolPercentageFee) external;\\n\\n\\tfunction setSlasherPercentageReward(uint _slasherPercentageReward) external;\\n\\n\\tfunction setBitcoinFee(uint _bitcoinFee) external;\\n\\n\\tfunction ccBurn(\\n\\t\\tuint _amount, \\n\\t\\taddress _userPubKeyHash,\\n\\t\\tbool _isScriptHash,\\n    \\tbool _isSegwit,\\n\\t\\taddress _lockerTargetAddress\\n\\t) external returns (bool);\\n\\n\\tfunction burnProof(\\n\\t\\tbytes4 _version,\\n\\t\\tbytes memory _vin,\\n\\t\\tbytes calldata _vout,\\n\\t\\tbytes4 _locktime,\\n\\t\\tuint256 _blockNumber,\\n\\t\\tbytes calldata _intermediateNodes,\\n\\t\\tuint _index,\\n\\t\\taddress _lockerTargetAddress,\\n\\t\\tuint _startIndex,\\n\\t\\tuint _endIndex\\n\\t) external payable returns (bool);\\n\\n\\tfunction disputeBurn(\\n\\t\\taddress _lockerTargetAddress, \\n\\t\\tuint[] memory _indices\\n\\t) external returns (bool);\\n\\n\\tfunction disputeLocker(\\n\\t\\taddress _lockerTargetAddress,\\n        uint _inputIndex,\\n\\t\\tbytes4 _version,\\n\\t\\tbytes memory _vin,\\n\\t\\tbytes calldata _vout,\\n\\t\\tbytes4 _locktime,\\n\\t\\tuint256 _blockNumber,\\n\\t\\tbytes calldata _intermediateNodes,\\n\\t\\tuint _index\\n\\t) external payable returns (bool);\\n}\",\"keccak256\":\"0xfbd4b0f0c697ac45d38da4ffb987a8b7dfd0d0a10ebb313e0dc0f1932c92f258\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162004a4438038062004a44833981016040819052620000349162000106565b6200003f3362000099565b60018055600280546001600160a01b03199081166001600160a01b03998a161790915560038054821697891697909717909655600580549096169490961693909317909355600855600991909155600a55600b5562000176565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200010157600080fd5b919050565b600080600080600080600060e0888a03121562000121578283fd5b6200012c88620000e9565b96506200013c60208901620000e9565b95506200014c60408901620000e9565b9450606088015193506080880151925060a0880151915060c0880151905092959891949750929550565b6148be80620001866000396000f3fe6080604052600436106101665760003560e01c80638d3d78cd116100d1578063c805f68b1161008a578063f0f4426011610064578063f0f44260146103f9578063f2fde38b14610419578063f47e224014610439578063f8f46abc146104a657610166565b8063c805f68b14610399578063cdbe3741146103b9578063e89c98c6146103d957610166565b80638d3d78cd146102ef5780638da5cb5b1461030f578063b14d35321461032d578063b59589d11461034d578063b74d0d351461036d578063bed6a6021461038357610166565b806361d027b31161012357806361d027b314610247578063715018a61461026757806375c651d51461027c5780637ed557481461028f5780637f0f1817146102af5780637ffe9a92146102cf57610166565b806316afc0c81461016b5780631812adb6146101935780631876dec4146101b7578063419cba7f146101ef5780634782bc36146102055780635c4f5f3e14610227575b600080fd5b61017e61017936600461425a565b6104c6565b60405190151581526020015b60405180910390f35b34801561019f57600080fd5b506101a960095481565b60405190815260200161018a565b3480156101c357600080fd5b506003546101d7906001600160a01b031681565b6040516001600160a01b03909116815260200161018a565b3480156101fb57600080fd5b506101a9600a5481565b34801561021157600080fd5b506102256102203660046143bb565b6107f5565b005b34801561023357600080fd5b506102256102423660046143bb565b610824565b34801561025357600080fd5b506005546101d7906001600160a01b031681565b34801561027357600080fd5b50610225610853565b61017e61028a366004614140565b610889565b34801561029b57600080fd5b506102256102aa3660046143bb565b610e1b565b3480156102bb57600080fd5b506102256102ca366004614022565b610e4a565b3480156102db57600080fd5b5061017e6102ea366004614115565b610e96565b3480156102fb57600080fd5b506004546101d7906001600160a01b031681565b34801561031b57600080fd5b506000546001600160a01b03166101d7565b34801561033957600080fd5b50610225610348366004614022565b610eee565b34801561035957600080fd5b506002546101d7906001600160a01b031681565b34801561037957600080fd5b506101a9600b5481565b34801561038f57600080fd5b506101a960085481565b3480156103a557600080fd5b506102256103b4366004614022565b610f3a565b3480156103c557600080fd5b506102256103d43660046143bb565b610f86565b3480156103e557600080fd5b5061017e6103f436600461405a565b610fb5565b34801561040557600080fd5b50610225610414366004614022565b61152a565b34801561042557600080fd5b50610225610434366004614022565b611576565b34801561044557600080fd5b50610459610454366004614115565b611611565b6040805198895260208901979097526001600160a01b039586169688019690965293909216606086015215156080850152151560a084015260c0830152151560e08201526101000161018a565b3480156104b257600080fd5b5061017e6104c13660046143d3565b61168a565b6000600260015414156104f45760405162461bcd60e51b81526004016104eb90614608565b60405180910390fd5b6002600155600354604051630906867960e01b81526001600160a01b038681166004830152600092169063090686799060240160206040518083038186803b15801561053f57600080fd5b505afa158015610553573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610577919061403e565b6001600160a01b038116600090815260066020526040902054909150831080156105a15750828411155b6105ff5760405162461bcd60e51b815260206004820152602960248201527f43434275726e526f757465723a206275726e50726f6f662077726f6e6720696e60448201526819195e081a5b9c1d5d60ba1b60648201526084016104eb565b600354604051630bb18f5f60e21b81526001600160a01b03878116600483015290911690632ec63d7c9060240160206040518083038186803b15801561064457600080fd5b505afa158015610658573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061067c9190614226565b6106985760405162461bcd60e51b81526004016104eb90614539565b60006106a78f8f8f8f8f611ba9565b90506106ec818b8b8b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508d9250611cab915050565b6107505760405162461bcd60e51b815260206004820152602f60248201527f43434275726e526f757465723a207472616e73616374696f6e20686173206e6f60448201526e1d08199a5b985b1a5e9959081e595d608a1b60648201526084016104eb565b6000610796838f8f8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508b92508a9150611e2a9050565b90506107dc818f8f8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152508c92508791506121139050565b505060018080559e9d5050505050505050505050505050565b6000546001600160a01b0316331461081f5760405162461bcd60e51b81526004016104eb906145d3565b600a55565b6000546001600160a01b0316331461084e5760405162461bcd60e51b81526004016104eb906145d3565b600855565b6000546001600160a01b0316331461087d5760405162461bcd60e51b81526004016104eb906145d3565b61088760006121a9565b565b6000600260015414156108ae5760405162461bcd60e51b81526004016104eb90614608565b6002600155600354604051630bb18f5f60e21b81526001600160a01b038e8116600483015290911690632ec63d7c9060240160206040518083038186803b1580156108f857600080fd5b505afa15801561090c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109309190614226565b61094c5760405162461bcd60e51b81526004016104eb90614539565b600061095b8b8b8b8b8b611ba9565b90506109a0818787878080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250899250611cab915050565b6109ff5760405162461bcd60e51b815260206004820152602a60248201527f43434275726e526f757465723a207472616e73616374696f6e206973206e6f7460448201526908199a5b985b1a5e995960b21b60648201526084016104eb565b600354604051630906867960e01b81526001600160a01b038f81166004830152600092169063090686799060240160206040518083038186803b158015610a4557600080fd5b505afa158015610a59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7d919061403e565b600354604051630daeec8160e21b81526001600160a01b038084166004830152929350600092909116906336bbb2049060240160006040518083038186803b158015610ac857600080fd5b505afa158015610adc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b049190810190614352565b9050610b118c8f836121f9565b610b785760405162461bcd60e51b815260206004820152603260248201527f43434275726e526f757465723a207472616e73616374696f6e20646f65736e276044820152713a103132b637b733903a37903637b1b5b2b960711b60648201526084016104eb565b60008381526007602052604090205460ff1615610bee5760405162461bcd60e51b815260206004820152602e60248201527f43434275726e526f757465723a207472616e73616374696f6e2068617320626560448201526d656e2070616964206265666f726560901b60648201526084016104eb565b87600854610bfc9190614696565b600260009054906101000a90046001600160a01b03166001600160a01b0316632f796d906040518163ffffffff1660e01b815260040160206040518083038186803b158015610c4a57600080fd5b505afa158015610c5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c829190614242565b11610c9f5760405162461bcd60e51b81526004016104eb90614582565b6000610ce08c8c8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061225b92505050565b600354600a546001600160401b039290921692506001600160a01b03169063683d178c908590606490610d13908661471b565b610d1d91906146fb565b60035460405160e085901b6001600160e01b03191681526001600160a01b03938416600482015260248101929092523360448301526064820186905291909116608482015260a401602060405180830381600087803b158015610d7f57600080fd5b505af1158015610d93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610db79190614226565b50604080516001600160a01b0385168152602081018b90529081018590527ff6f1bddbffa8aee571e6ea218f1fcea640a9d004c77327bed86be0c544f0f7f49060600160405180910390a1505060018080559e9d5050505050505050505050505050565b6000546001600160a01b03163314610e455760405162461bcd60e51b81526004016104eb906145d3565b600955565b6000546001600160a01b03163314610e745760405162461bcd60e51b81526004016104eb906145d3565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0382166000908152600660205260408120805483908110610ece57634e487b7160e01b600052603260045260246000fd5b600091825260209091206005600690920201015460ff1690505b92915050565b6000546001600160a01b03163314610f185760405162461bcd60e51b81526004016104eb906145d3565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610f645760405162461bcd60e51b81526004016104eb906145d3565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610fb05760405162461bcd60e51b81526004016104eb906145d3565b600b55565b600060026001541415610fda5760405162461bcd60e51b81526004016104eb90614608565b6002600155600354604051630bb18f5f60e21b81526001600160a01b03858116600483015290911690632ec63d7c9060240160206040518083038186803b15801561102457600080fd5b505afa158015611038573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061105c9190614226565b6110785760405162461bcd60e51b81526004016104eb90614539565b600354604051630906867960e01b81526001600160a01b038581166004830152600092169063090686799060240160206040518083038186803b1580156110be57600080fd5b505afa1580156110d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f6919061403e565b905060005b835181101561151c576001600160a01b0382166000908152600660205260409020845185908390811061113e57634e487b7160e01b600052603260045260246000fd5b60200260200101518154811061116457634e487b7160e01b600052603260045260246000fd5b600091825260209091206005600690920201015460ff16156111db5760405162461bcd60e51b815260206004820152602a60248201527f43434275726e526f757465723a207265717565737420686173206265656e2070604482015269616964206265666f726560b01b60648201526084016104eb565b600260009054906101000a90046001600160a01b03166001600160a01b0316632f796d906040518163ffffffff1660e01b815260040160206040518083038186803b15801561122957600080fd5b505afa15801561123d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112619190614242565b6001600160a01b0383166000908152600660205260409020855186908490811061129b57634e487b7160e01b600052603260045260246000fd5b6020026020010151815481106112c157634e487b7160e01b600052603260045260246000fd5b906000526020600020906006020160040154106112f05760405162461bcd60e51b81526004016104eb90614582565b600354600a546001600160a01b0384811660009081526006602052604090208751919093169263683d178c928692606492908a908890811061134257634e487b7160e01b600052603260045260246000fd5b60200260200101518154811061136857634e487b7160e01b600052603260045260246000fd5b906000526020600020906006020160000154611384919061471b565b61138e91906146fb565b6001600160a01b038616600090815260066020526040902088513391908a90889081106113cb57634e487b7160e01b600052603260045260246000fd5b6020026020010151815481106113f157634e487b7160e01b600052603260045260246000fd5b60009182526020808320600692830201546001600160a01b038b16845291905260409091208a518b908990811061143857634e487b7160e01b600052603260045260246000fd5b60200260200101518154811061145e57634e487b7160e01b600052603260045260246000fd5b600091825260209091206006909102016002015460405160e087901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094529184166044840152606483015291909116608482015260a401602060405180830381600087803b1580156114d157600080fd5b505af11580156114e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115099190614226565b5080611514816147f5565b9150506110fb565b505060018080559392505050565b6000546001600160a01b031633146115545760405162461bcd60e51b81526004016104eb906145d3565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146115a05760405162461bcd60e51b81526004016104eb906145d3565b6001600160a01b0381166116055760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016104eb565b61160e816121a9565b50565b6006602052816000526040600020818154811061162d57600080fd5b60009182526020909120600690910201805460018201546002830154600384015460048501546005909501549396509194506001600160a01b03908116939082169260ff600160a01b8404811693600160a81b9004811692911688565b6000600260015414156116af5760405162461bcd60e51b81526004016104eb90614608565b6002600155600354604051630bb18f5f60e21b81526001600160a01b03848116600483015290911690632ec63d7c9060240160206040518083038186803b1580156116f957600080fd5b505afa15801561170d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117319190614226565b61174d5760405162461bcd60e51b81526004016104eb90614539565b600480546040516323b872dd60e01b81523392810192909252306024830152604482018890526001600160a01b0316906323b872dd90606401602060405180830381600087803b1580156117a057600080fd5b505af11580156117b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117d89190614226565b50600354604051630906867960e01b81526001600160a01b038481166004830152600092611864928a929091169063090686799060240160206040518083038186803b15801561182757600080fd5b505afa15801561183b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061185f919061403e565b6122de565b6004805460035460405163095ea7b360e01b81526001600160a01b039182169381019390935260248301849052929350919091169063095ea7b390604401602060405180830381600087803b1580156118bc57600080fd5b505af11580156118d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f49190614226565b50600354604051632770a7eb60e21b81526001600160a01b038581166004830152602482018490526000921690639dc29fac90604401602060405180830381600087803b15801561194457600080fd5b505af1158015611958573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061197c9190614242565b600354604051630906867960e01b81526001600160a01b0387811660048301529293506000929091169063090686799060240160206040518083038186803b1580156119c757600080fd5b505afa1580156119db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ff919061403e565b9050611a9589838a8a8a600260009054906101000a90046001600160a01b03166001600160a01b0316632f796d906040518163ffffffff1660e01b815260040160206040518083038186803b158015611a5757600080fd5b505afa158015611a6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a8f9190614242565b8761248b565b6001600160a01b03811660009081526006602052604090208054611abb90600190614763565b81548110611ad957634e487b7160e01b600052603260045260246000fd5b906000526020600020906006020160040154816001600160a01b0316336001600160a01b03167f948bf94cd4569aa4665ce0898f542065f4f9fe072d6d0f7a0b51d12d223b39728b8b8b8f896001600660008c6001600160a01b03166001600160a01b0316815260200190815260200160002080549050611b5a9190614763565b604080516001600160a01b039790971687529415156020870152921515858501526060850191909152608084015260a0830152519081900360c00190a450506001808055979650505050505050565b60008060028787878787604051602001611bc7959493929190614466565b60408051601f1981840301815290829052611be1916144ab565b602060405180830381855afa158015611bfe573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611c219190614242565b90506000600282604051602001611c3a91815260200190565b60408051601f1981840301815290829052611c54916144ab565b602060405180830381855afa158015611c71573d6000803e3d6000fd5b5050506040513d601f19601f82011682018060405250810190611c949190614242565b9050611c9f816125c1565b98975050505050505050565b60025460405163d0a8973960e01b8152600481018590526000602482018190529182916001600160a01b039091169063d0a897399060440160206040518083038186803b158015611cfb57600080fd5b505afa158015611d0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d339190614242565b905080341015611d975760405162461bcd60e51b815260206004820152602960248201527f43434275726e526f757465723a2072656c617920666565206973206e6f7420736044820152681d59999a58da595b9d60ba1b60648201526084016104eb565b600254604051600091611df4916001600160a01b0390911690611dc4908a908a908a908a906024016144f6565b60408051601f198184030181529190526020810180516001600160e01b0316634354da2560e01b17905234612641565b9050611e0933611e048434614763565b612667565b80806020019051810190611e1d9190614226565b925050505b949350505050565b600080835b838111612109576001600160a01b0387166000908152600660205260409020805482908110611e6e57634e487b7160e01b600052603260045260246000fd5b600091825260209091206005600690920201015460ff16158015611edd57506001600160a01b0387166000908152600660205260409020805443919083908110611ec857634e487b7160e01b600052603260045260246000fd5b90600052602060002090600602016004015410155b156120f7576001600160a01b03871660009081526006602052604090208054611f4291889184908110611f2057634e487b7160e01b600052603260045260246000fd5b60009182526020909120600360069092020101546001600160a01b0316612785565b506001600160a01b038816600090815260066020526040902080546001600160401b039092169350839183908110611f8a57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600602016001015414156120f7576001600160a01b038716600090815260066020526040902080546001919083908110611fde57634e487b7160e01b600052603260045260246000fd5b60009182526020909120600690910201600501805460ff191691151591909117905561200b836001614696565b6001600160a01b0388166000818152600660205260409020805492955090918390811061204857634e487b7160e01b600052603260045260246000fd5b60009182526020808320600692830201600201546001600160a01b038c81168552929091526040909220805491909216917f47767b1849eaa6c4ef7ded7ef231d038419150f57b2b489843838997a51e2a4591859081106120b957634e487b7160e01b600052603260045260246000fd5b600091825260209182902060069091020160030154604080516001600160a01b03909216825291810187905290810185905260600160405180910390a35b80612101816147f5565b915050611e2f565b5050949350505050565b600061211f8484612785565b506001600160401b03169050801580159061214b575061213e8461295d565b612149866001614696565b145b1561216e576000828152600760205260409020805460ff191660011790556121a2565b8015801561218357506121808461295d565b85145b156121a2576000828152600760205260409020805460ff191660011790555b5050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000606080612208868661298a565b915061222f828551845161221c9190614763565b6001855161222a9190614763565b6129bf565b90508351815114801561224f575083805190602001208180519060200120145b925050505b9392505050565b60008061227661226b8483612a44565b62ffffff1916612a5f565b90506000806000612288846000612b95565b6001600160401b0316905060005b818110156122d1576122a88582612cc6565b93506122b384612dd0565b6122bd90846146ae565b9250806122c9816147f5565b915050612296565b509093505050505b919050565b600080612710600954856122f2919061471b565b6122fc91906146fb565b90506000600b54828661230f9190614763565b6123199190614763565b90506000811161236b5760405162461bcd60e51b815260206004820152601f60248201527f43434275726e526f757465723a20616d6f756e7420697320746f6f206c6f770060448201526064016104eb565b6004805460055460405163a9059cbb60e01b81526001600160a01b039182169381019390935260248301859052169063a9059cbb90604401602060405180830381600087803b1580156123bd57600080fd5b505af11580156123d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123f59190614226565b5060048054600b5460405163a9059cbb60e01b81526001600160a01b0388811694820194909452602481019190915291169063a9059cbb90604401602060405180830381600087803b15801561244a57600080fd5b505af115801561245e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124829190614226565b50949350505050565b6040805161010081018252600060c0820181905260e08201528881526020810188905233918101919091526001600160a01b0386166060820152841515608082015283151560a08201526008546124e29084614696565b60c08201908152600060e083018181526001600160a01b0394851682526006602081815260408085208054600181810183559187529583902088519690940290930194855590860151918401919091558401516002830180549187166001600160a01b03199283161790556060850151600384018054608088015160a0909801511515600160a81b0260ff60a81b19981515600160a01b0260ff60a01b1994909a16919094161791909116969096179490941693909317909355516004830155516005909101805491151560ff19909216919091179055505050505050565b6000606081805b60208110156126355782856125de83601f614763565b602081106125fc57634e487b7160e01b600052603260045260246000fd5b1a60f81b6040516020016126119291906144c7565b6040516020818303038152906040529250808061262d906147f5565b9150506125c8565b50506020015192915050565b6060611e2284848460405180606001604052806029815260200161486060299139612de4565b804710156126b75760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e636500000060448201526064016104eb565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612704576040519150601f19603f3d011682016040523d82523d6000602084013e612709565b606091505b50509050806127805760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d6179206861766520726576657274656400000000000060648201526084016104eb565b505050565b600060608161279761226b8683612a44565b905062ffffff1980821614156127e85760405162461bcd60e51b8152602060048201526016602482015275151e12195b1c195c8e881d9bdd5d081a5cc81b9d5b1b60521b60448201526064016104eb565b60008060008060006127fb866000612b95565b6001600160401b0316905060005b8181101561294e5761281b8782612cc6565b955061282686612f01565b945061283185612f56565b935062ffffff19808516141561292a576017601886901c6001600160601b031614806128685750601885811c6001600160601b0316145b156128815761287e62ffffff198616600361302f565b92505b601a601886901c6001600160601b031614156128ab576128a862ffffff198616600461302f565b92505b6015601886901c6001600160601b031614156128d5576128d262ffffff198616600261302f565b92505b6021601886901c6001600160601b031614156128ff576128fc62ffffff198616600261302f565b92505b896001600160a01b0316836001600160a01b031614156129255761292286612dd0565b98505b61293c565b61293962ffffff19851661303d565b97505b80612946816147f5565b915050612809565b505050505050505b9250929050565b60008061296d61226b8483612a44565b905061297a816000612b95565b6001600160401b03169392505050565b60606000612998848461308d565b905060006129a5826130b4565b90506129b662ffffff19821661303d565b95945050505050565b60606000835b6129d0846001614696565b811015612a3b578581815181106129f757634e487b7160e01b600052603260045260246000fd5b602001015160f81c60f81b91508282604051602001612a179291906144c7565b60405160208183030381529060405292508080612a33906147f5565b9150506129c5565b50509392505050565b8151600090602084016129b664ffffffffff851682846130fe565b60008181612a75815b62ffffff19841690613142565b50601884901c6001600160601b0316612a955762ffffff195b9250612b8e565b6000612aa2856000612b95565b9050601885901c6001600160601b03166001600160401b038216612acf5762ffffff195b94505050612b8e565b6000612ada8361321c565b60ff16905060005b836001600160401b0316811015612b5657828210612b0b5762ffffff195b965050505050612b8e565b6000612b2b612b1a8486614763565b600e5b62ffffff198c169190613275565b9050612b36816132a8565b612b409084614696565b9250508080612b4e906147f5565b915050612ae2565b50818114612b6e5762ffffff195b9550505050612b8e565b612b88600f5b60d81b6301000000600160d81b0389161790565b95505050505b5050919050565b600080612baa62ffffff1985168460016132f1565b905060fc8111612bbb579050610ee8565b8060fd1415612c1957612be1612bd2846001614696565b62ffffff198616906002613321565b9150612bec8261321c565b60ff16600314612c1457612c12612c0d62ffffff198616856003600061346b565b6134da565b505b612cbf565b8060fe1415612c6b57612c3f612c30846001614696565b62ffffff198616906004613321565b9150612c4a8261321c565b60ff16600514612c1457612c12612c0d62ffffff198616856005600061346b565b8060ff1415612cbf57612c91612c82846001614696565b62ffffff198616906008613321565b9150612c9c8261321c565b60ff16600914612cbf57612cbd612c0d62ffffff198616856009600061346b565b505b5092915050565b600080612cd4846000612b95565b6001600160401b03169050601884901c6001600160601b0316818410612d305760405162461bcd60e51b81526020600482015260116024820152702b37baba103932b0b21037bb32b9393ab760791b60448201526064016104eb565b6000612d3b8361321c565b60ff1690506000805b86811015612d9157612d68612d598486614763565b62ffffff198a1690600e613275565b9150612d73826132a8565b612d7d9084614696565b9250612d8a600182614696565b9050612d44565b50612dae612d9f8385614763565b62ffffff19891690600e613275565b90506000612dbb826132a8565b9050611c9f62ffffff1989168483600d61346b565b6000610ee862ffffff198316826008613321565b606082471015612e455760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016104eb565b843b612e935760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016104eb565b600080866001600160a01b03168587604051612eaf91906144ab565b60006040518083038185875af1925050503d8060008114612eec576040519150601f19603f3d011682016040523d82523d6000602084013e612ef1565b606091505b5091509150611e1d828286613557565b600081600d612f0f81612a68565b506000612f1d856008612b95565b90506129b6600882612f2e8461321c565b60ff16612f3b91906146ae565b6001600160401b031660075b62ffffff19891692919061346b565b6000816007612f6481612a68565b506000612f72856000612b95565b90506000612f8962ffffff198716600360016132f1565b90506053826001600160401b03161180612fac57506004826001600160401b0316105b80612fc95750612fc462ffffff1987166001806132f1565b606a14155b80612ff95750612fda60038361477a565b6001600160401b0316612ff662ffffff198816600360016132f1565b14155b156130085762ffffff19612ac6565b61302562ffffff19871660046001600160401b038416600c61346b565b9695505050505050565b6000612254838360146132f1565b60606000806130558460181c6001600160601b031690565b60405193508392506001600160601b0316905061307c84613077846020614696565b613590565b508181016020016040529052919050565b6000806130a861309d8583612a44565b62ffffff19166136e8565b9050611e2281846137d9565b60008160046130c281612a68565b5060006130d0856024612b95565b90506129b66024826130e18461321c565b60ff166130ee91906146ae565b6001600160401b03166002612f47565b60008061310b84846138ef565b905060405181111561311b575060005b8061312d5762ffffff19915050612254565b5050606092831b9190911790911b1760181b90565b600061314e8383613944565b61321557600061316d6131618560d81c90565b64ffffffffff16613967565b91505060006131828464ffffffffff16613967565b6040517f5479706520617373657274696f6e206661696c65642e20476f7420307800000060208201526001600160b01b031960b086811b8216603d8401526c05c408af0e0cac6e8cac84060f609b1b604784015283901b16605482015290925060009150605e015b60405160208183030381529060405290508060405162461bcd60e51b81526004016104eb9190614526565b5090919050565b600060fc826001600160401b031611613237575060016122d9565b61ffff826001600160401b031611613251575060036122d9565b63ffffffff826001600160401b03161161326d575060056122d9565b5060096122d9565b6000611e22846132a1856132928860181c6001600160601b031690565b6001600160601b031690613a27565b858561346b565b600081600e6132b681612a68565b5060006132c4856008612b95565b9050806001600160401b03166132d98261321c565b60ff166132e69190614696565b6129b6906008614696565b60006132fe8260206147a2565b61330990600861473a565b60ff16613317858585613a7d565b901c949350505050565b6000611e22613331858585613a7d565b600881811c7eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff167fff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff009290911b9190911617601081811c7dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff167fffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff00009290911b9190911617602081811c7bffffffff00000000ffffffff00000000ffffffff00000000ffffffff167fffffffff00000000ffffffff00000000ffffffff00000000ffffffff000000009290911b9190911617604081811c77ffffffffffffffff0000000000000000ffffffffffffffff1677ffffffffffffffff0000000000000000ffffffffffffffff199290911b9190911617608081811c91901b1790565b6000806134818660781c6001600160601b031690565b6001600160601b0316905061349586613bd6565b6134a9856134a384896138ef565b906138ef565b11156134bc5762ffffff19915050611e22565b6134c681866138ef565b90506130258364ffffffffff1682866130fe565b606060006135046134ff62ffffff19851683601887901c6001600160601b03166132f1565b613967565b6040517f4e6f6e2d6d696e696d616c2076617220696e742e20476f74203078000000000060208201526dffffffffffffffffffffffffffff19607083901b16603b82015290925060009150604d016131ea565b60608315613566575081612254565b8251156135765782518084602001fd5b8160405162461bcd60e51b81526004016104eb9190614526565b600062ffffff1980841614156135f95760405162461bcd60e51b815260206004820152602860248201527f54797065644d656d566965772f636f7079546f202d204e756c6c20706f696e7460448201526732b9103232b932b360c11b60648201526084016104eb565b61360283613c17565b6136625760405162461bcd60e51b815260206004820152602b60248201527f54797065644d656d566965772f636f7079546f202d20496e76616c696420706f60448201526a34b73a32b9103232b932b360a91b60648201526084016104eb565b60006136778460181c6001600160601b031690565b6001600160601b0316905060006136978560781c6001600160601b031690565b6001600160601b0316905060006040519050848111156136b75760206060fd5b8285848460045afa506130256136cd8760d81c90565b64ffffffffff60601b606091821b168717901b841760181b90565b600081816136f581612a68565b50601884901c6001600160601b03166137125762ffffff19612a8e565b600061371f856000612b95565b9050601885901c6001600160601b03166001600160401b0382166137475762ffffff19612ac6565b60006137528361321c565b60ff16905060005b836001600160401b03168110156137bd5782821061377c5762ffffff19612b00565b600061379261378b8486614763565b6005612b1d565b905061379d81613c55565b6137a79084614696565b92505080806137b5906147f5565b91505061375a565b508181146137cf5762ffffff19612b64565b612b886006612b74565b60008260066137e781612a68565b5060006137f5866000612b95565b6001600160401b03169050601886901c6001600160601b03168186106138505760405162461bcd60e51b815260206004820152601060248201526f2b34b7103932b0b21037bb32b9393ab760811b60448201526064016104eb565b600061385b8361321c565b60ff1690506000805b888110156138b1576138886138798486614763565b62ffffff198c16906005613275565b915061389382613c55565b61389d9084614696565b92506138aa600182614696565b9050613864565b506138bf61378b8385614763565b905060006138cc82613c55565b90506138e162ffffff198b168483600461346b565b9a9950505050505050505050565b6000826138fc8382614696565b9150811015610ee85760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b60448201526064016104eb565b60008164ffffffffff166139588460d81c90565b64ffffffffff16149392505050565b600080601f5b600f8160ff1611156139c557600061398682600861473a565b60ff1685901c905061399781613ca9565b61ffff16841793508160ff166010146139b257601084901b93505b506139be6001826147a2565b905061396d565b50600f5b60ff8160ff161015613a215760006139e282600861473a565b60ff1685901c90506139f381613ca9565b61ffff16831792508160ff16600014613a0e57601083901b92505b50613a1a6001826147a2565b90506139c9565b50915091565b600082613a348382614763565b9150811115610ee85760405162461bcd60e51b815260206004820152601560248201527464732d6d6174682d7375622d756e646572666c6f7760581b60448201526064016104eb565b600060ff8216613a8f57506000612254565b613aa28460181c6001600160601b031690565b6001600160601b0316613ab88460ff85166138ef565b1115613b1c57613b03613ad48560781c6001600160601b031690565b6001600160601b0316613af08660181c6001600160601b031690565b6001600160601b0316858560ff16613cd9565b60405162461bcd60e51b81526004016104eb9190614526565b60208260ff161115613b965760405162461bcd60e51b815260206004820152603a60248201527f54797065644d656d566965772f696e646578202d20417474656d70746564207460448201527f6f20696e646578206d6f7265207468616e20333220627974657300000000000060648201526084016104eb565b600882026000613baf8660781c6001600160601b031690565b6001600160601b031690506000600160ff1b60001984011d91909501511695945050505050565b6000613beb8260181c6001600160601b031690565b613bfe8360781c6001600160601b031690565b613c0891906146d9565b6001600160601b031692915050565b6000613c238260d81c90565b64ffffffffff1664ffffffffff1415613c3e575060006122d9565b6000613c4983613bd6565b60405110199392505050565b6000816005613c6381612a68565b506000613c71856024612b95565b9050806001600160401b0316613c868261321c565b60ff16613c939190614696565b613c9e906024614696565b6129b6906004614696565b6000613cbb60048360ff16901c613e03565b60ff161760081b62ffff0016613cd082613e03565b60ff1617919050565b60606000613ce686613967565b9150506000613cf486613967565b9150506000613d0286613967565b9150506000613d1086613967565b604080517f54797065644d656d566965772f696e646578202d204f76657272616e20746865602082015274040ecd2caee5c40a6d8d2c6ca40d2e640c2e84060f605b1b818301526001600160d01b031960d098891b811660558301526e040eed2e8d040d8cadccee8d04060f608b1b605b830181905297891b8116606a8301527f2e20417474656d7074656420746f20696e646578206174206f666673657420306070830152600f60fb1b609083015295881b861660918201526097810196909652951b90921660a68401525050601760f91b60ac8201528151808203608d01815260ad90910190915295945050505050565b600060f08083179060ff82161415613e1f5760309150506122d9565b8060ff1660f11415613e355760319150506122d9565b8060ff1660f21415613e4b5760329150506122d9565b8060ff1660f31415613e615760339150506122d9565b8060ff1660f41415613e775760349150506122d9565b8060ff1660f51415613e8d5760359150506122d9565b8060ff1660f61415613ea35760369150506122d9565b8060ff1660f71415613eb95760379150506122d9565b8060ff1660f81415613ecf5760389150506122d9565b8060ff1660f91415613ee55760399150506122d9565b8060ff1660fa1415613efb5760619150506122d9565b8060ff1660fb1415613f115760629150506122d9565b8060ff1660fc1415613f275760639150506122d9565b8060ff1660fd1415613f3d5760649150506122d9565b8060ff1660fe1415613f535760659150506122d9565b8060ff1660ff1415613f695760669150506122d9565b50919050565b80356122d98161483c565b80356001600160e01b0319811681146122d957600080fd5b60008083601f840112613fa3578182fd5b5081356001600160401b03811115613fb9578182fd5b60208301915083602082850101111561295657600080fd5b600082601f830112613fe1578081fd5b8135613ff4613fef8261466f565b61463f565b818152846020838601011115614008578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215614033578081fd5b81356122548161483c565b60006020828403121561404f578081fd5b81516122548161483c565b6000806040838503121561406c578081fd5b82356140778161483c565b91506020838101356001600160401b0380821115614093578384fd5b818601915086601f8301126140a6578384fd5b8135818111156140b8576140b8614826565b83810291506140c884830161463f565b8181528481019084860184860187018b10156140e2578788fd5b8795505b838610156141045780358352600195909501949186019186016140e6565b508096505050505050509250929050565b60008060408385031215614127578182fd5b82356141328161483c565b946020939093013593505050565b60008060008060008060008060008060006101208c8e031215614161578687fd5b61416a8c613f6f565b9a5060208c0135995061417f60408d01613f7a565b98506001600160401b038060608e01351115614199578788fd5b6141a98e60608f01358f01613fd1565b98508060808e013511156141bb578788fd5b6141cb8e60808f01358f01613f92565b90985096506141dc60a08e01613f7a565b955060c08d013594508060e08e013511156141f5578384fd5b506142068d60e08e01358e01613f92565b81945080935050506101008c013590509295989b509295989b9093969950565b600060208284031215614237578081fd5b815161225481614851565b600060208284031215614253578081fd5b5051919050565b6000806000806000806000806000806000806101408d8f03121561427c578182fd5b6142858d613f7a565b9b506001600160401b0360208e0135111561429e578182fd5b6142ae8e60208f01358f01613fd1565b9a506001600160401b0360408e013511156142c7578182fd5b6142d78e60408f01358f01613f92565b909a5098506142e860608e01613f7a565b975060808d013596506001600160401b0360a08e01351115614308578182fd5b6143188e60a08f01358f01613f92565b909650945060c08d0135935061433060e08e01613f6f565b92506101008d013591506101208d013590509295989b509295989b509295989b565b600060208284031215614363578081fd5b81516001600160401b03811115614378578182fd5b8201601f81018413614388578182fd5b8051614396613fef8261466f565b8181528560208385010111156143aa578384fd5b6129b68260208301602086016147c5565b6000602082840312156143cc578081fd5b5035919050565b600080600080600060a086880312156143ea578283fd5b8535945060208601356143fc8161483c565b9350604086013561440c81614851565b9250606086013561441c81614851565b9150608086013561442c8161483c565b809150509295509295909350565b600081518084526144528160208601602086016147c5565b601f01601f19169290920160200192915050565b600063ffffffff60e01b80881683528651614488816004860160208b016147c5565b830185876004830137931693909201600481019390935250506008019392505050565b600082516144bd8184602087016147c5565b9190910192915050565b600083516144d98184602088016147c5565b6001600160f81b0319939093169190920190815260010192915050565b600085825284602083015260806040830152614515608083018561443a565b905082606083015295945050505050565b600060208252612254602083018461443a565b60208082526029908201527f43434275726e526f757465723a206c6f636b65722061646472657373206973206040820152681b9bdd081d985b1a5960ba1b606082015260800190565b60208082526031908201527f43434275726e526f757465723a207061796261636b20646561646c696e652068604082015270185cc81b9bdd081c185cdcd959081e595d607a1b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b604051601f8201601f191681016001600160401b038111828210171561466757614667614826565b604052919050565b60006001600160401b0382111561468857614688614826565b50601f01601f191660200190565b600082198211156146a9576146a9614810565b500190565b60006001600160401b038083168185168083038211156146d0576146d0614810565b01949350505050565b60006001600160601b038083168185168083038211156146d0576146d0614810565b60008261471657634e487b7160e01b81526012600452602481fd5b500490565b600081600019048311821515161561473557614735614810565b500290565b600060ff821660ff84168160ff048111821515161561475b5761475b614810565b029392505050565b60008282101561477557614775614810565b500390565b60006001600160401b038381169083168181101561479a5761479a614810565b039392505050565b600060ff821660ff8416808210156147bc576147bc614810565b90039392505050565b60005b838110156147e05781810151838201526020016147c8565b838111156147ef576000848401525b50505050565b600060001982141561480957614809614810565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461160e57600080fd5b801515811461160e57600080fdfe416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564a2646970667358221220b0e13b1ec5b5b205b3c715c871edcaa28dc3689d3e0d203086e3ce0b08460ded64736f6c63430008020033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "burnProof(bytes4,bytes,bytes,bytes4,uint256,bytes,uint256,address,uint256,uint256)": {
        "details": "Makes isTransferred flag true for the paid requests",
        "params": {
          "_blockNumber": "Height of the block containing the burn transaction",
          "_endIndex": "Index to finish searching for unpaid burn requests in the list",
          "_index": "Index of transaction containing the burn transaction in the block",
          "_intermediateNodes": "Merkle inclusion proof for transaction containing the burn transaction",
          "_lockerScriptHash": "Locker's address on Bitcoin that this burn request belongs to",
          "_locktime": "Lock time of the transaction containing the burn transaction",
          "_startIndex": "Index to start searching for unpaid burn requests in the list",
          "_version": "Version of the transaction containing the burn transaction",
          "_vin": "Inputs of the transaction containing the burn transaction",
          "_vout": "Outputs of the transaction containing the burn transaction"
        },
        "returns": {
          "_0": ""
        }
      },
      "ccBurn(uint256,address,bool,bool,address)": {
        "details": "After submitting the burn request, lockers have a limited time to send BTC",
        "params": {
          "_amount": "Amount of wrapped tokens that user wants to burn",
          "_isScriptHash": "Whether the user's Bitcoin address is script hash or pubKey hash",
          "_isSegwit": "Whether the user's Bitcoin address is Segwit or nonSegwit",
          "_lockerScriptHash": "Locker's address on Bitcoin",
          "_userPubKeyHash": "Address of user on Bitcoin"
        },
        "returns": {
          "_0": "True if request is recorded successfully"
        }
      },
      "constructor": {
        "details": "Lockers use this contract for coordinating of burning wrapped tokens",
        "params": {
          "_bitcoinFee": "Transaction fee on Bitcoin that lockers pay",
          "_lockers": "Address of lockers contract",
          "_protocolPercentageFee": "Percentage of tokens that user pays to protocol for burning",
          "_relay": "Address of relay contract",
          "_transferDeadline": "Dealine of sending BTC to user",
          "_treasury": "Address of the treasury of the protocol"
        }
      },
      "disputeBurn(address,uint256[])": {
        "details": "@param _lockerScriptHash locker's Bitcoin address that the unpaid request belongs to",
        "params": {
          "_indices": "Array of indices of the requests for that locker"
        },
        "returns": {
          "_0": "True if dispute is successfull"
        }
      },
      "disputeLocker(address,uint256,bytes4,bytes,bytes,bytes4,uint256,bytes,uint256)": {
        "details": "@param _lockerScriptHash                Suspicious locker's script hash",
        "params": {
          "_blockNumber": "The block number in which the malicious tx has happened",
          "_index": "Index of transaction containing the malicious tx",
          "_inputIndex": "Index of the input in vin that is from the locker",
          "_intermediateNodes": "Merkle inclusion proof for the malicious transaction",
          "_locktime": "Lock time of the malicious transaction",
          "_version": "Version of the malicious transaction",
          "_vin": "Inputs of the malicious transaction",
          "_vout": "Outputs of the malicious transaction"
        },
        "returns": {
          "_0": "True if dispute is successfull"
        }
      },
      "isTransferred(address,uint256)": {
        "params": {
          "_index": "The index number of the request for the locker",
          "_lockerTargetAddress": "Locker's address on the target chain"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setBitcoinFee(uint256)": {
        "details": "Only owner can call this",
        "params": {
          "_bitcoinFee": "The new Bitcoin transaction fee"
        }
      },
      "setLockers(address)": {
        "details": "Only owner can call this",
        "params": {
          "_lockers": "The new lockers contract address"
        }
      },
      "setProtocolPercentageFee(uint256)": {
        "details": "Only owner can call this",
        "params": {
          "_protocolPercentageFee": "The new protocol percentage fee"
        }
      },
      "setRelay(address)": {
        "details": "Only owner can call this",
        "params": {
          "_relay": "The new relay contract address"
        }
      },
      "setSlasherPercentageReward(uint256)": {
        "details": "Only owner can call this",
        "params": {
          "_slasherPercentageReward": "The new slasher percentage reward"
        }
      },
      "setTeleBTC(address)": {
        "details": "Only owner can call this",
        "params": {
          "_teleBTC": "The new wrapped token contract address"
        }
      },
      "setTransferDeadline(uint256)": {
        "details": "Only owner can call this",
        "params": {
          "_transferDeadline": "The new transfer deadline"
        }
      },
      "setTreasury(address)": {
        "details": "Only owner can call this",
        "params": {
          "_treasury": "The new treasury address"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "CCBurn(address,address,bool,bool,uint256,uint256,address,uint256,uint256)": {
        "notice": "Emits when a burn request gets submitted"
      },
      "LockerDispute(address,uint256,bytes32)": {
        "notice": "Emits when a locker gets slashed for withdrawing BTC"
      },
      "PaidCCBurn(address,address,uint256,address,uint256)": {
        "notice": "Emits when a burn request gets executed"
      }
    },
    "kind": "user",
    "methods": {
      "burnProof(bytes4,bytes,bytes,bytes4,uint256,bytes,uint256,address,uint256,uint256)": {
        "notice": "Checks the correctness of burn proof"
      },
      "ccBurn(uint256,address,bool,bool,address)": {
        "notice": "Burns wrapped tokens and records the burn request"
      },
      "constructor": {
        "notice": "Handles cross-chain burn requests"
      },
      "disputeBurn(address,uint256[])": {
        "notice": "Slashes lockers if they did not paid burn request before its deadline"
      },
      "disputeLocker(address,uint256,bytes4,bytes,bytes,bytes4,uint256,bytes,uint256)": {
        "notice": "Slashes a locker if they issue a tx that doesn't match any burn request"
      },
      "isTransferred(address,uint256)": {
        "notice": "Shows if a burn request has been done or not"
      },
      "setBitcoinFee(uint256)": {
        "notice": "Changes Bitcoin transaction fee"
      },
      "setLockers(address)": {
        "notice": "Changes lockers contract address"
      },
      "setProtocolPercentageFee(uint256)": {
        "notice": "Changes protocol percentage fee for burning tokens"
      },
      "setRelay(address)": {
        "notice": "Changes relay contract address"
      },
      "setSlasherPercentageReward(uint256)": {
        "notice": "Changes slasher percentage reward for disputing lockers"
      },
      "setTeleBTC(address)": {
        "notice": "Changes wrapped token contract address"
      },
      "setTransferDeadline(uint256)": {
        "notice": "Changes deadline for sending tokens"
      },
      "setTreasury(address)": {
        "notice": "Changes protocol treasury address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 807,
        "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1006,
        "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 14038,
        "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
        "label": "relay",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 14041,
        "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
        "label": "lockers",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 14044,
        "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
        "label": "teleBTC",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 14047,
        "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
        "label": "treasury",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 14053,
        "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
        "label": "burnRequests",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_array(t_struct(burnRequest)18014_storage)dyn_storage)"
      },
      {
        "astId": 14057,
        "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
        "label": "isPaid",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_bytes32,t_bool)"
      },
      {
        "astId": 14060,
        "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
        "label": "transferDeadline",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 14063,
        "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
        "label": "protocolPercentageFee",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 14066,
        "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
        "label": "slasherPercentageReward",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 14069,
        "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
        "label": "bitcoinFee",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(burnRequest)18014_storage)dyn_storage": {
        "base": "t_struct(burnRequest)18014_storage",
        "encoding": "dynamic_array",
        "label": "struct ICCBurnRouter.burnRequest[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_struct(burnRequest)18014_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ICCBurnRouter.burnRequest[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(burnRequest)18014_storage)dyn_storage"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(burnRequest)18014_storage": {
        "encoding": "inplace",
        "label": "struct ICCBurnRouter.burnRequest",
        "members": [
          {
            "astId": 17999,
            "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 18001,
            "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
            "label": "remainedAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 18003,
            "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
            "label": "sender",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 18005,
            "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
            "label": "userPubKeyHash",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 18007,
            "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
            "label": "isScriptHash",
            "offset": 20,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 18009,
            "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
            "label": "isSegwit",
            "offset": 21,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 18011,
            "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
            "label": "deadline",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 18013,
            "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
            "label": "isTransferred",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}