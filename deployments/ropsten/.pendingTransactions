{
  "0x1a2d81af92f0797538aa83f9ed38dcc785a27d920d47ac742c112eabebfa08ee": {
    "name": "BitcoinRelay",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "BitcoinRelay",
      "sourceName": "contracts/relay/BitcoinRelay.sol",
      "abi": [
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "_genesisHeader",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "_height",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "_periodStart",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "_TeleportDAOToken",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "height",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "bytes32",
              "name": "selfHash",
              "type": "bytes32"
            },
            {
              "indexed": true,
              "internalType": "bytes32",
              "name": "parentHash",
              "type": "bytes32"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "relayer",
              "type": "address"
            }
          ],
          "name": "BlockAdded",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "uint256",
              "name": "height",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "bytes32",
              "name": "selfHash",
              "type": "bytes32"
            },
            {
              "indexed": false,
              "internalType": "bytes32",
              "name": "parentHash",
              "type": "bytes32"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "relayer",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "rewardAmountTNT",
              "type": "uint256"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "rewardAmountTDT",
              "type": "uint256"
            }
          ],
          "name": "BlockFinalized",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "previousOwner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "OwnershipTransferred",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "Paused",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "Unpaused",
          "type": "event"
        },
        {
          "inputs": [],
          "name": "TeleportDAOToken",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "_anchor",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "_headers",
              "type": "bytes"
            }
          ],
          "name": "addHeaders",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes",
              "name": "_oldPeriodStartHeader",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "_oldPeriodEndHeader",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "_headers",
              "type": "bytes"
            }
          ],
          "name": "addHeadersWithRetarget",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "availableTDT",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "availableTNT",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "baseQueries",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "_txid",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "_blockHeight",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "_intermediateNodes",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "_index",
              "type": "uint256"
            }
          ],
          "name": "checkTxProof",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "payable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "currentEpochQueries",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "epochLength",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "finalizationParameter",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "_hash",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "_offset",
              "type": "uint256"
            }
          ],
          "name": "findAncestor",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "_hash",
              "type": "bytes32"
            }
          ],
          "name": "findHeight",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_height",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_index",
              "type": "uint256"
            }
          ],
          "name": "getBlockHeaderFee",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_height",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "_index",
              "type": "uint256"
            }
          ],
          "name": "getBlockHeaderHash",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "getCurrentEpochDifficulty",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_height",
              "type": "uint256"
            }
          ],
          "name": "getNumberOfSubmittedHeaders",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "getPrevEpochDifficulty",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "initialHeight",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "_ancestor",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "_descendant",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "_limit",
              "type": "uint256"
            }
          ],
          "name": "isAncestor",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "lastEpochQueries",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "lastSubmittedHeight",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "pauseRelay",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "paused",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "relayGenesisHash",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "relayerPercentageFee",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "renounceOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "rewardAmountInTDT",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_baseQueries",
              "type": "uint256"
            }
          ],
          "name": "setBaseQueries",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_epochLength",
              "type": "uint256"
            }
          ],
          "name": "setEpochLength",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_finalizationParameter",
              "type": "uint256"
            }
          ],
          "name": "setFinalizationParameter",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_relayerPercentageFee",
              "type": "uint256"
            }
          ],
          "name": "setRelayerPercentageFee",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_rewardAmountInTDT",
              "type": "uint256"
            }
          ],
          "name": "setRewardAmountInTDT",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_submissionGasUsed",
              "type": "uint256"
            }
          ],
          "name": "setSubmissionGasUsed",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "submissionGasUsed",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "transferOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "unPauseRelay",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        }
      ],
      "bytecode": "0x60806040523480156200001157600080fd5b50604051620044cd380380620044cd83398101604081905262000034916200057d565b6200003f33620004a8565b600180556002805460ff191690556040516334fcca5360e11b815260009073a7e24f80E66bb09819D813e9c4b1B176e22C2d44906369f994a6906200008b908890859060040162000659565b60206040518083038186803b158015620000a457600080fd5b505af4158015620000b9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000df91906200053e565b6040516309dafd2160e31b815262ffffff199091166004820152733b377E98B51867e03CE140b709BAA02ffBB31A5190634ed7e9089060240160206040518083038186803b1580156200013157600080fd5b505af415801562000146573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200016c91906200053e565b604051632c9c3b9f60e11b815262ffffff198216600482015290915073a7e24f80E66bb09819D813e9c4b1B176e22C2d4490635938773e9060240160206040518083038186803b158015620001c057600080fd5b505af4158015620001d5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001fb919062000515565b6200024c5760405162461bcd60e51b815260206004820152601d60248201527f426974636f696e52656c61793a2073746f70206265696e672064756d62000000604482015260640160405180910390fd5b6040516307f6f12360e21b815262ffffff198216600482015260009073a7e24f80E66bb09819D813e9c4b1B176e22C2d4490631fdbc48c9060240160206040518083038186803b158015620002a057600080fd5b505af4158015620002b5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002db919062000564565b6040805160a0810182526000602082018190528183018190526060820181905260808201528281529051634edfc3d560e11b815262ffffff198516600482015291925090733b377E98B51867e03CE140b709BAA02ffBB31A5190639dbf87aa9060240160206040518083038186803b1580156200035757600080fd5b505af41580156200036c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000392919062000564565b604082810191825233606084019081523a6080850190815260008a815260096020908152848220805460018082018355918452828420895160059092020190815582890151918101919091559551600287015592516003860180546001600160a01b0319166001600160a01b0390921691909117905590516004909401939093556006859055848352600890529020869055620004326107e087620006f4565b6200043e90876200069d565b600095865260086020526040862055505060016005908155600485905560039490945550600d80546001600160a01b0319166001600160a01b0392909216919091179055600e8190556010829055601382905560119190915560125550620186a0600f556200072b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200051057600080fd5b919050565b60006020828403121562000527578081fd5b8151801515811462000537578182fd5b9392505050565b60006020828403121562000550578081fd5b815162ffffff198116811462000537578182fd5b60006020828403121562000576578081fd5b5051919050565b6000806000806080858703121562000593578283fd5b84516001600160401b0380821115620005aa578485fd5b818701915087601f830112620005be578485fd5b815181811115620005d357620005d362000715565b604051601f8201601f19908116603f01168101908382118183101715620005fe57620005fe62000715565b816040528281528a602084870101111562000617578788fd5b6200062a836020830160208801620006c1565b809850505050505060208501519250604085015191506200064e60608601620004f8565b905092959194509250565b60006040825283518060408401526200067a816060850160208801620006c1565b64ffffffffff93909316602083015250601f91909101601f191601606001919050565b600082821015620006bc57634e487b7160e01b81526011600452602481fd5b500390565b60005b83811015620006de578181015183820152602001620006c4565b83811115620006ee576000848401525b50505050565b6000826200071057634e487b7160e01b81526012600452602481fd5b500690565b634e487b7160e01b600052604160045260246000fd5b613d92806200073b6000396000f3fe60806040526004361061021a5760003560e01c8063882a5ee011610123578063b9bbd9bd116100ab578063e2761af01161006f578063e2761af0146105b9578063efbc7be4146105cf578063f2fde38b146105e5578063fa041af514610605578063fd9c6e851461061b5761021a565b8063b9bbd9bd1461052e578063b9e88ac11461054e578063c20dc6641461056e578063c781452914610584578063d0a89739146105995761021a565b80639f156414116100f25780639f156414146104a2578063a072bc50146104b8578063a3db54eb146104ce578063b36161bd146104ee578063b985621a1461050e5761021a565b8063882a5ee0146104225780638da5cb5b14610437578063901186bb14610455578063926d44e2146104755761021a565b80635b732892116101a65780636594168311610175578063659416831461039757806365da41b9146103b7578063665b634f146103d7578063715018a6146103ed5780637fa637fc146104025761021a565b80635b732892146103365780635b88a0e51461034c5780635c975abb1461035f57806360b5c390146103775761021a565b806330017b3b116101ed57806330017b3b146102a65780634354da25146102c6578063465e7559146102e957806354eea7961461030057806357d775f8146103205761021a565b8063108f438d1461021f578063113764be1461025c5780632b97be241461027b5780632f796d9014610290575b600080fd5b34801561022b57600080fd5b50600d5461023f906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561026857600080fd5b50600a545b604051908152602001610253565b34801561028757600080fd5b50600b5461026d565b34801561029c57600080fd5b5061026d60045481565b3480156102b257600080fd5b5061026d6102c13660046138fb565b610631565b6102d96102d436600461391c565b610646565b6040519015158152602001610253565b3480156102f557600080fd5b506102fe610a71565b005b34801561030c57600080fd5b506102fe61031b3660046138a0565b610aa5565b34801561032c57600080fd5b5061026d60105481565b34801561034257600080fd5b5061026d60125481565b34801561035857600080fd5b504761026d565b34801561036b57600080fd5b5060025460ff166102d9565b34801561038357600080fd5b5061026d6103923660046138a0565b610ad4565b3480156103a357600080fd5b506102fe6103b23660046138a0565b610ae7565b3480156103c357600080fd5b506102d96103d2366004613975565b610b16565b3480156103e357600080fd5b5061026d600e5481565b3480156103f957600080fd5b506102fe611001565b34801561040e57600080fd5b506102d961041d3660046139de565b611035565b34801561042e57600080fd5b5061026d6116ae565b34801561044357600080fd5b506000546001600160a01b031661023f565b34801561046157600080fd5b506102fe6104703660046138a0565b61172f565b34801561048157600080fd5b5061026d6104903660046138a0565b60009081526009602052604090205490565b3480156104ae57600080fd5b5061026d60115481565b3480156104c457600080fd5b5061026d60055481565b3480156104da57600080fd5b506102fe6104e93660046138a0565b61175e565b3480156104fa57600080fd5b506102fe6105093660046138a0565b61178d565b34801561051a57600080fd5b506102d96105293660046138d0565b6117bc565b34801561053a57600080fd5b5061026d6105493660046138fb565b6117d3565b34801561055a57600080fd5b506102fe6105693660046138a0565b61181d565b34801561057a57600080fd5b5061026d600f5481565b34801561059057600080fd5b506102fe61184c565b3480156105a557600080fd5b5061026d6105b43660046138fb565b61187e565b3480156105c557600080fd5b5061026d60035481565b3480156105db57600080fd5b5061026d60065481565b3480156105f157600080fd5b506102fe610600366004613835565b61190b565b34801561061157600080fd5b5061026d60135481565b34801561062757600080fd5b5061026d600c5481565b600061063d83836119a6565b90505b92915050565b6000600260015414156106745760405162461bcd60e51b815260040161066b90613bfb565b60405180910390fd5b600260015561068560025460ff1690565b156106a25760405162461bcd60e51b815260040161066b90613b9c565b6004546106b0906001613c32565b6106bb866006613c32565b1015610a605760005b600086815260096020526040902054811015610a08576000868152600960205260408120805461072491908490811061070d57634e487b7160e01b600052603260045260246000fd5b906000526020600020906005020160020154611a24565b9050600086868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052506040516334fcca5360e11b815273a7e24f80E66bb09819D813e9c4b1B176e22C2d44956369f994a6955061079394509250600401613b15565b60206040518083038186803b1580156107ab57600080fd5b505af41580156107bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e3919061387c565b6040516322a24af360e11b8152733b377E98B51867e03CE140b709BAA02ffBB31A519163454495e69161081f9162ffffff191690600401613aee565b60206040518083038186803b15801561083757600080fd5b505af415801561084b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086f919061387c565b9050600061087c8a611a24565b60405163aa65716d60e01b8152600481018290526024810185905262ffffff19841660448201526064810188905290915073d5bF663A5862333282B45636c2d76050f27eEEeF9063aa65716d9060840160206040518083038186803b1580156108e457600080fd5b505af41580156108f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091c919061385c565b156109f2576000898152600960205260409020805461096b91908690811061095457634e487b7160e01b600052603260045260246000fd5b906000526020600020906005020160040154611aa4565b6109cc5760405162461bcd60e51b815260206004820152602c60248201527f426974636f696e52656c61793a2067657474696e672066656520776173206e6f60448201526b1d081cdd58d8d95cdcd99d5b60a21b606482015260840161066b565b6001601260008282546109df9190613c32565b9091555060019550610a64945050505050565b5050508080610a0090613d01565b9150506106c4565b5060405162461bcd60e51b815260206004820152602660248201527f426974636f696e52656c61793a20747820686173206e6f74206265656e20696e60448201526518db1d59195960d21b606482015260840161066b565b5060005b6001805595945050505050565b6000546001600160a01b03163314610a9b5760405162461bcd60e51b815260040161066b90613bc6565b610aa3611b61565b565b6000546001600160a01b03163314610acf5760405162461bcd60e51b815260040161066b90613bc6565b601055565b6000610adf82611bd6565b90505b919050565b6000546001600160a01b03163314610b115760405162461bcd60e51b815260040161066b90613bc6565b601355565b600060026001541415610b3b5760405162461bcd60e51b815260040161066b90613bfb565b6002600155610b4c60025460ff1690565b15610b695760405162461bcd60e51b815260040161066b90613b9c565b600083838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052506040516334fcca5360e11b815273a7e24f80E66bb09819D813e9c4b1B176e22C2d44956369f994a69550610bd694509250600401613b15565b60206040518083038186803b158015610bee57600080fd5b505af4158015610c02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c26919061387c565b604051632953639960e21b8152733b377E98B51867e03CE140b709BAA02ffBB31A519163a54d8e6491610c629162ffffff191690600401613aee565b60206040518083038186803b158015610c7a57600080fd5b505af4158015610c8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb2919061387c565b9050600086868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052506040516334fcca5360e11b815273a7e24f80E66bb09819D813e9c4b1B176e22C2d44956369f994a69550610d2194509250600401613b15565b60206040518083038186803b158015610d3957600080fd5b505af4158015610d4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d71919061387c565b6040516309dafd2160e31b8152733b377E98B51867e03CE140b709BAA02ffBB31A5191634ed7e90891610dad9162ffffff191690600401613aee565b60206040518083038186803b158015610dc557600080fd5b505af4158015610dd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dfd919061387c565b604051632c9c3b9f60e11b815290915073a7e24f80E66bb09819D813e9c4b1B176e22C2d4490635938773e90610e3d9062ffffff19861690600401613aee565b60206040518083038186803b158015610e5557600080fd5b505af4158015610e69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8d919061385c565b610eff5760405162461bcd60e51b815260206004820152603960248201527f426974636f696e52656c61793a20686561646572206172726179206c656e677460448201527f68206d75737420626520646976697369626c6520627920383000000000000000606482015260840161066b565b604051632c9c3b9f60e11b815273a7e24f80E66bb09819D813e9c4b1B176e22C2d4490635938773e90610f3c9062ffffff19851690600401613aee565b60206040518083038186803b158015610f5457600080fd5b505af4158015610f68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8c919061385c565b610fe65760405162461bcd60e51b815260206004820152602560248201527f426974636f696e52656c61793a20616e63686f72206d75737420626520383020604482015264627974657360d81b606482015260840161066b565b610ff281836000611c36565b60018055979650505050505050565b6000546001600160a01b0316331461102b5760405162461bcd60e51b815260040161066b90613bc6565b610aa36000612521565b60006002600154141561105a5760405162461bcd60e51b815260040161066b90613bfb565b600260015561106b60025460ff1690565b156110885760405162461bcd60e51b815260040161066b90613b9c565b600087878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052506040516334fcca5360e11b815273a7e24f80E66bb09819D813e9c4b1B176e22C2d44956369f994a695506110f594509250600401613b15565b60206040518083038186803b15801561110d57600080fd5b505af4158015611121573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611145919061387c565b6040516309dafd2160e31b8152733b377E98B51867e03CE140b709BAA02ffBB31A5191634ed7e908916111819162ffffff191690600401613aee565b60206040518083038186803b15801561119957600080fd5b505af41580156111ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d1919061387c565b9050600086868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052506040516334fcca5360e11b815273a7e24f80E66bb09819D813e9c4b1B176e22C2d44956369f994a6955061124094509250600401613b15565b60206040518083038186803b15801561125857600080fd5b505af415801561126c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611290919061387c565b6040516309dafd2160e31b8152733b377E98B51867e03CE140b709BAA02ffBB31A5191634ed7e908916112cc9162ffffff191690600401613aee565b60206040518083038186803b1580156112e457600080fd5b505af41580156112f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131c919061387c565b9050600085858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052506040516334fcca5360e11b815273a7e24f80E66bb09819D813e9c4b1B176e22C2d44956369f994a6955061138b94509250600401613b15565b60206040518083038186803b1580156113a357600080fd5b505af41580156113b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113db919061387c565b604051632953639960e21b8152733b377E98B51867e03CE140b709BAA02ffBB31A519163a54d8e64916114179162ffffff191690600401613aee565b60206040518083038186803b15801561142f57600080fd5b505af4158015611443573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611467919061387c565b604051632c9c3b9f60e11b815290915073a7e24f80E66bb09819D813e9c4b1B176e22C2d4490635938773e906114a79062ffffff19871690600401613aee565b60206040518083038186803b1580156114bf57600080fd5b505af41580156114d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f7919061385c565b801561158b5750604051632c9c3b9f60e11b815273a7e24f80E66bb09819D813e9c4b1B176e22C2d4490635938773e9061153b9062ffffff19861690600401613aee565b60206040518083038186803b15801561155357600080fd5b505af4158015611567573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061158b919061385c565b801561161f5750604051632c9c3b9f60e11b815273a7e24f80E66bb09819D813e9c4b1B176e22C2d4490635938773e906115cf9062ffffff19851690600401613aee565b60206040518083038186803b1580156115e757600080fd5b505af41580156115fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161f919061385c565b6116915760405162461bcd60e51b815260206004820152603c60248201527f426974636f696e52656c61793a2062616420617267732e20436865636b20686560448201527f6164657220616e642061727261792062797465206c656e677468732e00000000606482015260840161066b565b61169c838383612571565b600180559a9950505050505050505050565b600d546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156116f257600080fd5b505afa158015611706573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061172a91906138b8565b905090565b6000546001600160a01b031633146117595760405162461bcd60e51b815260040161066b90613bc6565b600e55565b6000546001600160a01b031633146117885760405162461bcd60e51b815260040161066b90613bc6565b600f55565b6000546001600160a01b031633146117b75760405162461bcd60e51b815260040161066b90613bc6565b600555565b60006117c9848484612cc5565b90505b9392505050565b6000828152600960205260408120805461063d91908490811061180657634e487b7160e01b600052603260045260246000fd5b906000526020600020906005020160000154611a24565b6000546001600160a01b031633146118475760405162461bcd60e51b815260040161066b90613bc6565b600c55565b6000546001600160a01b031633146118765760405162461bcd60e51b815260040161066b90613bc6565b610aa3612d14565b6000601154606461188f9190613c84565b601054600e546118a0906001613c32565b60008681526009602052604090208054869081106118ce57634e487b7160e01b600052603260045260246000fd5b906000526020600020906005020160040154600f546118ed9190613c84565b6118f79190613c84565b6119019190613c84565b61063d9190613c4a565b6000546001600160a01b031633146119355760405162461bcd60e51b815260040161066b90613bc6565b6001600160a01b03811661199a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161066b565b6119a381612521565b50565b600082815b838110156119d6576000918252600760205260409091205490806119ce81613d01565b9150506119ab565b508061063d5760405162461bcd60e51b815260206004820152601e60248201527f426974636f696e52656c61793a20756e6b6e6f776e20616e636573746f720000604482015260640161066b565b6000606081805b6020811015611a98578285611a4183601f613ca3565b60208110611a5f57634e487b7160e01b600052603260045260246000fd5b1a60f81b604051602001611a74929190613abf565b60405160208183030381529060405292508080611a9090613d01565b915050611a2b565b50506020015192915050565b6000806011546064611ab69190613c84565b601054600e54611ac7906001613c32565b85600f54611ad59190613c84565b611adf9190613c84565b611ae99190613c84565b611af39190613c4a565b905080341015611b455760405162461bcd60e51b815260206004820152601f60248201527f426974636f696e52656c61793a20666565206973206e6f7420656e6f75676800604482015260640161066b565b611b5833611b538334613ca3565b612d8e565b50600192915050565b60025460ff1615611b845760405162461bcd60e51b815260040161066b90613b9c565b6002805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611bb93390565b6040516001600160a01b03909116815260200160405180910390a1565b600081815260086020526040812054611c215760405162461bcd60e51b815260206004820152600d60248201526c556e6b6e6f776e20626c6f636b60981b604482015260640161066b565b50600081815260086020526040902054610ae2565b6040516307f6f12360e21b8152600090819073a7e24f80E66bb09819D813e9c4b1B176e22C2d4490631fdbc48c90611c789062ffffff19891690600401613aee565b60206040518083038186803b158015611c9057600080fd5b505af4158015611ca4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cc891906138b8565b90506000611cd582611bd6565b60405163df90556160e01b8152909150600090733b377E98B51867e03CE140b709BAA02ffBB31A519063df90556190611d1a9062ffffff198a16908590600401613aff565b60206040518083038186803b158015611d3257600080fd5b505af4158015611d46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d6a919061387c565b6040516362ef7dad60e01b8152733b377E98B51867e03CE140b709BAA02ffBB31A51916362ef7dad91611da69162ffffff191690600401613aee565b60206040518083038186803b158015611dbe57600080fd5b505af4158015611dd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611df691906138b8565b90508480611e9057506040516362ef7dad60e01b81528190733b377E98B51867e03CE140b709BAA02ffBB31A51906362ef7dad90611e3e9062ffffff198c1690600401613aee565b60206040518083038186803b158015611e5657600080fd5b505af4158015611e6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e8e91906138b8565b145b611ef75760405162461bcd60e51b815260206004820152603260248201527f426974636f696e52656c61793a20756e657870656374656420726574617267656044820152711d081bdb88195e1d195c9b985b0818d85b1b60721b606482015260840161066b565b60008060005b604051639cb855cb60e01b815260509073a7e24f80E66bb09819D813e9c4b1B176e22C2d4490639cb855cb90611f3d9062ffffff198e1690600401613aee565b60206040518083038186803b158015611f5557600080fd5b505af4158015611f69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f8d9190613a98565b611f979190613c5e565b6001600160601b03168110156125115760405163df90556160e01b8152600090733b377E98B51867e03CE140b709BAA02ffBB31A519063df90556190611fe99062ffffff198e16908690600401613aff565b60206040518083038186803b15801561200157600080fd5b505af4158015612015573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612039919061387c565b90506120458287613c32565b612050906001613c32565b6040516307f6f12360e21b815290945073a7e24f80E66bb09819D813e9c4b1B176e22C2d4490631fdbc48c906120909062ffffff19851690600401613aee565b60206040518083038186803b1580156120a857600080fd5b505af41580156120bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120e091906138b8565b925088806120f857506120f56107e085613d1c565b15155b61217e5760405162461bcd60e51b815260206004820152604b60248201527f426974636f696e52656c61793a20686561646572732073686f756c642062652060448201527f7375626d69747465642062792063616c6c696e6720616464486561646572735760648201526a1a5d1a14995d185c99d95d60aa1b608482015260a40161066b565b6040516362ef7dad60e01b81528590733b377E98B51867e03CE140b709BAA02ffBB31A51906362ef7dad906121bd9062ffffff19861690600401613aee565b60206040518083038186803b1580156121d557600080fd5b505af41580156121e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061220d91906138b8565b1461226c5760405162461bcd60e51b815260206004820152602960248201527f426974636f696e52656c61793a20746172676574206368616e67656420756e65604482015268787065637465646c7960b81b606482015260840161066b565b6040516001620c742360e01b0319815273d5bF663A5862333282B45636c2d76050f27eEEeF9063fff38bdd906122ae9062ffffff198516908b90600401613aff565b60206040518083038186803b1580156122c657600080fd5b505af41580156122da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122fe919061385c565b6123675760405162461bcd60e51b815260206004820152603460248201527f426974636f696e52656c61793a206865616465727320646f206e6f7420666f726044820152733690309031b7b739b4b9ba32b73a1031b430b4b760611b606482015260840161066b565b6004546005546123779086613c32565b116123945760405162461bcd60e51b815260040161066b90613b57565b6000838152600760205260409020546124fa576040516340bec88f60e01b815260048101849052859073a7e24f80E66bb09819D813e9c4b1B176e22C2d44906340bec88f9060240160206040518083038186803b1580156123f457600080fd5b505af4158015612408573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061242c91906138b8565b111561248c5760405162461bcd60e51b815260206004820152602960248201527f426974636f696e52656c61793a2068656164657220776f726b20697320696e736044820152681d59999a58da595b9d60ba1b606482015260840161066b565b60008381526007602090815260408083208a9055600890915290208490556124b48185612eac565b336001600160a01b031687857ffb8fff3e2daa665d496373ced291b62aba4162f24632a1597e286621016e9a1f866040516124f191815260200190565b60405180910390a45b82965050808061250990613d01565b915050611efd565b5060019998505050505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516307f6f12360e21b8152600090819061260c9073a7e24f80E66bb09819D813e9c4b1B176e22C2d4490631fdbc48c906125b79062ffffff198a1690600401613aee565b60206040518083038186803b1580156125cf57600080fd5b505af41580156125e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061260791906138b8565b611bd6565b6040516307f6f12360e21b81529091506000906126539073a7e24f80E66bb09819D813e9c4b1B176e22C2d4490631fdbc48c906125b79062ffffff198a1690600401613aee565b90506126616107e082613d1c565b6107df146126eb5760405162461bcd60e51b815260206004820152604b60248201527f426974636f696e52656c61793a206d7573742070726f7669646520746865206c60448201527f61737420686561646572206f662074686520636c6f73696e672064696666696360648201526a1d5b1d1e481c195c9a5bd960aa1b608482015260a40161066b565b6126f7826107df613c32565b81146127645760405162461bcd60e51b815260206004820152603660248201527f426974636f696e52656c61793a206d7573742070726f766964652065786163746044820152751b1e480c48191a59999a58dd5b1d1e481c195c9a5bd960521b606482015260840161066b565b60405163cddb450760e01b8152733b377E98B51867e03CE140b709BAA02ffBB31A519063cddb4507906127a19062ffffff19891690600401613aee565b60206040518083038186803b1580156127b957600080fd5b505af41580156127cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127f191906138b8565b60405163cddb450760e01b8152733b377E98B51867e03CE140b709BAA02ffBB31A519063cddb45079061282e9062ffffff198b1690600401613aee565b60206040518083038186803b15801561284657600080fd5b505af415801561285a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061287e91906138b8565b146128e95760405162461bcd60e51b815260206004820152603560248201527f426974636f696e52656c61793a20706572696f642068656164657220646966666044820152740d2c6ead8e8d2cae640c8de40dcdee840dac2e8c6d605b1b606482015260840161066b565b60405163df90556160e01b8152600090733b377E98B51867e03CE140b709BAA02ffBB31A519063df9055619061292b9062ffffff198916908590600401613aff565b60206040518083038186803b15801561294357600080fd5b505af4158015612957573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061297b919061387c565b6040516362ef7dad60e01b8152909150600090733b377E98B51867e03CE140b709BAA02ffBB31A51906362ef7dad906129be9062ffffff19861690600401613aee565b60206040518083038186803b1580156129d657600080fd5b505af41580156129ea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a0e91906138b8565b6040516362ef7dad60e01b8152909150600090733b377E98B51867e03CE140b709BAA02ffBB31A519063b25912329082906362ef7dad90612a599062ffffff198f1690600401613aee565b60206040518083038186803b158015612a7157600080fd5b505af4158015612a85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aa991906138b8565b8b62ffffff1916733b377E98B51867e03CE140b709BAA02ffBB31A5163f172b06090916040518263ffffffff1660e01b8152600401612ae89190613aee565b60206040518083038186803b158015612b0057600080fd5b505af4158015612b14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b389190613a74565b8b62ffffff1916733b377E98B51867e03CE140b709BAA02ffBB31A5163f172b06090916040518263ffffffff1660e01b8152600401612b779190613aee565b60206040518083038186803b158015612b8f57600080fd5b505af4158015612ba3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bc79190613a74565b6040516001600160e01b031960e086901b168152600481019390935263ffffffff918216602484015216604482015260640160206040518083038186803b158015612c1157600080fd5b505af4158015612c25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c4991906138b8565b90508181831614612cac5760405162461bcd60e51b815260206004820152602760248201527f426974636f696e52656c61793a20696e76616c696420726574617267657420706044820152661c9bdd9a59195960ca1b606482015260840161066b565b612cb888886001611c36565b9998505050505050505050565b600082815b83811015612d085785821415612ce5576001925050506117cc565b600091825260076020526040909120549080612d0081613d01565b915050612cca565b50600095945050505050565b60025460ff16612d5d5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161066b565b6002805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33611bb9565b80471015612dde5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161066b565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612e2b576040519150601f19603f3d011682016040523d82523d6000602084013e612e30565b606091505b5050905080612ea75760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161066b565b505050565b600454600554612ebc9083613c32565b11612ed95760405162461bcd60e51b815260040161066b90613b57565b6040805160a08101825260008082526020820181905281830181905260608201819052608082015290516307f6f12360e21b815273a7e24f80E66bb09819D813e9c4b1B176e22C2d4490631fdbc48c90612f3d9062ffffff19871690600401613aee565b60206040518083038186803b158015612f5557600080fd5b505af4158015612f69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f8d91906138b8565b815260405163383ef31360e11b8152733b377E98B51867e03CE140b709BAA02ffBB31A519063707de62690612fcc9062ffffff19871690600401613aee565b60206040518083038186803b158015612fe457600080fd5b505af4158015612ff8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061301c91906138b8565b6020820152604051634edfc3d560e11b8152733b377E98B51867e03CE140b709BAA02ffBB31A5190639dbf87aa9061305e9062ffffff19871690600401613aee565b60206040518083038186803b15801561307657600080fd5b505af415801561308a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130ae91906138b8565b604082810191825233606084019081523a60808501908152600086815260096020908152938120805460018082018355918352918590208751600590930201918255938601519381019390935592516002830155516003820180546001600160a01b0319166001600160a01b03909216919091179055905160049182015554821115612ea7576001600460008282546131479190613c32565b90915550613155905061315d565b612ea7613461565b6005546003546004546131709190613ca3565b10610aa35760055460045460005b82156131ff5760008281526009602052604081208054839081106131b257634e487b7160e01b600052603260045260246000fd5b90600052602060002090600502016001015490506131dc816001856131d79190613ca3565b613496565b9150836131e881613cea565b94505082806131f690613cea565b9350505061317e565b600082815260096020526040902080548290811061322d57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600502016009600084815260200190815260200160002060008154811061326e57634e487b7160e01b600052603260045260246000fd5b600091825260208083208454600590930201918255600180850154818401556002808601549084015560038086015490840180546001600160a01b0319166001600160a01b039092169190911790556004948501549490920193909355848252600990925260409020541115612ea7576132e78261351a565b60008281526009602052604081208054829161333b91839061331957634e487b7160e01b600052603260045260246000fd5b60009182526020909120600360059092020101546001600160a01b03166135b2565b60008681526009602052604081208054939550919350909161336d57634e487b7160e01b600052603260045260246000fd5b600091825260208083206003600590930201919091015486835260099091526040822080546001600160a01b039092169287927f4fec6ffa2052e80db9daadc2384a8f634057472e28ea7f1bd3eebfc92b5b0f8e9291906133de57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060050201600001546009600089815260200190815260200160002060008154811061342357634e487b7160e01b600052603260045260246000fd5b600091825260209182902060016005909202010154604080519384529183015281018690526060810185905260800160405180910390a35050505050565b6010546004546134719190613d1c565b610aa357601354601254106134885760125461348c565b6013545b6011556000601255565b6000805b6000838152600960205260409020548110156135105760008381526009602052604090208054829081106134de57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060050201600001548414156134fe579050610640565b8061350881613d01565b91505061349a565b5060009392505050565b60015b6000828152600960205260409020548110156135ae57600082815260096020526040902080548290811061356157634e487b7160e01b600052603260045260246000fd5b6000918252602082206005909102018181556001808201839055600282018390556003820180546001600160a01b03191690556004909101919091556135a79082613c32565b905061351d565b5050565b60008060006064600e5460016135c89190613c32565b3a600f546135d69190613c84565b6135e09190613c84565b6135ea9190613c4a565b600d549091506000906001600160a01b03161561368357600d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561364457600080fd5b505afa158015613658573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061367c91906138b8565b9050613687565b5060005b600081600c541115801561369d57506000600c54115b1561372e57600d54600c5460405163a9059cbb60e01b81526001600160a01b038981166004830152602482019290925291169063a9059cbb90604401602060405180830381600087803b1580156136f357600080fd5b505af1158015613707573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061372b919061385c565b90505b6000834711801561373f5750600084115b15613798576040516001600160a01b038816908590600081818185875af1925050503d806000811461378d576040519150601f19603f3d011682016040523d82523d6000602084013e613792565b606091505b50909150505b80156137c55781156137b55783600c5495509550505050506137e9565b83600095509550505050506137e9565b81156137dd576000600c5495509550505050506137e9565b60008095509550505050505b915091565b60008083601f8401126137ff578182fd5b50813567ffffffffffffffff811115613816578182fd5b60208301915083602082850101111561382e57600080fd5b9250929050565b600060208284031215613846578081fd5b81356001600160a01b038116811461063d578182fd5b60006020828403121561386d578081fd5b8151801515811461063d578182fd5b60006020828403121561388d578081fd5b815162ffffff198116811461063d578182fd5b6000602082840312156138b1578081fd5b5035919050565b6000602082840312156138c9578081fd5b5051919050565b6000806000606084860312156138e4578182fd5b505081359360208301359350604090920135919050565b6000806040838503121561390d578182fd5b50508035926020909101359150565b600080600080600060808688031215613933578081fd5b8535945060208601359350604086013567ffffffffffffffff811115613957578182fd5b613963888289016137ee565b96999598509660600135949350505050565b6000806000806040858703121561398a578384fd5b843567ffffffffffffffff808211156139a1578586fd5b6139ad888389016137ee565b909650945060208701359150808211156139c5578384fd5b506139d2878288016137ee565b95989497509550505050565b600080600080600080606087890312156139f6578081fd5b863567ffffffffffffffff80821115613a0d578283fd5b613a198a838b016137ee565b90985096506020890135915080821115613a31578283fd5b613a3d8a838b016137ee565b90965094506040890135915080821115613a55578283fd5b50613a6289828a016137ee565b979a9699509497509295939492505050565b600060208284031215613a85578081fd5b815163ffffffff8116811461063d578182fd5b600060208284031215613aa9578081fd5b81516001600160601b038116811461063d578182fd5b60008351613ad1818460208801613cba565b6001600160f81b0319939093169190920190815260010192915050565b62ffffff1991909116815260200190565b62ffffff19929092168252602082015260400190565b6000604082528351806040840152613b34816060850160208801613cba565b64ffffffffff93909316602083015250601f91909101601f191601606001919050565b60208082526025908201527f426974636f696e52656c61793a20626c6f636b2068656164657220697320746f6040820152641bc81bdb1960da1b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60008219821115613c4557613c45613d30565b500190565b600082613c5957613c59613d46565b500490565b60006001600160601b0380841680613c7857613c78613d46565b92169190910492915050565b6000816000190483118215151615613c9e57613c9e613d30565b500290565b600082821015613cb557613cb5613d30565b500390565b60005b83811015613cd5578181015183820152602001613cbd565b83811115613ce4576000848401525b50505050565b600081613cf957613cf9613d30565b506000190190565b6000600019821415613d1557613d15613d30565b5060010190565b600082613d2b57613d2b613d46565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fdfea26469706673582212205214e838c0e48b3011b6449efa8803368586838da4bfe4cf214227dab163508564736f6c63430008020033",
      "deployedBytecode": "0x60806040526004361061021a5760003560e01c8063882a5ee011610123578063b9bbd9bd116100ab578063e2761af01161006f578063e2761af0146105b9578063efbc7be4146105cf578063f2fde38b146105e5578063fa041af514610605578063fd9c6e851461061b5761021a565b8063b9bbd9bd1461052e578063b9e88ac11461054e578063c20dc6641461056e578063c781452914610584578063d0a89739146105995761021a565b80639f156414116100f25780639f156414146104a2578063a072bc50146104b8578063a3db54eb146104ce578063b36161bd146104ee578063b985621a1461050e5761021a565b8063882a5ee0146104225780638da5cb5b14610437578063901186bb14610455578063926d44e2146104755761021a565b80635b732892116101a65780636594168311610175578063659416831461039757806365da41b9146103b7578063665b634f146103d7578063715018a6146103ed5780637fa637fc146104025761021a565b80635b732892146103365780635b88a0e51461034c5780635c975abb1461035f57806360b5c390146103775761021a565b806330017b3b116101ed57806330017b3b146102a65780634354da25146102c6578063465e7559146102e957806354eea7961461030057806357d775f8146103205761021a565b8063108f438d1461021f578063113764be1461025c5780632b97be241461027b5780632f796d9014610290575b600080fd5b34801561022b57600080fd5b50600d5461023f906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561026857600080fd5b50600a545b604051908152602001610253565b34801561028757600080fd5b50600b5461026d565b34801561029c57600080fd5b5061026d60045481565b3480156102b257600080fd5b5061026d6102c13660046138fb565b610631565b6102d96102d436600461391c565b610646565b6040519015158152602001610253565b3480156102f557600080fd5b506102fe610a71565b005b34801561030c57600080fd5b506102fe61031b3660046138a0565b610aa5565b34801561032c57600080fd5b5061026d60105481565b34801561034257600080fd5b5061026d60125481565b34801561035857600080fd5b504761026d565b34801561036b57600080fd5b5060025460ff166102d9565b34801561038357600080fd5b5061026d6103923660046138a0565b610ad4565b3480156103a357600080fd5b506102fe6103b23660046138a0565b610ae7565b3480156103c357600080fd5b506102d96103d2366004613975565b610b16565b3480156103e357600080fd5b5061026d600e5481565b3480156103f957600080fd5b506102fe611001565b34801561040e57600080fd5b506102d961041d3660046139de565b611035565b34801561042e57600080fd5b5061026d6116ae565b34801561044357600080fd5b506000546001600160a01b031661023f565b34801561046157600080fd5b506102fe6104703660046138a0565b61172f565b34801561048157600080fd5b5061026d6104903660046138a0565b60009081526009602052604090205490565b3480156104ae57600080fd5b5061026d60115481565b3480156104c457600080fd5b5061026d60055481565b3480156104da57600080fd5b506102fe6104e93660046138a0565b61175e565b3480156104fa57600080fd5b506102fe6105093660046138a0565b61178d565b34801561051a57600080fd5b506102d96105293660046138d0565b6117bc565b34801561053a57600080fd5b5061026d6105493660046138fb565b6117d3565b34801561055a57600080fd5b506102fe6105693660046138a0565b61181d565b34801561057a57600080fd5b5061026d600f5481565b34801561059057600080fd5b506102fe61184c565b3480156105a557600080fd5b5061026d6105b43660046138fb565b61187e565b3480156105c557600080fd5b5061026d60035481565b3480156105db57600080fd5b5061026d60065481565b3480156105f157600080fd5b506102fe610600366004613835565b61190b565b34801561061157600080fd5b5061026d60135481565b34801561062757600080fd5b5061026d600c5481565b600061063d83836119a6565b90505b92915050565b6000600260015414156106745760405162461bcd60e51b815260040161066b90613bfb565b60405180910390fd5b600260015561068560025460ff1690565b156106a25760405162461bcd60e51b815260040161066b90613b9c565b6004546106b0906001613c32565b6106bb866006613c32565b1015610a605760005b600086815260096020526040902054811015610a08576000868152600960205260408120805461072491908490811061070d57634e487b7160e01b600052603260045260246000fd5b906000526020600020906005020160020154611a24565b9050600086868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052506040516334fcca5360e11b815273__$23851852cf97a1ff2525b5bae2bad8f731$__956369f994a6955061079394509250600401613b15565b60206040518083038186803b1580156107ab57600080fd5b505af41580156107bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e3919061387c565b6040516322a24af360e11b815273__$0502a3cf6a2bcad1c419a18d02ea8187d1$__9163454495e69161081f9162ffffff191690600401613aee565b60206040518083038186803b15801561083757600080fd5b505af415801561084b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086f919061387c565b9050600061087c8a611a24565b60405163aa65716d60e01b8152600481018290526024810185905262ffffff19841660448201526064810188905290915073__$78b81d5f8d9acd1db1c57025247ed4730f$__9063aa65716d9060840160206040518083038186803b1580156108e457600080fd5b505af41580156108f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091c919061385c565b156109f2576000898152600960205260409020805461096b91908690811061095457634e487b7160e01b600052603260045260246000fd5b906000526020600020906005020160040154611aa4565b6109cc5760405162461bcd60e51b815260206004820152602c60248201527f426974636f696e52656c61793a2067657474696e672066656520776173206e6f60448201526b1d081cdd58d8d95cdcd99d5b60a21b606482015260840161066b565b6001601260008282546109df9190613c32565b9091555060019550610a64945050505050565b5050508080610a0090613d01565b9150506106c4565b5060405162461bcd60e51b815260206004820152602660248201527f426974636f696e52656c61793a20747820686173206e6f74206265656e20696e60448201526518db1d59195960d21b606482015260840161066b565b5060005b6001805595945050505050565b6000546001600160a01b03163314610a9b5760405162461bcd60e51b815260040161066b90613bc6565b610aa3611b61565b565b6000546001600160a01b03163314610acf5760405162461bcd60e51b815260040161066b90613bc6565b601055565b6000610adf82611bd6565b90505b919050565b6000546001600160a01b03163314610b115760405162461bcd60e51b815260040161066b90613bc6565b601355565b600060026001541415610b3b5760405162461bcd60e51b815260040161066b90613bfb565b6002600155610b4c60025460ff1690565b15610b695760405162461bcd60e51b815260040161066b90613b9c565b600083838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052506040516334fcca5360e11b815273__$23851852cf97a1ff2525b5bae2bad8f731$__956369f994a69550610bd694509250600401613b15565b60206040518083038186803b158015610bee57600080fd5b505af4158015610c02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c26919061387c565b604051632953639960e21b815273__$0502a3cf6a2bcad1c419a18d02ea8187d1$__9163a54d8e6491610c629162ffffff191690600401613aee565b60206040518083038186803b158015610c7a57600080fd5b505af4158015610c8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb2919061387c565b9050600086868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052506040516334fcca5360e11b815273__$23851852cf97a1ff2525b5bae2bad8f731$__956369f994a69550610d2194509250600401613b15565b60206040518083038186803b158015610d3957600080fd5b505af4158015610d4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d71919061387c565b6040516309dafd2160e31b815273__$0502a3cf6a2bcad1c419a18d02ea8187d1$__91634ed7e90891610dad9162ffffff191690600401613aee565b60206040518083038186803b158015610dc557600080fd5b505af4158015610dd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dfd919061387c565b604051632c9c3b9f60e11b815290915073__$23851852cf97a1ff2525b5bae2bad8f731$__90635938773e90610e3d9062ffffff19861690600401613aee565b60206040518083038186803b158015610e5557600080fd5b505af4158015610e69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8d919061385c565b610eff5760405162461bcd60e51b815260206004820152603960248201527f426974636f696e52656c61793a20686561646572206172726179206c656e677460448201527f68206d75737420626520646976697369626c6520627920383000000000000000606482015260840161066b565b604051632c9c3b9f60e11b815273__$23851852cf97a1ff2525b5bae2bad8f731$__90635938773e90610f3c9062ffffff19851690600401613aee565b60206040518083038186803b158015610f5457600080fd5b505af4158015610f68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8c919061385c565b610fe65760405162461bcd60e51b815260206004820152602560248201527f426974636f696e52656c61793a20616e63686f72206d75737420626520383020604482015264627974657360d81b606482015260840161066b565b610ff281836000611c36565b60018055979650505050505050565b6000546001600160a01b0316331461102b5760405162461bcd60e51b815260040161066b90613bc6565b610aa36000612521565b60006002600154141561105a5760405162461bcd60e51b815260040161066b90613bfb565b600260015561106b60025460ff1690565b156110885760405162461bcd60e51b815260040161066b90613b9c565b600087878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052506040516334fcca5360e11b815273__$23851852cf97a1ff2525b5bae2bad8f731$__956369f994a695506110f594509250600401613b15565b60206040518083038186803b15801561110d57600080fd5b505af4158015611121573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611145919061387c565b6040516309dafd2160e31b815273__$0502a3cf6a2bcad1c419a18d02ea8187d1$__91634ed7e908916111819162ffffff191690600401613aee565b60206040518083038186803b15801561119957600080fd5b505af41580156111ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d1919061387c565b9050600086868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052506040516334fcca5360e11b815273__$23851852cf97a1ff2525b5bae2bad8f731$__956369f994a6955061124094509250600401613b15565b60206040518083038186803b15801561125857600080fd5b505af415801561126c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611290919061387c565b6040516309dafd2160e31b815273__$0502a3cf6a2bcad1c419a18d02ea8187d1$__91634ed7e908916112cc9162ffffff191690600401613aee565b60206040518083038186803b1580156112e457600080fd5b505af41580156112f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131c919061387c565b9050600085858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052506040516334fcca5360e11b815273__$23851852cf97a1ff2525b5bae2bad8f731$__956369f994a6955061138b94509250600401613b15565b60206040518083038186803b1580156113a357600080fd5b505af41580156113b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113db919061387c565b604051632953639960e21b815273__$0502a3cf6a2bcad1c419a18d02ea8187d1$__9163a54d8e64916114179162ffffff191690600401613aee565b60206040518083038186803b15801561142f57600080fd5b505af4158015611443573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611467919061387c565b604051632c9c3b9f60e11b815290915073__$23851852cf97a1ff2525b5bae2bad8f731$__90635938773e906114a79062ffffff19871690600401613aee565b60206040518083038186803b1580156114bf57600080fd5b505af41580156114d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f7919061385c565b801561158b5750604051632c9c3b9f60e11b815273__$23851852cf97a1ff2525b5bae2bad8f731$__90635938773e9061153b9062ffffff19861690600401613aee565b60206040518083038186803b15801561155357600080fd5b505af4158015611567573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061158b919061385c565b801561161f5750604051632c9c3b9f60e11b815273__$23851852cf97a1ff2525b5bae2bad8f731$__90635938773e906115cf9062ffffff19851690600401613aee565b60206040518083038186803b1580156115e757600080fd5b505af41580156115fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161f919061385c565b6116915760405162461bcd60e51b815260206004820152603c60248201527f426974636f696e52656c61793a2062616420617267732e20436865636b20686560448201527f6164657220616e642061727261792062797465206c656e677468732e00000000606482015260840161066b565b61169c838383612571565b600180559a9950505050505050505050565b600d546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156116f257600080fd5b505afa158015611706573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061172a91906138b8565b905090565b6000546001600160a01b031633146117595760405162461bcd60e51b815260040161066b90613bc6565b600e55565b6000546001600160a01b031633146117885760405162461bcd60e51b815260040161066b90613bc6565b600f55565b6000546001600160a01b031633146117b75760405162461bcd60e51b815260040161066b90613bc6565b600555565b60006117c9848484612cc5565b90505b9392505050565b6000828152600960205260408120805461063d91908490811061180657634e487b7160e01b600052603260045260246000fd5b906000526020600020906005020160000154611a24565b6000546001600160a01b031633146118475760405162461bcd60e51b815260040161066b90613bc6565b600c55565b6000546001600160a01b031633146118765760405162461bcd60e51b815260040161066b90613bc6565b610aa3612d14565b6000601154606461188f9190613c84565b601054600e546118a0906001613c32565b60008681526009602052604090208054869081106118ce57634e487b7160e01b600052603260045260246000fd5b906000526020600020906005020160040154600f546118ed9190613c84565b6118f79190613c84565b6119019190613c84565b61063d9190613c4a565b6000546001600160a01b031633146119355760405162461bcd60e51b815260040161066b90613bc6565b6001600160a01b03811661199a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161066b565b6119a381612521565b50565b600082815b838110156119d6576000918252600760205260409091205490806119ce81613d01565b9150506119ab565b508061063d5760405162461bcd60e51b815260206004820152601e60248201527f426974636f696e52656c61793a20756e6b6e6f776e20616e636573746f720000604482015260640161066b565b6000606081805b6020811015611a98578285611a4183601f613ca3565b60208110611a5f57634e487b7160e01b600052603260045260246000fd5b1a60f81b604051602001611a74929190613abf565b60405160208183030381529060405292508080611a9090613d01565b915050611a2b565b50506020015192915050565b6000806011546064611ab69190613c84565b601054600e54611ac7906001613c32565b85600f54611ad59190613c84565b611adf9190613c84565b611ae99190613c84565b611af39190613c4a565b905080341015611b455760405162461bcd60e51b815260206004820152601f60248201527f426974636f696e52656c61793a20666565206973206e6f7420656e6f75676800604482015260640161066b565b611b5833611b538334613ca3565b612d8e565b50600192915050565b60025460ff1615611b845760405162461bcd60e51b815260040161066b90613b9c565b6002805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611bb93390565b6040516001600160a01b03909116815260200160405180910390a1565b600081815260086020526040812054611c215760405162461bcd60e51b815260206004820152600d60248201526c556e6b6e6f776e20626c6f636b60981b604482015260640161066b565b50600081815260086020526040902054610ae2565b6040516307f6f12360e21b8152600090819073__$23851852cf97a1ff2525b5bae2bad8f731$__90631fdbc48c90611c789062ffffff19891690600401613aee565b60206040518083038186803b158015611c9057600080fd5b505af4158015611ca4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cc891906138b8565b90506000611cd582611bd6565b60405163df90556160e01b815290915060009073__$0502a3cf6a2bcad1c419a18d02ea8187d1$__9063df90556190611d1a9062ffffff198a16908590600401613aff565b60206040518083038186803b158015611d3257600080fd5b505af4158015611d46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d6a919061387c565b6040516362ef7dad60e01b815273__$0502a3cf6a2bcad1c419a18d02ea8187d1$__916362ef7dad91611da69162ffffff191690600401613aee565b60206040518083038186803b158015611dbe57600080fd5b505af4158015611dd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611df691906138b8565b90508480611e9057506040516362ef7dad60e01b8152819073__$0502a3cf6a2bcad1c419a18d02ea8187d1$__906362ef7dad90611e3e9062ffffff198c1690600401613aee565b60206040518083038186803b158015611e5657600080fd5b505af4158015611e6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e8e91906138b8565b145b611ef75760405162461bcd60e51b815260206004820152603260248201527f426974636f696e52656c61793a20756e657870656374656420726574617267656044820152711d081bdb88195e1d195c9b985b0818d85b1b60721b606482015260840161066b565b60008060005b604051639cb855cb60e01b815260509073__$23851852cf97a1ff2525b5bae2bad8f731$__90639cb855cb90611f3d9062ffffff198e1690600401613aee565b60206040518083038186803b158015611f5557600080fd5b505af4158015611f69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f8d9190613a98565b611f979190613c5e565b6001600160601b03168110156125115760405163df90556160e01b815260009073__$0502a3cf6a2bcad1c419a18d02ea8187d1$__9063df90556190611fe99062ffffff198e16908690600401613aff565b60206040518083038186803b15801561200157600080fd5b505af4158015612015573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612039919061387c565b90506120458287613c32565b612050906001613c32565b6040516307f6f12360e21b815290945073__$23851852cf97a1ff2525b5bae2bad8f731$__90631fdbc48c906120909062ffffff19851690600401613aee565b60206040518083038186803b1580156120a857600080fd5b505af41580156120bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120e091906138b8565b925088806120f857506120f56107e085613d1c565b15155b61217e5760405162461bcd60e51b815260206004820152604b60248201527f426974636f696e52656c61793a20686561646572732073686f756c642062652060448201527f7375626d69747465642062792063616c6c696e6720616464486561646572735760648201526a1a5d1a14995d185c99d95d60aa1b608482015260a40161066b565b6040516362ef7dad60e01b8152859073__$0502a3cf6a2bcad1c419a18d02ea8187d1$__906362ef7dad906121bd9062ffffff19861690600401613aee565b60206040518083038186803b1580156121d557600080fd5b505af41580156121e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061220d91906138b8565b1461226c5760405162461bcd60e51b815260206004820152602960248201527f426974636f696e52656c61793a20746172676574206368616e67656420756e65604482015268787065637465646c7960b81b606482015260840161066b565b6040516001620c742360e01b0319815273__$78b81d5f8d9acd1db1c57025247ed4730f$__9063fff38bdd906122ae9062ffffff198516908b90600401613aff565b60206040518083038186803b1580156122c657600080fd5b505af41580156122da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122fe919061385c565b6123675760405162461bcd60e51b815260206004820152603460248201527f426974636f696e52656c61793a206865616465727320646f206e6f7420666f726044820152733690309031b7b739b4b9ba32b73a1031b430b4b760611b606482015260840161066b565b6004546005546123779086613c32565b116123945760405162461bcd60e51b815260040161066b90613b57565b6000838152600760205260409020546124fa576040516340bec88f60e01b815260048101849052859073__$23851852cf97a1ff2525b5bae2bad8f731$__906340bec88f9060240160206040518083038186803b1580156123f457600080fd5b505af4158015612408573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061242c91906138b8565b111561248c5760405162461bcd60e51b815260206004820152602960248201527f426974636f696e52656c61793a2068656164657220776f726b20697320696e736044820152681d59999a58da595b9d60ba1b606482015260840161066b565b60008381526007602090815260408083208a9055600890915290208490556124b48185612eac565b336001600160a01b031687857ffb8fff3e2daa665d496373ced291b62aba4162f24632a1597e286621016e9a1f866040516124f191815260200190565b60405180910390a45b82965050808061250990613d01565b915050611efd565b5060019998505050505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516307f6f12360e21b8152600090819061260c9073__$23851852cf97a1ff2525b5bae2bad8f731$__90631fdbc48c906125b79062ffffff198a1690600401613aee565b60206040518083038186803b1580156125cf57600080fd5b505af41580156125e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061260791906138b8565b611bd6565b6040516307f6f12360e21b81529091506000906126539073__$23851852cf97a1ff2525b5bae2bad8f731$__90631fdbc48c906125b79062ffffff198a1690600401613aee565b90506126616107e082613d1c565b6107df146126eb5760405162461bcd60e51b815260206004820152604b60248201527f426974636f696e52656c61793a206d7573742070726f7669646520746865206c60448201527f61737420686561646572206f662074686520636c6f73696e672064696666696360648201526a1d5b1d1e481c195c9a5bd960aa1b608482015260a40161066b565b6126f7826107df613c32565b81146127645760405162461bcd60e51b815260206004820152603660248201527f426974636f696e52656c61793a206d7573742070726f766964652065786163746044820152751b1e480c48191a59999a58dd5b1d1e481c195c9a5bd960521b606482015260840161066b565b60405163cddb450760e01b815273__$0502a3cf6a2bcad1c419a18d02ea8187d1$__9063cddb4507906127a19062ffffff19891690600401613aee565b60206040518083038186803b1580156127b957600080fd5b505af41580156127cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127f191906138b8565b60405163cddb450760e01b815273__$0502a3cf6a2bcad1c419a18d02ea8187d1$__9063cddb45079061282e9062ffffff198b1690600401613aee565b60206040518083038186803b15801561284657600080fd5b505af415801561285a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061287e91906138b8565b146128e95760405162461bcd60e51b815260206004820152603560248201527f426974636f696e52656c61793a20706572696f642068656164657220646966666044820152740d2c6ead8e8d2cae640c8de40dcdee840dac2e8c6d605b1b606482015260840161066b565b60405163df90556160e01b815260009073__$0502a3cf6a2bcad1c419a18d02ea8187d1$__9063df9055619061292b9062ffffff198916908590600401613aff565b60206040518083038186803b15801561294357600080fd5b505af4158015612957573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061297b919061387c565b6040516362ef7dad60e01b815290915060009073__$0502a3cf6a2bcad1c419a18d02ea8187d1$__906362ef7dad906129be9062ffffff19861690600401613aee565b60206040518083038186803b1580156129d657600080fd5b505af41580156129ea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a0e91906138b8565b6040516362ef7dad60e01b815290915060009073__$0502a3cf6a2bcad1c419a18d02ea8187d1$__9063b25912329082906362ef7dad90612a599062ffffff198f1690600401613aee565b60206040518083038186803b158015612a7157600080fd5b505af4158015612a85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aa991906138b8565b8b62ffffff191673__$0502a3cf6a2bcad1c419a18d02ea8187d1$__63f172b06090916040518263ffffffff1660e01b8152600401612ae89190613aee565b60206040518083038186803b158015612b0057600080fd5b505af4158015612b14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b389190613a74565b8b62ffffff191673__$0502a3cf6a2bcad1c419a18d02ea8187d1$__63f172b06090916040518263ffffffff1660e01b8152600401612b779190613aee565b60206040518083038186803b158015612b8f57600080fd5b505af4158015612ba3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bc79190613a74565b6040516001600160e01b031960e086901b168152600481019390935263ffffffff918216602484015216604482015260640160206040518083038186803b158015612c1157600080fd5b505af4158015612c25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c4991906138b8565b90508181831614612cac5760405162461bcd60e51b815260206004820152602760248201527f426974636f696e52656c61793a20696e76616c696420726574617267657420706044820152661c9bdd9a59195960ca1b606482015260840161066b565b612cb888886001611c36565b9998505050505050505050565b600082815b83811015612d085785821415612ce5576001925050506117cc565b600091825260076020526040909120549080612d0081613d01565b915050612cca565b50600095945050505050565b60025460ff16612d5d5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161066b565b6002805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33611bb9565b80471015612dde5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161066b565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612e2b576040519150601f19603f3d011682016040523d82523d6000602084013e612e30565b606091505b5050905080612ea75760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161066b565b505050565b600454600554612ebc9083613c32565b11612ed95760405162461bcd60e51b815260040161066b90613b57565b6040805160a08101825260008082526020820181905281830181905260608201819052608082015290516307f6f12360e21b815273__$23851852cf97a1ff2525b5bae2bad8f731$__90631fdbc48c90612f3d9062ffffff19871690600401613aee565b60206040518083038186803b158015612f5557600080fd5b505af4158015612f69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f8d91906138b8565b815260405163383ef31360e11b815273__$0502a3cf6a2bcad1c419a18d02ea8187d1$__9063707de62690612fcc9062ffffff19871690600401613aee565b60206040518083038186803b158015612fe457600080fd5b505af4158015612ff8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061301c91906138b8565b6020820152604051634edfc3d560e11b815273__$0502a3cf6a2bcad1c419a18d02ea8187d1$__90639dbf87aa9061305e9062ffffff19871690600401613aee565b60206040518083038186803b15801561307657600080fd5b505af415801561308a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130ae91906138b8565b604082810191825233606084019081523a60808501908152600086815260096020908152938120805460018082018355918352918590208751600590930201918255938601519381019390935592516002830155516003820180546001600160a01b0319166001600160a01b03909216919091179055905160049182015554821115612ea7576001600460008282546131479190613c32565b90915550613155905061315d565b612ea7613461565b6005546003546004546131709190613ca3565b10610aa35760055460045460005b82156131ff5760008281526009602052604081208054839081106131b257634e487b7160e01b600052603260045260246000fd5b90600052602060002090600502016001015490506131dc816001856131d79190613ca3565b613496565b9150836131e881613cea565b94505082806131f690613cea565b9350505061317e565b600082815260096020526040902080548290811061322d57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600502016009600084815260200190815260200160002060008154811061326e57634e487b7160e01b600052603260045260246000fd5b600091825260208083208454600590930201918255600180850154818401556002808601549084015560038086015490840180546001600160a01b0319166001600160a01b039092169190911790556004948501549490920193909355848252600990925260409020541115612ea7576132e78261351a565b60008281526009602052604081208054829161333b91839061331957634e487b7160e01b600052603260045260246000fd5b60009182526020909120600360059092020101546001600160a01b03166135b2565b60008681526009602052604081208054939550919350909161336d57634e487b7160e01b600052603260045260246000fd5b600091825260208083206003600590930201919091015486835260099091526040822080546001600160a01b039092169287927f4fec6ffa2052e80db9daadc2384a8f634057472e28ea7f1bd3eebfc92b5b0f8e9291906133de57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060050201600001546009600089815260200190815260200160002060008154811061342357634e487b7160e01b600052603260045260246000fd5b600091825260209182902060016005909202010154604080519384529183015281018690526060810185905260800160405180910390a35050505050565b6010546004546134719190613d1c565b610aa357601354601254106134885760125461348c565b6013545b6011556000601255565b6000805b6000838152600960205260409020548110156135105760008381526009602052604090208054829081106134de57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060050201600001548414156134fe579050610640565b8061350881613d01565b91505061349a565b5060009392505050565b60015b6000828152600960205260409020548110156135ae57600082815260096020526040902080548290811061356157634e487b7160e01b600052603260045260246000fd5b6000918252602082206005909102018181556001808201839055600282018390556003820180546001600160a01b03191690556004909101919091556135a79082613c32565b905061351d565b5050565b60008060006064600e5460016135c89190613c32565b3a600f546135d69190613c84565b6135e09190613c84565b6135ea9190613c4a565b600d549091506000906001600160a01b03161561368357600d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561364457600080fd5b505afa158015613658573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061367c91906138b8565b9050613687565b5060005b600081600c541115801561369d57506000600c54115b1561372e57600d54600c5460405163a9059cbb60e01b81526001600160a01b038981166004830152602482019290925291169063a9059cbb90604401602060405180830381600087803b1580156136f357600080fd5b505af1158015613707573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061372b919061385c565b90505b6000834711801561373f5750600084115b15613798576040516001600160a01b038816908590600081818185875af1925050503d806000811461378d576040519150601f19603f3d011682016040523d82523d6000602084013e613792565b606091505b50909150505b80156137c55781156137b55783600c5495509550505050506137e9565b83600095509550505050506137e9565b81156137dd576000600c5495509550505050506137e9565b60008095509550505050505b915091565b60008083601f8401126137ff578182fd5b50813567ffffffffffffffff811115613816578182fd5b60208301915083602082850101111561382e57600080fd5b9250929050565b600060208284031215613846578081fd5b81356001600160a01b038116811461063d578182fd5b60006020828403121561386d578081fd5b8151801515811461063d578182fd5b60006020828403121561388d578081fd5b815162ffffff198116811461063d578182fd5b6000602082840312156138b1578081fd5b5035919050565b6000602082840312156138c9578081fd5b5051919050565b6000806000606084860312156138e4578182fd5b505081359360208301359350604090920135919050565b6000806040838503121561390d578182fd5b50508035926020909101359150565b600080600080600060808688031215613933578081fd5b8535945060208601359350604086013567ffffffffffffffff811115613957578182fd5b613963888289016137ee565b96999598509660600135949350505050565b6000806000806040858703121561398a578384fd5b843567ffffffffffffffff808211156139a1578586fd5b6139ad888389016137ee565b909650945060208701359150808211156139c5578384fd5b506139d2878288016137ee565b95989497509550505050565b600080600080600080606087890312156139f6578081fd5b863567ffffffffffffffff80821115613a0d578283fd5b613a198a838b016137ee565b90985096506020890135915080821115613a31578283fd5b613a3d8a838b016137ee565b90965094506040890135915080821115613a55578283fd5b50613a6289828a016137ee565b979a9699509497509295939492505050565b600060208284031215613a85578081fd5b815163ffffffff8116811461063d578182fd5b600060208284031215613aa9578081fd5b81516001600160601b038116811461063d578182fd5b60008351613ad1818460208801613cba565b6001600160f81b0319939093169190920190815260010192915050565b62ffffff1991909116815260200190565b62ffffff19929092168252602082015260400190565b6000604082528351806040840152613b34816060850160208801613cba565b64ffffffffff93909316602083015250601f91909101601f191601606001919050565b60208082526025908201527f426974636f696e52656c61793a20626c6f636b2068656164657220697320746f6040820152641bc81bdb1960da1b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60008219821115613c4557613c45613d30565b500190565b600082613c5957613c59613d46565b500490565b60006001600160601b0380841680613c7857613c78613d46565b92169190910492915050565b6000816000190483118215151615613c9e57613c9e613d30565b500290565b600082821015613cb557613cb5613d30565b500390565b60005b83811015613cd5578181015183820152602001613cbd565b83811115613ce4576000848401525b50505050565b600081613cf957613cf9613d30565b506000190190565b6000600019821415613d1557613d15613d30565b5060010190565b600082613d2b57613d2b613d46565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fdfea26469706673582212205214e838c0e48b3011b6449efa8803368586838da4bfe4cf214227dab163508564736f6c63430008020033",
      "linkReferences": {
        "contracts/libraries/TypedMemView.sol": {
          "TypedMemView": [
            {
              "length": 20,
              "start": 95
            },
            {
              "length": 20,
              "start": 394
            },
            {
              "length": 20,
              "start": 618
            },
            {
              "length": 20,
              "start": 3748
            },
            {
              "length": 20,
              "start": 4839
            },
            {
              "length": 20,
              "start": 5170
            },
            {
              "length": 20,
              "start": 5450
            },
            {
              "length": 20,
              "start": 5705
            },
            {
              "length": 20,
              "start": 6150
            },
            {
              "length": 20,
              "start": 6481
            },
            {
              "length": 20,
              "start": 6812
            },
            {
              "length": 20,
              "start": 7092
            },
            {
              "length": 20,
              "start": 7240
            },
            {
              "length": 20,
              "start": 7388
            },
            {
              "length": 20,
              "start": 9093
            },
            {
              "length": 20,
              "start": 9802
            },
            {
              "length": 20,
              "start": 10141
            },
            {
              "length": 20,
              "start": 11002
            },
            {
              "length": 20,
              "start": 11460
            },
            {
              "length": 20,
              "start": 11616
            },
            {
              "length": 20,
              "start": 13898
            }
          ]
        },
        "contracts/libraries/ViewBTC.sol": {
          "ViewBTC": [
            {
              "length": 20,
              "start": 251
            },
            {
              "length": 20,
              "start": 801
            },
            {
              "length": 20,
              "start": 3885
            },
            {
              "length": 20,
              "start": 4976
            },
            {
              "length": 20,
              "start": 5307
            },
            {
              "length": 20,
              "start": 6287
            },
            {
              "length": 20,
              "start": 6618
            },
            {
              "length": 20,
              "start": 6949
            },
            {
              "length": 20,
              "start": 9253
            },
            {
              "length": 20,
              "start": 9396
            },
            {
              "length": 20,
              "start": 9547
            },
            {
              "length": 20,
              "start": 9972
            },
            {
              "length": 20,
              "start": 10442
            },
            {
              "length": 20,
              "start": 11950
            },
            {
              "length": 20,
              "start": 12091
            },
            {
              "length": 20,
              "start": 12342
            },
            {
              "length": 20,
              "start": 12491
            },
            {
              "length": 20,
              "start": 12638
            },
            {
              "length": 20,
              "start": 12781
            },
            {
              "length": 20,
              "start": 12924
            },
            {
              "length": 20,
              "start": 14041
            },
            {
              "length": 20,
              "start": 14187
            }
          ]
        },
        "contracts/libraries/ViewSPV.sol": {
          "ViewSPV": [
            {
              "length": 20,
              "start": 4074
            },
            {
              "length": 20,
              "start": 10681
            }
          ]
        }
      },
      "deployedLinkReferences": {
        "contracts/libraries/TypedMemView.sol": {
          "TypedMemView": [
            {
              "length": 20,
              "start": 1897
            },
            {
              "length": 20,
              "start": 2988
            },
            {
              "length": 20,
              "start": 3319
            },
            {
              "length": 20,
              "start": 3599
            },
            {
              "length": 20,
              "start": 3854
            },
            {
              "length": 20,
              "start": 4299
            },
            {
              "length": 20,
              "start": 4630
            },
            {
              "length": 20,
              "start": 4961
            },
            {
              "length": 20,
              "start": 5241
            },
            {
              "length": 20,
              "start": 5389
            },
            {
              "length": 20,
              "start": 5537
            },
            {
              "length": 20,
              "start": 7242
            },
            {
              "length": 20,
              "start": 7951
            },
            {
              "length": 20,
              "start": 8290
            },
            {
              "length": 20,
              "start": 9151
            },
            {
              "length": 20,
              "start": 9609
            },
            {
              "length": 20,
              "start": 9765
            },
            {
              "length": 20,
              "start": 12047
            }
          ]
        },
        "contracts/libraries/ViewBTC.sol": {
          "ViewBTC": [
            {
              "length": 20,
              "start": 2034
            },
            {
              "length": 20,
              "start": 3125
            },
            {
              "length": 20,
              "start": 3456
            },
            {
              "length": 20,
              "start": 4436
            },
            {
              "length": 20,
              "start": 4767
            },
            {
              "length": 20,
              "start": 5098
            },
            {
              "length": 20,
              "start": 7402
            },
            {
              "length": 20,
              "start": 7545
            },
            {
              "length": 20,
              "start": 7696
            },
            {
              "length": 20,
              "start": 8121
            },
            {
              "length": 20,
              "start": 8591
            },
            {
              "length": 20,
              "start": 10099
            },
            {
              "length": 20,
              "start": 10240
            },
            {
              "length": 20,
              "start": 10491
            },
            {
              "length": 20,
              "start": 10640
            },
            {
              "length": 20,
              "start": 10787
            },
            {
              "length": 20,
              "start": 10930
            },
            {
              "length": 20,
              "start": 11073
            },
            {
              "length": 20,
              "start": 12190
            },
            {
              "length": 20,
              "start": 12336
            }
          ]
        },
        "contracts/libraries/ViewSPV.sol": {
          "ViewSPV": [
            {
              "length": 20,
              "start": 2223
            },
            {
              "length": 20,
              "start": 8830
            }
          ]
        }
      },
      "devdoc": {
        "kind": "dev",
        "methods": {
          "addHeaders(bytes,bytes)": {
            "details": "We check integrity and consistency of the header chain",
            "params": {
              "_anchor": "The header immediately preceeding the new chain",
              "_headers": "A tightly-packed list of 80-byte Bitcoin headers"
            },
            "returns": {
              "_0": "True if successfully written, error otherwise"
            }
          },
          "addHeadersWithRetarget(bytes,bytes,bytes)": {
            "details": "Checks the retarget, the heights, and the linkage",
            "params": {
              "_headers": "A tightly-packed list of 80-byte Bitcoin headers",
              "_oldPeriodEndHeader": "The last header in the difficulty period being closed (anchor of new headers)",
              "_oldPeriodStartHeader": "The first header in the difficulty period being closed"
            },
            "returns": {
              "_0": "True if successfully written, error otherwise"
            }
          },
          "availableTDT()": {
            "returns": {
              "_0": "Amount of TDT available in Relay treasury"
            }
          },
          "availableTNT()": {
            "returns": {
              "_0": "Amount of target blockchain native token available in Relay treasury"
            }
          },
          "checkTxProof(bytes32,uint256,bytes,uint256)": {
            "details": "Checks if the block is finalized, and Merkle proof is correct",
            "params": {
              "_blockHeight": "Block height of the desired tx",
              "_index": "Part of the Merkle proof for the desired tx",
              "_intermediateNodes": "Part of the Merkle proof for the desired tx",
              "_txid": "Desired transaction's tx Id"
            },
            "returns": {
              "_0": "True if the provided tx is confirmed on the source blockchain, False otherwise"
            }
          },
          "constructor": {
            "params": {
              "_genesisHeader": "The starting header",
              "_height": "The starting height",
              "_periodStart": "The hash of the first header in the genesis epoch"
            }
          },
          "findAncestor(bytes32,uint256)": {
            "details": "Will fail if the header is unknown",
            "params": {
              "_hash": "The header hash to search for"
            },
            "returns": {
              "_0": "The height of the header, or error if unknown"
            }
          },
          "findHeight(bytes32)": {
            "details": "Will fail if the header is unknown",
            "params": {
              "_hash": "The header hash to search for"
            },
            "returns": {
              "_0": "The height of the header, or error if unknown"
            }
          },
          "getBlockHeaderFee(uint256,uint256)": {
            "params": {
              "_height": "The height of the desired block header",
              "_index": "The index of the desired block header in that height"
            },
            "returns": {
              "_0": "Block header's fee price for a query"
            }
          },
          "getBlockHeaderHash(uint256,uint256)": {
            "params": {
              "_height": "The height of the desired block header",
              "_index": "The index of the desired block header in that height"
            },
            "returns": {
              "_0": "Block header's hash"
            }
          },
          "getCurrentEpochDifficulty()": {
            "details": "This is updated when a new heavist header has a new diff",
            "returns": {
              "_0": "The difficulty of the bestKnownDigest"
            }
          },
          "getNumberOfSubmittedHeaders(uint256)": {
            "details": "This shows the number of temporary forks in that specific height",
            "params": {
              "_height": "The desired height of the blockchain"
            },
            "returns": {
              "_0": "Number of block headers stored in the same height"
            }
          },
          "getPrevEpochDifficulty()": {
            "details": "This is updated when a difficulty change is accepted",
            "returns": {
              "_0": "The difficulty of the previous epoch"
            }
          },
          "isAncestor(bytes32,bytes32,uint256)": {
            "details": "Limit the amount of lookups (and thus gas usage) with _limit",
            "params": {
              "_ancestor": "The prospective ancestor",
              "_descendant": "The descendant to check",
              "_limit": "The maximum number of blocks to check"
            },
            "returns": {
              "_0": "true if ancestor is at most limit blocks lower than descendant, otherwise false"
            }
          },
          "owner()": {
            "details": "Returns the address of the current owner."
          },
          "pauseRelay()": {
            "details": "@param"
          },
          "paused()": {
            "details": "Returns true if the contract is paused, and false otherwise."
          },
          "renounceOwnership()": {
            "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
          },
          "setBaseQueries(uint256)": {
            "params": {
              "_baseQueries": "The base amount of queries we assume in each epoch                                     (This is for preventing user fees to grow significantly)"
            }
          },
          "setEpochLength(uint256)": {
            "params": {
              "_epochLength": "The length of epochs for estimating the user queries hence their fees"
            }
          },
          "setFinalizationParameter(uint256)": {
            "details": "This might change if finalization rule of the source chain gets updated",
            "params": {
              "_finalizationParameter": "The finalization parameter of the source chain"
            }
          },
          "setRelayerPercentageFee(uint256)": {
            "details": "This is updated when we want to change the Relayer reward",
            "params": {
              "_relayerPercentageFee": "Ratio > 1 that determines percentage of reward to the Relayer"
            }
          },
          "setRewardAmountInTDT(uint256)": {
            "details": "This award is for the relayer who has a finalized block header",
            "params": {
              "_rewardAmountInTDT": "The reward amount in TDT"
            }
          },
          "setSubmissionGasUsed(uint256)": {
            "details": "This is updated when the smart contract changes the way of getting block headers",
            "params": {
              "_submissionGasUsed": "The gas used for submitting one block header"
            }
          },
          "transferOwnership(address)": {
            "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
          },
          "unPauseRelay()": {
            "details": "@param"
          }
        },
        "version": 1
      },
      "evm": {
        "bytecode": {
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:4052:66",
                "statements": [
                  {
                    "nodeType": "YulBlock",
                    "src": "6:3:66",
                    "statements": []
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "74:117:66",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "84:22:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "99:6:66"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "93:5:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "93:13:66"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "84:5:66"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "169:16:66",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "178:1:66",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "181:1:66",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "171:6:66"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "171:12:66"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "171:12:66"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "128:5:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "139:5:66"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "154:3:66",
                                                "type": "",
                                                "value": "160"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "159:1:66",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "150:3:66"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "150:11:66"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "163:1:66",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nodeType": "YulIdentifier",
                                          "src": "146:3:66"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "146:19:66"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "135:3:66"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "135:31:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "125:2:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "125:42:66"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "118:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "118:50:66"
                          },
                          "nodeType": "YulIf",
                          "src": "115:2:66"
                        }
                      ]
                    },
                    "name": "abi_decode_address_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "53:6:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "64:5:66",
                        "type": ""
                      }
                    ],
                    "src": "14:177:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "274:219:66",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "320:26:66",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "329:6:66"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "337:6:66"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "322:6:66"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "322:22:66"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "322:22:66"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "295:7:66"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "304:9:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "291:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "291:23:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "316:2:66",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "287:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "287:32:66"
                          },
                          "nodeType": "YulIf",
                          "src": "284:2:66"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "355:29:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "374:9:66"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "368:5:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "368:16:66"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "359:5:66",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "437:26:66",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "446:6:66"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "454:6:66"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "439:6:66"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "439:22:66"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "439:22:66"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "406:5:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "427:5:66"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nodeType": "YulIdentifier",
                                          "src": "420:6:66"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "420:13:66"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "413:6:66"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "413:21:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "403:2:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "403:32:66"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "396:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "396:40:66"
                          },
                          "nodeType": "YulIf",
                          "src": "393:2:66"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "472:15:66",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "482:5:66"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "472:6:66"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bool_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "240:9:66",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "251:7:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "263:6:66",
                        "type": ""
                      }
                    ],
                    "src": "196:297:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "579:223:66",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "625:26:66",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "634:6:66"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "642:6:66"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "627:6:66"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "627:22:66"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "627:22:66"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "600:7:66"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "609:9:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "596:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "596:23:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "621:2:66",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "592:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "592:32:66"
                          },
                          "nodeType": "YulIf",
                          "src": "589:2:66"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "660:29:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "679:9:66"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "673:5:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "673:16:66"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "664:5:66",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "746:26:66",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "755:6:66"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "763:6:66"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "748:6:66"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "748:22:66"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "748:22:66"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "711:5:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "722:5:66"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "733:8:66",
                                            "type": "",
                                            "value": "16777215"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "729:3:66"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "729:13:66"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "718:3:66"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "718:25:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "708:2:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "708:36:66"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "701:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "701:44:66"
                          },
                          "nodeType": "YulIf",
                          "src": "698:2:66"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "781:15:66",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "791:5:66"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "781:6:66"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes29_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "545:9:66",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "556:7:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "568:6:66",
                        "type": ""
                      }
                    ],
                    "src": "498:304:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "888:113:66",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "934:26:66",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "943:6:66"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "951:6:66"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "936:6:66"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "936:22:66"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "936:22:66"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "909:7:66"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "918:9:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "905:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "905:23:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "930:2:66",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "901:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "901:32:66"
                          },
                          "nodeType": "YulIf",
                          "src": "898:2:66"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "969:26:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "985:9:66"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "979:5:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "979:16:66"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "969:6:66"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes32_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "854:9:66",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "865:7:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "877:6:66",
                        "type": ""
                      }
                    ],
                    "src": "807:194:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1147:998:66",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1194:26:66",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "1203:6:66"
                                    },
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "1211:6:66"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1196:6:66"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1196:22:66"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1196:22:66"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1168:7:66"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1177:9:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1164:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1164:23:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1189:3:66",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1160:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1160:33:66"
                          },
                          "nodeType": "YulIf",
                          "src": "1157:2:66"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1229:30:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1249:9:66"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "1243:5:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1243:16:66"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "1233:6:66",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1268:28:66",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1286:2:66",
                                    "type": "",
                                    "value": "64"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1290:1:66",
                                    "type": "",
                                    "value": "1"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "1282:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1282:10:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1294:1:66",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "1278:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1278:18:66"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "1272:2:66",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1323:26:66",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "1332:6:66"
                                    },
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "1340:6:66"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1325:6:66"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1325:22:66"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1325:22:66"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "1311:6:66"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "1319:2:66"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1308:2:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1308:14:66"
                          },
                          "nodeType": "YulIf",
                          "src": "1305:2:66"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1358:32:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1372:9:66"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "1383:6:66"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1368:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1368:22:66"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "1362:2:66",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1438:26:66",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "1447:6:66"
                                    },
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "1455:6:66"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1440:6:66"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1440:22:66"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1440:22:66"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "1417:2:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1421:4:66",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1413:3:66"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1413:13:66"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1428:7:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1409:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1409:27:66"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "1402:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1402:35:66"
                          },
                          "nodeType": "YulIf",
                          "src": "1399:2:66"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1473:19:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "1489:2:66"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "1483:5:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1483:9:66"
                          },
                          "variables": [
                            {
                              "name": "_3",
                              "nodeType": "YulTypedName",
                              "src": "1477:2:66",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1515:22:66",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "1517:16:66"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1517:18:66"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1517:18:66"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "_3",
                                "nodeType": "YulIdentifier",
                                "src": "1507:2:66"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "1511:2:66"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1504:2:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1504:10:66"
                          },
                          "nodeType": "YulIf",
                          "src": "1501:2:66"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1546:17:66",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1560:2:66",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "not",
                              "nodeType": "YulIdentifier",
                              "src": "1556:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1556:7:66"
                          },
                          "variables": [
                            {
                              "name": "_4",
                              "nodeType": "YulTypedName",
                              "src": "1550:2:66",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1572:23:66",
                          "value": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1592:2:66",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "1586:5:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1586:9:66"
                          },
                          "variables": [
                            {
                              "name": "memPtr",
                              "nodeType": "YulTypedName",
                              "src": "1576:6:66",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1604:71:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "1626:6:66"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "name": "_3",
                                                "nodeType": "YulIdentifier",
                                                "src": "1650:2:66"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "1654:4:66",
                                                "type": "",
                                                "value": "0x1f"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "add",
                                              "nodeType": "YulIdentifier",
                                              "src": "1646:3:66"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "1646:13:66"
                                          },
                                          {
                                            "name": "_4",
                                            "nodeType": "YulIdentifier",
                                            "src": "1661:2:66"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "and",
                                          "nodeType": "YulIdentifier",
                                          "src": "1642:3:66"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1642:22:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1666:2:66",
                                        "type": "",
                                        "value": "63"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1638:3:66"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1638:31:66"
                                  },
                                  {
                                    "name": "_4",
                                    "nodeType": "YulIdentifier",
                                    "src": "1671:2:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "1634:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1634:40:66"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1622:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1622:53:66"
                          },
                          "variables": [
                            {
                              "name": "newFreePtr",
                              "nodeType": "YulTypedName",
                              "src": "1608:10:66",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1734:22:66",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x41",
                                    "nodeType": "YulIdentifier",
                                    "src": "1736:16:66"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1736:18:66"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1736:18:66"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "1693:10:66"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "1705:2:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1690:2:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1690:18:66"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "newFreePtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "1713:10:66"
                                  },
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "1725:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "lt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1710:2:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1710:22:66"
                              }
                            ],
                            "functionName": {
                              "name": "or",
                              "nodeType": "YulIdentifier",
                              "src": "1687:2:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1687:46:66"
                          },
                          "nodeType": "YulIf",
                          "src": "1684:2:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1772:2:66",
                                "type": "",
                                "value": "64"
                              },
                              {
                                "name": "newFreePtr",
                                "nodeType": "YulIdentifier",
                                "src": "1776:10:66"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1765:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1765:22:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1765:22:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "memPtr",
                                "nodeType": "YulIdentifier",
                                "src": "1803:6:66"
                              },
                              {
                                "name": "_3",
                                "nodeType": "YulIdentifier",
                                "src": "1811:2:66"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "1796:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1796:18:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1796:18:66"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1862:26:66",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "1871:6:66"
                                    },
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "1879:6:66"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1864:6:66"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1864:22:66"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1864:22:66"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "1837:2:66"
                                      },
                                      {
                                        "name": "_3",
                                        "nodeType": "YulIdentifier",
                                        "src": "1841:2:66"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1833:3:66"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1833:11:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1846:4:66",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1829:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1829:22:66"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "1853:7:66"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1826:2:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1826:35:66"
                          },
                          "nodeType": "YulIf",
                          "src": "1823:2:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "1923:2:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1927:4:66",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1919:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1919:13:66"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "memPtr",
                                    "nodeType": "YulIdentifier",
                                    "src": "1938:6:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1946:4:66",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1934:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1934:17:66"
                              },
                              {
                                "name": "_3",
                                "nodeType": "YulIdentifier",
                                "src": "1953:2:66"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory",
                              "nodeType": "YulIdentifier",
                              "src": "1897:21:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1897:59:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "1897:59:66"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1965:16:66",
                          "value": {
                            "name": "memPtr",
                            "nodeType": "YulIdentifier",
                            "src": "1975:6:66"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "1965:6:66"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1990:37:66",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2010:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2021:4:66",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2006:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2006:20:66"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "2000:5:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2000:27:66"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "1990:6:66"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2036:35:66",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2056:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2067:2:66",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2052:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2052:18:66"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "2046:5:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2046:25:66"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "2036:6:66"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2080:59:66",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2124:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2135:2:66",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2120:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2120:18:66"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address_fromMemory",
                              "nodeType": "YulIdentifier",
                              "src": "2090:29:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2090:49:66"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "2080:6:66"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes_memory_ptrt_uint256t_bytes32t_address_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1089:9:66",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "1100:7:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1112:6:66",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "1120:6:66",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "1128:6:66",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "1136:6:66",
                        "type": ""
                      }
                    ],
                    "src": "1006:1139:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2259:96:66",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "2269:26:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2281:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2292:2:66",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2277:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2277:18:66"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "2269:4:66"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2311:9:66"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "2326:6:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "2338:8:66",
                                        "type": "",
                                        "value": "16777215"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "2334:3:66"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2334:13:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "2322:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2322:26:66"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2304:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2304:45:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2304:45:66"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes29__to_t_bytes29__fromStack_library_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2228:9:66",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2239:6:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "2250:4:66",
                        "type": ""
                      }
                    ],
                    "src": "2150:205:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2522:328:66",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2539:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2550:2:66",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2532:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2532:21:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2532:21:66"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2562:27:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "2582:6:66"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "2576:5:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2576:13:66"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "2566:6:66",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2609:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2620:2:66",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2605:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2605:18:66"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "2625:6:66"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2598:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2598:34:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2598:34:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "2667:6:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2675:4:66",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2663:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2663:17:66"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2686:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2697:2:66",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2682:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2682:18:66"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "2702:6:66"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory",
                              "nodeType": "YulIdentifier",
                              "src": "2641:21:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2641:68:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2641:68:66"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2718:62:66",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2734:9:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "length",
                                            "nodeType": "YulIdentifier",
                                            "src": "2753:6:66"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "2761:2:66",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "2749:3:66"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2749:15:66"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "2770:2:66",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "2766:3:66"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "2766:7:66"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "2745:3:66"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "2745:29:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2730:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2730:45:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2777:2:66",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2726:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2726:54:66"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "2718:4:66"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2800:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2811:4:66",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2796:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2796:20:66"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "2822:6:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2830:12:66",
                                    "type": "",
                                    "value": "0xffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "2818:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2818:25:66"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2789:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2789:55:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2789:55:66"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes_memory_ptr_t_rational_0_by_1__to_t_bytes_memory_ptr_t_uint40__fromStack_library_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2483:9:66",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "2494:6:66",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2502:6:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "2513:4:66",
                        "type": ""
                      }
                    ],
                    "src": "2360:490:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3029:179:66",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3046:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3057:2:66",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3039:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3039:21:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3039:21:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3080:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3091:2:66",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3076:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3076:18:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3096:2:66",
                                "type": "",
                                "value": "29"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3069:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3069:30:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3069:30:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3119:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3130:2:66",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3115:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3115:18:66"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "3135:31:66",
                                "type": "",
                                "value": "BitcoinRelay: stop being dumb"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3108:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3108:59:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3108:59:66"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3176:26:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3188:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3199:2:66",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3184:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3184:18:66"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "3176:4:66"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_e781faf8fb883d92fa7f84cf5e34cb7e97b317df68d3712dc055f3f039b5d48a__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3006:9:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "3020:4:66",
                        "type": ""
                      }
                    ],
                    "src": "2855:353:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3262:179:66",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3292:117:66",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "diff",
                                      "nodeType": "YulIdentifier",
                                      "src": "3313:4:66"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "3323:3:66",
                                          "type": "",
                                          "value": "224"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "3328:10:66",
                                          "type": "",
                                          "value": "0x4e487b71"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nodeType": "YulIdentifier",
                                        "src": "3319:3:66"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3319:20:66"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "3306:6:66"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3306:34:66"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3306:34:66"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3360:1:66",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3363:4:66",
                                      "type": "",
                                      "value": "0x11"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "3353:6:66"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3353:15:66"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3353:15:66"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "diff",
                                      "nodeType": "YulIdentifier",
                                      "src": "3388:4:66"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3394:4:66",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3381:6:66"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3381:18:66"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3381:18:66"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "3278:1:66"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "3281:1:66"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "3275:2:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3275:8:66"
                          },
                          "nodeType": "YulIf",
                          "src": "3272:2:66"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3418:17:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "3430:1:66"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "3433:1:66"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "3426:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3426:9:66"
                          },
                          "variableNames": [
                            {
                              "name": "diff",
                              "nodeType": "YulIdentifier",
                              "src": "3418:4:66"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_sub_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "3244:1:66",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "3247:1:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "diff",
                        "nodeType": "YulTypedName",
                        "src": "3253:4:66",
                        "type": ""
                      }
                    ],
                    "src": "3213:228:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3499:205:66",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3509:10:66",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3518:1:66",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "3513:1:66",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3578:63:66",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "3603:3:66"
                                        },
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "3608:1:66"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "3599:3:66"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3599:11:66"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "src",
                                              "nodeType": "YulIdentifier",
                                              "src": "3622:3:66"
                                            },
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "3627:1:66"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "3618:3:66"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "3618:11:66"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "3612:5:66"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3612:18:66"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "3592:6:66"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3592:39:66"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3592:39:66"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "3539:1:66"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "3542:6:66"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "3536:2:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3536:13:66"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "3550:19:66",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "3552:15:66",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "3561:1:66"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3564:2:66",
                                      "type": "",
                                      "value": "32"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "3557:3:66"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3557:10:66"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "3552:1:66"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "3532:3:66",
                            "statements": []
                          },
                          "src": "3528:113:66"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3667:31:66",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "3680:3:66"
                                        },
                                        {
                                          "name": "length",
                                          "nodeType": "YulIdentifier",
                                          "src": "3685:6:66"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "3676:3:66"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3676:16:66"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3694:1:66",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "3669:6:66"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3669:27:66"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3669:27:66"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "3656:1:66"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "3659:6:66"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "3653:2:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3653:13:66"
                          },
                          "nodeType": "YulIf",
                          "src": "3650:2:66"
                        }
                      ]
                    },
                    "name": "copy_memory_to_memory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "src",
                        "nodeType": "YulTypedName",
                        "src": "3477:3:66",
                        "type": ""
                      },
                      {
                        "name": "dst",
                        "nodeType": "YulTypedName",
                        "src": "3482:3:66",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "3487:6:66",
                        "type": ""
                      }
                    ],
                    "src": "3446:258:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3747:171:66",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3778:111:66",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "r",
                                      "nodeType": "YulIdentifier",
                                      "src": "3799:1:66"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "3806:3:66",
                                          "type": "",
                                          "value": "224"
                                        },
                                        {
                                          "kind": "number",
                                          "nodeType": "YulLiteral",
                                          "src": "3811:10:66",
                                          "type": "",
                                          "value": "0x4e487b71"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "shl",
                                        "nodeType": "YulIdentifier",
                                        "src": "3802:3:66"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "3802:20:66"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "3792:6:66"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3792:31:66"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3792:31:66"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3843:1:66",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3846:4:66",
                                      "type": "",
                                      "value": "0x12"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "3836:6:66"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3836:15:66"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3836:15:66"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "r",
                                      "nodeType": "YulIdentifier",
                                      "src": "3871:1:66"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "3874:4:66",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3864:6:66"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3864:15:66"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3864:15:66"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "3767:1:66"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "3760:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3760:9:66"
                          },
                          "nodeType": "YulIf",
                          "src": "3757:2:66"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3898:14:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "3907:1:66"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "3910:1:66"
                              }
                            ],
                            "functionName": {
                              "name": "mod",
                              "nodeType": "YulIdentifier",
                              "src": "3903:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3903:9:66"
                          },
                          "variableNames": [
                            {
                              "name": "r",
                              "nodeType": "YulIdentifier",
                              "src": "3898:1:66"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "mod_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "3732:1:66",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "3735:1:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "r",
                        "nodeType": "YulTypedName",
                        "src": "3741:1:66",
                        "type": ""
                      }
                    ],
                    "src": "3709:209:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3955:95:66",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3972:1:66",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3979:3:66",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3984:10:66",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "3975:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3975:20:66"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3965:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3965:31:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3965:31:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4012:1:66",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4015:4:66",
                                "type": "",
                                "value": "0x41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4005:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4005:15:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4005:15:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4036:1:66",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4039:4:66",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "4029:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4029:15:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4029:15:66"
                        }
                      ]
                    },
                    "name": "panic_error_0x41",
                    "nodeType": "YulFunctionDefinition",
                    "src": "3923:127:66"
                  }
                ]
              },
              "contents": "{\n    { }\n    function abi_decode_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(value0, value0) }\n        value0 := value\n    }\n    function abi_decode_tuple_t_bytes29_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, not(16777215)))) { revert(value0, value0) }\n        value0 := value\n    }\n    function abi_decode_tuple_t_bytes32_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := mload(headStart)\n    }\n    function abi_decode_tuple_t_bytes_memory_ptrt_uint256t_bytes32t_address_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(value1, value1) }\n        let offset := mload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(value1, value1) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(value1, value1) }\n        let _3 := mload(_2)\n        if gt(_3, _1) { panic_error_0x41() }\n        let _4 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_3, 0x1f), _4), 63), _4))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _3)\n        if gt(add(add(_2, _3), 0x20), dataEnd) { revert(value1, value1) }\n        copy_memory_to_memory(add(_2, 0x20), add(memPtr, 0x20), _3)\n        value0 := memPtr\n        value1 := mload(add(headStart, 0x20))\n        value2 := mload(add(headStart, 64))\n        value3 := abi_decode_address_fromMemory(add(headStart, 96))\n    }\n    function abi_encode_tuple_t_bytes29__to_t_bytes29__fromStack_library_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, not(16777215)))\n    }\n    function abi_encode_tuple_t_bytes_memory_ptr_t_rational_0_by_1__to_t_bytes_memory_ptr_t_uint40__fromStack_library_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 64)\n        let length := mload(value0)\n        mstore(add(headStart, 64), length)\n        copy_memory_to_memory(add(value0, 0x20), add(headStart, 96), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 96)\n        mstore(add(headStart, 0x20), and(value1, 0xffffffffff))\n    }\n    function abi_encode_tuple_t_stringliteral_e781faf8fb883d92fa7f84cf5e34cb7e97b317df68d3712dc055f3f039b5d48a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"BitcoinRelay: stop being dumb\")\n        tail := add(headStart, 96)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y)\n        {\n            mstore(diff, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(diff, 0x24)\n        }\n        diff := sub(x, y)\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function mod_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(r, shl(224, 0x4e487b71))\n            mstore(4, 0x12)\n            revert(r, 0x24)\n        }\n        r := mod(x, y)\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n}",
              "id": 66,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "linkReferences": {
            "contracts/libraries/TypedMemView.sol": {
              "TypedMemView": [
                {
                  "length": 20,
                  "start": 95
                },
                {
                  "length": 20,
                  "start": 394
                },
                {
                  "length": 20,
                  "start": 618
                },
                {
                  "length": 20,
                  "start": 3748
                },
                {
                  "length": 20,
                  "start": 4839
                },
                {
                  "length": 20,
                  "start": 5170
                },
                {
                  "length": 20,
                  "start": 5450
                },
                {
                  "length": 20,
                  "start": 5705
                },
                {
                  "length": 20,
                  "start": 6150
                },
                {
                  "length": 20,
                  "start": 6481
                },
                {
                  "length": 20,
                  "start": 6812
                },
                {
                  "length": 20,
                  "start": 7092
                },
                {
                  "length": 20,
                  "start": 7240
                },
                {
                  "length": 20,
                  "start": 7388
                },
                {
                  "length": 20,
                  "start": 9093
                },
                {
                  "length": 20,
                  "start": 9802
                },
                {
                  "length": 20,
                  "start": 10141
                },
                {
                  "length": 20,
                  "start": 11002
                },
                {
                  "length": 20,
                  "start": 11460
                },
                {
                  "length": 20,
                  "start": 11616
                },
                {
                  "length": 20,
                  "start": 13898
                }
              ]
            },
            "contracts/libraries/ViewBTC.sol": {
              "ViewBTC": [
                {
                  "length": 20,
                  "start": 251
                },
                {
                  "length": 20,
                  "start": 801
                },
                {
                  "length": 20,
                  "start": 3885
                },
                {
                  "length": 20,
                  "start": 4976
                },
                {
                  "length": 20,
                  "start": 5307
                },
                {
                  "length": 20,
                  "start": 6287
                },
                {
                  "length": 20,
                  "start": 6618
                },
                {
                  "length": 20,
                  "start": 6949
                },
                {
                  "length": 20,
                  "start": 9253
                },
                {
                  "length": 20,
                  "start": 9396
                },
                {
                  "length": 20,
                  "start": 9547
                },
                {
                  "length": 20,
                  "start": 9972
                },
                {
                  "length": 20,
                  "start": 10442
                },
                {
                  "length": 20,
                  "start": 11950
                },
                {
                  "length": 20,
                  "start": 12091
                },
                {
                  "length": 20,
                  "start": 12342
                },
                {
                  "length": 20,
                  "start": 12491
                },
                {
                  "length": 20,
                  "start": 12638
                },
                {
                  "length": 20,
                  "start": 12781
                },
                {
                  "length": 20,
                  "start": 12924
                },
                {
                  "length": 20,
                  "start": 14041
                },
                {
                  "length": 20,
                  "start": 14187
                }
              ]
            },
            "contracts/libraries/ViewSPV.sol": {
              "ViewSPV": [
                {
                  "length": 20,
                  "start": 4074
                },
                {
                  "length": 20,
                  "start": 10681
                }
              ]
            }
          },
          "object": "60806040523480156200001157600080fd5b50604051620044cd380380620044cd83398101604081905262000034916200057d565b6200003f33620004a8565b600180556002805460ff191690556040516334fcca5360e11b815260009073__$23851852cf97a1ff2525b5bae2bad8f731$__906369f994a6906200008b908890859060040162000659565b60206040518083038186803b158015620000a457600080fd5b505af4158015620000b9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000df91906200053e565b6040516309dafd2160e31b815262ffffff19909116600482015273__$0502a3cf6a2bcad1c419a18d02ea8187d1$__90634ed7e9089060240160206040518083038186803b1580156200013157600080fd5b505af415801562000146573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200016c91906200053e565b604051632c9c3b9f60e11b815262ffffff198216600482015290915073__$23851852cf97a1ff2525b5bae2bad8f731$__90635938773e9060240160206040518083038186803b158015620001c057600080fd5b505af4158015620001d5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001fb919062000515565b6200024c5760405162461bcd60e51b815260206004820152601d60248201527f426974636f696e52656c61793a2073746f70206265696e672064756d62000000604482015260640160405180910390fd5b6040516307f6f12360e21b815262ffffff198216600482015260009073__$23851852cf97a1ff2525b5bae2bad8f731$__90631fdbc48c9060240160206040518083038186803b158015620002a057600080fd5b505af4158015620002b5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002db919062000564565b6040805160a0810182526000602082018190528183018190526060820181905260808201528281529051634edfc3d560e11b815262ffffff19851660048201529192509073__$0502a3cf6a2bcad1c419a18d02ea8187d1$__90639dbf87aa9060240160206040518083038186803b1580156200035757600080fd5b505af41580156200036c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000392919062000564565b604082810191825233606084019081523a6080850190815260008a815260096020908152848220805460018082018355918452828420895160059092020190815582890151918101919091559551600287015592516003860180546001600160a01b0319166001600160a01b0390921691909117905590516004909401939093556006859055848352600890529020869055620004326107e087620006f4565b6200043e90876200069d565b600095865260086020526040862055505060016005908155600485905560039490945550600d80546001600160a01b0319166001600160a01b0392909216919091179055600e8190556010829055601382905560119190915560125550620186a0600f556200072b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200051057600080fd5b919050565b60006020828403121562000527578081fd5b8151801515811462000537578182fd5b9392505050565b60006020828403121562000550578081fd5b815162ffffff198116811462000537578182fd5b60006020828403121562000576578081fd5b5051919050565b6000806000806080858703121562000593578283fd5b84516001600160401b0380821115620005aa578485fd5b818701915087601f830112620005be578485fd5b815181811115620005d357620005d362000715565b604051601f8201601f19908116603f01168101908382118183101715620005fe57620005fe62000715565b816040528281528a602084870101111562000617578788fd5b6200062a836020830160208801620006c1565b809850505050505060208501519250604085015191506200064e60608601620004f8565b905092959194509250565b60006040825283518060408401526200067a816060850160208801620006c1565b64ffffffffff93909316602083015250601f91909101601f191601606001919050565b600082821015620006bc57634e487b7160e01b81526011600452602481fd5b500390565b60005b83811015620006de578181015183820152602001620006c4565b83811115620006ee576000848401525b50505050565b6000826200071057634e487b7160e01b81526012600452602481fd5b500690565b634e487b7160e01b600052604160045260246000fd5b613d92806200073b6000396000f3fe60806040526004361061021a5760003560e01c8063882a5ee011610123578063b9bbd9bd116100ab578063e2761af01161006f578063e2761af0146105b9578063efbc7be4146105cf578063f2fde38b146105e5578063fa041af514610605578063fd9c6e851461061b5761021a565b8063b9bbd9bd1461052e578063b9e88ac11461054e578063c20dc6641461056e578063c781452914610584578063d0a89739146105995761021a565b80639f156414116100f25780639f156414146104a2578063a072bc50146104b8578063a3db54eb146104ce578063b36161bd146104ee578063b985621a1461050e5761021a565b8063882a5ee0146104225780638da5cb5b14610437578063901186bb14610455578063926d44e2146104755761021a565b80635b732892116101a65780636594168311610175578063659416831461039757806365da41b9146103b7578063665b634f146103d7578063715018a6146103ed5780637fa637fc146104025761021a565b80635b732892146103365780635b88a0e51461034c5780635c975abb1461035f57806360b5c390146103775761021a565b806330017b3b116101ed57806330017b3b146102a65780634354da25146102c6578063465e7559146102e957806354eea7961461030057806357d775f8146103205761021a565b8063108f438d1461021f578063113764be1461025c5780632b97be241461027b5780632f796d9014610290575b600080fd5b34801561022b57600080fd5b50600d5461023f906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561026857600080fd5b50600a545b604051908152602001610253565b34801561028757600080fd5b50600b5461026d565b34801561029c57600080fd5b5061026d60045481565b3480156102b257600080fd5b5061026d6102c13660046138fb565b610631565b6102d96102d436600461391c565b610646565b6040519015158152602001610253565b3480156102f557600080fd5b506102fe610a71565b005b34801561030c57600080fd5b506102fe61031b3660046138a0565b610aa5565b34801561032c57600080fd5b5061026d60105481565b34801561034257600080fd5b5061026d60125481565b34801561035857600080fd5b504761026d565b34801561036b57600080fd5b5060025460ff166102d9565b34801561038357600080fd5b5061026d6103923660046138a0565b610ad4565b3480156103a357600080fd5b506102fe6103b23660046138a0565b610ae7565b3480156103c357600080fd5b506102d96103d2366004613975565b610b16565b3480156103e357600080fd5b5061026d600e5481565b3480156103f957600080fd5b506102fe611001565b34801561040e57600080fd5b506102d961041d3660046139de565b611035565b34801561042e57600080fd5b5061026d6116ae565b34801561044357600080fd5b506000546001600160a01b031661023f565b34801561046157600080fd5b506102fe6104703660046138a0565b61172f565b34801561048157600080fd5b5061026d6104903660046138a0565b60009081526009602052604090205490565b3480156104ae57600080fd5b5061026d60115481565b3480156104c457600080fd5b5061026d60055481565b3480156104da57600080fd5b506102fe6104e93660046138a0565b61175e565b3480156104fa57600080fd5b506102fe6105093660046138a0565b61178d565b34801561051a57600080fd5b506102d96105293660046138d0565b6117bc565b34801561053a57600080fd5b5061026d6105493660046138fb565b6117d3565b34801561055a57600080fd5b506102fe6105693660046138a0565b61181d565b34801561057a57600080fd5b5061026d600f5481565b34801561059057600080fd5b506102fe61184c565b3480156105a557600080fd5b5061026d6105b43660046138fb565b61187e565b3480156105c557600080fd5b5061026d60035481565b3480156105db57600080fd5b5061026d60065481565b3480156105f157600080fd5b506102fe610600366004613835565b61190b565b34801561061157600080fd5b5061026d60135481565b34801561062757600080fd5b5061026d600c5481565b600061063d83836119a6565b90505b92915050565b6000600260015414156106745760405162461bcd60e51b815260040161066b90613bfb565b60405180910390fd5b600260015561068560025460ff1690565b156106a25760405162461bcd60e51b815260040161066b90613b9c565b6004546106b0906001613c32565b6106bb866006613c32565b1015610a605760005b600086815260096020526040902054811015610a08576000868152600960205260408120805461072491908490811061070d57634e487b7160e01b600052603260045260246000fd5b906000526020600020906005020160020154611a24565b9050600086868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052506040516334fcca5360e11b815273__$23851852cf97a1ff2525b5bae2bad8f731$__956369f994a6955061079394509250600401613b15565b60206040518083038186803b1580156107ab57600080fd5b505af41580156107bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e3919061387c565b6040516322a24af360e11b815273__$0502a3cf6a2bcad1c419a18d02ea8187d1$__9163454495e69161081f9162ffffff191690600401613aee565b60206040518083038186803b15801561083757600080fd5b505af415801561084b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086f919061387c565b9050600061087c8a611a24565b60405163aa65716d60e01b8152600481018290526024810185905262ffffff19841660448201526064810188905290915073__$78b81d5f8d9acd1db1c57025247ed4730f$__9063aa65716d9060840160206040518083038186803b1580156108e457600080fd5b505af41580156108f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091c919061385c565b156109f2576000898152600960205260409020805461096b91908690811061095457634e487b7160e01b600052603260045260246000fd5b906000526020600020906005020160040154611aa4565b6109cc5760405162461bcd60e51b815260206004820152602c60248201527f426974636f696e52656c61793a2067657474696e672066656520776173206e6f60448201526b1d081cdd58d8d95cdcd99d5b60a21b606482015260840161066b565b6001601260008282546109df9190613c32565b9091555060019550610a64945050505050565b5050508080610a0090613d01565b9150506106c4565b5060405162461bcd60e51b815260206004820152602660248201527f426974636f696e52656c61793a20747820686173206e6f74206265656e20696e60448201526518db1d59195960d21b606482015260840161066b565b5060005b6001805595945050505050565b6000546001600160a01b03163314610a9b5760405162461bcd60e51b815260040161066b90613bc6565b610aa3611b61565b565b6000546001600160a01b03163314610acf5760405162461bcd60e51b815260040161066b90613bc6565b601055565b6000610adf82611bd6565b90505b919050565b6000546001600160a01b03163314610b115760405162461bcd60e51b815260040161066b90613bc6565b601355565b600060026001541415610b3b5760405162461bcd60e51b815260040161066b90613bfb565b6002600155610b4c60025460ff1690565b15610b695760405162461bcd60e51b815260040161066b90613b9c565b600083838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052506040516334fcca5360e11b815273__$23851852cf97a1ff2525b5bae2bad8f731$__956369f994a69550610bd694509250600401613b15565b60206040518083038186803b158015610bee57600080fd5b505af4158015610c02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c26919061387c565b604051632953639960e21b815273__$0502a3cf6a2bcad1c419a18d02ea8187d1$__9163a54d8e6491610c629162ffffff191690600401613aee565b60206040518083038186803b158015610c7a57600080fd5b505af4158015610c8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb2919061387c565b9050600086868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052506040516334fcca5360e11b815273__$23851852cf97a1ff2525b5bae2bad8f731$__956369f994a69550610d2194509250600401613b15565b60206040518083038186803b158015610d3957600080fd5b505af4158015610d4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d71919061387c565b6040516309dafd2160e31b815273__$0502a3cf6a2bcad1c419a18d02ea8187d1$__91634ed7e90891610dad9162ffffff191690600401613aee565b60206040518083038186803b158015610dc557600080fd5b505af4158015610dd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dfd919061387c565b604051632c9c3b9f60e11b815290915073__$23851852cf97a1ff2525b5bae2bad8f731$__90635938773e90610e3d9062ffffff19861690600401613aee565b60206040518083038186803b158015610e5557600080fd5b505af4158015610e69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8d919061385c565b610eff5760405162461bcd60e51b815260206004820152603960248201527f426974636f696e52656c61793a20686561646572206172726179206c656e677460448201527f68206d75737420626520646976697369626c6520627920383000000000000000606482015260840161066b565b604051632c9c3b9f60e11b815273__$23851852cf97a1ff2525b5bae2bad8f731$__90635938773e90610f3c9062ffffff19851690600401613aee565b60206040518083038186803b158015610f5457600080fd5b505af4158015610f68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8c919061385c565b610fe65760405162461bcd60e51b815260206004820152602560248201527f426974636f696e52656c61793a20616e63686f72206d75737420626520383020604482015264627974657360d81b606482015260840161066b565b610ff281836000611c36565b60018055979650505050505050565b6000546001600160a01b0316331461102b5760405162461bcd60e51b815260040161066b90613bc6565b610aa36000612521565b60006002600154141561105a5760405162461bcd60e51b815260040161066b90613bfb565b600260015561106b60025460ff1690565b156110885760405162461bcd60e51b815260040161066b90613b9c565b600087878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052506040516334fcca5360e11b815273__$23851852cf97a1ff2525b5bae2bad8f731$__956369f994a695506110f594509250600401613b15565b60206040518083038186803b15801561110d57600080fd5b505af4158015611121573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611145919061387c565b6040516309dafd2160e31b815273__$0502a3cf6a2bcad1c419a18d02ea8187d1$__91634ed7e908916111819162ffffff191690600401613aee565b60206040518083038186803b15801561119957600080fd5b505af41580156111ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d1919061387c565b9050600086868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052506040516334fcca5360e11b815273__$23851852cf97a1ff2525b5bae2bad8f731$__956369f994a6955061124094509250600401613b15565b60206040518083038186803b15801561125857600080fd5b505af415801561126c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611290919061387c565b6040516309dafd2160e31b815273__$0502a3cf6a2bcad1c419a18d02ea8187d1$__91634ed7e908916112cc9162ffffff191690600401613aee565b60206040518083038186803b1580156112e457600080fd5b505af41580156112f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131c919061387c565b9050600085858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052506040516334fcca5360e11b815273__$23851852cf97a1ff2525b5bae2bad8f731$__956369f994a6955061138b94509250600401613b15565b60206040518083038186803b1580156113a357600080fd5b505af41580156113b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113db919061387c565b604051632953639960e21b815273__$0502a3cf6a2bcad1c419a18d02ea8187d1$__9163a54d8e64916114179162ffffff191690600401613aee565b60206040518083038186803b15801561142f57600080fd5b505af4158015611443573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611467919061387c565b604051632c9c3b9f60e11b815290915073__$23851852cf97a1ff2525b5bae2bad8f731$__90635938773e906114a79062ffffff19871690600401613aee565b60206040518083038186803b1580156114bf57600080fd5b505af41580156114d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f7919061385c565b801561158b5750604051632c9c3b9f60e11b815273__$23851852cf97a1ff2525b5bae2bad8f731$__90635938773e9061153b9062ffffff19861690600401613aee565b60206040518083038186803b15801561155357600080fd5b505af4158015611567573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061158b919061385c565b801561161f5750604051632c9c3b9f60e11b815273__$23851852cf97a1ff2525b5bae2bad8f731$__90635938773e906115cf9062ffffff19851690600401613aee565b60206040518083038186803b1580156115e757600080fd5b505af41580156115fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161f919061385c565b6116915760405162461bcd60e51b815260206004820152603c60248201527f426974636f696e52656c61793a2062616420617267732e20436865636b20686560448201527f6164657220616e642061727261792062797465206c656e677468732e00000000606482015260840161066b565b61169c838383612571565b600180559a9950505050505050505050565b600d546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156116f257600080fd5b505afa158015611706573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061172a91906138b8565b905090565b6000546001600160a01b031633146117595760405162461bcd60e51b815260040161066b90613bc6565b600e55565b6000546001600160a01b031633146117885760405162461bcd60e51b815260040161066b90613bc6565b600f55565b6000546001600160a01b031633146117b75760405162461bcd60e51b815260040161066b90613bc6565b600555565b60006117c9848484612cc5565b90505b9392505050565b6000828152600960205260408120805461063d91908490811061180657634e487b7160e01b600052603260045260246000fd5b906000526020600020906005020160000154611a24565b6000546001600160a01b031633146118475760405162461bcd60e51b815260040161066b90613bc6565b600c55565b6000546001600160a01b031633146118765760405162461bcd60e51b815260040161066b90613bc6565b610aa3612d14565b6000601154606461188f9190613c84565b601054600e546118a0906001613c32565b60008681526009602052604090208054869081106118ce57634e487b7160e01b600052603260045260246000fd5b906000526020600020906005020160040154600f546118ed9190613c84565b6118f79190613c84565b6119019190613c84565b61063d9190613c4a565b6000546001600160a01b031633146119355760405162461bcd60e51b815260040161066b90613bc6565b6001600160a01b03811661199a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161066b565b6119a381612521565b50565b600082815b838110156119d6576000918252600760205260409091205490806119ce81613d01565b9150506119ab565b508061063d5760405162461bcd60e51b815260206004820152601e60248201527f426974636f696e52656c61793a20756e6b6e6f776e20616e636573746f720000604482015260640161066b565b6000606081805b6020811015611a98578285611a4183601f613ca3565b60208110611a5f57634e487b7160e01b600052603260045260246000fd5b1a60f81b604051602001611a74929190613abf565b60405160208183030381529060405292508080611a9090613d01565b915050611a2b565b50506020015192915050565b6000806011546064611ab69190613c84565b601054600e54611ac7906001613c32565b85600f54611ad59190613c84565b611adf9190613c84565b611ae99190613c84565b611af39190613c4a565b905080341015611b455760405162461bcd60e51b815260206004820152601f60248201527f426974636f696e52656c61793a20666565206973206e6f7420656e6f75676800604482015260640161066b565b611b5833611b538334613ca3565b612d8e565b50600192915050565b60025460ff1615611b845760405162461bcd60e51b815260040161066b90613b9c565b6002805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611bb93390565b6040516001600160a01b03909116815260200160405180910390a1565b600081815260086020526040812054611c215760405162461bcd60e51b815260206004820152600d60248201526c556e6b6e6f776e20626c6f636b60981b604482015260640161066b565b50600081815260086020526040902054610ae2565b6040516307f6f12360e21b8152600090819073__$23851852cf97a1ff2525b5bae2bad8f731$__90631fdbc48c90611c789062ffffff19891690600401613aee565b60206040518083038186803b158015611c9057600080fd5b505af4158015611ca4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cc891906138b8565b90506000611cd582611bd6565b60405163df90556160e01b815290915060009073__$0502a3cf6a2bcad1c419a18d02ea8187d1$__9063df90556190611d1a9062ffffff198a16908590600401613aff565b60206040518083038186803b158015611d3257600080fd5b505af4158015611d46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d6a919061387c565b6040516362ef7dad60e01b815273__$0502a3cf6a2bcad1c419a18d02ea8187d1$__916362ef7dad91611da69162ffffff191690600401613aee565b60206040518083038186803b158015611dbe57600080fd5b505af4158015611dd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611df691906138b8565b90508480611e9057506040516362ef7dad60e01b8152819073__$0502a3cf6a2bcad1c419a18d02ea8187d1$__906362ef7dad90611e3e9062ffffff198c1690600401613aee565b60206040518083038186803b158015611e5657600080fd5b505af4158015611e6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e8e91906138b8565b145b611ef75760405162461bcd60e51b815260206004820152603260248201527f426974636f696e52656c61793a20756e657870656374656420726574617267656044820152711d081bdb88195e1d195c9b985b0818d85b1b60721b606482015260840161066b565b60008060005b604051639cb855cb60e01b815260509073__$23851852cf97a1ff2525b5bae2bad8f731$__90639cb855cb90611f3d9062ffffff198e1690600401613aee565b60206040518083038186803b158015611f5557600080fd5b505af4158015611f69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f8d9190613a98565b611f979190613c5e565b6001600160601b03168110156125115760405163df90556160e01b815260009073__$0502a3cf6a2bcad1c419a18d02ea8187d1$__9063df90556190611fe99062ffffff198e16908690600401613aff565b60206040518083038186803b15801561200157600080fd5b505af4158015612015573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612039919061387c565b90506120458287613c32565b612050906001613c32565b6040516307f6f12360e21b815290945073__$23851852cf97a1ff2525b5bae2bad8f731$__90631fdbc48c906120909062ffffff19851690600401613aee565b60206040518083038186803b1580156120a857600080fd5b505af41580156120bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120e091906138b8565b925088806120f857506120f56107e085613d1c565b15155b61217e5760405162461bcd60e51b815260206004820152604b60248201527f426974636f696e52656c61793a20686561646572732073686f756c642062652060448201527f7375626d69747465642062792063616c6c696e6720616464486561646572735760648201526a1a5d1a14995d185c99d95d60aa1b608482015260a40161066b565b6040516362ef7dad60e01b8152859073__$0502a3cf6a2bcad1c419a18d02ea8187d1$__906362ef7dad906121bd9062ffffff19861690600401613aee565b60206040518083038186803b1580156121d557600080fd5b505af41580156121e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061220d91906138b8565b1461226c5760405162461bcd60e51b815260206004820152602960248201527f426974636f696e52656c61793a20746172676574206368616e67656420756e65604482015268787065637465646c7960b81b606482015260840161066b565b6040516001620c742360e01b0319815273__$78b81d5f8d9acd1db1c57025247ed4730f$__9063fff38bdd906122ae9062ffffff198516908b90600401613aff565b60206040518083038186803b1580156122c657600080fd5b505af41580156122da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122fe919061385c565b6123675760405162461bcd60e51b815260206004820152603460248201527f426974636f696e52656c61793a206865616465727320646f206e6f7420666f726044820152733690309031b7b739b4b9ba32b73a1031b430b4b760611b606482015260840161066b565b6004546005546123779086613c32565b116123945760405162461bcd60e51b815260040161066b90613b57565b6000838152600760205260409020546124fa576040516340bec88f60e01b815260048101849052859073__$23851852cf97a1ff2525b5bae2bad8f731$__906340bec88f9060240160206040518083038186803b1580156123f457600080fd5b505af4158015612408573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061242c91906138b8565b111561248c5760405162461bcd60e51b815260206004820152602960248201527f426974636f696e52656c61793a2068656164657220776f726b20697320696e736044820152681d59999a58da595b9d60ba1b606482015260840161066b565b60008381526007602090815260408083208a9055600890915290208490556124b48185612eac565b336001600160a01b031687857ffb8fff3e2daa665d496373ced291b62aba4162f24632a1597e286621016e9a1f866040516124f191815260200190565b60405180910390a45b82965050808061250990613d01565b915050611efd565b5060019998505050505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516307f6f12360e21b8152600090819061260c9073__$23851852cf97a1ff2525b5bae2bad8f731$__90631fdbc48c906125b79062ffffff198a1690600401613aee565b60206040518083038186803b1580156125cf57600080fd5b505af41580156125e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061260791906138b8565b611bd6565b6040516307f6f12360e21b81529091506000906126539073__$23851852cf97a1ff2525b5bae2bad8f731$__90631fdbc48c906125b79062ffffff198a1690600401613aee565b90506126616107e082613d1c565b6107df146126eb5760405162461bcd60e51b815260206004820152604b60248201527f426974636f696e52656c61793a206d7573742070726f7669646520746865206c60448201527f61737420686561646572206f662074686520636c6f73696e672064696666696360648201526a1d5b1d1e481c195c9a5bd960aa1b608482015260a40161066b565b6126f7826107df613c32565b81146127645760405162461bcd60e51b815260206004820152603660248201527f426974636f696e52656c61793a206d7573742070726f766964652065786163746044820152751b1e480c48191a59999a58dd5b1d1e481c195c9a5bd960521b606482015260840161066b565b60405163cddb450760e01b815273__$0502a3cf6a2bcad1c419a18d02ea8187d1$__9063cddb4507906127a19062ffffff19891690600401613aee565b60206040518083038186803b1580156127b957600080fd5b505af41580156127cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127f191906138b8565b60405163cddb450760e01b815273__$0502a3cf6a2bcad1c419a18d02ea8187d1$__9063cddb45079061282e9062ffffff198b1690600401613aee565b60206040518083038186803b15801561284657600080fd5b505af415801561285a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061287e91906138b8565b146128e95760405162461bcd60e51b815260206004820152603560248201527f426974636f696e52656c61793a20706572696f642068656164657220646966666044820152740d2c6ead8e8d2cae640c8de40dcdee840dac2e8c6d605b1b606482015260840161066b565b60405163df90556160e01b815260009073__$0502a3cf6a2bcad1c419a18d02ea8187d1$__9063df9055619061292b9062ffffff198916908590600401613aff565b60206040518083038186803b15801561294357600080fd5b505af4158015612957573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061297b919061387c565b6040516362ef7dad60e01b815290915060009073__$0502a3cf6a2bcad1c419a18d02ea8187d1$__906362ef7dad906129be9062ffffff19861690600401613aee565b60206040518083038186803b1580156129d657600080fd5b505af41580156129ea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a0e91906138b8565b6040516362ef7dad60e01b815290915060009073__$0502a3cf6a2bcad1c419a18d02ea8187d1$__9063b25912329082906362ef7dad90612a599062ffffff198f1690600401613aee565b60206040518083038186803b158015612a7157600080fd5b505af4158015612a85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aa991906138b8565b8b62ffffff191673__$0502a3cf6a2bcad1c419a18d02ea8187d1$__63f172b06090916040518263ffffffff1660e01b8152600401612ae89190613aee565b60206040518083038186803b158015612b0057600080fd5b505af4158015612b14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b389190613a74565b8b62ffffff191673__$0502a3cf6a2bcad1c419a18d02ea8187d1$__63f172b06090916040518263ffffffff1660e01b8152600401612b779190613aee565b60206040518083038186803b158015612b8f57600080fd5b505af4158015612ba3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bc79190613a74565b6040516001600160e01b031960e086901b168152600481019390935263ffffffff918216602484015216604482015260640160206040518083038186803b158015612c1157600080fd5b505af4158015612c25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c4991906138b8565b90508181831614612cac5760405162461bcd60e51b815260206004820152602760248201527f426974636f696e52656c61793a20696e76616c696420726574617267657420706044820152661c9bdd9a59195960ca1b606482015260840161066b565b612cb888886001611c36565b9998505050505050505050565b600082815b83811015612d085785821415612ce5576001925050506117cc565b600091825260076020526040909120549080612d0081613d01565b915050612cca565b50600095945050505050565b60025460ff16612d5d5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161066b565b6002805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33611bb9565b80471015612dde5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161066b565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612e2b576040519150601f19603f3d011682016040523d82523d6000602084013e612e30565b606091505b5050905080612ea75760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161066b565b505050565b600454600554612ebc9083613c32565b11612ed95760405162461bcd60e51b815260040161066b90613b57565b6040805160a08101825260008082526020820181905281830181905260608201819052608082015290516307f6f12360e21b815273__$23851852cf97a1ff2525b5bae2bad8f731$__90631fdbc48c90612f3d9062ffffff19871690600401613aee565b60206040518083038186803b158015612f5557600080fd5b505af4158015612f69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f8d91906138b8565b815260405163383ef31360e11b815273__$0502a3cf6a2bcad1c419a18d02ea8187d1$__9063707de62690612fcc9062ffffff19871690600401613aee565b60206040518083038186803b158015612fe457600080fd5b505af4158015612ff8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061301c91906138b8565b6020820152604051634edfc3d560e11b815273__$0502a3cf6a2bcad1c419a18d02ea8187d1$__90639dbf87aa9061305e9062ffffff19871690600401613aee565b60206040518083038186803b15801561307657600080fd5b505af415801561308a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130ae91906138b8565b604082810191825233606084019081523a60808501908152600086815260096020908152938120805460018082018355918352918590208751600590930201918255938601519381019390935592516002830155516003820180546001600160a01b0319166001600160a01b03909216919091179055905160049182015554821115612ea7576001600460008282546131479190613c32565b90915550613155905061315d565b612ea7613461565b6005546003546004546131709190613ca3565b10610aa35760055460045460005b82156131ff5760008281526009602052604081208054839081106131b257634e487b7160e01b600052603260045260246000fd5b90600052602060002090600502016001015490506131dc816001856131d79190613ca3565b613496565b9150836131e881613cea565b94505082806131f690613cea565b9350505061317e565b600082815260096020526040902080548290811061322d57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600502016009600084815260200190815260200160002060008154811061326e57634e487b7160e01b600052603260045260246000fd5b600091825260208083208454600590930201918255600180850154818401556002808601549084015560038086015490840180546001600160a01b0319166001600160a01b039092169190911790556004948501549490920193909355848252600990925260409020541115612ea7576132e78261351a565b60008281526009602052604081208054829161333b91839061331957634e487b7160e01b600052603260045260246000fd5b60009182526020909120600360059092020101546001600160a01b03166135b2565b60008681526009602052604081208054939550919350909161336d57634e487b7160e01b600052603260045260246000fd5b600091825260208083206003600590930201919091015486835260099091526040822080546001600160a01b039092169287927f4fec6ffa2052e80db9daadc2384a8f634057472e28ea7f1bd3eebfc92b5b0f8e9291906133de57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060050201600001546009600089815260200190815260200160002060008154811061342357634e487b7160e01b600052603260045260246000fd5b600091825260209182902060016005909202010154604080519384529183015281018690526060810185905260800160405180910390a35050505050565b6010546004546134719190613d1c565b610aa357601354601254106134885760125461348c565b6013545b6011556000601255565b6000805b6000838152600960205260409020548110156135105760008381526009602052604090208054829081106134de57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060050201600001548414156134fe579050610640565b8061350881613d01565b91505061349a565b5060009392505050565b60015b6000828152600960205260409020548110156135ae57600082815260096020526040902080548290811061356157634e487b7160e01b600052603260045260246000fd5b6000918252602082206005909102018181556001808201839055600282018390556003820180546001600160a01b03191690556004909101919091556135a79082613c32565b905061351d565b5050565b60008060006064600e5460016135c89190613c32565b3a600f546135d69190613c84565b6135e09190613c84565b6135ea9190613c4a565b600d549091506000906001600160a01b03161561368357600d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561364457600080fd5b505afa158015613658573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061367c91906138b8565b9050613687565b5060005b600081600c541115801561369d57506000600c54115b1561372e57600d54600c5460405163a9059cbb60e01b81526001600160a01b038981166004830152602482019290925291169063a9059cbb90604401602060405180830381600087803b1580156136f357600080fd5b505af1158015613707573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061372b919061385c565b90505b6000834711801561373f5750600084115b15613798576040516001600160a01b038816908590600081818185875af1925050503d806000811461378d576040519150601f19603f3d011682016040523d82523d6000602084013e613792565b606091505b50909150505b80156137c55781156137b55783600c5495509550505050506137e9565b83600095509550505050506137e9565b81156137dd576000600c5495509550505050506137e9565b60008095509550505050505b915091565b60008083601f8401126137ff578182fd5b50813567ffffffffffffffff811115613816578182fd5b60208301915083602082850101111561382e57600080fd5b9250929050565b600060208284031215613846578081fd5b81356001600160a01b038116811461063d578182fd5b60006020828403121561386d578081fd5b8151801515811461063d578182fd5b60006020828403121561388d578081fd5b815162ffffff198116811461063d578182fd5b6000602082840312156138b1578081fd5b5035919050565b6000602082840312156138c9578081fd5b5051919050565b6000806000606084860312156138e4578182fd5b505081359360208301359350604090920135919050565b6000806040838503121561390d578182fd5b50508035926020909101359150565b600080600080600060808688031215613933578081fd5b8535945060208601359350604086013567ffffffffffffffff811115613957578182fd5b613963888289016137ee565b96999598509660600135949350505050565b6000806000806040858703121561398a578384fd5b843567ffffffffffffffff808211156139a1578586fd5b6139ad888389016137ee565b909650945060208701359150808211156139c5578384fd5b506139d2878288016137ee565b95989497509550505050565b600080600080600080606087890312156139f6578081fd5b863567ffffffffffffffff80821115613a0d578283fd5b613a198a838b016137ee565b90985096506020890135915080821115613a31578283fd5b613a3d8a838b016137ee565b90965094506040890135915080821115613a55578283fd5b50613a6289828a016137ee565b979a9699509497509295939492505050565b600060208284031215613a85578081fd5b815163ffffffff8116811461063d578182fd5b600060208284031215613aa9578081fd5b81516001600160601b038116811461063d578182fd5b60008351613ad1818460208801613cba565b6001600160f81b0319939093169190920190815260010192915050565b62ffffff1991909116815260200190565b62ffffff19929092168252602082015260400190565b6000604082528351806040840152613b34816060850160208801613cba565b64ffffffffff93909316602083015250601f91909101601f191601606001919050565b60208082526025908201527f426974636f696e52656c61793a20626c6f636b2068656164657220697320746f6040820152641bc81bdb1960da1b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60008219821115613c4557613c45613d30565b500190565b600082613c5957613c59613d46565b500490565b60006001600160601b0380841680613c7857613c78613d46565b92169190910492915050565b6000816000190483118215151615613c9e57613c9e613d30565b500290565b600082821015613cb557613cb5613d30565b500390565b60005b83811015613cd5578181015183820152602001613cbd565b83811115613ce4576000848401525b50505050565b600081613cf957613cf9613d30565b506000190190565b6000600019821415613d1557613d15613d30565b5060010190565b600082613d2b57613d2b613d46565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fdfea26469706673582212205214e838c0e48b3011b6449efa8803368586838da4bfe4cf214227dab163508564736f6c63430008020033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x44CD CODESIZE SUB DUP1 PUSH3 0x44CD DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x57D JUMP JUMPDEST PUSH3 0x3F CALLER PUSH3 0x4A8 JUMP JUMPDEST PUSH1 0x1 DUP1 SSTORE PUSH1 0x2 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH4 0x34FCCA53 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH20 0x0 SWAP1 PUSH4 0x69F994A6 SWAP1 PUSH3 0x8B SWAP1 DUP9 SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH3 0x659 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0xA4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH3 0xB9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0xDF SWAP2 SWAP1 PUSH3 0x53E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x9DAFD21 PUSH1 0xE3 SHL DUP2 MSTORE PUSH3 0xFFFFFF NOT SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH20 0x0 SWAP1 PUSH4 0x4ED7E908 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x131 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH3 0x146 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x16C SWAP2 SWAP1 PUSH3 0x53E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2C9C3B9F PUSH1 0xE1 SHL DUP2 MSTORE PUSH3 0xFFFFFF NOT DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP1 SWAP2 POP PUSH20 0x0 SWAP1 PUSH4 0x5938773E SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x1C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH3 0x1D5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x1FB SWAP2 SWAP1 PUSH3 0x515 JUMP JUMPDEST PUSH3 0x24C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x426974636F696E52656C61793A2073746F70206265696E672064756D62000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x7F6F123 PUSH1 0xE2 SHL DUP2 MSTORE PUSH3 0xFFFFFF NOT DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP1 PUSH20 0x0 SWAP1 PUSH4 0x1FDBC48C SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x2A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH3 0x2B5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x2DB SWAP2 SWAP1 PUSH3 0x564 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE DUP2 DUP4 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x80 DUP3 ADD MSTORE DUP3 DUP2 MSTORE SWAP1 MLOAD PUSH4 0x4EDFC3D5 PUSH1 0xE1 SHL DUP2 MSTORE PUSH3 0xFFFFFF NOT DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP2 SWAP3 POP SWAP1 PUSH20 0x0 SWAP1 PUSH4 0x9DBF87AA SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 0x357 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH3 0x36C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH3 0x392 SWAP2 SWAP1 PUSH3 0x564 JUMP JUMPDEST PUSH1 0x40 DUP3 DUP2 ADD SWAP2 DUP3 MSTORE CALLER PUSH1 0x60 DUP5 ADD SWAP1 DUP2 MSTORE GASPRICE PUSH1 0x80 DUP6 ADD SWAP1 DUP2 MSTORE PUSH1 0x0 DUP11 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE DUP5 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP1 DUP3 ADD DUP4 SSTORE SWAP2 DUP5 MSTORE DUP3 DUP5 KECCAK256 DUP10 MLOAD PUSH1 0x5 SWAP1 SWAP3 MUL ADD SWAP1 DUP2 SSTORE DUP3 DUP10 ADD MLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 SSTORE SWAP6 MLOAD PUSH1 0x2 DUP8 ADD SSTORE SWAP3 MLOAD PUSH1 0x3 DUP7 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE SWAP1 MLOAD PUSH1 0x4 SWAP1 SWAP5 ADD SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0x6 DUP6 SWAP1 SSTORE DUP5 DUP4 MSTORE PUSH1 0x8 SWAP1 MSTORE SWAP1 KECCAK256 DUP7 SWAP1 SSTORE PUSH3 0x432 PUSH2 0x7E0 DUP8 PUSH3 0x6F4 JUMP JUMPDEST PUSH3 0x43E SWAP1 DUP8 PUSH3 0x69D JUMP JUMPDEST PUSH1 0x0 SWAP6 DUP7 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP7 KECCAK256 SSTORE POP POP PUSH1 0x1 PUSH1 0x5 SWAP1 DUP2 SSTORE PUSH1 0x4 DUP6 SWAP1 SSTORE PUSH1 0x3 SWAP5 SWAP1 SWAP5 SSTORE POP PUSH1 0xD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0xE DUP2 SWAP1 SSTORE PUSH1 0x10 DUP3 SWAP1 SSTORE PUSH1 0x13 DUP3 SWAP1 SSTORE PUSH1 0x11 SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x12 SSTORE POP PUSH3 0x186A0 PUSH1 0xF SSTORE PUSH3 0x72B JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x510 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x527 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH3 0x537 JUMPI DUP2 DUP3 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x550 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH3 0xFFFFFF NOT DUP2 AND DUP2 EQ PUSH3 0x537 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x576 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH3 0x593 JUMPI DUP3 DUP4 REVERT JUMPDEST DUP5 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x5AA JUMPI DUP5 DUP6 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x5BE JUMPI DUP5 DUP6 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH3 0x5D3 JUMPI PUSH3 0x5D3 PUSH3 0x715 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0x5FE JUMPI PUSH3 0x5FE PUSH3 0x715 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP11 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH3 0x617 JUMPI DUP8 DUP9 REVERT JUMPDEST PUSH3 0x62A DUP4 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP9 ADD PUSH3 0x6C1 JUMP JUMPDEST DUP1 SWAP9 POP POP POP POP POP POP PUSH1 0x20 DUP6 ADD MLOAD SWAP3 POP PUSH1 0x40 DUP6 ADD MLOAD SWAP2 POP PUSH3 0x64E PUSH1 0x60 DUP7 ADD PUSH3 0x4F8 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE DUP4 MLOAD DUP1 PUSH1 0x40 DUP5 ADD MSTORE PUSH3 0x67A DUP2 PUSH1 0x60 DUP6 ADD PUSH1 0x20 DUP9 ADD PUSH3 0x6C1 JUMP JUMPDEST PUSH5 0xFFFFFFFFFF SWAP4 SWAP1 SWAP4 AND PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x1F SWAP2 SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND ADD PUSH1 0x60 ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH3 0x6BC JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH3 0x6DE JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH3 0x6C4 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH3 0x6EE JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH3 0x710 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH2 0x3D92 DUP1 PUSH3 0x73B PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x21A JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x882A5EE0 GT PUSH2 0x123 JUMPI DUP1 PUSH4 0xB9BBD9BD GT PUSH2 0xAB JUMPI DUP1 PUSH4 0xE2761AF0 GT PUSH2 0x6F JUMPI DUP1 PUSH4 0xE2761AF0 EQ PUSH2 0x5B9 JUMPI DUP1 PUSH4 0xEFBC7BE4 EQ PUSH2 0x5CF JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x5E5 JUMPI DUP1 PUSH4 0xFA041AF5 EQ PUSH2 0x605 JUMPI DUP1 PUSH4 0xFD9C6E85 EQ PUSH2 0x61B JUMPI PUSH2 0x21A JUMP JUMPDEST DUP1 PUSH4 0xB9BBD9BD EQ PUSH2 0x52E JUMPI DUP1 PUSH4 0xB9E88AC1 EQ PUSH2 0x54E JUMPI DUP1 PUSH4 0xC20DC664 EQ PUSH2 0x56E JUMPI DUP1 PUSH4 0xC7814529 EQ PUSH2 0x584 JUMPI DUP1 PUSH4 0xD0A89739 EQ PUSH2 0x599 JUMPI PUSH2 0x21A JUMP JUMPDEST DUP1 PUSH4 0x9F156414 GT PUSH2 0xF2 JUMPI DUP1 PUSH4 0x9F156414 EQ PUSH2 0x4A2 JUMPI DUP1 PUSH4 0xA072BC50 EQ PUSH2 0x4B8 JUMPI DUP1 PUSH4 0xA3DB54EB EQ PUSH2 0x4CE JUMPI DUP1 PUSH4 0xB36161BD EQ PUSH2 0x4EE JUMPI DUP1 PUSH4 0xB985621A EQ PUSH2 0x50E JUMPI PUSH2 0x21A JUMP JUMPDEST DUP1 PUSH4 0x882A5EE0 EQ PUSH2 0x422 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x437 JUMPI DUP1 PUSH4 0x901186BB EQ PUSH2 0x455 JUMPI DUP1 PUSH4 0x926D44E2 EQ PUSH2 0x475 JUMPI PUSH2 0x21A JUMP JUMPDEST DUP1 PUSH4 0x5B732892 GT PUSH2 0x1A6 JUMPI DUP1 PUSH4 0x65941683 GT PUSH2 0x175 JUMPI DUP1 PUSH4 0x65941683 EQ PUSH2 0x397 JUMPI DUP1 PUSH4 0x65DA41B9 EQ PUSH2 0x3B7 JUMPI DUP1 PUSH4 0x665B634F EQ PUSH2 0x3D7 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x3ED JUMPI DUP1 PUSH4 0x7FA637FC EQ PUSH2 0x402 JUMPI PUSH2 0x21A JUMP JUMPDEST DUP1 PUSH4 0x5B732892 EQ PUSH2 0x336 JUMPI DUP1 PUSH4 0x5B88A0E5 EQ PUSH2 0x34C JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x35F JUMPI DUP1 PUSH4 0x60B5C390 EQ PUSH2 0x377 JUMPI PUSH2 0x21A JUMP JUMPDEST DUP1 PUSH4 0x30017B3B GT PUSH2 0x1ED JUMPI DUP1 PUSH4 0x30017B3B EQ PUSH2 0x2A6 JUMPI DUP1 PUSH4 0x4354DA25 EQ PUSH2 0x2C6 JUMPI DUP1 PUSH4 0x465E7559 EQ PUSH2 0x2E9 JUMPI DUP1 PUSH4 0x54EEA796 EQ PUSH2 0x300 JUMPI DUP1 PUSH4 0x57D775F8 EQ PUSH2 0x320 JUMPI PUSH2 0x21A JUMP JUMPDEST DUP1 PUSH4 0x108F438D EQ PUSH2 0x21F JUMPI DUP1 PUSH4 0x113764BE EQ PUSH2 0x25C JUMPI DUP1 PUSH4 0x2B97BE24 EQ PUSH2 0x27B JUMPI DUP1 PUSH4 0x2F796D90 EQ PUSH2 0x290 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xD SLOAD PUSH2 0x23F SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x268 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xA SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x253 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x287 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xB SLOAD PUSH2 0x26D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x29C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26D PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26D PUSH2 0x2C1 CALLDATASIZE PUSH1 0x4 PUSH2 0x38FB JUMP JUMPDEST PUSH2 0x631 JUMP JUMPDEST PUSH2 0x2D9 PUSH2 0x2D4 CALLDATASIZE PUSH1 0x4 PUSH2 0x391C JUMP JUMPDEST PUSH2 0x646 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x253 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2FE PUSH2 0xA71 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x30C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2FE PUSH2 0x31B CALLDATASIZE PUSH1 0x4 PUSH2 0x38A0 JUMP JUMPDEST PUSH2 0xAA5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x32C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26D PUSH1 0x10 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x342 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26D PUSH1 0x12 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x358 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SELFBALANCE PUSH2 0x26D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x36B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x2 SLOAD PUSH1 0xFF AND PUSH2 0x2D9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x383 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26D PUSH2 0x392 CALLDATASIZE PUSH1 0x4 PUSH2 0x38A0 JUMP JUMPDEST PUSH2 0xAD4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2FE PUSH2 0x3B2 CALLDATASIZE PUSH1 0x4 PUSH2 0x38A0 JUMP JUMPDEST PUSH2 0xAE7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2D9 PUSH2 0x3D2 CALLDATASIZE PUSH1 0x4 PUSH2 0x3975 JUMP JUMPDEST PUSH2 0xB16 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26D PUSH1 0xE SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2FE PUSH2 0x1001 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x40E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2D9 PUSH2 0x41D CALLDATASIZE PUSH1 0x4 PUSH2 0x39DE JUMP JUMPDEST PUSH2 0x1035 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x42E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26D PUSH2 0x16AE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x443 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x23F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x461 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2FE PUSH2 0x470 CALLDATASIZE PUSH1 0x4 PUSH2 0x38A0 JUMP JUMPDEST PUSH2 0x172F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x481 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26D PUSH2 0x490 CALLDATASIZE PUSH1 0x4 PUSH2 0x38A0 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26D PUSH1 0x11 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26D PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2FE PUSH2 0x4E9 CALLDATASIZE PUSH1 0x4 PUSH2 0x38A0 JUMP JUMPDEST PUSH2 0x175E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2FE PUSH2 0x509 CALLDATASIZE PUSH1 0x4 PUSH2 0x38A0 JUMP JUMPDEST PUSH2 0x178D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x51A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2D9 PUSH2 0x529 CALLDATASIZE PUSH1 0x4 PUSH2 0x38D0 JUMP JUMPDEST PUSH2 0x17BC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x53A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26D PUSH2 0x549 CALLDATASIZE PUSH1 0x4 PUSH2 0x38FB JUMP JUMPDEST PUSH2 0x17D3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x55A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2FE PUSH2 0x569 CALLDATASIZE PUSH1 0x4 PUSH2 0x38A0 JUMP JUMPDEST PUSH2 0x181D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x57A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26D PUSH1 0xF SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x590 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2FE PUSH2 0x184C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26D PUSH2 0x5B4 CALLDATASIZE PUSH1 0x4 PUSH2 0x38FB JUMP JUMPDEST PUSH2 0x187E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26D PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26D PUSH1 0x6 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2FE PUSH2 0x600 CALLDATASIZE PUSH1 0x4 PUSH2 0x3835 JUMP JUMPDEST PUSH2 0x190B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x611 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26D PUSH1 0x13 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x627 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26D PUSH1 0xC SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x63D DUP4 DUP4 PUSH2 0x19A6 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x674 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x66B SWAP1 PUSH2 0x3BFB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE PUSH2 0x685 PUSH1 0x2 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x6A2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x66B SWAP1 PUSH2 0x3B9C JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH2 0x6B0 SWAP1 PUSH1 0x1 PUSH2 0x3C32 JUMP JUMPDEST PUSH2 0x6BB DUP7 PUSH1 0x6 PUSH2 0x3C32 JUMP JUMPDEST LT ISZERO PUSH2 0xA60 JUMPI PUSH1 0x0 JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 LT ISZERO PUSH2 0xA08 JUMPI PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH2 0x724 SWAP2 SWAP1 DUP5 SWAP1 DUP2 LT PUSH2 0x70D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD PUSH1 0x2 ADD SLOAD PUSH2 0x1A24 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP7 DUP7 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD DUP3 SWAP1 MSTORE POP PUSH1 0x40 MLOAD PUSH4 0x34FCCA53 PUSH1 0xE1 SHL DUP2 MSTORE PUSH20 0x0 SWAP6 PUSH4 0x69F994A6 SWAP6 POP PUSH2 0x793 SWAP5 POP SWAP3 POP PUSH1 0x4 ADD PUSH2 0x3B15 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x7BF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7E3 SWAP2 SWAP1 PUSH2 0x387C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x22A24AF3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH20 0x0 SWAP2 PUSH4 0x454495E6 SWAP2 PUSH2 0x81F SWAP2 PUSH3 0xFFFFFF NOT AND SWAP1 PUSH1 0x4 ADD PUSH2 0x3AEE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x837 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x84B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x86F SWAP2 SWAP1 PUSH2 0x387C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x87C DUP11 PUSH2 0x1A24 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xAA65716D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP6 SWAP1 MSTORE PUSH3 0xFFFFFF NOT DUP5 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP9 SWAP1 MSTORE SWAP1 SWAP2 POP PUSH20 0x0 SWAP1 PUSH4 0xAA65716D SWAP1 PUSH1 0x84 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x8F8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x91C SWAP2 SWAP1 PUSH2 0x385C JUMP JUMPDEST ISZERO PUSH2 0x9F2 JUMPI PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH2 0x96B SWAP2 SWAP1 DUP7 SWAP1 DUP2 LT PUSH2 0x954 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD PUSH1 0x4 ADD SLOAD PUSH2 0x1AA4 JUMP JUMPDEST PUSH2 0x9CC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x426974636F696E52656C61793A2067657474696E672066656520776173206E6F PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x1D081CDD58D8D95CDCD99D5B PUSH1 0xA2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x66B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x12 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x9DF SWAP2 SWAP1 PUSH2 0x3C32 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH1 0x1 SWAP6 POP PUSH2 0xA64 SWAP5 POP POP POP POP POP JUMP JUMPDEST POP POP POP DUP1 DUP1 PUSH2 0xA00 SWAP1 PUSH2 0x3D01 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x6C4 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x426974636F696E52656C61793A20747820686173206E6F74206265656E20696E PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x18DB1D591959 PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x66B JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST PUSH1 0x1 DUP1 SSTORE SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xA9B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x66B SWAP1 PUSH2 0x3BC6 JUMP JUMPDEST PUSH2 0xAA3 PUSH2 0x1B61 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xACF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x66B SWAP1 PUSH2 0x3BC6 JUMP JUMPDEST PUSH1 0x10 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0xADF DUP3 PUSH2 0x1BD6 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xB11 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x66B SWAP1 PUSH2 0x3BC6 JUMP JUMPDEST PUSH1 0x13 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0xB3B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x66B SWAP1 PUSH2 0x3BFB JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE PUSH2 0xB4C PUSH1 0x2 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xB69 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x66B SWAP1 PUSH2 0x3B9C JUMP JUMPDEST PUSH1 0x0 DUP4 DUP4 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD DUP3 SWAP1 MSTORE POP PUSH1 0x40 MLOAD PUSH4 0x34FCCA53 PUSH1 0xE1 SHL DUP2 MSTORE PUSH20 0x0 SWAP6 PUSH4 0x69F994A6 SWAP6 POP PUSH2 0xBD6 SWAP5 POP SWAP3 POP PUSH1 0x4 ADD PUSH2 0x3B15 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xBEE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xC02 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC26 SWAP2 SWAP1 PUSH2 0x387C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x29536399 PUSH1 0xE2 SHL DUP2 MSTORE PUSH20 0x0 SWAP2 PUSH4 0xA54D8E64 SWAP2 PUSH2 0xC62 SWAP2 PUSH3 0xFFFFFF NOT AND SWAP1 PUSH1 0x4 ADD PUSH2 0x3AEE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC7A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xC8E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xCB2 SWAP2 SWAP1 PUSH2 0x387C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP7 DUP7 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD DUP3 SWAP1 MSTORE POP PUSH1 0x40 MLOAD PUSH4 0x34FCCA53 PUSH1 0xE1 SHL DUP2 MSTORE PUSH20 0x0 SWAP6 PUSH4 0x69F994A6 SWAP6 POP PUSH2 0xD21 SWAP5 POP SWAP3 POP PUSH1 0x4 ADD PUSH2 0x3B15 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD39 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xD4D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xD71 SWAP2 SWAP1 PUSH2 0x387C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x9DAFD21 PUSH1 0xE3 SHL DUP2 MSTORE PUSH20 0x0 SWAP2 PUSH4 0x4ED7E908 SWAP2 PUSH2 0xDAD SWAP2 PUSH3 0xFFFFFF NOT AND SWAP1 PUSH1 0x4 ADD PUSH2 0x3AEE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xDC5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xDD9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xDFD SWAP2 SWAP1 PUSH2 0x387C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2C9C3B9F PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH20 0x0 SWAP1 PUSH4 0x5938773E SWAP1 PUSH2 0xE3D SWAP1 PUSH3 0xFFFFFF NOT DUP7 AND SWAP1 PUSH1 0x4 ADD PUSH2 0x3AEE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE55 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xE69 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE8D SWAP2 SWAP1 PUSH2 0x385C JUMP JUMPDEST PUSH2 0xEFF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x426974636F696E52656C61793A20686561646572206172726179206C656E6774 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x68206D75737420626520646976697369626C6520627920383000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x66B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2C9C3B9F PUSH1 0xE1 SHL DUP2 MSTORE PUSH20 0x0 SWAP1 PUSH4 0x5938773E SWAP1 PUSH2 0xF3C SWAP1 PUSH3 0xFFFFFF NOT DUP6 AND SWAP1 PUSH1 0x4 ADD PUSH2 0x3AEE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF54 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xF68 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF8C SWAP2 SWAP1 PUSH2 0x385C JUMP JUMPDEST PUSH2 0xFE6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x426974636F696E52656C61793A20616E63686F72206D75737420626520383020 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6279746573 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x66B JUMP JUMPDEST PUSH2 0xFF2 DUP2 DUP4 PUSH1 0x0 PUSH2 0x1C36 JUMP JUMPDEST PUSH1 0x1 DUP1 SSTORE SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x102B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x66B SWAP1 PUSH2 0x3BC6 JUMP JUMPDEST PUSH2 0xAA3 PUSH1 0x0 PUSH2 0x2521 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x105A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x66B SWAP1 PUSH2 0x3BFB JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE PUSH2 0x106B PUSH1 0x2 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x1088 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x66B SWAP1 PUSH2 0x3B9C JUMP JUMPDEST PUSH1 0x0 DUP8 DUP8 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD DUP3 SWAP1 MSTORE POP PUSH1 0x40 MLOAD PUSH4 0x34FCCA53 PUSH1 0xE1 SHL DUP2 MSTORE PUSH20 0x0 SWAP6 PUSH4 0x69F994A6 SWAP6 POP PUSH2 0x10F5 SWAP5 POP SWAP3 POP PUSH1 0x4 ADD PUSH2 0x3B15 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x110D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x1121 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1145 SWAP2 SWAP1 PUSH2 0x387C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x9DAFD21 PUSH1 0xE3 SHL DUP2 MSTORE PUSH20 0x0 SWAP2 PUSH4 0x4ED7E908 SWAP2 PUSH2 0x1181 SWAP2 PUSH3 0xFFFFFF NOT AND SWAP1 PUSH1 0x4 ADD PUSH2 0x3AEE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1199 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x11AD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x11D1 SWAP2 SWAP1 PUSH2 0x387C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP7 DUP7 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD DUP3 SWAP1 MSTORE POP PUSH1 0x40 MLOAD PUSH4 0x34FCCA53 PUSH1 0xE1 SHL DUP2 MSTORE PUSH20 0x0 SWAP6 PUSH4 0x69F994A6 SWAP6 POP PUSH2 0x1240 SWAP5 POP SWAP3 POP PUSH1 0x4 ADD PUSH2 0x3B15 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1258 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x126C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1290 SWAP2 SWAP1 PUSH2 0x387C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x9DAFD21 PUSH1 0xE3 SHL DUP2 MSTORE PUSH20 0x0 SWAP2 PUSH4 0x4ED7E908 SWAP2 PUSH2 0x12CC SWAP2 PUSH3 0xFFFFFF NOT AND SWAP1 PUSH1 0x4 ADD PUSH2 0x3AEE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x12E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x12F8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x131C SWAP2 SWAP1 PUSH2 0x387C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP6 DUP6 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD DUP3 SWAP1 MSTORE POP PUSH1 0x40 MLOAD PUSH4 0x34FCCA53 PUSH1 0xE1 SHL DUP2 MSTORE PUSH20 0x0 SWAP6 PUSH4 0x69F994A6 SWAP6 POP PUSH2 0x138B SWAP5 POP SWAP3 POP PUSH1 0x4 ADD PUSH2 0x3B15 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x13A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x13B7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x13DB SWAP2 SWAP1 PUSH2 0x387C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x29536399 PUSH1 0xE2 SHL DUP2 MSTORE PUSH20 0x0 SWAP2 PUSH4 0xA54D8E64 SWAP2 PUSH2 0x1417 SWAP2 PUSH3 0xFFFFFF NOT AND SWAP1 PUSH1 0x4 ADD PUSH2 0x3AEE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x142F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x1443 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1467 SWAP2 SWAP1 PUSH2 0x387C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2C9C3B9F PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH20 0x0 SWAP1 PUSH4 0x5938773E SWAP1 PUSH2 0x14A7 SWAP1 PUSH3 0xFFFFFF NOT DUP8 AND SWAP1 PUSH1 0x4 ADD PUSH2 0x3AEE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x14BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x14D3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x14F7 SWAP2 SWAP1 PUSH2 0x385C JUMP JUMPDEST DUP1 ISZERO PUSH2 0x158B JUMPI POP PUSH1 0x40 MLOAD PUSH4 0x2C9C3B9F PUSH1 0xE1 SHL DUP2 MSTORE PUSH20 0x0 SWAP1 PUSH4 0x5938773E SWAP1 PUSH2 0x153B SWAP1 PUSH3 0xFFFFFF NOT DUP7 AND SWAP1 PUSH1 0x4 ADD PUSH2 0x3AEE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1553 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x1567 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x158B SWAP2 SWAP1 PUSH2 0x385C JUMP JUMPDEST DUP1 ISZERO PUSH2 0x161F JUMPI POP PUSH1 0x40 MLOAD PUSH4 0x2C9C3B9F PUSH1 0xE1 SHL DUP2 MSTORE PUSH20 0x0 SWAP1 PUSH4 0x5938773E SWAP1 PUSH2 0x15CF SWAP1 PUSH3 0xFFFFFF NOT DUP6 AND SWAP1 PUSH1 0x4 ADD PUSH2 0x3AEE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x15E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x15FB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x161F SWAP2 SWAP1 PUSH2 0x385C JUMP JUMPDEST PUSH2 0x1691 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x426974636F696E52656C61793A2062616420617267732E20436865636B206865 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6164657220616E642061727261792062797465206C656E677468732E00000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x66B JUMP JUMPDEST PUSH2 0x169C DUP4 DUP4 DUP4 PUSH2 0x2571 JUMP JUMPDEST PUSH1 0x1 DUP1 SSTORE SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0xD SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x16F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1706 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x172A SWAP2 SWAP1 PUSH2 0x38B8 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1759 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x66B SWAP1 PUSH2 0x3BC6 JUMP JUMPDEST PUSH1 0xE SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1788 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x66B SWAP1 PUSH2 0x3BC6 JUMP JUMPDEST PUSH1 0xF SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x17B7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x66B SWAP1 PUSH2 0x3BC6 JUMP JUMPDEST PUSH1 0x5 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17C9 DUP5 DUP5 DUP5 PUSH2 0x2CC5 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH2 0x63D SWAP2 SWAP1 DUP5 SWAP1 DUP2 LT PUSH2 0x1806 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD PUSH1 0x0 ADD SLOAD PUSH2 0x1A24 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1847 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x66B SWAP1 PUSH2 0x3BC6 JUMP JUMPDEST PUSH1 0xC SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1876 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x66B SWAP1 PUSH2 0x3BC6 JUMP JUMPDEST PUSH2 0xAA3 PUSH2 0x2D14 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x11 SLOAD PUSH1 0x64 PUSH2 0x188F SWAP2 SWAP1 PUSH2 0x3C84 JUMP JUMPDEST PUSH1 0x10 SLOAD PUSH1 0xE SLOAD PUSH2 0x18A0 SWAP1 PUSH1 0x1 PUSH2 0x3C32 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP7 SWAP1 DUP2 LT PUSH2 0x18CE JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD PUSH1 0x4 ADD SLOAD PUSH1 0xF SLOAD PUSH2 0x18ED SWAP2 SWAP1 PUSH2 0x3C84 JUMP JUMPDEST PUSH2 0x18F7 SWAP2 SWAP1 PUSH2 0x3C84 JUMP JUMPDEST PUSH2 0x1901 SWAP2 SWAP1 PUSH2 0x3C84 JUMP JUMPDEST PUSH2 0x63D SWAP2 SWAP1 PUSH2 0x3C4A JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1935 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x66B SWAP1 PUSH2 0x3BC6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x199A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x66B JUMP JUMPDEST PUSH2 0x19A3 DUP2 PUSH2 0x2521 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x19D6 JUMPI PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 DUP1 PUSH2 0x19CE DUP2 PUSH2 0x3D01 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x19AB JUMP JUMPDEST POP DUP1 PUSH2 0x63D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x426974636F696E52656C61793A20756E6B6E6F776E20616E636573746F720000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x66B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP2 DUP1 JUMPDEST PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1A98 JUMPI DUP3 DUP6 PUSH2 0x1A41 DUP4 PUSH1 0x1F PUSH2 0x3CA3 JUMP JUMPDEST PUSH1 0x20 DUP2 LT PUSH2 0x1A5F JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST BYTE PUSH1 0xF8 SHL PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1A74 SWAP3 SWAP2 SWAP1 PUSH2 0x3ABF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP3 POP DUP1 DUP1 PUSH2 0x1A90 SWAP1 PUSH2 0x3D01 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1A2B JUMP JUMPDEST POP POP PUSH1 0x20 ADD MLOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x11 SLOAD PUSH1 0x64 PUSH2 0x1AB6 SWAP2 SWAP1 PUSH2 0x3C84 JUMP JUMPDEST PUSH1 0x10 SLOAD PUSH1 0xE SLOAD PUSH2 0x1AC7 SWAP1 PUSH1 0x1 PUSH2 0x3C32 JUMP JUMPDEST DUP6 PUSH1 0xF SLOAD PUSH2 0x1AD5 SWAP2 SWAP1 PUSH2 0x3C84 JUMP JUMPDEST PUSH2 0x1ADF SWAP2 SWAP1 PUSH2 0x3C84 JUMP JUMPDEST PUSH2 0x1AE9 SWAP2 SWAP1 PUSH2 0x3C84 JUMP JUMPDEST PUSH2 0x1AF3 SWAP2 SWAP1 PUSH2 0x3C4A JUMP JUMPDEST SWAP1 POP DUP1 CALLVALUE LT ISZERO PUSH2 0x1B45 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x426974636F696E52656C61793A20666565206973206E6F7420656E6F75676800 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x66B JUMP JUMPDEST PUSH2 0x1B58 CALLER PUSH2 0x1B53 DUP4 CALLVALUE PUSH2 0x3CA3 JUMP JUMPDEST PUSH2 0x2D8E JUMP JUMPDEST POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1B84 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x66B SWAP1 PUSH2 0x3B9C JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0x1BB9 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x1C21 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH13 0x556E6B6E6F776E20626C6F636B PUSH1 0x98 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x66B JUMP JUMPDEST POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0xAE2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x7F6F123 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH20 0x0 SWAP1 PUSH4 0x1FDBC48C SWAP1 PUSH2 0x1C78 SWAP1 PUSH3 0xFFFFFF NOT DUP10 AND SWAP1 PUSH1 0x4 ADD PUSH2 0x3AEE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1C90 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x1CA4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1CC8 SWAP2 SWAP1 PUSH2 0x38B8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1CD5 DUP3 PUSH2 0x1BD6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xDF905561 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH20 0x0 SWAP1 PUSH4 0xDF905561 SWAP1 PUSH2 0x1D1A SWAP1 PUSH3 0xFFFFFF NOT DUP11 AND SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x3AFF JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1D32 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x1D46 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1D6A SWAP2 SWAP1 PUSH2 0x387C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x62EF7DAD PUSH1 0xE0 SHL DUP2 MSTORE PUSH20 0x0 SWAP2 PUSH4 0x62EF7DAD SWAP2 PUSH2 0x1DA6 SWAP2 PUSH3 0xFFFFFF NOT AND SWAP1 PUSH1 0x4 ADD PUSH2 0x3AEE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1DBE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x1DD2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1DF6 SWAP2 SWAP1 PUSH2 0x38B8 JUMP JUMPDEST SWAP1 POP DUP5 DUP1 PUSH2 0x1E90 JUMPI POP PUSH1 0x40 MLOAD PUSH4 0x62EF7DAD PUSH1 0xE0 SHL DUP2 MSTORE DUP2 SWAP1 PUSH20 0x0 SWAP1 PUSH4 0x62EF7DAD SWAP1 PUSH2 0x1E3E SWAP1 PUSH3 0xFFFFFF NOT DUP13 AND SWAP1 PUSH1 0x4 ADD PUSH2 0x3AEE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1E56 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x1E6A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1E8E SWAP2 SWAP1 PUSH2 0x38B8 JUMP JUMPDEST EQ JUMPDEST PUSH2 0x1EF7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x32 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x426974636F696E52656C61793A20756E65787065637465642072657461726765 PUSH1 0x44 DUP3 ADD MSTORE PUSH18 0x1D081BDB88195E1D195C9B985B0818D85B1B PUSH1 0x72 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x66B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x9CB855CB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x50 SWAP1 PUSH20 0x0 SWAP1 PUSH4 0x9CB855CB SWAP1 PUSH2 0x1F3D SWAP1 PUSH3 0xFFFFFF NOT DUP15 AND SWAP1 PUSH1 0x4 ADD PUSH2 0x3AEE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1F55 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x1F69 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1F8D SWAP2 SWAP1 PUSH2 0x3A98 JUMP JUMPDEST PUSH2 0x1F97 SWAP2 SWAP1 PUSH2 0x3C5E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP2 LT ISZERO PUSH2 0x2511 JUMPI PUSH1 0x40 MLOAD PUSH4 0xDF905561 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH20 0x0 SWAP1 PUSH4 0xDF905561 SWAP1 PUSH2 0x1FE9 SWAP1 PUSH3 0xFFFFFF NOT DUP15 AND SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x3AFF JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2001 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x2015 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2039 SWAP2 SWAP1 PUSH2 0x387C JUMP JUMPDEST SWAP1 POP PUSH2 0x2045 DUP3 DUP8 PUSH2 0x3C32 JUMP JUMPDEST PUSH2 0x2050 SWAP1 PUSH1 0x1 PUSH2 0x3C32 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x7F6F123 PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 SWAP5 POP PUSH20 0x0 SWAP1 PUSH4 0x1FDBC48C SWAP1 PUSH2 0x2090 SWAP1 PUSH3 0xFFFFFF NOT DUP6 AND SWAP1 PUSH1 0x4 ADD PUSH2 0x3AEE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x20A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x20BC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x20E0 SWAP2 SWAP1 PUSH2 0x38B8 JUMP JUMPDEST SWAP3 POP DUP9 DUP1 PUSH2 0x20F8 JUMPI POP PUSH2 0x20F5 PUSH2 0x7E0 DUP6 PUSH2 0x3D1C JUMP JUMPDEST ISZERO ISZERO JUMPDEST PUSH2 0x217E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x4B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x426974636F696E52656C61793A20686561646572732073686F756C6420626520 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7375626D69747465642062792063616C6C696E67206164644865616465727357 PUSH1 0x64 DUP3 ADD MSTORE PUSH11 0x1A5D1A14995D185C99D95D PUSH1 0xAA SHL PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 ADD PUSH2 0x66B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x62EF7DAD PUSH1 0xE0 SHL DUP2 MSTORE DUP6 SWAP1 PUSH20 0x0 SWAP1 PUSH4 0x62EF7DAD SWAP1 PUSH2 0x21BD SWAP1 PUSH3 0xFFFFFF NOT DUP7 AND SWAP1 PUSH1 0x4 ADD PUSH2 0x3AEE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x21D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x21E9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x220D SWAP2 SWAP1 PUSH2 0x38B8 JUMP JUMPDEST EQ PUSH2 0x226C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x426974636F696E52656C61793A20746172676574206368616E67656420756E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x787065637465646C79 PUSH1 0xB8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x66B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH3 0xC7423 PUSH1 0xE0 SHL SUB NOT DUP2 MSTORE PUSH20 0x0 SWAP1 PUSH4 0xFFF38BDD SWAP1 PUSH2 0x22AE SWAP1 PUSH3 0xFFFFFF NOT DUP6 AND SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0x3AFF JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x22C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x22DA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x22FE SWAP2 SWAP1 PUSH2 0x385C JUMP JUMPDEST PUSH2 0x2367 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x34 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x426974636F696E52656C61793A206865616465727320646F206E6F7420666F72 PUSH1 0x44 DUP3 ADD MSTORE PUSH20 0x3690309031B7B739B4B9BA32B73A1031B430B4B7 PUSH1 0x61 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x66B JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x5 SLOAD PUSH2 0x2377 SWAP1 DUP7 PUSH2 0x3C32 JUMP JUMPDEST GT PUSH2 0x2394 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x66B SWAP1 PUSH2 0x3B57 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x24FA JUMPI PUSH1 0x40 MLOAD PUSH4 0x40BEC88F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE DUP6 SWAP1 PUSH20 0x0 SWAP1 PUSH4 0x40BEC88F SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x23F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x2408 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x242C SWAP2 SWAP1 PUSH2 0x38B8 JUMP JUMPDEST GT ISZERO PUSH2 0x248C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x426974636F696E52656C61793A2068656164657220776F726B20697320696E73 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x1D59999A58DA595B9D PUSH1 0xBA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x66B JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP11 SWAP1 SSTORE PUSH1 0x8 SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP5 SWAP1 SSTORE PUSH2 0x24B4 DUP2 DUP6 PUSH2 0x2EAC JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 DUP6 PUSH32 0xFB8FFF3E2DAA665D496373CED291B62ABA4162F24632A1597E286621016E9A1F DUP7 PUSH1 0x40 MLOAD PUSH2 0x24F1 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST DUP3 SWAP7 POP POP DUP1 DUP1 PUSH2 0x2509 SWAP1 PUSH2 0x3D01 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1EFD JUMP JUMPDEST POP PUSH1 0x1 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x7F6F123 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH2 0x260C SWAP1 PUSH20 0x0 SWAP1 PUSH4 0x1FDBC48C SWAP1 PUSH2 0x25B7 SWAP1 PUSH3 0xFFFFFF NOT DUP11 AND SWAP1 PUSH1 0x4 ADD PUSH2 0x3AEE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x25CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x25E3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2607 SWAP2 SWAP1 PUSH2 0x38B8 JUMP JUMPDEST PUSH2 0x1BD6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x7F6F123 PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH2 0x2653 SWAP1 PUSH20 0x0 SWAP1 PUSH4 0x1FDBC48C SWAP1 PUSH2 0x25B7 SWAP1 PUSH3 0xFFFFFF NOT DUP11 AND SWAP1 PUSH1 0x4 ADD PUSH2 0x3AEE JUMP JUMPDEST SWAP1 POP PUSH2 0x2661 PUSH2 0x7E0 DUP3 PUSH2 0x3D1C JUMP JUMPDEST PUSH2 0x7DF EQ PUSH2 0x26EB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x4B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x426974636F696E52656C61793A206D7573742070726F7669646520746865206C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x61737420686561646572206F662074686520636C6F73696E6720646966666963 PUSH1 0x64 DUP3 ADD MSTORE PUSH11 0x1D5B1D1E481C195C9A5BD9 PUSH1 0xAA SHL PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 ADD PUSH2 0x66B JUMP JUMPDEST PUSH2 0x26F7 DUP3 PUSH2 0x7DF PUSH2 0x3C32 JUMP JUMPDEST DUP2 EQ PUSH2 0x2764 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x36 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x426974636F696E52656C61793A206D7573742070726F76696465206578616374 PUSH1 0x44 DUP3 ADD MSTORE PUSH22 0x1B1E480C48191A59999A58DD5B1D1E481C195C9A5BD9 PUSH1 0x52 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x66B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xCDDB4507 PUSH1 0xE0 SHL DUP2 MSTORE PUSH20 0x0 SWAP1 PUSH4 0xCDDB4507 SWAP1 PUSH2 0x27A1 SWAP1 PUSH3 0xFFFFFF NOT DUP10 AND SWAP1 PUSH1 0x4 ADD PUSH2 0x3AEE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x27B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x27CD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x27F1 SWAP2 SWAP1 PUSH2 0x38B8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xCDDB4507 PUSH1 0xE0 SHL DUP2 MSTORE PUSH20 0x0 SWAP1 PUSH4 0xCDDB4507 SWAP1 PUSH2 0x282E SWAP1 PUSH3 0xFFFFFF NOT DUP12 AND SWAP1 PUSH1 0x4 ADD PUSH2 0x3AEE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2846 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x285A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x287E SWAP2 SWAP1 PUSH2 0x38B8 JUMP JUMPDEST EQ PUSH2 0x28E9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x35 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x426974636F696E52656C61793A20706572696F64206865616465722064696666 PUSH1 0x44 DUP3 ADD MSTORE PUSH21 0xD2C6EAD8E8D2CAE640C8DE40DCDEE840DAC2E8C6D PUSH1 0x5B SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x66B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xDF905561 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH20 0x0 SWAP1 PUSH4 0xDF905561 SWAP1 PUSH2 0x292B SWAP1 PUSH3 0xFFFFFF NOT DUP10 AND SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x3AFF JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2943 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x2957 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x297B SWAP2 SWAP1 PUSH2 0x387C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x62EF7DAD PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH20 0x0 SWAP1 PUSH4 0x62EF7DAD SWAP1 PUSH2 0x29BE SWAP1 PUSH3 0xFFFFFF NOT DUP7 AND SWAP1 PUSH1 0x4 ADD PUSH2 0x3AEE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x29D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x29EA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2A0E SWAP2 SWAP1 PUSH2 0x38B8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x62EF7DAD PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH20 0x0 SWAP1 PUSH4 0xB2591232 SWAP1 DUP3 SWAP1 PUSH4 0x62EF7DAD SWAP1 PUSH2 0x2A59 SWAP1 PUSH3 0xFFFFFF NOT DUP16 AND SWAP1 PUSH1 0x4 ADD PUSH2 0x3AEE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2A71 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x2A85 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2AA9 SWAP2 SWAP1 PUSH2 0x38B8 JUMP JUMPDEST DUP12 PUSH3 0xFFFFFF NOT AND PUSH20 0x0 PUSH4 0xF172B060 SWAP1 SWAP2 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2AE8 SWAP2 SWAP1 PUSH2 0x3AEE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2B00 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x2B14 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2B38 SWAP2 SWAP1 PUSH2 0x3A74 JUMP JUMPDEST DUP12 PUSH3 0xFFFFFF NOT AND PUSH20 0x0 PUSH4 0xF172B060 SWAP1 SWAP2 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B77 SWAP2 SWAP1 PUSH2 0x3AEE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2B8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x2BA3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2BC7 SWAP2 SWAP1 PUSH2 0x3A74 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP7 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH4 0xFFFFFFFF SWAP2 DUP3 AND PUSH1 0x24 DUP5 ADD MSTORE AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2C11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x2C25 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2C49 SWAP2 SWAP1 PUSH2 0x38B8 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 DUP4 AND EQ PUSH2 0x2CAC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x426974636F696E52656C61793A20696E76616C69642072657461726765742070 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x1C9BDD9A591959 PUSH1 0xCA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x66B JUMP JUMPDEST PUSH2 0x2CB8 DUP9 DUP9 PUSH1 0x1 PUSH2 0x1C36 JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2D08 JUMPI DUP6 DUP3 EQ ISZERO PUSH2 0x2CE5 JUMPI PUSH1 0x1 SWAP3 POP POP POP PUSH2 0x17CC JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 DUP1 PUSH2 0x2D00 DUP2 PUSH2 0x3D01 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2CCA JUMP JUMPDEST POP PUSH1 0x0 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0xFF AND PUSH2 0x2D5D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x14185D5CD8589B194E881B9BDD081C185D5CD959 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x66B JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA CALLER PUSH2 0x1BB9 JUMP JUMPDEST DUP1 SELFBALANCE LT ISZERO PUSH2 0x2DDE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x66B JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2E2B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2E30 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x2EA7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20756E61626C6520746F2073656E642076616C75652C2072 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6563697069656E74206D61792068617665207265766572746564000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x66B JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x5 SLOAD PUSH2 0x2EBC SWAP1 DUP4 PUSH2 0x3C32 JUMP JUMPDEST GT PUSH2 0x2ED9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x66B SWAP1 PUSH2 0x3B57 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE DUP2 DUP4 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x80 DUP3 ADD MSTORE SWAP1 MLOAD PUSH4 0x7F6F123 PUSH1 0xE2 SHL DUP2 MSTORE PUSH20 0x0 SWAP1 PUSH4 0x1FDBC48C SWAP1 PUSH2 0x2F3D SWAP1 PUSH3 0xFFFFFF NOT DUP8 AND SWAP1 PUSH1 0x4 ADD PUSH2 0x3AEE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2F55 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x2F69 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2F8D SWAP2 SWAP1 PUSH2 0x38B8 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 MLOAD PUSH4 0x383EF313 PUSH1 0xE1 SHL DUP2 MSTORE PUSH20 0x0 SWAP1 PUSH4 0x707DE626 SWAP1 PUSH2 0x2FCC SWAP1 PUSH3 0xFFFFFF NOT DUP8 AND SWAP1 PUSH1 0x4 ADD PUSH2 0x3AEE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2FE4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x2FF8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x301C SWAP2 SWAP1 PUSH2 0x38B8 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 MLOAD PUSH4 0x4EDFC3D5 PUSH1 0xE1 SHL DUP2 MSTORE PUSH20 0x0 SWAP1 PUSH4 0x9DBF87AA SWAP1 PUSH2 0x305E SWAP1 PUSH3 0xFFFFFF NOT DUP8 AND SWAP1 PUSH1 0x4 ADD PUSH2 0x3AEE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3076 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x308A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x30AE SWAP2 SWAP1 PUSH2 0x38B8 JUMP JUMPDEST PUSH1 0x40 DUP3 DUP2 ADD SWAP2 DUP3 MSTORE CALLER PUSH1 0x60 DUP5 ADD SWAP1 DUP2 MSTORE GASPRICE PUSH1 0x80 DUP6 ADD SWAP1 DUP2 MSTORE PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE SWAP4 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP1 DUP3 ADD DUP4 SSTORE SWAP2 DUP4 MSTORE SWAP2 DUP6 SWAP1 KECCAK256 DUP8 MLOAD PUSH1 0x5 SWAP1 SWAP4 MUL ADD SWAP2 DUP3 SSTORE SWAP4 DUP7 ADD MLOAD SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 SSTORE SWAP3 MLOAD PUSH1 0x2 DUP4 ADD SSTORE MLOAD PUSH1 0x3 DUP3 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE SWAP1 MLOAD PUSH1 0x4 SWAP2 DUP3 ADD SSTORE SLOAD DUP3 GT ISZERO PUSH2 0x2EA7 JUMPI PUSH1 0x1 PUSH1 0x4 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x3147 SWAP2 SWAP1 PUSH2 0x3C32 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x3155 SWAP1 POP PUSH2 0x315D JUMP JUMPDEST PUSH2 0x2EA7 PUSH2 0x3461 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x3 SLOAD PUSH1 0x4 SLOAD PUSH2 0x3170 SWAP2 SWAP1 PUSH2 0x3CA3 JUMP JUMPDEST LT PUSH2 0xAA3 JUMPI PUSH1 0x5 SLOAD PUSH1 0x4 SLOAD PUSH1 0x0 JUMPDEST DUP3 ISZERO PUSH2 0x31FF JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP1 DUP2 LT PUSH2 0x31B2 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD PUSH1 0x1 ADD SLOAD SWAP1 POP PUSH2 0x31DC DUP2 PUSH1 0x1 DUP6 PUSH2 0x31D7 SWAP2 SWAP1 PUSH2 0x3CA3 JUMP JUMPDEST PUSH2 0x3496 JUMP JUMPDEST SWAP2 POP DUP4 PUSH2 0x31E8 DUP2 PUSH2 0x3CEA JUMP JUMPDEST SWAP5 POP POP DUP3 DUP1 PUSH2 0x31F6 SWAP1 PUSH2 0x3CEA JUMP JUMPDEST SWAP4 POP POP POP PUSH2 0x317E JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 SWAP1 DUP2 LT PUSH2 0x322D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD PUSH1 0x9 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP2 SLOAD DUP2 LT PUSH2 0x326E JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 DUP5 SLOAD PUSH1 0x5 SWAP1 SWAP4 MUL ADD SWAP2 DUP3 SSTORE PUSH1 0x1 DUP1 DUP6 ADD SLOAD DUP2 DUP5 ADD SSTORE PUSH1 0x2 DUP1 DUP7 ADD SLOAD SWAP1 DUP5 ADD SSTORE PUSH1 0x3 DUP1 DUP7 ADD SLOAD SWAP1 DUP5 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x4 SWAP5 DUP6 ADD SLOAD SWAP5 SWAP1 SWAP3 ADD SWAP4 SWAP1 SWAP4 SSTORE DUP5 DUP3 MSTORE PUSH1 0x9 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD GT ISZERO PUSH2 0x2EA7 JUMPI PUSH2 0x32E7 DUP3 PUSH2 0x351A JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP3 SWAP2 PUSH2 0x333B SWAP2 DUP4 SWAP1 PUSH2 0x3319 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x3 PUSH1 0x5 SWAP1 SWAP3 MUL ADD ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x35B2 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP4 SWAP6 POP SWAP2 SWAP4 POP SWAP1 SWAP2 PUSH2 0x336D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 PUSH1 0x3 PUSH1 0x5 SWAP1 SWAP4 MUL ADD SWAP2 SWAP1 SWAP2 ADD SLOAD DUP7 DUP4 MSTORE PUSH1 0x9 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP3 DUP8 SWAP3 PUSH32 0x4FEC6FFA2052E80DB9DAADC2384A8F634057472E28EA7F1BD3EEBFC92B5B0F8E SWAP3 SWAP2 SWAP1 PUSH2 0x33DE JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD PUSH1 0x0 ADD SLOAD PUSH1 0x9 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP2 SLOAD DUP2 LT PUSH2 0x3423 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x1 PUSH1 0x5 SWAP1 SWAP3 MUL ADD ADD SLOAD PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE SWAP2 DUP4 ADD MSTORE DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x80 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x10 SLOAD PUSH1 0x4 SLOAD PUSH2 0x3471 SWAP2 SWAP1 PUSH2 0x3D1C JUMP JUMPDEST PUSH2 0xAA3 JUMPI PUSH1 0x13 SLOAD PUSH1 0x12 SLOAD LT PUSH2 0x3488 JUMPI PUSH1 0x12 SLOAD PUSH2 0x348C JUMP JUMPDEST PUSH1 0x13 SLOAD JUMPDEST PUSH1 0x11 SSTORE PUSH1 0x0 PUSH1 0x12 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 LT ISZERO PUSH2 0x3510 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 SWAP1 DUP2 LT PUSH2 0x34DE JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD PUSH1 0x0 ADD SLOAD DUP5 EQ ISZERO PUSH2 0x34FE JUMPI SWAP1 POP PUSH2 0x640 JUMP JUMPDEST DUP1 PUSH2 0x3508 DUP2 PUSH2 0x3D01 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x349A JUMP JUMPDEST POP PUSH1 0x0 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 LT ISZERO PUSH2 0x35AE JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 SWAP1 DUP2 LT PUSH2 0x3561 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 KECCAK256 PUSH1 0x5 SWAP1 SWAP2 MUL ADD DUP2 DUP2 SSTORE PUSH1 0x1 DUP1 DUP3 ADD DUP4 SWAP1 SSTORE PUSH1 0x2 DUP3 ADD DUP4 SWAP1 SSTORE PUSH1 0x3 DUP3 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE PUSH1 0x4 SWAP1 SWAP2 ADD SWAP2 SWAP1 SWAP2 SSTORE PUSH2 0x35A7 SWAP1 DUP3 PUSH2 0x3C32 JUMP JUMPDEST SWAP1 POP PUSH2 0x351D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x64 PUSH1 0xE SLOAD PUSH1 0x1 PUSH2 0x35C8 SWAP2 SWAP1 PUSH2 0x3C32 JUMP JUMPDEST GASPRICE PUSH1 0xF SLOAD PUSH2 0x35D6 SWAP2 SWAP1 PUSH2 0x3C84 JUMP JUMPDEST PUSH2 0x35E0 SWAP2 SWAP1 PUSH2 0x3C84 JUMP JUMPDEST PUSH2 0x35EA SWAP2 SWAP1 PUSH2 0x3C4A JUMP JUMPDEST PUSH1 0xD SLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x3683 JUMPI PUSH1 0xD SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3644 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3658 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x367C SWAP2 SWAP1 PUSH2 0x38B8 JUMP JUMPDEST SWAP1 POP PUSH2 0x3687 JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST PUSH1 0x0 DUP2 PUSH1 0xC SLOAD GT ISZERO DUP1 ISZERO PUSH2 0x369D JUMPI POP PUSH1 0x0 PUSH1 0xC SLOAD GT JUMPDEST ISZERO PUSH2 0x372E JUMPI PUSH1 0xD SLOAD PUSH1 0xC SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP2 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x36F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3707 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x372B SWAP2 SWAP1 PUSH2 0x385C JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x0 DUP4 SELFBALANCE GT DUP1 ISZERO PUSH2 0x373F JUMPI POP PUSH1 0x0 DUP5 GT JUMPDEST ISZERO PUSH2 0x3798 JUMPI PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 DUP6 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x378D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3792 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP2 POP POP JUMPDEST DUP1 ISZERO PUSH2 0x37C5 JUMPI DUP2 ISZERO PUSH2 0x37B5 JUMPI DUP4 PUSH1 0xC SLOAD SWAP6 POP SWAP6 POP POP POP POP POP PUSH2 0x37E9 JUMP JUMPDEST DUP4 PUSH1 0x0 SWAP6 POP SWAP6 POP POP POP POP POP PUSH2 0x37E9 JUMP JUMPDEST DUP2 ISZERO PUSH2 0x37DD JUMPI PUSH1 0x0 PUSH1 0xC SLOAD SWAP6 POP SWAP6 POP POP POP POP POP PUSH2 0x37E9 JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP6 POP SWAP6 POP POP POP POP POP JUMPDEST SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x37FF JUMPI DUP2 DUP3 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3816 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x382E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3846 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x63D JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x386D JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x63D JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x388D JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH3 0xFFFFFF NOT DUP2 AND DUP2 EQ PUSH2 0x63D JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x38B1 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x38C9 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x38E4 JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP2 CALLDATALOAD SWAP4 PUSH1 0x20 DUP4 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 SWAP1 SWAP3 ADD CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x390D JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x3933 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 CALLDATALOAD SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3957 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x3963 DUP9 DUP3 DUP10 ADD PUSH2 0x37EE JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP7 PUSH1 0x60 ADD CALLDATALOAD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x398A JUMPI DUP4 DUP5 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x39A1 JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH2 0x39AD DUP9 DUP4 DUP10 ADD PUSH2 0x37EE JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x39C5 JUMPI DUP4 DUP5 REVERT JUMPDEST POP PUSH2 0x39D2 DUP8 DUP3 DUP9 ADD PUSH2 0x37EE JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x39F6 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x3A0D JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x3A19 DUP11 DUP4 DUP12 ADD PUSH2 0x37EE JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x3A31 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x3A3D DUP11 DUP4 DUP12 ADD PUSH2 0x37EE JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x3A55 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x3A62 DUP10 DUP3 DUP11 ADD PUSH2 0x37EE JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3A85 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x63D JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3AA9 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x63D JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0x3AD1 DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0x3CBA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT SWAP4 SWAP1 SWAP4 AND SWAP2 SWAP1 SWAP3 ADD SWAP1 DUP2 MSTORE PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH3 0xFFFFFF NOT SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH3 0xFFFFFF NOT SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE DUP4 MLOAD DUP1 PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x3B34 DUP2 PUSH1 0x60 DUP6 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x3CBA JUMP JUMPDEST PUSH5 0xFFFFFFFFFF SWAP4 SWAP1 SWAP4 AND PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x1F SWAP2 SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND ADD PUSH1 0x60 ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x426974636F696E52656C61793A20626C6F636B2068656164657220697320746F PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x1BC81BDB19 PUSH1 0xDA SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x10 SWAP1 DUP3 ADD MSTORE PUSH16 0x14185D5CD8589B194E881C185D5CD959 PUSH1 0x82 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1F SWAP1 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x3C45 JUMPI PUSH2 0x3C45 PUSH2 0x3D30 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x3C59 JUMPI PUSH2 0x3C59 PUSH2 0x3D46 JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP1 DUP5 AND DUP1 PUSH2 0x3C78 JUMPI PUSH2 0x3C78 PUSH2 0x3D46 JUMP JUMPDEST SWAP3 AND SWAP2 SWAP1 SWAP2 DIV SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x3C9E JUMPI PUSH2 0x3C9E PUSH2 0x3D30 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x3CB5 JUMPI PUSH2 0x3CB5 PUSH2 0x3D30 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3CD5 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x3CBD JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x3CE4 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x3CF9 JUMPI PUSH2 0x3CF9 PUSH2 0x3D30 JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x3D15 JUMPI PUSH2 0x3D15 PUSH2 0x3D30 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x3D2B JUMPI PUSH2 0x3D2B PUSH2 0x3D46 JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MSTORE EQ 0xE8 CODESIZE 0xC0 0xE4 DUP12 ADDRESS GT 0xB6 DIFFICULTY SWAP15 STATICCALL DUP9 SUB CALLDATASIZE DUP6 DUP7 DUP4 DUP14 LOG4 0xBF 0xE4 0xCF 0x21 TIMESTAMP 0x27 0xDA 0xB1 PUSH4 0x50856473 PUSH16 0x6C634300080200330000000000000000 ",
          "sourceMap": "540:27832:42:-:0;;;2033:1479;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;867:23:7;666:10:11;867:9:7;:23::i;:::-;1637:1:9;1742:22;;924:7:8;:15;;-1:-1:-1;;924:15:8;;;2211:21:42;;-1:-1:-1;;;2211:21:42;;934:5:8;;2211:18:42;;;;:21;;:14;;934:5:8;;2211:21:42;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:35;;-1:-1:-1;;;2211:35:42;;-1:-1:-1;;2211:33:42;;;:35;;;2304:45:66;2211:33:42;;;;2277:18:66;;2211:35:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2264:22;;-1:-1:-1;;;2264:22:42;;-1:-1:-1;;2264:20:42;;:22;;;2304:45:66;2188:58:42;;-1:-1:-1;2264:20:42;;;;2277:18:66;;2264:22:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2256:64;;;;-1:-1:-1;;;2256:64:42;;3057:2:66;2256:64:42;;;3039:21:66;3096:2;3076:18;;;3069:30;3135:31;3115:18;;;3108:59;3184:18;;2256:64:42;;;;;;;;2353:22;;-1:-1:-1;;;2353:22:42;;-1:-1:-1;;2353:20:42;;:22;;;2304:45:66;2330:20:42;;2353;;;;2277:18:66;;2353:22:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;540:27832;;;;;;;;-1:-1:-1;540:27832:42;;;;;;;;;;;;;;;;;;;;;;2481:38;;;2557:25;;-1:-1:-1;;;2557:25:42;;-1:-1:-1;;2557:23:42;;:25;;;2304:45:66;2330::42;;-1:-1:-1;540:27832:42;2557:23;;;;2277:18:66;;2557:25:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2529;;;;:53;;;2617:10;2592:22;;;:35;;;2663:11;2637:23;;;:37;;;-1:-1:-1;2684:14:42;;;:5;:14;;;;;;;:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;2684:35:42;-1:-1:-1;;;;;2684:35:42;;;;;;;;;;;;;;;;;;;2952:16;:31;;;2993:25;;;:11;:25;;;;:35;;;3077:14;3087:4;2684:14;3077;:::i;:::-;3066:26;;:7;:26;:::i;:::-;3038:25;;;;:11;:25;;;;;:54;-1:-1:-1;;3154:1:42;3130:21;:25;;;3165:19;:29;;;3204:13;:23;;;;-1:-1:-1;3266:16:42;:36;;-1:-1:-1;;;;;;3266:36:42;-1:-1:-1;;;;;3266:36:42;;;;;;;;;;3312:20;:24;;;3346:11;:15;;;3371:11;:25;;;3406:16;:30;;;;3446:19;:23;-1:-1:-1;3499:6:42;3479:17;:26;540:27832;;2041:169:7;2096:16;2115:6;;-1:-1:-1;;;;;2131:17:7;;;-1:-1:-1;;;;;;2131:17:7;;;;;;2163:40;;2115:6;;;;;;;2163:40;;2096:16;2163:40;2041:169;;:::o;14:177:66:-;93:13;;-1:-1:-1;;;;;135:31:66;;125:42;;115:2;;181:1;178;171:12;115:2;74:117;;;:::o;196:297::-;;316:2;304:9;295:7;291:23;287:32;284:2;;;337:6;329;322:22;284:2;374:9;368:16;427:5;420:13;413:21;406:5;403:32;393:2;;454:6;446;439:22;393:2;482:5;274:219;-1:-1:-1;;;274:219:66:o;498:304::-;;621:2;609:9;600:7;596:23;592:32;589:2;;;642:6;634;627:22;589:2;673:16;;-1:-1:-1;;718:25:66;;708:36;;698:2;;763:6;755;748:22;807:194;;930:2;918:9;909:7;905:23;901:32;898:2;;;951:6;943;936:22;898:2;-1:-1:-1;979:16:66;;888:113;-1:-1:-1;888:113:66:o;1006:1139::-;;;;;1189:3;1177:9;1168:7;1164:23;1160:33;1157:2;;;1211:6;1203;1196:22;1157:2;1243:16;;-1:-1:-1;;;;;1308:14:66;;;1305:2;;;1340:6;1332;1325:22;1305:2;1383:6;1372:9;1368:22;1358:32;;1428:7;1421:4;1417:2;1413:13;1409:27;1399:2;;1455:6;1447;1440:22;1399:2;1489;1483:9;1511:2;1507;1504:10;1501:2;;;1517:18;;:::i;:::-;1592:2;1586:9;1560:2;1646:13;;-1:-1:-1;;1642:22:66;;;1666:2;1638:31;1634:40;1622:53;;;1690:18;;;1710:22;;;1687:46;1684:2;;;1736:18;;:::i;:::-;1776:10;1772:2;1765:22;1811:2;1803:6;1796:18;1853:7;1846:4;1841:2;1837;1833:11;1829:22;1826:35;1823:2;;;1879:6;1871;1864:22;1823:2;1897:59;1953:2;1946:4;1938:6;1934:17;1927:4;1923:2;1919:13;1897:59;:::i;:::-;1975:6;1965:16;;;;;;;2021:4;2010:9;2006:20;2000:27;1990:37;;2067:2;2056:9;2052:18;2046:25;2036:35;;2090:49;2135:2;2124:9;2120:18;2090:49;:::i;:::-;2080:59;;1147:998;;;;;;;:::o;2360:490::-;;2550:2;2539:9;2532:21;2582:6;2576:13;2625:6;2620:2;2609:9;2605:18;2598:34;2641:68;2702:6;2697:2;2686:9;2682:18;2675:4;2667:6;2663:17;2641:68;:::i;:::-;2830:12;2818:25;;;;2811:4;2796:20;;2789:55;-1:-1:-1;2770:2:66;2749:15;;;;-1:-1:-1;;2745:29:66;2730:45;2777:2;2726:54;;2522:328;-1:-1:-1;2522:328:66:o;3213:228::-;;3281:1;3278;3275:8;3272:2;;;-1:-1:-1;;;3306:34:66;;3363:4;3360:1;3353:15;3394:4;3313;3381:18;3272:2;-1:-1:-1;3426:9:66;;3262:179::o;3446:258::-;3518:1;3528:113;3542:6;3539:1;3536:13;3528:113;;;3618:11;;;3612:18;3599:11;;;3592:39;3564:2;3557:10;3528:113;;;3659:6;3656:1;3653:13;3650:2;;;3694:1;3685:6;3680:3;3676:16;3669:27;3650:2;;3499:205;;;:::o;3709:209::-;;3767:1;3757:2;;-1:-1:-1;;;3792:31:66;;3846:4;3843:1;3836:15;3874:4;3799:1;3864:15;3757:2;-1:-1:-1;3903:9:66;;3747:171::o;3923:127::-;3984:10;3979:3;3975:20;3972:1;3965:31;4015:4;4012:1;4005:15;4039:4;4036:1;4029:15;3955:95;540:27832:42;;;;;;"
        },
        "deployedBytecode": {
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:22344:66",
                "statements": [
                  {
                    "nodeType": "YulBlock",
                    "src": "6:3:66",
                    "statements": []
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "86:303:66",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "135:30:66",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "arrayPos",
                                      "nodeType": "YulIdentifier",
                                      "src": "144:8:66"
                                    },
                                    {
                                      "name": "arrayPos",
                                      "nodeType": "YulIdentifier",
                                      "src": "154:8:66"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "137:6:66"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "137:26:66"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "137:26:66"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "114:6:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "122:4:66",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "110:3:66"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "110:17:66"
                                  },
                                  {
                                    "name": "end",
                                    "nodeType": "YulIdentifier",
                                    "src": "129:3:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "106:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "106:27:66"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "99:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "99:35:66"
                          },
                          "nodeType": "YulIf",
                          "src": "96:2:66"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "174:30:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "197:6:66"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "184:12:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "184:20:66"
                          },
                          "variableNames": [
                            {
                              "name": "length",
                              "nodeType": "YulIdentifier",
                              "src": "174:6:66"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "247:30:66",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "arrayPos",
                                      "nodeType": "YulIdentifier",
                                      "src": "256:8:66"
                                    },
                                    {
                                      "name": "arrayPos",
                                      "nodeType": "YulIdentifier",
                                      "src": "266:8:66"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "249:6:66"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "249:26:66"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "249:26:66"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "219:6:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "227:18:66",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "216:2:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "216:30:66"
                          },
                          "nodeType": "YulIf",
                          "src": "213:2:66"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "286:29:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "302:6:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "310:4:66",
                                "type": "",
                                "value": "0x20"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "298:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "298:17:66"
                          },
                          "variableNames": [
                            {
                              "name": "arrayPos",
                              "nodeType": "YulIdentifier",
                              "src": "286:8:66"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "367:16:66",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "376:1:66",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "379:1:66",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "369:6:66"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "369:12:66"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "369:12:66"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "offset",
                                        "nodeType": "YulIdentifier",
                                        "src": "338:6:66"
                                      },
                                      {
                                        "name": "length",
                                        "nodeType": "YulIdentifier",
                                        "src": "346:6:66"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "334:3:66"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "334:19:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "355:4:66",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "330:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "330:30:66"
                              },
                              {
                                "name": "end",
                                "nodeType": "YulIdentifier",
                                "src": "362:3:66"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "327:2:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "327:39:66"
                          },
                          "nodeType": "YulIf",
                          "src": "324:2:66"
                        }
                      ]
                    },
                    "name": "abi_decode_bytes_calldata",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "49:6:66",
                        "type": ""
                      },
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "57:3:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "arrayPos",
                        "nodeType": "YulTypedName",
                        "src": "65:8:66",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "75:6:66",
                        "type": ""
                      }
                    ],
                    "src": "14:375:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "464:236:66",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "510:26:66",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "519:6:66"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "527:6:66"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "512:6:66"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "512:22:66"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "512:22:66"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "485:7:66"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "494:9:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "481:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "481:23:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "506:2:66",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "477:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "477:32:66"
                          },
                          "nodeType": "YulIf",
                          "src": "474:2:66"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "545:36:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "571:9:66"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "558:12:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "558:23:66"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "549:5:66",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "644:26:66",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "653:6:66"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "661:6:66"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "646:6:66"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "646:22:66"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "646:22:66"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "603:5:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "614:5:66"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "629:3:66",
                                                "type": "",
                                                "value": "160"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "634:1:66",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "625:3:66"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "625:11:66"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "638:1:66",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nodeType": "YulIdentifier",
                                          "src": "621:3:66"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "621:19:66"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "610:3:66"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "610:31:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "600:2:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "600:42:66"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "593:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "593:50:66"
                          },
                          "nodeType": "YulIf",
                          "src": "590:2:66"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "679:15:66",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "689:5:66"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "679:6:66"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "430:9:66",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "441:7:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "453:6:66",
                        "type": ""
                      }
                    ],
                    "src": "394:306:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "783:219:66",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "829:26:66",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "838:6:66"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "846:6:66"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "831:6:66"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "831:22:66"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "831:22:66"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "804:7:66"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "813:9:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "800:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "800:23:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "825:2:66",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "796:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "796:32:66"
                          },
                          "nodeType": "YulIf",
                          "src": "793:2:66"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "864:29:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "883:9:66"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "877:5:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "877:16:66"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "868:5:66",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "946:26:66",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "955:6:66"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "963:6:66"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "948:6:66"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "948:22:66"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "948:22:66"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "915:5:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "936:5:66"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nodeType": "YulIdentifier",
                                          "src": "929:6:66"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "929:13:66"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "922:6:66"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "922:21:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "912:2:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "912:32:66"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "905:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "905:40:66"
                          },
                          "nodeType": "YulIf",
                          "src": "902:2:66"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "981:15:66",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "991:5:66"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "981:6:66"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bool_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "749:9:66",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "760:7:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "772:6:66",
                        "type": ""
                      }
                    ],
                    "src": "705:297:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1088:223:66",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1134:26:66",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "1143:6:66"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "1151:6:66"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1136:6:66"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1136:22:66"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1136:22:66"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1109:7:66"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1118:9:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1105:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1105:23:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1130:2:66",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1101:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1101:32:66"
                          },
                          "nodeType": "YulIf",
                          "src": "1098:2:66"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1169:29:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1188:9:66"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "1182:5:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1182:16:66"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "1173:5:66",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1255:26:66",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "1264:6:66"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "1272:6:66"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1257:6:66"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1257:22:66"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1257:22:66"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "1220:5:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "1231:5:66"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1242:8:66",
                                            "type": "",
                                            "value": "16777215"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "1238:3:66"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1238:13:66"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "1227:3:66"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1227:25:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "1217:2:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1217:36:66"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "1210:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1210:44:66"
                          },
                          "nodeType": "YulIf",
                          "src": "1207:2:66"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1290:15:66",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "1300:5:66"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "1290:6:66"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes29_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1054:9:66",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "1065:7:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1077:6:66",
                        "type": ""
                      }
                    ],
                    "src": "1007:304:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1386:120:66",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1432:26:66",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "1441:6:66"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "1449:6:66"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1434:6:66"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1434:22:66"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1434:22:66"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1407:7:66"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1416:9:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1403:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1403:23:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1428:2:66",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1399:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1399:32:66"
                          },
                          "nodeType": "YulIf",
                          "src": "1396:2:66"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1467:33:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1490:9:66"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1477:12:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1477:23:66"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "1467:6:66"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes32",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1352:9:66",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "1363:7:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1375:6:66",
                        "type": ""
                      }
                    ],
                    "src": "1316:190:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1592:113:66",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1638:26:66",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "1647:6:66"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "1655:6:66"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1640:6:66"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1640:22:66"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1640:22:66"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1613:7:66"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1622:9:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1609:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1609:23:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1634:2:66",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1605:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1605:32:66"
                          },
                          "nodeType": "YulIf",
                          "src": "1602:2:66"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1673:26:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1689:9:66"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "1683:5:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1683:16:66"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "1673:6:66"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes32_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1558:9:66",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "1569:7:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1581:6:66",
                        "type": ""
                      }
                    ],
                    "src": "1511:194:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1814:222:66",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1860:26:66",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "1869:6:66"
                                    },
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "1877:6:66"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1862:6:66"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1862:22:66"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1862:22:66"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1835:7:66"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1844:9:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1831:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1831:23:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1856:2:66",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1827:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1827:32:66"
                          },
                          "nodeType": "YulIf",
                          "src": "1824:2:66"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1895:33:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1918:9:66"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1905:12:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1905:23:66"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "1895:6:66"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1937:42:66",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1964:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1975:2:66",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1960:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1960:18:66"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1947:12:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1947:32:66"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "1937:6:66"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1988:42:66",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2015:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2026:2:66",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2011:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2011:18:66"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1998:12:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1998:32:66"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "1988:6:66"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes32t_bytes32t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1764:9:66",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "1775:7:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1787:6:66",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "1795:6:66",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "1803:6:66",
                        "type": ""
                      }
                    ],
                    "src": "1710:326:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2128:171:66",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2174:26:66",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "2183:6:66"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "2191:6:66"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2176:6:66"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2176:22:66"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2176:22:66"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "2149:7:66"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2158:9:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "2145:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2145:23:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2170:2:66",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "2141:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2141:32:66"
                          },
                          "nodeType": "YulIf",
                          "src": "2138:2:66"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2209:33:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2232:9:66"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2219:12:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2219:23:66"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "2209:6:66"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2251:42:66",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2278:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2289:2:66",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2274:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2274:18:66"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2261:12:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2261:32:66"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "2251:6:66"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes32t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2086:9:66",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "2097:7:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2109:6:66",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "2117:6:66",
                        "type": ""
                      }
                    ],
                    "src": "2041:258:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2444:494:66",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2491:26:66",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value4",
                                      "nodeType": "YulIdentifier",
                                      "src": "2500:6:66"
                                    },
                                    {
                                      "name": "value4",
                                      "nodeType": "YulIdentifier",
                                      "src": "2508:6:66"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2493:6:66"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2493:22:66"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2493:22:66"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "2465:7:66"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2474:9:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "2461:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2461:23:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2486:3:66",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "2457:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2457:33:66"
                          },
                          "nodeType": "YulIf",
                          "src": "2454:2:66"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2526:33:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2549:9:66"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2536:12:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2536:23:66"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "2526:6:66"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2568:42:66",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2595:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2606:2:66",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2591:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2591:18:66"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2578:12:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2578:32:66"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "2568:6:66"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2619:46:66",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2650:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2661:2:66",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2646:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2646:18:66"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2633:12:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2633:32:66"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "2623:6:66",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2708:26:66",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value4",
                                      "nodeType": "YulIdentifier",
                                      "src": "2717:6:66"
                                    },
                                    {
                                      "name": "value4",
                                      "nodeType": "YulIdentifier",
                                      "src": "2725:6:66"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2710:6:66"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2710:22:66"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2710:22:66"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "2680:6:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2688:18:66",
                                "type": "",
                                "value": "0xffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "2677:2:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2677:30:66"
                          },
                          "nodeType": "YulIf",
                          "src": "2674:2:66"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2743:84:66",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2799:9:66"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "2810:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2795:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2795:22:66"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "2819:7:66"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_bytes_calldata",
                              "nodeType": "YulIdentifier",
                              "src": "2769:25:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2769:58:66"
                          },
                          "variables": [
                            {
                              "name": "value2_1",
                              "nodeType": "YulTypedName",
                              "src": "2747:8:66",
                              "type": ""
                            },
                            {
                              "name": "value3_1",
                              "nodeType": "YulTypedName",
                              "src": "2757:8:66",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2836:18:66",
                          "value": {
                            "name": "value2_1",
                            "nodeType": "YulIdentifier",
                            "src": "2846:8:66"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "2836:6:66"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2863:18:66",
                          "value": {
                            "name": "value3_1",
                            "nodeType": "YulIdentifier",
                            "src": "2873:8:66"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "2863:6:66"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2890:42:66",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2917:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2928:2:66",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2913:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2913:18:66"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "2900:12:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2900:32:66"
                          },
                          "variableNames": [
                            {
                              "name": "value4",
                              "nodeType": "YulIdentifier",
                              "src": "2890:6:66"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes32t_uint256t_bytes_calldata_ptrt_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2378:9:66",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "2389:7:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2401:6:66",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "2409:6:66",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "2417:6:66",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "2425:6:66",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "2433:6:66",
                        "type": ""
                      }
                    ],
                    "src": "2304:634:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3068:622:66",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3114:26:66",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "3123:6:66"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "3131:6:66"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3116:6:66"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3116:22:66"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3116:22:66"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "3089:7:66"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3098:9:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "3085:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3085:23:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3110:2:66",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "3081:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3081:32:66"
                          },
                          "nodeType": "YulIf",
                          "src": "3078:2:66"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3149:37:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3176:9:66"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "3163:12:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3163:23:66"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "3153:6:66",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3195:28:66",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3205:18:66",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "3199:2:66",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3250:26:66",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "3259:6:66"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "3267:6:66"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3252:6:66"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3252:22:66"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3252:22:66"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "3238:6:66"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "3246:2:66"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "3235:2:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3235:14:66"
                          },
                          "nodeType": "YulIf",
                          "src": "3232:2:66"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3285:84:66",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3341:9:66"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "3352:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3337:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3337:22:66"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "3361:7:66"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_bytes_calldata",
                              "nodeType": "YulIdentifier",
                              "src": "3311:25:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3311:58:66"
                          },
                          "variables": [
                            {
                              "name": "value0_1",
                              "nodeType": "YulTypedName",
                              "src": "3289:8:66",
                              "type": ""
                            },
                            {
                              "name": "value1_1",
                              "nodeType": "YulTypedName",
                              "src": "3299:8:66",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3378:18:66",
                          "value": {
                            "name": "value0_1",
                            "nodeType": "YulIdentifier",
                            "src": "3388:8:66"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "3378:6:66"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3405:18:66",
                          "value": {
                            "name": "value1_1",
                            "nodeType": "YulIdentifier",
                            "src": "3415:8:66"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "3405:6:66"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3432:48:66",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3465:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3476:2:66",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3461:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3461:18:66"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "3448:12:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3448:32:66"
                          },
                          "variables": [
                            {
                              "name": "offset_1",
                              "nodeType": "YulTypedName",
                              "src": "3436:8:66",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3509:26:66",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value2",
                                      "nodeType": "YulIdentifier",
                                      "src": "3518:6:66"
                                    },
                                    {
                                      "name": "value2",
                                      "nodeType": "YulIdentifier",
                                      "src": "3526:6:66"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3511:6:66"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3511:22:66"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3511:22:66"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_1",
                                "nodeType": "YulIdentifier",
                                "src": "3495:8:66"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "3505:2:66"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "3492:2:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3492:16:66"
                          },
                          "nodeType": "YulIf",
                          "src": "3489:2:66"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3544:86:66",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3600:9:66"
                                  },
                                  {
                                    "name": "offset_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "3611:8:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3596:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3596:24:66"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "3622:7:66"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_bytes_calldata",
                              "nodeType": "YulIdentifier",
                              "src": "3570:25:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3570:60:66"
                          },
                          "variables": [
                            {
                              "name": "value2_1",
                              "nodeType": "YulTypedName",
                              "src": "3548:8:66",
                              "type": ""
                            },
                            {
                              "name": "value3_1",
                              "nodeType": "YulTypedName",
                              "src": "3558:8:66",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3639:18:66",
                          "value": {
                            "name": "value2_1",
                            "nodeType": "YulIdentifier",
                            "src": "3649:8:66"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "3639:6:66"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "3666:18:66",
                          "value": {
                            "name": "value3_1",
                            "nodeType": "YulIdentifier",
                            "src": "3676:8:66"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "3666:6:66"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes_calldata_ptrt_bytes_calldata_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3010:9:66",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "3021:7:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3033:6:66",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "3041:6:66",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "3049:6:66",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "3057:6:66",
                        "type": ""
                      }
                    ],
                    "src": "2943:747:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3856:883:66",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "3902:26:66",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value5",
                                      "nodeType": "YulIdentifier",
                                      "src": "3911:6:66"
                                    },
                                    {
                                      "name": "value5",
                                      "nodeType": "YulIdentifier",
                                      "src": "3919:6:66"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "3904:6:66"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "3904:22:66"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "3904:22:66"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "3877:7:66"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3886:9:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "3873:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3873:23:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3898:2:66",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "3869:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3869:32:66"
                          },
                          "nodeType": "YulIf",
                          "src": "3866:2:66"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3937:37:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3964:9:66"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "3951:12:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3951:23:66"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "3941:6:66",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3983:28:66",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3993:18:66",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "3987:2:66",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4038:26:66",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value5",
                                      "nodeType": "YulIdentifier",
                                      "src": "4047:6:66"
                                    },
                                    {
                                      "name": "value5",
                                      "nodeType": "YulIdentifier",
                                      "src": "4055:6:66"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4040:6:66"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4040:22:66"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4040:22:66"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "4026:6:66"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "4034:2:66"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "4023:2:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4023:14:66"
                          },
                          "nodeType": "YulIf",
                          "src": "4020:2:66"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4073:84:66",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4129:9:66"
                                  },
                                  {
                                    "name": "offset",
                                    "nodeType": "YulIdentifier",
                                    "src": "4140:6:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4125:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4125:22:66"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "4149:7:66"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_bytes_calldata",
                              "nodeType": "YulIdentifier",
                              "src": "4099:25:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4099:58:66"
                          },
                          "variables": [
                            {
                              "name": "value0_1",
                              "nodeType": "YulTypedName",
                              "src": "4077:8:66",
                              "type": ""
                            },
                            {
                              "name": "value1_1",
                              "nodeType": "YulTypedName",
                              "src": "4087:8:66",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4166:18:66",
                          "value": {
                            "name": "value0_1",
                            "nodeType": "YulIdentifier",
                            "src": "4176:8:66"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "4166:6:66"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4193:18:66",
                          "value": {
                            "name": "value1_1",
                            "nodeType": "YulIdentifier",
                            "src": "4203:8:66"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "4193:6:66"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4220:48:66",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4253:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4264:2:66",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4249:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4249:18:66"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "4236:12:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4236:32:66"
                          },
                          "variables": [
                            {
                              "name": "offset_1",
                              "nodeType": "YulTypedName",
                              "src": "4224:8:66",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4297:26:66",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value5",
                                      "nodeType": "YulIdentifier",
                                      "src": "4306:6:66"
                                    },
                                    {
                                      "name": "value5",
                                      "nodeType": "YulIdentifier",
                                      "src": "4314:6:66"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4299:6:66"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4299:22:66"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4299:22:66"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_1",
                                "nodeType": "YulIdentifier",
                                "src": "4283:8:66"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "4293:2:66"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "4280:2:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4280:16:66"
                          },
                          "nodeType": "YulIf",
                          "src": "4277:2:66"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4332:86:66",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4388:9:66"
                                  },
                                  {
                                    "name": "offset_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "4399:8:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4384:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4384:24:66"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "4410:7:66"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_bytes_calldata",
                              "nodeType": "YulIdentifier",
                              "src": "4358:25:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4358:60:66"
                          },
                          "variables": [
                            {
                              "name": "value2_1",
                              "nodeType": "YulTypedName",
                              "src": "4336:8:66",
                              "type": ""
                            },
                            {
                              "name": "value3_1",
                              "nodeType": "YulTypedName",
                              "src": "4346:8:66",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4427:18:66",
                          "value": {
                            "name": "value2_1",
                            "nodeType": "YulIdentifier",
                            "src": "4437:8:66"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "4427:6:66"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4454:18:66",
                          "value": {
                            "name": "value3_1",
                            "nodeType": "YulIdentifier",
                            "src": "4464:8:66"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "4454:6:66"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4481:48:66",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4514:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4525:2:66",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4510:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4510:18:66"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "4497:12:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4497:32:66"
                          },
                          "variables": [
                            {
                              "name": "offset_2",
                              "nodeType": "YulTypedName",
                              "src": "4485:8:66",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4558:26:66",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value5",
                                      "nodeType": "YulIdentifier",
                                      "src": "4567:6:66"
                                    },
                                    {
                                      "name": "value5",
                                      "nodeType": "YulIdentifier",
                                      "src": "4575:6:66"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4560:6:66"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4560:22:66"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4560:22:66"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset_2",
                                "nodeType": "YulIdentifier",
                                "src": "4544:8:66"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "4554:2:66"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "4541:2:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4541:16:66"
                          },
                          "nodeType": "YulIf",
                          "src": "4538:2:66"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4593:86:66",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4649:9:66"
                                  },
                                  {
                                    "name": "offset_2",
                                    "nodeType": "YulIdentifier",
                                    "src": "4660:8:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4645:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4645:24:66"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "4671:7:66"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_bytes_calldata",
                              "nodeType": "YulIdentifier",
                              "src": "4619:25:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4619:60:66"
                          },
                          "variables": [
                            {
                              "name": "value4_1",
                              "nodeType": "YulTypedName",
                              "src": "4597:8:66",
                              "type": ""
                            },
                            {
                              "name": "value5_1",
                              "nodeType": "YulTypedName",
                              "src": "4607:8:66",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4688:18:66",
                          "value": {
                            "name": "value4_1",
                            "nodeType": "YulIdentifier",
                            "src": "4698:8:66"
                          },
                          "variableNames": [
                            {
                              "name": "value4",
                              "nodeType": "YulIdentifier",
                              "src": "4688:6:66"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4715:18:66",
                          "value": {
                            "name": "value5_1",
                            "nodeType": "YulIdentifier",
                            "src": "4725:8:66"
                          },
                          "variableNames": [
                            {
                              "name": "value5",
                              "nodeType": "YulIdentifier",
                              "src": "4715:6:66"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bytes_calldata_ptrt_bytes_calldata_ptrt_bytes_calldata_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3782:9:66",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "3793:7:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3805:6:66",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "3813:6:66",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "3821:6:66",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "3829:6:66",
                        "type": ""
                      },
                      {
                        "name": "value4",
                        "nodeType": "YulTypedName",
                        "src": "3837:6:66",
                        "type": ""
                      },
                      {
                        "name": "value5",
                        "nodeType": "YulTypedName",
                        "src": "3845:6:66",
                        "type": ""
                      }
                    ],
                    "src": "3695:1044:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4814:120:66",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "4860:26:66",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "4869:6:66"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "4877:6:66"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "4862:6:66"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "4862:22:66"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "4862:22:66"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "4835:7:66"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4844:9:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "4831:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4831:23:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4856:2:66",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "4827:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4827:32:66"
                          },
                          "nodeType": "YulIf",
                          "src": "4824:2:66"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4895:33:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4918:9:66"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "4905:12:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4905:23:66"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "4895:6:66"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4780:9:66",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "4791:7:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "4803:6:66",
                        "type": ""
                      }
                    ],
                    "src": "4744:190:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5020:113:66",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5066:26:66",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "5075:6:66"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "5083:6:66"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "5068:6:66"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5068:22:66"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5068:22:66"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "5041:7:66"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5050:9:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "5037:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5037:23:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5062:2:66",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "5033:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5033:32:66"
                          },
                          "nodeType": "YulIf",
                          "src": "5030:2:66"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5101:26:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5117:9:66"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "5111:5:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5111:16:66"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "5101:6:66"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4986:9:66",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "4997:7:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "5009:6:66",
                        "type": ""
                      }
                    ],
                    "src": "4939:194:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5225:171:66",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5271:26:66",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "5280:6:66"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "5288:6:66"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "5273:6:66"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5273:22:66"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5273:22:66"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "5246:7:66"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5255:9:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "5242:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5242:23:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5267:2:66",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "5238:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5238:32:66"
                          },
                          "nodeType": "YulIf",
                          "src": "5235:2:66"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5306:33:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5329:9:66"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "5316:12:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5316:23:66"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "5306:6:66"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5348:42:66",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5375:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5386:2:66",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5371:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5371:18:66"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "5358:12:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5358:32:66"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "5348:6:66"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5183:9:66",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "5194:7:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "5206:6:66",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "5214:6:66",
                        "type": ""
                      }
                    ],
                    "src": "5138:258:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5481:220:66",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5527:26:66",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "5536:6:66"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "5544:6:66"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "5529:6:66"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5529:22:66"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5529:22:66"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "5502:7:66"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5511:9:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "5498:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5498:23:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5523:2:66",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "5494:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5494:32:66"
                          },
                          "nodeType": "YulIf",
                          "src": "5491:2:66"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5562:29:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5581:9:66"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "5575:5:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5575:16:66"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "5566:5:66",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5645:26:66",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "5654:6:66"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "5662:6:66"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "5647:6:66"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5647:22:66"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5647:22:66"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "5613:5:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "5624:5:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5631:10:66",
                                        "type": "",
                                        "value": "0xffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "5620:3:66"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5620:22:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "5610:2:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5610:33:66"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "5603:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5603:41:66"
                          },
                          "nodeType": "YulIf",
                          "src": "5600:2:66"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5680:15:66",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "5690:5:66"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "5680:6:66"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint32_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5447:9:66",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "5458:7:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "5470:6:66",
                        "type": ""
                      }
                    ],
                    "src": "5401:300:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5786:236:66",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5832:26:66",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "5841:6:66"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "5849:6:66"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "5834:6:66"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5834:22:66"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5834:22:66"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "5807:7:66"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5816:9:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "5803:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5803:23:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5828:2:66",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "5799:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5799:32:66"
                          },
                          "nodeType": "YulIf",
                          "src": "5796:2:66"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "5867:29:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5886:9:66"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "5880:5:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5880:16:66"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "5871:5:66",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "5966:26:66",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "5975:6:66"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "5983:6:66"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "5968:6:66"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "5968:22:66"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "5968:22:66"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "5918:5:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "5929:5:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "5936:26:66",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "5925:3:66"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "5925:38:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "5915:2:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5915:49:66"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "5908:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5908:57:66"
                          },
                          "nodeType": "YulIf",
                          "src": "5905:2:66"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6001:15:66",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "6011:5:66"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "6001:6:66"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint96_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5752:9:66",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "5763:7:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "5775:6:66",
                        "type": ""
                      }
                    ],
                    "src": "5706:316:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6190:222:66",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6200:27:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "6220:6:66"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "6214:5:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6214:13:66"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "6204:6:66",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "6262:6:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6270:4:66",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6258:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6258:17:66"
                              },
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "6277:3:66"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "6282:6:66"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory",
                              "nodeType": "YulIdentifier",
                              "src": "6236:21:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6236:53:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6236:53:66"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "6298:29:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "6315:3:66"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "6320:6:66"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6311:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6311:16:66"
                          },
                          "variables": [
                            {
                              "name": "end_1",
                              "nodeType": "YulTypedName",
                              "src": "6302:5:66",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "end_1",
                                "nodeType": "YulIdentifier",
                                "src": "6343:5:66"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "6354:6:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6366:3:66",
                                        "type": "",
                                        "value": "248"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6371:3:66",
                                        "type": "",
                                        "value": "255"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "shl",
                                      "nodeType": "YulIdentifier",
                                      "src": "6362:3:66"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6362:13:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "6350:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6350:26:66"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6336:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6336:41:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6336:41:66"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6386:20:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "end_1",
                                "nodeType": "YulIdentifier",
                                "src": "6397:5:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6404:1:66",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6393:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6393:13:66"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "6386:3:66"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_bytes_memory_ptr_t_bytes1__to_t_bytes_memory_ptr_t_bytes1__nonPadded_inplace_fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "6158:3:66",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "6163:6:66",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "6171:6:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "6182:3:66",
                        "type": ""
                      }
                    ],
                    "src": "6027:385:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6608:14:66",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "6610:10:66",
                          "value": {
                            "name": "pos",
                            "nodeType": "YulIdentifier",
                            "src": "6617:3:66"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "6610:3:66"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "6592:3:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "6600:3:66",
                        "type": ""
                      }
                    ],
                    "src": "6417:205:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6728:102:66",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "6738:26:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6750:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6761:2:66",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6746:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6746:18:66"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "6738:4:66"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6780:9:66"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "6795:6:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "6811:3:66",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "6816:1:66",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "6807:3:66"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "6807:11:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "6820:1:66",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "6803:3:66"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "6803:19:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "6791:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6791:32:66"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6773:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6773:51:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6773:51:66"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6697:9:66",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "6708:6:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "6719:4:66",
                        "type": ""
                      }
                    ],
                    "src": "6627:203:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6964:145:66",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "6974:26:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6986:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6997:2:66",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6982:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6982:18:66"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "6974:4:66"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7016:9:66"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "7031:6:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "7047:3:66",
                                            "type": "",
                                            "value": "160"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "7052:1:66",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "7043:3:66"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "7043:11:66"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "7056:1:66",
                                        "type": "",
                                        "value": "1"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "sub",
                                      "nodeType": "YulIdentifier",
                                      "src": "7039:3:66"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7039:19:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "7027:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7027:32:66"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7009:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7009:51:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7009:51:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7080:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7091:2:66",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7076:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7076:18:66"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "7096:6:66"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7069:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7069:34:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7069:34:66"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6925:9:66",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "6936:6:66",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "6944:6:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "6955:4:66",
                        "type": ""
                      }
                    ],
                    "src": "6835:274:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7209:92:66",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "7219:26:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7231:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7242:2:66",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7227:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7227:18:66"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "7219:4:66"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7261:9:66"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "7286:6:66"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "7279:6:66"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7279:14:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "7272:6:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7272:22:66"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7254:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7254:41:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7254:41:66"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7178:9:66",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "7189:6:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "7200:4:66",
                        "type": ""
                      }
                    ],
                    "src": "7114:187:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7415:96:66",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "7425:26:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7437:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7448:2:66",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7433:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7433:18:66"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "7425:4:66"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7467:9:66"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "7482:6:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "7494:8:66",
                                        "type": "",
                                        "value": "16777215"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "7490:3:66"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7490:13:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "7478:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7478:26:66"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7460:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7460:45:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7460:45:66"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes29__to_t_bytes29__fromStack_library_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7384:9:66",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "7395:6:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "7406:4:66",
                        "type": ""
                      }
                    ],
                    "src": "7306:205:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7653:139:66",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "7663:26:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7675:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7686:2:66",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7671:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7671:18:66"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "7663:4:66"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7705:9:66"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "7720:6:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "7732:8:66",
                                        "type": "",
                                        "value": "16777215"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "7728:3:66"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "7728:13:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "7716:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7716:26:66"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7698:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7698:45:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7698:45:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7763:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7774:2:66",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7759:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7759:18:66"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "7779:6:66"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7752:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7752:34:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7752:34:66"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes29_t_bytes32__to_t_bytes29_t_bytes32__fromStack_library_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7614:9:66",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "7625:6:66",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "7633:6:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "7644:4:66",
                        "type": ""
                      }
                    ],
                    "src": "7516:276:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7942:139:66",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "7952:26:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7964:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7975:2:66",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7960:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7960:18:66"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "7952:4:66"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7994:9:66"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "8009:6:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "8021:8:66",
                                        "type": "",
                                        "value": "16777215"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "8017:3:66"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8017:13:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "8005:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8005:26:66"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7987:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7987:45:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7987:45:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8052:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8063:2:66",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8048:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8048:18:66"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "8068:6:66"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8041:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8041:34:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8041:34:66"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes29_t_rational_0_by_1__to_t_bytes29_t_uint256__fromStack_library_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7903:9:66",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "7914:6:66",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "7922:6:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "7933:4:66",
                        "type": ""
                      }
                    ],
                    "src": "7797:284:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8223:139:66",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "8233:26:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8245:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8256:2:66",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8241:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8241:18:66"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "8233:4:66"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8275:9:66"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "8290:6:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "8302:8:66",
                                        "type": "",
                                        "value": "16777215"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "8298:3:66"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8298:13:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "8286:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8286:26:66"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8268:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8268:45:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8268:45:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8333:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8344:2:66",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8329:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8329:18:66"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "8349:6:66"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8322:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8322:34:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8322:34:66"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes29_t_uint256__to_t_bytes29_t_uint256__fromStack_library_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8184:9:66",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "8195:6:66",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "8203:6:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "8214:4:66",
                        "type": ""
                      }
                    ],
                    "src": "8086:276:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8468:76:66",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "8478:26:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8490:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8501:2:66",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8486:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8486:18:66"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "8478:4:66"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8520:9:66"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "8531:6:66"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8513:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8513:25:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8513:25:66"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8437:9:66",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "8448:6:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "8459:4:66",
                        "type": ""
                      }
                    ],
                    "src": "8367:177:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8742:226:66",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "8752:27:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8764:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8775:3:66",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8760:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8760:19:66"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "8752:4:66"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8795:9:66"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "8806:6:66"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8788:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8788:25:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8788:25:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8833:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8844:2:66",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8829:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8829:18:66"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "8849:6:66"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8822:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8822:34:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8822:34:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8876:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8887:2:66",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8872:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8872:18:66"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value2",
                                    "nodeType": "YulIdentifier",
                                    "src": "8896:6:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "8908:8:66",
                                        "type": "",
                                        "value": "16777215"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "not",
                                      "nodeType": "YulIdentifier",
                                      "src": "8904:3:66"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "8904:13:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "8892:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8892:26:66"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8865:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8865:54:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8865:54:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8939:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8950:2:66",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8935:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8935:18:66"
                              },
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "8955:6:66"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8928:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8928:34:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8928:34:66"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes32_t_bytes32_t_bytes29_t_uint256__to_t_bytes32_t_bytes32_t_bytes29_t_uint256__fromStack_library_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8687:9:66",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "8698:6:66",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "8706:6:66",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "8714:6:66",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "8722:6:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "8733:4:66",
                        "type": ""
                      }
                    ],
                    "src": "8549:419:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9158:206:66",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "9168:27:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9180:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9191:3:66",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9176:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9176:19:66"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "9168:4:66"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9211:9:66"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "9222:6:66"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9204:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9204:25:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9204:25:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9249:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9260:2:66",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9245:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9245:18:66"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "9265:6:66"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9238:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9238:34:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9238:34:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9292:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9303:2:66",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9288:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9288:18:66"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "9308:6:66"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9281:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9281:34:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9281:34:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9335:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9346:2:66",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9331:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9331:18:66"
                              },
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "9351:6:66"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9324:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9324:34:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9324:34:66"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes32_t_bytes32_t_uint256_t_uint256__to_t_bytes32_t_bytes32_t_uint256_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "9103:9:66",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "9114:6:66",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "9122:6:66",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "9130:6:66",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "9138:6:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "9149:4:66",
                        "type": ""
                      }
                    ],
                    "src": "8973:391:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9531:328:66",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9548:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9559:2:66",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9541:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9541:21:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9541:21:66"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "9571:27:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "9591:6:66"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "9585:5:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9585:13:66"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "9575:6:66",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9618:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9629:2:66",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9614:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9614:18:66"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "9634:6:66"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9607:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9607:34:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9607:34:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "9676:6:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9684:4:66",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9672:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9672:17:66"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9695:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9706:2:66",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9691:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9691:18:66"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "9711:6:66"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory",
                              "nodeType": "YulIdentifier",
                              "src": "9650:21:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9650:68:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9650:68:66"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9727:62:66",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9743:9:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "length",
                                            "nodeType": "YulIdentifier",
                                            "src": "9762:6:66"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "9770:2:66",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "9758:3:66"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "9758:15:66"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "9779:2:66",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "9775:3:66"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "9775:7:66"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "9754:3:66"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9754:29:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9739:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9739:45:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9786:2:66",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9735:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9735:54:66"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "9727:4:66"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9809:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9820:4:66",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9805:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9805:20:66"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "9831:6:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9839:12:66",
                                    "type": "",
                                    "value": "0xffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "9827:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9827:25:66"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9798:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9798:55:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9798:55:66"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bytes_memory_ptr_t_rational_0_by_1__to_t_bytes_memory_ptr_t_uint40__fromStack_library_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "9492:9:66",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "9503:6:66",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "9511:6:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "9522:4:66",
                        "type": ""
                      }
                    ],
                    "src": "9369:490:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10038:240:66",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10055:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10066:2:66",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10048:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10048:21:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10048:21:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10089:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10100:2:66",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10085:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10085:18:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10105:2:66",
                                "type": "",
                                "value": "50"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10078:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10078:30:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10078:30:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10128:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10139:2:66",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10124:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10124:18:66"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "10144:34:66",
                                "type": "",
                                "value": "BitcoinRelay: unexpected retarge"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10117:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10117:62:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10117:62:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10199:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10210:2:66",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10195:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10195:18:66"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "10215:20:66",
                                "type": "",
                                "value": "t on external call"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10188:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10188:48:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10188:48:66"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10245:27:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10257:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10268:3:66",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10253:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10253:19:66"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "10245:4:66"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_057876433a104625d9c7398fec2b04f5b11dbcea3b77309a5d622ff9cc5360d7__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "10015:9:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "10029:4:66",
                        "type": ""
                      }
                    ],
                    "src": "9864:414:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10457:170:66",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10474:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10485:2:66",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10467:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10467:21:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10467:21:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10508:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10519:2:66",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10504:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10504:18:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10524:2:66",
                                "type": "",
                                "value": "20"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10497:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10497:30:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10497:30:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10547:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10558:2:66",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10543:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10543:18:66"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "10563:22:66",
                                "type": "",
                                "value": "Pausable: not paused"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10536:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10536:50:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10536:50:66"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10595:26:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10607:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10618:2:66",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10603:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10603:18:66"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "10595:4:66"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "10434:9:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "10448:4:66",
                        "type": ""
                      }
                    ],
                    "src": "10283:344:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10806:231:66",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "10823:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10834:2:66",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10816:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10816:21:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10816:21:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10857:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10868:2:66",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10853:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10853:18:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10873:2:66",
                                "type": "",
                                "value": "41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10846:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10846:30:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10846:30:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10896:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10907:2:66",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10892:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10892:18:66"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "10912:34:66",
                                "type": "",
                                "value": "BitcoinRelay: header work is ins"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10885:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10885:62:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10885:62:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "10967:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "10978:2:66",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "10963:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "10963:18:66"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "10983:11:66",
                                "type": "",
                                "value": "ufficient"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10956:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10956:39:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10956:39:66"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11004:27:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11016:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11027:3:66",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11012:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11012:19:66"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "11004:4:66"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_1ea5bd3ba43bd90954a4a0a677f07e70fb7b3eac3e42723087b4f239b84d3017__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "10783:9:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "10797:4:66",
                        "type": ""
                      }
                    ],
                    "src": "10632:405:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11216:243:66",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11233:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11244:2:66",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11226:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11226:21:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11226:21:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11267:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11278:2:66",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11263:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11263:18:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11283:2:66",
                                "type": "",
                                "value": "53"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11256:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11256:30:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11256:30:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11306:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11317:2:66",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11302:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11302:18:66"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "11322:34:66",
                                "type": "",
                                "value": "BitcoinRelay: period header diff"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11295:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11295:62:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11295:62:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11377:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11388:2:66",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11373:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11373:18:66"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "11393:23:66",
                                "type": "",
                                "value": "iculties do not match"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11366:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11366:51:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11366:51:66"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11426:27:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11438:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11449:3:66",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11434:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11434:19:66"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "11426:4:66"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_226615151c7680c368b87f11c3f8de1ceed8b741dbd254a9c9e392ac4ef8edbd__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "11193:9:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "11207:4:66",
                        "type": ""
                      }
                    ],
                    "src": "11042:417:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "11638:228:66",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11655:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11666:2:66",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11648:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11648:21:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11648:21:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11689:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11700:2:66",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11685:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11685:18:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11705:2:66",
                                "type": "",
                                "value": "38"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11678:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11678:30:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11678:30:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11728:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11739:2:66",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11724:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11724:18:66"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "11744:34:66",
                                "type": "",
                                "value": "Ownable: new owner is the zero a"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11717:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11717:62:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11717:62:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "11799:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "11810:2:66",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "11795:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "11795:18:66"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "11815:8:66",
                                "type": "",
                                "value": "ddress"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "11788:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11788:36:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "11788:36:66"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "11833:27:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "11845:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "11856:3:66",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "11841:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "11841:19:66"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "11833:4:66"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "11615:9:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "11629:4:66",
                        "type": ""
                      }
                    ],
                    "src": "11464:402:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12045:305:66",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12062:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12073:2:66",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12055:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12055:21:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12055:21:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12096:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12107:2:66",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12092:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12092:18:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12112:2:66",
                                "type": "",
                                "value": "75"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12085:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12085:30:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12085:30:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12135:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12146:2:66",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12131:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12131:18:66"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "12151:34:66",
                                "type": "",
                                "value": "BitcoinRelay: must provide the l"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12124:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12124:62:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12124:62:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12206:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12217:2:66",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12202:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12202:18:66"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "12222:34:66",
                                "type": "",
                                "value": "ast header of the closing diffic"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12195:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12195:62:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12195:62:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12277:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12288:3:66",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12273:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12273:19:66"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "12294:13:66",
                                "type": "",
                                "value": "ulty period"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12266:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12266:42:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12266:42:66"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12317:27:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12329:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12340:3:66",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12325:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12325:19:66"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "12317:4:66"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_247c7797cfd868f3355ad4c61d58bd0044ff1b4ab602a4d76ac6b7e73fb69e90__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "12022:9:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "12036:4:66",
                        "type": ""
                      }
                    ],
                    "src": "11871:479:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12529:163:66",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12546:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12557:2:66",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12539:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12539:21:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12539:21:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12580:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12591:2:66",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12576:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12576:18:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12596:2:66",
                                "type": "",
                                "value": "13"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12569:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12569:30:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12569:30:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12619:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12630:2:66",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12615:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12615:18:66"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "12635:15:66",
                                "type": "",
                                "value": "Unknown block"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12608:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12608:43:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12608:43:66"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "12660:26:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12672:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12683:2:66",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "12668:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12668:18:66"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "12660:4:66"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_2fe269f479def214aa4213fc5a3676b42da06f3fe6bec66494b82d7cb74589b0__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "12506:9:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "12520:4:66",
                        "type": ""
                      }
                    ],
                    "src": "12355:337:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "12871:234:66",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "12888:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12899:2:66",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12881:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12881:21:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12881:21:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12922:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12933:2:66",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12918:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12918:18:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "12938:2:66",
                                "type": "",
                                "value": "44"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12911:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12911:30:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12911:30:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "12961:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "12972:2:66",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "12957:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "12957:18:66"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "12977:34:66",
                                "type": "",
                                "value": "BitcoinRelay: getting fee was no"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "12950:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "12950:62:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "12950:62:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13032:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13043:2:66",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13028:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13028:18:66"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "13048:14:66",
                                "type": "",
                                "value": "t successful"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13021:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13021:42:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13021:42:66"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "13072:27:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13084:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13095:3:66",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13080:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13080:19:66"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "13072:4:66"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_3d0f758605ac6cabc7556a2381412ba051abd8477ed0592b5b6139e8cb4309eb__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "12848:9:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "12862:4:66",
                        "type": ""
                      }
                    ],
                    "src": "12697:408:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13284:231:66",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13301:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13312:2:66",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13294:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13294:21:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13294:21:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13335:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13346:2:66",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13331:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13331:18:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13351:2:66",
                                "type": "",
                                "value": "41"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13324:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13324:30:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13324:30:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13374:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13385:2:66",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13370:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13370:18:66"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "13390:34:66",
                                "type": "",
                                "value": "BitcoinRelay: target changed une"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13363:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13363:62:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13363:62:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13445:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13456:2:66",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13441:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13441:18:66"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "13461:11:66",
                                "type": "",
                                "value": "xpectedly"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13434:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13434:39:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13434:39:66"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "13482:27:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13494:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13505:3:66",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13490:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13490:19:66"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "13482:4:66"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_4314b2aee5118432a5f642250e9a21bc5ae206cd6f247b3aef77c6839d4b1cda__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "13261:9:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "13275:4:66",
                        "type": ""
                      }
                    ],
                    "src": "13110:405:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "13694:244:66",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13711:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13722:2:66",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13704:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13704:21:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13704:21:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13745:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13756:2:66",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13741:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13741:18:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13761:2:66",
                                "type": "",
                                "value": "54"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13734:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13734:30:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13734:30:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13784:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13795:2:66",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13780:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13780:18:66"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "13800:34:66",
                                "type": "",
                                "value": "BitcoinRelay: must provide exact"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13773:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13773:62:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13773:62:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "13855:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "13866:2:66",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "13851:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "13851:18:66"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "13871:24:66",
                                "type": "",
                                "value": "ly 1 difficulty period"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "13844:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13844:52:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "13844:52:66"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "13905:27:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "13917:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "13928:3:66",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "13913:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "13913:19:66"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "13905:4:66"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_51303d8405eacb9f5dcbb4c5e97b6c467560d3a1e7fb907b5404cc586951dca6__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "13671:9:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "13685:4:66",
                        "type": ""
                      }
                    ],
                    "src": "13520:418:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14117:248:66",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14134:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14145:2:66",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14127:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14127:21:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14127:21:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14168:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14179:2:66",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14164:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14164:18:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14184:2:66",
                                "type": "",
                                "value": "58"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14157:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14157:30:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14157:30:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14207:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14218:2:66",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14203:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14203:18:66"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "14223:34:66",
                                "type": "",
                                "value": "Address: unable to send value, r"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14196:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14196:62:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14196:62:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14278:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14289:2:66",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14274:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14274:18:66"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "14294:28:66",
                                "type": "",
                                "value": "ecipient may have reverted"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14267:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14267:56:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14267:56:66"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "14332:27:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14344:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14355:3:66",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14340:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14340:19:66"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "14332:4:66"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "14094:9:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "14108:4:66",
                        "type": ""
                      }
                    ],
                    "src": "13943:422:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14544:227:66",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14561:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14572:2:66",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14554:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14554:21:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14554:21:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14595:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14606:2:66",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14591:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14591:18:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14611:2:66",
                                "type": "",
                                "value": "37"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14584:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14584:30:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14584:30:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14634:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14645:2:66",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14630:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14630:18:66"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "14650:34:66",
                                "type": "",
                                "value": "BitcoinRelay: block header is to"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14623:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14623:62:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14623:62:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "14705:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "14716:2:66",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14701:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14701:18:66"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "14721:7:66",
                                "type": "",
                                "value": "o old"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14694:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14694:35:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14694:35:66"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "14738:27:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14750:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14761:3:66",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "14746:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14746:19:66"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "14738:4:66"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_554e17981ef1d6140cc68053ac1cbf7a57f87160773150e0e00ea4fb501026fe__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "14521:9:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "14535:4:66",
                        "type": ""
                      }
                    ],
                    "src": "14370:401:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "14950:179:66",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "14967:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "14978:2:66",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14960:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14960:21:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14960:21:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15001:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15012:2:66",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "14997:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "14997:18:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15017:2:66",
                                "type": "",
                                "value": "29"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "14990:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "14990:30:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "14990:30:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15040:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15051:2:66",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15036:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15036:18:66"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "15056:31:66",
                                "type": "",
                                "value": "Address: insufficient balance"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15029:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15029:59:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15029:59:66"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "15097:26:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15109:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15120:2:66",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15105:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15105:18:66"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "15097:4:66"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "14927:9:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "14941:4:66",
                        "type": ""
                      }
                    ],
                    "src": "14776:353:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15308:242:66",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15325:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15336:2:66",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15318:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15318:21:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15318:21:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15359:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15370:2:66",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15355:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15355:18:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15375:2:66",
                                "type": "",
                                "value": "52"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15348:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15348:30:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15348:30:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15398:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15409:2:66",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15394:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15394:18:66"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "15414:34:66",
                                "type": "",
                                "value": "BitcoinRelay: headers do not for"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15387:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15387:62:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15387:62:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15469:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15480:2:66",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15465:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15465:18:66"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "15485:22:66",
                                "type": "",
                                "value": "m a consistent chain"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15458:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15458:50:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15458:50:66"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "15517:27:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15529:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15540:3:66",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "15525:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15525:19:66"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "15517:4:66"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_5687bb3cd933474b9e95ae89bdedcbaa9658a14bb150f2de93d86da8c254f875__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "15285:9:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "15299:4:66",
                        "type": ""
                      }
                    ],
                    "src": "15134:416:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "15729:305:66",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "15746:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15757:2:66",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15739:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15739:21:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15739:21:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15780:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15791:2:66",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15776:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15776:18:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "15796:2:66",
                                "type": "",
                                "value": "75"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15769:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15769:30:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15769:30:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15819:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15830:2:66",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15815:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15815:18:66"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "15835:34:66",
                                "type": "",
                                "value": "BitcoinRelay: headers should be "
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15808:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15808:62:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15808:62:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15890:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15901:2:66",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15886:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15886:18:66"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "15906:34:66",
                                "type": "",
                                "value": "submitted by calling addHeadersW"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15879:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15879:62:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15879:62:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "15961:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "15972:3:66",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "15957:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "15957:19:66"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "15978:13:66",
                                "type": "",
                                "value": "ithRetarget"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "15950:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "15950:42:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "15950:42:66"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "16001:27:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16013:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16024:3:66",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16009:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16009:19:66"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "16001:4:66"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_63f576ea76fd609c6c47b2af6b474e6f61dd85d38848a4b21100459d466a96c0__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "15706:9:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "15720:4:66",
                        "type": ""
                      }
                    ],
                    "src": "15555:479:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "16213:228:66",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16230:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16241:2:66",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16223:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16223:21:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16223:21:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16264:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16275:2:66",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16260:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16260:18:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16280:2:66",
                                "type": "",
                                "value": "38"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16253:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16253:30:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16253:30:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16303:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16314:2:66",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16299:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16299:18:66"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "16319:34:66",
                                "type": "",
                                "value": "BitcoinRelay: tx has not been in"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16292:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16292:62:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16292:62:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16374:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16385:2:66",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16370:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16370:18:66"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "16390:8:66",
                                "type": "",
                                "value": "cluded"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16363:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16363:36:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16363:36:66"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "16408:27:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16420:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16431:3:66",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16416:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16416:19:66"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "16408:4:66"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_67c8848024e0d680fc69ba955d4d731f00b5476a93675c6a908cc2e33e3a8bfe__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "16190:9:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "16204:4:66",
                        "type": ""
                      }
                    ],
                    "src": "16039:402:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "16620:166:66",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16637:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16648:2:66",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16630:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16630:21:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16630:21:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16671:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16682:2:66",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16667:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16667:18:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16687:2:66",
                                "type": "",
                                "value": "16"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16660:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16660:30:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16660:30:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "16710:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "16721:2:66",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "16706:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "16706:18:66"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "16726:18:66",
                                "type": "",
                                "value": "Pausable: paused"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16699:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16699:46:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16699:46:66"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "16754:26:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16766:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16777:2:66",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "16762:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16762:18:66"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "16754:4:66"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "16597:9:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "16611:4:66",
                        "type": ""
                      }
                    ],
                    "src": "16446:340:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "16965:227:66",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "16982:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "16993:2:66",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "16975:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "16975:21:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "16975:21:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17016:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17027:2:66",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17012:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17012:18:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17032:2:66",
                                "type": "",
                                "value": "37"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17005:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17005:30:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17005:30:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17055:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17066:2:66",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17051:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17051:18:66"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "17071:34:66",
                                "type": "",
                                "value": "BitcoinRelay: anchor must be 80 "
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17044:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17044:62:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17044:62:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17126:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17137:2:66",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17122:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17122:18:66"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "17142:7:66",
                                "type": "",
                                "value": "bytes"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17115:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17115:35:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17115:35:66"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "17159:27:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17171:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17182:3:66",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17167:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17167:19:66"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "17159:4:66"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_98c88a3a2e2ea050c459a58accfe5dbe135937f9c325a6ecacd4c1684018142b__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "16942:9:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "16956:4:66",
                        "type": ""
                      }
                    ],
                    "src": "16791:401:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17371:182:66",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17388:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17399:2:66",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17381:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17381:21:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17381:21:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17422:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17433:2:66",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17418:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17418:18:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17438:2:66",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17411:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17411:30:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17411:30:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17461:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17472:2:66",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17457:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17457:18:66"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "17477:34:66",
                                "type": "",
                                "value": "Ownable: caller is not the owner"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17450:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17450:62:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17450:62:66"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "17521:26:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17533:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17544:2:66",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17529:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17529:18:66"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "17521:4:66"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "17348:9:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "17362:4:66",
                        "type": ""
                      }
                    ],
                    "src": "17197:356:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "17732:180:66",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17749:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17760:2:66",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17742:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17742:21:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17742:21:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17783:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17794:2:66",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17779:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17779:18:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17799:2:66",
                                "type": "",
                                "value": "30"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17772:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17772:30:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17772:30:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "17822:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "17833:2:66",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "17818:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "17818:18:66"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "17838:32:66",
                                "type": "",
                                "value": "BitcoinRelay: unknown ancestor"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "17811:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17811:60:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "17811:60:66"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "17880:26:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "17892:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "17903:2:66",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "17888:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "17888:18:66"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "17880:4:66"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_a67d010ecbf9f5cc5ed6651b34ab851cf4cb49ceab4518d874ffbddca2159e59__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "17709:9:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "17723:4:66",
                        "type": ""
                      }
                    ],
                    "src": "17558:354:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "18091:250:66",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18108:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18119:2:66",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18101:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18101:21:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18101:21:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18142:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18153:2:66",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18138:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18138:18:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18158:2:66",
                                "type": "",
                                "value": "60"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18131:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18131:30:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18131:30:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18181:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18192:2:66",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18177:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18177:18:66"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "18197:34:66",
                                "type": "",
                                "value": "BitcoinRelay: bad args. Check he"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18170:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18170:62:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18170:62:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18252:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18263:2:66",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18248:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18248:18:66"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "18268:30:66",
                                "type": "",
                                "value": "ader and array byte lengths."
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18241:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18241:58:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18241:58:66"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "18308:27:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18320:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18331:3:66",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "18316:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18316:19:66"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "18308:4:66"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_a73c04f946d071f66021cc2b3937ffab836b95a032413b4efd23e71d861837f4__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "18068:9:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "18082:4:66",
                        "type": ""
                      }
                    ],
                    "src": "17917:424:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "18520:247:66",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18537:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18548:2:66",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18530:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18530:21:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18530:21:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18571:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18582:2:66",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18567:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18567:18:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18587:2:66",
                                "type": "",
                                "value": "57"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18560:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18560:30:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18560:30:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18610:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18621:2:66",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18606:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18606:18:66"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "18626:34:66",
                                "type": "",
                                "value": "BitcoinRelay: header array lengt"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18599:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18599:62:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18599:62:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18681:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "18692:2:66",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18677:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18677:18:66"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "18697:27:66",
                                "type": "",
                                "value": "h must be divisible by 80"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18670:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18670:55:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18670:55:66"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "18734:27:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18746:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18757:3:66",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "18742:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18742:19:66"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "18734:4:66"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_d754302f3c3b05f09eb8c095a5df08788c928440e5f72594a215cea4541be415__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "18497:9:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "18511:4:66",
                        "type": ""
                      }
                    ],
                    "src": "18346:421:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "18946:229:66",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "18963:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "18974:2:66",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18956:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18956:21:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18956:21:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "18997:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19008:2:66",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "18993:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "18993:18:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19013:2:66",
                                "type": "",
                                "value": "39"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "18986:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "18986:30:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "18986:30:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19036:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19047:2:66",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19032:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19032:18:66"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "19052:34:66",
                                "type": "",
                                "value": "BitcoinRelay: invalid retarget p"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19025:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19025:62:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19025:62:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19107:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19118:2:66",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19103:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19103:18:66"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "19123:9:66",
                                "type": "",
                                "value": "rovided"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19096:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19096:37:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19096:37:66"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "19142:27:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19154:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19165:3:66",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "19150:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19150:19:66"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "19142:4:66"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_dba60e7672a8ba45012164833b29f603e092af2efd77e32e392d4624d8c67fab__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "18923:9:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "18937:4:66",
                        "type": ""
                      }
                    ],
                    "src": "18772:403:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "19354:181:66",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19371:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19382:2:66",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19364:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19364:21:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19364:21:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19405:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19416:2:66",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19401:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19401:18:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19421:2:66",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19394:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19394:30:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19394:30:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19444:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19455:2:66",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19440:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19440:18:66"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "19460:33:66",
                                "type": "",
                                "value": "BitcoinRelay: fee is not enough"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19433:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19433:61:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19433:61:66"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "19503:26:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19515:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19526:2:66",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "19511:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19511:18:66"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "19503:4:66"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_e3a4285873e71f3a9aa88e8941c39fcbaa16b43e5af6f7061c0d804cd5187f57__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "19331:9:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "19345:4:66",
                        "type": ""
                      }
                    ],
                    "src": "19180:355:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "19714:181:66",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19731:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19742:2:66",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19724:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19724:21:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19724:21:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19765:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19776:2:66",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19761:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19761:18:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19781:2:66",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19754:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19754:30:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19754:30:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "19804:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "19815:2:66",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "19800:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "19800:18:66"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "19820:33:66",
                                "type": "",
                                "value": "ReentrancyGuard: reentrant call"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "19793:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19793:61:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "19793:61:66"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "19863:26:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "19875:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "19886:2:66",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "19871:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "19871:18:66"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "19863:4:66"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "19691:9:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "19705:4:66",
                        "type": ""
                      }
                    ],
                    "src": "19540:355:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "20009:76:66",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "20019:26:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20031:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20042:2:66",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20027:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20027:18:66"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "20019:4:66"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20061:9:66"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "20072:6:66"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20054:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20054:25:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20054:25:66"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_library_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "19978:9:66",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "19989:6:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "20000:4:66",
                        "type": ""
                      }
                    ],
                    "src": "19900:185:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "20191:76:66",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "20201:26:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20213:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20224:2:66",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20209:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20209:18:66"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "20201:4:66"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20243:9:66"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "20254:6:66"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20236:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20236:25:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20236:25:66"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "20160:9:66",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "20171:6:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "20182:4:66",
                        "type": ""
                      }
                    ],
                    "src": "20090:177:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "20435:209:66",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "20445:26:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20457:9:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "20468:2:66",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20453:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20453:18:66"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "20445:4:66"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "20487:9:66"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "20498:6:66"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20480:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20480:25:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20480:25:66"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "20514:20:66",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "20524:10:66",
                            "type": "",
                            "value": "0xffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "20518:2:66",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20554:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20565:2:66",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20550:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20550:18:66"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "20574:6:66"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "20582:2:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "20570:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20570:15:66"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20543:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20543:43:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20543:43:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "20606:9:66"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "20617:2:66",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "20602:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20602:18:66"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value2",
                                    "nodeType": "YulIdentifier",
                                    "src": "20626:6:66"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "20634:2:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "20622:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20622:15:66"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "20595:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20595:43:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "20595:43:66"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_uint32_t_uint32__to_t_uint256_t_uint256_t_uint256__fromStack_library_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "20388:9:66",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "20399:6:66",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "20407:6:66",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "20415:6:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "20426:4:66",
                        "type": ""
                      }
                    ],
                    "src": "20272:372:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "20697:80:66",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "20724:22:66",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "20726:16:66"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "20726:18:66"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "20726:18:66"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "20713:1:66"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "20720:1:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "20716:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "20716:6:66"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "20710:2:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20710:13:66"
                          },
                          "nodeType": "YulIf",
                          "src": "20707:2:66"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "20755:16:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "20766:1:66"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "20769:1:66"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "20762:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20762:9:66"
                          },
                          "variableNames": [
                            {
                              "name": "sum",
                              "nodeType": "YulIdentifier",
                              "src": "20755:3:66"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_add_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "20680:1:66",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "20683:1:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "sum",
                        "nodeType": "YulTypedName",
                        "src": "20689:3:66",
                        "type": ""
                      }
                    ],
                    "src": "20649:128:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "20828:74:66",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "20851:22:66",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x12",
                                    "nodeType": "YulIdentifier",
                                    "src": "20853:16:66"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "20853:18:66"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "20853:18:66"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "20848:1:66"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "20841:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20841:9:66"
                          },
                          "nodeType": "YulIf",
                          "src": "20838:2:66"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "20882:14:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "20891:1:66"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "20894:1:66"
                              }
                            ],
                            "functionName": {
                              "name": "div",
                              "nodeType": "YulIdentifier",
                              "src": "20887:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "20887:9:66"
                          },
                          "variableNames": [
                            {
                              "name": "r",
                              "nodeType": "YulIdentifier",
                              "src": "20882:1:66"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_div_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "20813:1:66",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "20816:1:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "r",
                        "nodeType": "YulTypedName",
                        "src": "20822:1:66",
                        "type": ""
                      }
                    ],
                    "src": "20782:120:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "20952:162:66",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "20962:36:66",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "20972:26:66",
                            "type": "",
                            "value": "0xffffffffffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "20966:2:66",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "21007:21:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "21022:1:66"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "21025:2:66"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "21018:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21018:10:66"
                          },
                          "variables": [
                            {
                              "name": "y_1",
                              "nodeType": "YulTypedName",
                              "src": "21011:3:66",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "21052:22:66",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x12",
                                    "nodeType": "YulIdentifier",
                                    "src": "21054:16:66"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "21054:18:66"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "21054:18:66"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "y_1",
                                "nodeType": "YulIdentifier",
                                "src": "21047:3:66"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "21040:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21040:11:66"
                          },
                          "nodeType": "YulIf",
                          "src": "21037:2:66"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "21083:25:66",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "x",
                                    "nodeType": "YulIdentifier",
                                    "src": "21096:1:66"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "21099:2:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "21092:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21092:10:66"
                              },
                              {
                                "name": "y_1",
                                "nodeType": "YulIdentifier",
                                "src": "21104:3:66"
                              }
                            ],
                            "functionName": {
                              "name": "div",
                              "nodeType": "YulIdentifier",
                              "src": "21088:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21088:20:66"
                          },
                          "variableNames": [
                            {
                              "name": "r",
                              "nodeType": "YulIdentifier",
                              "src": "21083:1:66"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_div_t_uint96",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "20937:1:66",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "20940:1:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "r",
                        "nodeType": "YulTypedName",
                        "src": "20946:1:66",
                        "type": ""
                      }
                    ],
                    "src": "20907:207:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "21171:116:66",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "21230:22:66",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "21232:16:66"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "21232:18:66"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "21232:18:66"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "x",
                                        "nodeType": "YulIdentifier",
                                        "src": "21202:1:66"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "21195:6:66"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "21195:9:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "21188:6:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21188:17:66"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "21210:1:66"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "21221:1:66",
                                            "type": "",
                                            "value": "0"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "not",
                                          "nodeType": "YulIdentifier",
                                          "src": "21217:3:66"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "21217:6:66"
                                      },
                                      {
                                        "name": "x",
                                        "nodeType": "YulIdentifier",
                                        "src": "21225:1:66"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "div",
                                      "nodeType": "YulIdentifier",
                                      "src": "21213:3:66"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "21213:14:66"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "21207:2:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21207:21:66"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "21184:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21184:45:66"
                          },
                          "nodeType": "YulIf",
                          "src": "21181:2:66"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "21261:20:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "21276:1:66"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "21279:1:66"
                              }
                            ],
                            "functionName": {
                              "name": "mul",
                              "nodeType": "YulIdentifier",
                              "src": "21272:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21272:9:66"
                          },
                          "variableNames": [
                            {
                              "name": "product",
                              "nodeType": "YulIdentifier",
                              "src": "21261:7:66"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_mul_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "21150:1:66",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "21153:1:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "product",
                        "nodeType": "YulTypedName",
                        "src": "21159:7:66",
                        "type": ""
                      }
                    ],
                    "src": "21119:168:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "21341:76:66",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "21363:22:66",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "21365:16:66"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "21365:18:66"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "21365:18:66"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "21357:1:66"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "21360:1:66"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "21354:2:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21354:8:66"
                          },
                          "nodeType": "YulIf",
                          "src": "21351:2:66"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "21394:17:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "21406:1:66"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "21409:1:66"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "21402:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21402:9:66"
                          },
                          "variableNames": [
                            {
                              "name": "diff",
                              "nodeType": "YulIdentifier",
                              "src": "21394:4:66"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_sub_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "21323:1:66",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "21326:1:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "diff",
                        "nodeType": "YulTypedName",
                        "src": "21332:4:66",
                        "type": ""
                      }
                    ],
                    "src": "21292:125:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "21475:205:66",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "21485:10:66",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "21494:1:66",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "21489:1:66",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "21554:63:66",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "21579:3:66"
                                        },
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "21584:1:66"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "21575:3:66"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "21575:11:66"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "src",
                                              "nodeType": "YulIdentifier",
                                              "src": "21598:3:66"
                                            },
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "21603:1:66"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "21594:3:66"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "21594:11:66"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "21588:5:66"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "21588:18:66"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "21568:6:66"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "21568:39:66"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "21568:39:66"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "21515:1:66"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "21518:6:66"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "21512:2:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21512:13:66"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "21526:19:66",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "21528:15:66",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "21537:1:66"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "21540:2:66",
                                      "type": "",
                                      "value": "32"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "21533:3:66"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "21533:10:66"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "21528:1:66"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "21508:3:66",
                            "statements": []
                          },
                          "src": "21504:113:66"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "21643:31:66",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "21656:3:66"
                                        },
                                        {
                                          "name": "length",
                                          "nodeType": "YulIdentifier",
                                          "src": "21661:6:66"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "21652:3:66"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "21652:16:66"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "21670:1:66",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "21645:6:66"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "21645:27:66"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "21645:27:66"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "21632:1:66"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "21635:6:66"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "21629:2:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21629:13:66"
                          },
                          "nodeType": "YulIf",
                          "src": "21626:2:66"
                        }
                      ]
                    },
                    "name": "copy_memory_to_memory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "src",
                        "nodeType": "YulTypedName",
                        "src": "21453:3:66",
                        "type": ""
                      },
                      {
                        "name": "dst",
                        "nodeType": "YulTypedName",
                        "src": "21458:3:66",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "21463:6:66",
                        "type": ""
                      }
                    ],
                    "src": "21422:258:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "21732:89:66",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "21759:22:66",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "21761:16:66"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "21761:18:66"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "21761:18:66"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "21752:5:66"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "21745:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21745:13:66"
                          },
                          "nodeType": "YulIf",
                          "src": "21742:2:66"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "21790:25:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "21801:5:66"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21812:1:66",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "21808:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21808:6:66"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "21797:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21797:18:66"
                          },
                          "variableNames": [
                            {
                              "name": "ret",
                              "nodeType": "YulIdentifier",
                              "src": "21790:3:66"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "decrement_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "21714:5:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "ret",
                        "nodeType": "YulTypedName",
                        "src": "21724:3:66",
                        "type": ""
                      }
                    ],
                    "src": "21685:136:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "21873:88:66",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "21904:22:66",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "21906:16:66"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "21906:18:66"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "21906:18:66"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "21889:5:66"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "21900:1:66",
                                    "type": "",
                                    "value": "0"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "21896:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "21896:6:66"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "21886:2:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21886:17:66"
                          },
                          "nodeType": "YulIf",
                          "src": "21883:2:66"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "21935:20:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "21946:5:66"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "21953:1:66",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "21942:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "21942:13:66"
                          },
                          "variableNames": [
                            {
                              "name": "ret",
                              "nodeType": "YulIdentifier",
                              "src": "21935:3:66"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "increment_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "21855:5:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "ret",
                        "nodeType": "YulTypedName",
                        "src": "21865:3:66",
                        "type": ""
                      }
                    ],
                    "src": "21826:135:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "22004:74:66",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "22027:22:66",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x12",
                                    "nodeType": "YulIdentifier",
                                    "src": "22029:16:66"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "22029:18:66"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "22029:18:66"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "22024:1:66"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "22017:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22017:9:66"
                          },
                          "nodeType": "YulIf",
                          "src": "22014:2:66"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "22058:14:66",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "22067:1:66"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "22070:1:66"
                              }
                            ],
                            "functionName": {
                              "name": "mod",
                              "nodeType": "YulIdentifier",
                              "src": "22063:3:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22063:9:66"
                          },
                          "variableNames": [
                            {
                              "name": "r",
                              "nodeType": "YulIdentifier",
                              "src": "22058:1:66"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "mod_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "21989:1:66",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "21992:1:66",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "r",
                        "nodeType": "YulTypedName",
                        "src": "21998:1:66",
                        "type": ""
                      }
                    ],
                    "src": "21966:112:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "22115:95:66",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22132:1:66",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22139:3:66",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22144:10:66",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "22135:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22135:20:66"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22125:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22125:31:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22125:31:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22172:1:66",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22175:4:66",
                                "type": "",
                                "value": "0x11"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22165:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22165:15:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22165:15:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22196:1:66",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22199:4:66",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "22189:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22189:15:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22189:15:66"
                        }
                      ]
                    },
                    "name": "panic_error_0x11",
                    "nodeType": "YulFunctionDefinition",
                    "src": "22083:127:66"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "22247:95:66",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22264:1:66",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "arguments": [
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22271:3:66",
                                    "type": "",
                                    "value": "224"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "22276:10:66",
                                    "type": "",
                                    "value": "0x4e487b71"
                                  }
                                ],
                                "functionName": {
                                  "name": "shl",
                                  "nodeType": "YulIdentifier",
                                  "src": "22267:3:66"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "22267:20:66"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22257:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22257:31:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22257:31:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22304:1:66",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22307:4:66",
                                "type": "",
                                "value": "0x12"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "22297:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22297:15:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22297:15:66"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22328:1:66",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "22331:4:66",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "22321:6:66"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "22321:15:66"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "22321:15:66"
                        }
                      ]
                    },
                    "name": "panic_error_0x12",
                    "nodeType": "YulFunctionDefinition",
                    "src": "22215:127:66"
                  }
                ]
              },
              "contents": "{\n    { }\n    function abi_decode_bytes_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(arrayPos, arrayPos) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(arrayPos, arrayPos) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(value0, value0) }\n        value0 := value\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(value0, value0) }\n        value0 := value\n    }\n    function abi_decode_tuple_t_bytes29_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, not(16777215)))) { revert(value0, value0) }\n        value0 := value\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_bytes32_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := mload(headStart)\n    }\n    function abi_decode_tuple_t_bytes32t_bytes32t_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(value1, value1) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_bytes32t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_bytes32t_uint256t_bytes_calldata_ptrt_uint256(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(value4, value4) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        if gt(offset, 0xffffffffffffffff) { revert(value4, value4) }\n        let value2_1, value3_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        value4 := calldataload(add(headStart, 96))\n    }\n    function abi_decode_tuple_t_bytes_calldata_ptrt_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(value0, value0) }\n        let value0_1, value1_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(value2, value2) }\n        let value2_1, value3_1 := abi_decode_bytes_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n    }\n    function abi_decode_tuple_t_bytes_calldata_ptrt_bytes_calldata_ptrt_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(value5, value5) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(value5, value5) }\n        let value0_1, value1_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(value5, value5) }\n        let value2_1, value3_1 := abi_decode_bytes_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, _1) { revert(value5, value5) }\n        let value4_1, value5_1 := abi_decode_bytes_calldata(add(headStart, offset_2), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := mload(headStart)\n    }\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint32_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, 0xffffffff))) { revert(value0, value0) }\n        value0 := value\n    }\n    function abi_decode_tuple_t_uint96_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffff))) { revert(value0, value0) }\n        value0 := value\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr_t_bytes1__to_t_bytes_memory_ptr_t_bytes1__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        let end_1 := add(pos, length)\n        mstore(end_1, and(value1, shl(248, 255)))\n        end := add(end_1, 1)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    { end := pos }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_bytes29__to_t_bytes29__fromStack_library_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, not(16777215)))\n    }\n    function abi_encode_tuple_t_bytes29_t_bytes32__to_t_bytes29_t_bytes32__fromStack_library_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, not(16777215)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_bytes29_t_rational_0_by_1__to_t_bytes29_t_uint256__fromStack_library_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, not(16777215)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_bytes29_t_uint256__to_t_bytes29_t_uint256__fromStack_library_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, not(16777215)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes29_t_uint256__to_t_bytes32_t_bytes32_t_bytes29_t_uint256__fromStack_library_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), and(value2, not(16777215)))\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_uint256_t_uint256__to_t_bytes32_t_bytes32_t_uint256_t_uint256__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_encode_tuple_t_bytes_memory_ptr_t_rational_0_by_1__to_t_bytes_memory_ptr_t_uint40__fromStack_library_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 64)\n        let length := mload(value0)\n        mstore(add(headStart, 64), length)\n        copy_memory_to_memory(add(value0, 0x20), add(headStart, 96), length)\n        tail := add(add(headStart, and(add(length, 31), not(31))), 96)\n        mstore(add(headStart, 0x20), and(value1, 0xffffffffff))\n    }\n    function abi_encode_tuple_t_stringliteral_057876433a104625d9c7398fec2b04f5b11dbcea3b77309a5d622ff9cc5360d7__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 50)\n        mstore(add(headStart, 64), \"BitcoinRelay: unexpected retarge\")\n        mstore(add(headStart, 96), \"t on external call\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_0d1d997348c4b502650619e51f7d09f80514d98b6993be5051d07f703984619a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 20)\n        mstore(add(headStart, 64), \"Pausable: not paused\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_1ea5bd3ba43bd90954a4a0a677f07e70fb7b3eac3e42723087b4f239b84d3017__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"BitcoinRelay: header work is ins\")\n        mstore(add(headStart, 96), \"ufficient\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_226615151c7680c368b87f11c3f8de1ceed8b741dbd254a9c9e392ac4ef8edbd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 53)\n        mstore(add(headStart, 64), \"BitcoinRelay: period header diff\")\n        mstore(add(headStart, 96), \"iculties do not match\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_247c7797cfd868f3355ad4c61d58bd0044ff1b4ab602a4d76ac6b7e73fb69e90__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 75)\n        mstore(add(headStart, 64), \"BitcoinRelay: must provide the l\")\n        mstore(add(headStart, 96), \"ast header of the closing diffic\")\n        mstore(add(headStart, 128), \"ulty period\")\n        tail := add(headStart, 160)\n    }\n    function abi_encode_tuple_t_stringliteral_2fe269f479def214aa4213fc5a3676b42da06f3fe6bec66494b82d7cb74589b0__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 13)\n        mstore(add(headStart, 64), \"Unknown block\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_3d0f758605ac6cabc7556a2381412ba051abd8477ed0592b5b6139e8cb4309eb__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 44)\n        mstore(add(headStart, 64), \"BitcoinRelay: getting fee was no\")\n        mstore(add(headStart, 96), \"t successful\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_4314b2aee5118432a5f642250e9a21bc5ae206cd6f247b3aef77c6839d4b1cda__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 41)\n        mstore(add(headStart, 64), \"BitcoinRelay: target changed une\")\n        mstore(add(headStart, 96), \"xpectedly\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_51303d8405eacb9f5dcbb4c5e97b6c467560d3a1e7fb907b5404cc586951dca6__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 54)\n        mstore(add(headStart, 64), \"BitcoinRelay: must provide exact\")\n        mstore(add(headStart, 96), \"ly 1 difficulty period\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 58)\n        mstore(add(headStart, 64), \"Address: unable to send value, r\")\n        mstore(add(headStart, 96), \"ecipient may have reverted\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_554e17981ef1d6140cc68053ac1cbf7a57f87160773150e0e00ea4fb501026fe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"BitcoinRelay: block header is to\")\n        mstore(add(headStart, 96), \"o old\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: insufficient balance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_5687bb3cd933474b9e95ae89bdedcbaa9658a14bb150f2de93d86da8c254f875__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 52)\n        mstore(add(headStart, 64), \"BitcoinRelay: headers do not for\")\n        mstore(add(headStart, 96), \"m a consistent chain\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_63f576ea76fd609c6c47b2af6b474e6f61dd85d38848a4b21100459d466a96c0__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 75)\n        mstore(add(headStart, 64), \"BitcoinRelay: headers should be \")\n        mstore(add(headStart, 96), \"submitted by calling addHeadersW\")\n        mstore(add(headStart, 128), \"ithRetarget\")\n        tail := add(headStart, 160)\n    }\n    function abi_encode_tuple_t_stringliteral_67c8848024e0d680fc69ba955d4d731f00b5476a93675c6a908cc2e33e3a8bfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"BitcoinRelay: tx has not been in\")\n        mstore(add(headStart, 96), \"cluded\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_68571e1369f7a6dcdcd736cb0343b35a58ed0f64d245c2ed839c98d412744f8a__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 16)\n        mstore(add(headStart, 64), \"Pausable: paused\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_98c88a3a2e2ea050c459a58accfe5dbe135937f9c325a6ecacd4c1684018142b__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 37)\n        mstore(add(headStart, 64), \"BitcoinRelay: anchor must be 80 \")\n        mstore(add(headStart, 96), \"bytes\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_a67d010ecbf9f5cc5ed6651b34ab851cf4cb49ceab4518d874ffbddca2159e59__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 30)\n        mstore(add(headStart, 64), \"BitcoinRelay: unknown ancestor\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_a73c04f946d071f66021cc2b3937ffab836b95a032413b4efd23e71d861837f4__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 60)\n        mstore(add(headStart, 64), \"BitcoinRelay: bad args. Check he\")\n        mstore(add(headStart, 96), \"ader and array byte lengths.\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_d754302f3c3b05f09eb8c095a5df08788c928440e5f72594a215cea4541be415__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 57)\n        mstore(add(headStart, 64), \"BitcoinRelay: header array lengt\")\n        mstore(add(headStart, 96), \"h must be divisible by 80\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_dba60e7672a8ba45012164833b29f603e092af2efd77e32e392d4624d8c67fab__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 39)\n        mstore(add(headStart, 64), \"BitcoinRelay: invalid retarget p\")\n        mstore(add(headStart, 96), \"rovided\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_e3a4285873e71f3a9aa88e8941c39fcbaa16b43e5af6f7061c0d804cd5187f57__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"BitcoinRelay: fee is not enough\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ReentrancyGuard: reentrant call\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_library_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint256_t_uint32_t_uint32__to_t_uint256_t_uint256_t_uint256__fromStack_library_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        let _1 := 0xffffffff\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, _1))\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := div(x, y)\n    }\n    function checked_div_t_uint96(x, y) -> r\n    {\n        let _1 := 0xffffffffffffffffffffffff\n        let y_1 := and(y, _1)\n        if iszero(y_1) { panic_error_0x12() }\n        r := div(and(x, _1), y_1)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(not(0), x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function decrement_t_uint256(value) -> ret\n    {\n        if iszero(value) { panic_error_0x11() }\n        ret := add(value, not(0))\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function mod_t_uint256(x, y) -> r\n    {\n        if iszero(y) { panic_error_0x12() }\n        r := mod(x, y)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n}",
              "id": 66,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "immutableReferences": {},
          "linkReferences": {
            "contracts/libraries/TypedMemView.sol": {
              "TypedMemView": [
                {
                  "length": 20,
                  "start": 1897
                },
                {
                  "length": 20,
                  "start": 2988
                },
                {
                  "length": 20,
                  "start": 3319
                },
                {
                  "length": 20,
                  "start": 3599
                },
                {
                  "length": 20,
                  "start": 3854
                },
                {
                  "length": 20,
                  "start": 4299
                },
                {
                  "length": 20,
                  "start": 4630
                },
                {
                  "length": 20,
                  "start": 4961
                },
                {
                  "length": 20,
                  "start": 5241
                },
                {
                  "length": 20,
                  "start": 5389
                },
                {
                  "length": 20,
                  "start": 5537
                },
                {
                  "length": 20,
                  "start": 7242
                },
                {
                  "length": 20,
                  "start": 7951
                },
                {
                  "length": 20,
                  "start": 8290
                },
                {
                  "length": 20,
                  "start": 9151
                },
                {
                  "length": 20,
                  "start": 9609
                },
                {
                  "length": 20,
                  "start": 9765
                },
                {
                  "length": 20,
                  "start": 12047
                }
              ]
            },
            "contracts/libraries/ViewBTC.sol": {
              "ViewBTC": [
                {
                  "length": 20,
                  "start": 2034
                },
                {
                  "length": 20,
                  "start": 3125
                },
                {
                  "length": 20,
                  "start": 3456
                },
                {
                  "length": 20,
                  "start": 4436
                },
                {
                  "length": 20,
                  "start": 4767
                },
                {
                  "length": 20,
                  "start": 5098
                },
                {
                  "length": 20,
                  "start": 7402
                },
                {
                  "length": 20,
                  "start": 7545
                },
                {
                  "length": 20,
                  "start": 7696
                },
                {
                  "length": 20,
                  "start": 8121
                },
                {
                  "length": 20,
                  "start": 8591
                },
                {
                  "length": 20,
                  "start": 10099
                },
                {
                  "length": 20,
                  "start": 10240
                },
                {
                  "length": 20,
                  "start": 10491
                },
                {
                  "length": 20,
                  "start": 10640
                },
                {
                  "length": 20,
                  "start": 10787
                },
                {
                  "length": 20,
                  "start": 10930
                },
                {
                  "length": 20,
                  "start": 11073
                },
                {
                  "length": 20,
                  "start": 12190
                },
                {
                  "length": 20,
                  "start": 12336
                }
              ]
            },
            "contracts/libraries/ViewSPV.sol": {
              "ViewSPV": [
                {
                  "length": 20,
                  "start": 2223
                },
                {
                  "length": 20,
                  "start": 8830
                }
              ]
            }
          },
          "object": "60806040526004361061021a5760003560e01c8063882a5ee011610123578063b9bbd9bd116100ab578063e2761af01161006f578063e2761af0146105b9578063efbc7be4146105cf578063f2fde38b146105e5578063fa041af514610605578063fd9c6e851461061b5761021a565b8063b9bbd9bd1461052e578063b9e88ac11461054e578063c20dc6641461056e578063c781452914610584578063d0a89739146105995761021a565b80639f156414116100f25780639f156414146104a2578063a072bc50146104b8578063a3db54eb146104ce578063b36161bd146104ee578063b985621a1461050e5761021a565b8063882a5ee0146104225780638da5cb5b14610437578063901186bb14610455578063926d44e2146104755761021a565b80635b732892116101a65780636594168311610175578063659416831461039757806365da41b9146103b7578063665b634f146103d7578063715018a6146103ed5780637fa637fc146104025761021a565b80635b732892146103365780635b88a0e51461034c5780635c975abb1461035f57806360b5c390146103775761021a565b806330017b3b116101ed57806330017b3b146102a65780634354da25146102c6578063465e7559146102e957806354eea7961461030057806357d775f8146103205761021a565b8063108f438d1461021f578063113764be1461025c5780632b97be241461027b5780632f796d9014610290575b600080fd5b34801561022b57600080fd5b50600d5461023f906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561026857600080fd5b50600a545b604051908152602001610253565b34801561028757600080fd5b50600b5461026d565b34801561029c57600080fd5b5061026d60045481565b3480156102b257600080fd5b5061026d6102c13660046138fb565b610631565b6102d96102d436600461391c565b610646565b6040519015158152602001610253565b3480156102f557600080fd5b506102fe610a71565b005b34801561030c57600080fd5b506102fe61031b3660046138a0565b610aa5565b34801561032c57600080fd5b5061026d60105481565b34801561034257600080fd5b5061026d60125481565b34801561035857600080fd5b504761026d565b34801561036b57600080fd5b5060025460ff166102d9565b34801561038357600080fd5b5061026d6103923660046138a0565b610ad4565b3480156103a357600080fd5b506102fe6103b23660046138a0565b610ae7565b3480156103c357600080fd5b506102d96103d2366004613975565b610b16565b3480156103e357600080fd5b5061026d600e5481565b3480156103f957600080fd5b506102fe611001565b34801561040e57600080fd5b506102d961041d3660046139de565b611035565b34801561042e57600080fd5b5061026d6116ae565b34801561044357600080fd5b506000546001600160a01b031661023f565b34801561046157600080fd5b506102fe6104703660046138a0565b61172f565b34801561048157600080fd5b5061026d6104903660046138a0565b60009081526009602052604090205490565b3480156104ae57600080fd5b5061026d60115481565b3480156104c457600080fd5b5061026d60055481565b3480156104da57600080fd5b506102fe6104e93660046138a0565b61175e565b3480156104fa57600080fd5b506102fe6105093660046138a0565b61178d565b34801561051a57600080fd5b506102d96105293660046138d0565b6117bc565b34801561053a57600080fd5b5061026d6105493660046138fb565b6117d3565b34801561055a57600080fd5b506102fe6105693660046138a0565b61181d565b34801561057a57600080fd5b5061026d600f5481565b34801561059057600080fd5b506102fe61184c565b3480156105a557600080fd5b5061026d6105b43660046138fb565b61187e565b3480156105c557600080fd5b5061026d60035481565b3480156105db57600080fd5b5061026d60065481565b3480156105f157600080fd5b506102fe610600366004613835565b61190b565b34801561061157600080fd5b5061026d60135481565b34801561062757600080fd5b5061026d600c5481565b600061063d83836119a6565b90505b92915050565b6000600260015414156106745760405162461bcd60e51b815260040161066b90613bfb565b60405180910390fd5b600260015561068560025460ff1690565b156106a25760405162461bcd60e51b815260040161066b90613b9c565b6004546106b0906001613c32565b6106bb866006613c32565b1015610a605760005b600086815260096020526040902054811015610a08576000868152600960205260408120805461072491908490811061070d57634e487b7160e01b600052603260045260246000fd5b906000526020600020906005020160020154611a24565b9050600086868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052506040516334fcca5360e11b815273__$23851852cf97a1ff2525b5bae2bad8f731$__956369f994a6955061079394509250600401613b15565b60206040518083038186803b1580156107ab57600080fd5b505af41580156107bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e3919061387c565b6040516322a24af360e11b815273__$0502a3cf6a2bcad1c419a18d02ea8187d1$__9163454495e69161081f9162ffffff191690600401613aee565b60206040518083038186803b15801561083757600080fd5b505af415801561084b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086f919061387c565b9050600061087c8a611a24565b60405163aa65716d60e01b8152600481018290526024810185905262ffffff19841660448201526064810188905290915073__$78b81d5f8d9acd1db1c57025247ed4730f$__9063aa65716d9060840160206040518083038186803b1580156108e457600080fd5b505af41580156108f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091c919061385c565b156109f2576000898152600960205260409020805461096b91908690811061095457634e487b7160e01b600052603260045260246000fd5b906000526020600020906005020160040154611aa4565b6109cc5760405162461bcd60e51b815260206004820152602c60248201527f426974636f696e52656c61793a2067657474696e672066656520776173206e6f60448201526b1d081cdd58d8d95cdcd99d5b60a21b606482015260840161066b565b6001601260008282546109df9190613c32565b9091555060019550610a64945050505050565b5050508080610a0090613d01565b9150506106c4565b5060405162461bcd60e51b815260206004820152602660248201527f426974636f696e52656c61793a20747820686173206e6f74206265656e20696e60448201526518db1d59195960d21b606482015260840161066b565b5060005b6001805595945050505050565b6000546001600160a01b03163314610a9b5760405162461bcd60e51b815260040161066b90613bc6565b610aa3611b61565b565b6000546001600160a01b03163314610acf5760405162461bcd60e51b815260040161066b90613bc6565b601055565b6000610adf82611bd6565b90505b919050565b6000546001600160a01b03163314610b115760405162461bcd60e51b815260040161066b90613bc6565b601355565b600060026001541415610b3b5760405162461bcd60e51b815260040161066b90613bfb565b6002600155610b4c60025460ff1690565b15610b695760405162461bcd60e51b815260040161066b90613b9c565b600083838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052506040516334fcca5360e11b815273__$23851852cf97a1ff2525b5bae2bad8f731$__956369f994a69550610bd694509250600401613b15565b60206040518083038186803b158015610bee57600080fd5b505af4158015610c02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c26919061387c565b604051632953639960e21b815273__$0502a3cf6a2bcad1c419a18d02ea8187d1$__9163a54d8e6491610c629162ffffff191690600401613aee565b60206040518083038186803b158015610c7a57600080fd5b505af4158015610c8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb2919061387c565b9050600086868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052506040516334fcca5360e11b815273__$23851852cf97a1ff2525b5bae2bad8f731$__956369f994a69550610d2194509250600401613b15565b60206040518083038186803b158015610d3957600080fd5b505af4158015610d4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d71919061387c565b6040516309dafd2160e31b815273__$0502a3cf6a2bcad1c419a18d02ea8187d1$__91634ed7e90891610dad9162ffffff191690600401613aee565b60206040518083038186803b158015610dc557600080fd5b505af4158015610dd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dfd919061387c565b604051632c9c3b9f60e11b815290915073__$23851852cf97a1ff2525b5bae2bad8f731$__90635938773e90610e3d9062ffffff19861690600401613aee565b60206040518083038186803b158015610e5557600080fd5b505af4158015610e69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8d919061385c565b610eff5760405162461bcd60e51b815260206004820152603960248201527f426974636f696e52656c61793a20686561646572206172726179206c656e677460448201527f68206d75737420626520646976697369626c6520627920383000000000000000606482015260840161066b565b604051632c9c3b9f60e11b815273__$23851852cf97a1ff2525b5bae2bad8f731$__90635938773e90610f3c9062ffffff19851690600401613aee565b60206040518083038186803b158015610f5457600080fd5b505af4158015610f68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8c919061385c565b610fe65760405162461bcd60e51b815260206004820152602560248201527f426974636f696e52656c61793a20616e63686f72206d75737420626520383020604482015264627974657360d81b606482015260840161066b565b610ff281836000611c36565b60018055979650505050505050565b6000546001600160a01b0316331461102b5760405162461bcd60e51b815260040161066b90613bc6565b610aa36000612521565b60006002600154141561105a5760405162461bcd60e51b815260040161066b90613bfb565b600260015561106b60025460ff1690565b156110885760405162461bcd60e51b815260040161066b90613b9c565b600087878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052506040516334fcca5360e11b815273__$23851852cf97a1ff2525b5bae2bad8f731$__956369f994a695506110f594509250600401613b15565b60206040518083038186803b15801561110d57600080fd5b505af4158015611121573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611145919061387c565b6040516309dafd2160e31b815273__$0502a3cf6a2bcad1c419a18d02ea8187d1$__91634ed7e908916111819162ffffff191690600401613aee565b60206040518083038186803b15801561119957600080fd5b505af41580156111ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d1919061387c565b9050600086868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052506040516334fcca5360e11b815273__$23851852cf97a1ff2525b5bae2bad8f731$__956369f994a6955061124094509250600401613b15565b60206040518083038186803b15801561125857600080fd5b505af415801561126c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611290919061387c565b6040516309dafd2160e31b815273__$0502a3cf6a2bcad1c419a18d02ea8187d1$__91634ed7e908916112cc9162ffffff191690600401613aee565b60206040518083038186803b1580156112e457600080fd5b505af41580156112f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131c919061387c565b9050600085858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052506040516334fcca5360e11b815273__$23851852cf97a1ff2525b5bae2bad8f731$__956369f994a6955061138b94509250600401613b15565b60206040518083038186803b1580156113a357600080fd5b505af41580156113b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113db919061387c565b604051632953639960e21b815273__$0502a3cf6a2bcad1c419a18d02ea8187d1$__9163a54d8e64916114179162ffffff191690600401613aee565b60206040518083038186803b15801561142f57600080fd5b505af4158015611443573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611467919061387c565b604051632c9c3b9f60e11b815290915073__$23851852cf97a1ff2525b5bae2bad8f731$__90635938773e906114a79062ffffff19871690600401613aee565b60206040518083038186803b1580156114bf57600080fd5b505af41580156114d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f7919061385c565b801561158b5750604051632c9c3b9f60e11b815273__$23851852cf97a1ff2525b5bae2bad8f731$__90635938773e9061153b9062ffffff19861690600401613aee565b60206040518083038186803b15801561155357600080fd5b505af4158015611567573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061158b919061385c565b801561161f5750604051632c9c3b9f60e11b815273__$23851852cf97a1ff2525b5bae2bad8f731$__90635938773e906115cf9062ffffff19851690600401613aee565b60206040518083038186803b1580156115e757600080fd5b505af41580156115fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161f919061385c565b6116915760405162461bcd60e51b815260206004820152603c60248201527f426974636f696e52656c61793a2062616420617267732e20436865636b20686560448201527f6164657220616e642061727261792062797465206c656e677468732e00000000606482015260840161066b565b61169c838383612571565b600180559a9950505050505050505050565b600d546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156116f257600080fd5b505afa158015611706573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061172a91906138b8565b905090565b6000546001600160a01b031633146117595760405162461bcd60e51b815260040161066b90613bc6565b600e55565b6000546001600160a01b031633146117885760405162461bcd60e51b815260040161066b90613bc6565b600f55565b6000546001600160a01b031633146117b75760405162461bcd60e51b815260040161066b90613bc6565b600555565b60006117c9848484612cc5565b90505b9392505050565b6000828152600960205260408120805461063d91908490811061180657634e487b7160e01b600052603260045260246000fd5b906000526020600020906005020160000154611a24565b6000546001600160a01b031633146118475760405162461bcd60e51b815260040161066b90613bc6565b600c55565b6000546001600160a01b031633146118765760405162461bcd60e51b815260040161066b90613bc6565b610aa3612d14565b6000601154606461188f9190613c84565b601054600e546118a0906001613c32565b60008681526009602052604090208054869081106118ce57634e487b7160e01b600052603260045260246000fd5b906000526020600020906005020160040154600f546118ed9190613c84565b6118f79190613c84565b6119019190613c84565b61063d9190613c4a565b6000546001600160a01b031633146119355760405162461bcd60e51b815260040161066b90613bc6565b6001600160a01b03811661199a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161066b565b6119a381612521565b50565b600082815b838110156119d6576000918252600760205260409091205490806119ce81613d01565b9150506119ab565b508061063d5760405162461bcd60e51b815260206004820152601e60248201527f426974636f696e52656c61793a20756e6b6e6f776e20616e636573746f720000604482015260640161066b565b6000606081805b6020811015611a98578285611a4183601f613ca3565b60208110611a5f57634e487b7160e01b600052603260045260246000fd5b1a60f81b604051602001611a74929190613abf565b60405160208183030381529060405292508080611a9090613d01565b915050611a2b565b50506020015192915050565b6000806011546064611ab69190613c84565b601054600e54611ac7906001613c32565b85600f54611ad59190613c84565b611adf9190613c84565b611ae99190613c84565b611af39190613c4a565b905080341015611b455760405162461bcd60e51b815260206004820152601f60248201527f426974636f696e52656c61793a20666565206973206e6f7420656e6f75676800604482015260640161066b565b611b5833611b538334613ca3565b612d8e565b50600192915050565b60025460ff1615611b845760405162461bcd60e51b815260040161066b90613b9c565b6002805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611bb93390565b6040516001600160a01b03909116815260200160405180910390a1565b600081815260086020526040812054611c215760405162461bcd60e51b815260206004820152600d60248201526c556e6b6e6f776e20626c6f636b60981b604482015260640161066b565b50600081815260086020526040902054610ae2565b6040516307f6f12360e21b8152600090819073__$23851852cf97a1ff2525b5bae2bad8f731$__90631fdbc48c90611c789062ffffff19891690600401613aee565b60206040518083038186803b158015611c9057600080fd5b505af4158015611ca4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cc891906138b8565b90506000611cd582611bd6565b60405163df90556160e01b815290915060009073__$0502a3cf6a2bcad1c419a18d02ea8187d1$__9063df90556190611d1a9062ffffff198a16908590600401613aff565b60206040518083038186803b158015611d3257600080fd5b505af4158015611d46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d6a919061387c565b6040516362ef7dad60e01b815273__$0502a3cf6a2bcad1c419a18d02ea8187d1$__916362ef7dad91611da69162ffffff191690600401613aee565b60206040518083038186803b158015611dbe57600080fd5b505af4158015611dd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611df691906138b8565b90508480611e9057506040516362ef7dad60e01b8152819073__$0502a3cf6a2bcad1c419a18d02ea8187d1$__906362ef7dad90611e3e9062ffffff198c1690600401613aee565b60206040518083038186803b158015611e5657600080fd5b505af4158015611e6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e8e91906138b8565b145b611ef75760405162461bcd60e51b815260206004820152603260248201527f426974636f696e52656c61793a20756e657870656374656420726574617267656044820152711d081bdb88195e1d195c9b985b0818d85b1b60721b606482015260840161066b565b60008060005b604051639cb855cb60e01b815260509073__$23851852cf97a1ff2525b5bae2bad8f731$__90639cb855cb90611f3d9062ffffff198e1690600401613aee565b60206040518083038186803b158015611f5557600080fd5b505af4158015611f69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f8d9190613a98565b611f979190613c5e565b6001600160601b03168110156125115760405163df90556160e01b815260009073__$0502a3cf6a2bcad1c419a18d02ea8187d1$__9063df90556190611fe99062ffffff198e16908690600401613aff565b60206040518083038186803b15801561200157600080fd5b505af4158015612015573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612039919061387c565b90506120458287613c32565b612050906001613c32565b6040516307f6f12360e21b815290945073__$23851852cf97a1ff2525b5bae2bad8f731$__90631fdbc48c906120909062ffffff19851690600401613aee565b60206040518083038186803b1580156120a857600080fd5b505af41580156120bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120e091906138b8565b925088806120f857506120f56107e085613d1c565b15155b61217e5760405162461bcd60e51b815260206004820152604b60248201527f426974636f696e52656c61793a20686561646572732073686f756c642062652060448201527f7375626d69747465642062792063616c6c696e6720616464486561646572735760648201526a1a5d1a14995d185c99d95d60aa1b608482015260a40161066b565b6040516362ef7dad60e01b8152859073__$0502a3cf6a2bcad1c419a18d02ea8187d1$__906362ef7dad906121bd9062ffffff19861690600401613aee565b60206040518083038186803b1580156121d557600080fd5b505af41580156121e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061220d91906138b8565b1461226c5760405162461bcd60e51b815260206004820152602960248201527f426974636f696e52656c61793a20746172676574206368616e67656420756e65604482015268787065637465646c7960b81b606482015260840161066b565b6040516001620c742360e01b0319815273__$78b81d5f8d9acd1db1c57025247ed4730f$__9063fff38bdd906122ae9062ffffff198516908b90600401613aff565b60206040518083038186803b1580156122c657600080fd5b505af41580156122da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122fe919061385c565b6123675760405162461bcd60e51b815260206004820152603460248201527f426974636f696e52656c61793a206865616465727320646f206e6f7420666f726044820152733690309031b7b739b4b9ba32b73a1031b430b4b760611b606482015260840161066b565b6004546005546123779086613c32565b116123945760405162461bcd60e51b815260040161066b90613b57565b6000838152600760205260409020546124fa576040516340bec88f60e01b815260048101849052859073__$23851852cf97a1ff2525b5bae2bad8f731$__906340bec88f9060240160206040518083038186803b1580156123f457600080fd5b505af4158015612408573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061242c91906138b8565b111561248c5760405162461bcd60e51b815260206004820152602960248201527f426974636f696e52656c61793a2068656164657220776f726b20697320696e736044820152681d59999a58da595b9d60ba1b606482015260840161066b565b60008381526007602090815260408083208a9055600890915290208490556124b48185612eac565b336001600160a01b031687857ffb8fff3e2daa665d496373ced291b62aba4162f24632a1597e286621016e9a1f866040516124f191815260200190565b60405180910390a45b82965050808061250990613d01565b915050611efd565b5060019998505050505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516307f6f12360e21b8152600090819061260c9073__$23851852cf97a1ff2525b5bae2bad8f731$__90631fdbc48c906125b79062ffffff198a1690600401613aee565b60206040518083038186803b1580156125cf57600080fd5b505af41580156125e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061260791906138b8565b611bd6565b6040516307f6f12360e21b81529091506000906126539073__$23851852cf97a1ff2525b5bae2bad8f731$__90631fdbc48c906125b79062ffffff198a1690600401613aee565b90506126616107e082613d1c565b6107df146126eb5760405162461bcd60e51b815260206004820152604b60248201527f426974636f696e52656c61793a206d7573742070726f7669646520746865206c60448201527f61737420686561646572206f662074686520636c6f73696e672064696666696360648201526a1d5b1d1e481c195c9a5bd960aa1b608482015260a40161066b565b6126f7826107df613c32565b81146127645760405162461bcd60e51b815260206004820152603660248201527f426974636f696e52656c61793a206d7573742070726f766964652065786163746044820152751b1e480c48191a59999a58dd5b1d1e481c195c9a5bd960521b606482015260840161066b565b60405163cddb450760e01b815273__$0502a3cf6a2bcad1c419a18d02ea8187d1$__9063cddb4507906127a19062ffffff19891690600401613aee565b60206040518083038186803b1580156127b957600080fd5b505af41580156127cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127f191906138b8565b60405163cddb450760e01b815273__$0502a3cf6a2bcad1c419a18d02ea8187d1$__9063cddb45079061282e9062ffffff198b1690600401613aee565b60206040518083038186803b15801561284657600080fd5b505af415801561285a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061287e91906138b8565b146128e95760405162461bcd60e51b815260206004820152603560248201527f426974636f696e52656c61793a20706572696f642068656164657220646966666044820152740d2c6ead8e8d2cae640c8de40dcdee840dac2e8c6d605b1b606482015260840161066b565b60405163df90556160e01b815260009073__$0502a3cf6a2bcad1c419a18d02ea8187d1$__9063df9055619061292b9062ffffff198916908590600401613aff565b60206040518083038186803b15801561294357600080fd5b505af4158015612957573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061297b919061387c565b6040516362ef7dad60e01b815290915060009073__$0502a3cf6a2bcad1c419a18d02ea8187d1$__906362ef7dad906129be9062ffffff19861690600401613aee565b60206040518083038186803b1580156129d657600080fd5b505af41580156129ea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a0e91906138b8565b6040516362ef7dad60e01b815290915060009073__$0502a3cf6a2bcad1c419a18d02ea8187d1$__9063b25912329082906362ef7dad90612a599062ffffff198f1690600401613aee565b60206040518083038186803b158015612a7157600080fd5b505af4158015612a85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aa991906138b8565b8b62ffffff191673__$0502a3cf6a2bcad1c419a18d02ea8187d1$__63f172b06090916040518263ffffffff1660e01b8152600401612ae89190613aee565b60206040518083038186803b158015612b0057600080fd5b505af4158015612b14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b389190613a74565b8b62ffffff191673__$0502a3cf6a2bcad1c419a18d02ea8187d1$__63f172b06090916040518263ffffffff1660e01b8152600401612b779190613aee565b60206040518083038186803b158015612b8f57600080fd5b505af4158015612ba3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bc79190613a74565b6040516001600160e01b031960e086901b168152600481019390935263ffffffff918216602484015216604482015260640160206040518083038186803b158015612c1157600080fd5b505af4158015612c25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c4991906138b8565b90508181831614612cac5760405162461bcd60e51b815260206004820152602760248201527f426974636f696e52656c61793a20696e76616c696420726574617267657420706044820152661c9bdd9a59195960ca1b606482015260840161066b565b612cb888886001611c36565b9998505050505050505050565b600082815b83811015612d085785821415612ce5576001925050506117cc565b600091825260076020526040909120549080612d0081613d01565b915050612cca565b50600095945050505050565b60025460ff16612d5d5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161066b565b6002805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33611bb9565b80471015612dde5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161066b565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612e2b576040519150601f19603f3d011682016040523d82523d6000602084013e612e30565b606091505b5050905080612ea75760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161066b565b505050565b600454600554612ebc9083613c32565b11612ed95760405162461bcd60e51b815260040161066b90613b57565b6040805160a08101825260008082526020820181905281830181905260608201819052608082015290516307f6f12360e21b815273__$23851852cf97a1ff2525b5bae2bad8f731$__90631fdbc48c90612f3d9062ffffff19871690600401613aee565b60206040518083038186803b158015612f5557600080fd5b505af4158015612f69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f8d91906138b8565b815260405163383ef31360e11b815273__$0502a3cf6a2bcad1c419a18d02ea8187d1$__9063707de62690612fcc9062ffffff19871690600401613aee565b60206040518083038186803b158015612fe457600080fd5b505af4158015612ff8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061301c91906138b8565b6020820152604051634edfc3d560e11b815273__$0502a3cf6a2bcad1c419a18d02ea8187d1$__90639dbf87aa9061305e9062ffffff19871690600401613aee565b60206040518083038186803b15801561307657600080fd5b505af415801561308a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130ae91906138b8565b604082810191825233606084019081523a60808501908152600086815260096020908152938120805460018082018355918352918590208751600590930201918255938601519381019390935592516002830155516003820180546001600160a01b0319166001600160a01b03909216919091179055905160049182015554821115612ea7576001600460008282546131479190613c32565b90915550613155905061315d565b612ea7613461565b6005546003546004546131709190613ca3565b10610aa35760055460045460005b82156131ff5760008281526009602052604081208054839081106131b257634e487b7160e01b600052603260045260246000fd5b90600052602060002090600502016001015490506131dc816001856131d79190613ca3565b613496565b9150836131e881613cea565b94505082806131f690613cea565b9350505061317e565b600082815260096020526040902080548290811061322d57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600502016009600084815260200190815260200160002060008154811061326e57634e487b7160e01b600052603260045260246000fd5b600091825260208083208454600590930201918255600180850154818401556002808601549084015560038086015490840180546001600160a01b0319166001600160a01b039092169190911790556004948501549490920193909355848252600990925260409020541115612ea7576132e78261351a565b60008281526009602052604081208054829161333b91839061331957634e487b7160e01b600052603260045260246000fd5b60009182526020909120600360059092020101546001600160a01b03166135b2565b60008681526009602052604081208054939550919350909161336d57634e487b7160e01b600052603260045260246000fd5b600091825260208083206003600590930201919091015486835260099091526040822080546001600160a01b039092169287927f4fec6ffa2052e80db9daadc2384a8f634057472e28ea7f1bd3eebfc92b5b0f8e9291906133de57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060050201600001546009600089815260200190815260200160002060008154811061342357634e487b7160e01b600052603260045260246000fd5b600091825260209182902060016005909202010154604080519384529183015281018690526060810185905260800160405180910390a35050505050565b6010546004546134719190613d1c565b610aa357601354601254106134885760125461348c565b6013545b6011556000601255565b6000805b6000838152600960205260409020548110156135105760008381526009602052604090208054829081106134de57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060050201600001548414156134fe579050610640565b8061350881613d01565b91505061349a565b5060009392505050565b60015b6000828152600960205260409020548110156135ae57600082815260096020526040902080548290811061356157634e487b7160e01b600052603260045260246000fd5b6000918252602082206005909102018181556001808201839055600282018390556003820180546001600160a01b03191690556004909101919091556135a79082613c32565b905061351d565b5050565b60008060006064600e5460016135c89190613c32565b3a600f546135d69190613c84565b6135e09190613c84565b6135ea9190613c4a565b600d549091506000906001600160a01b03161561368357600d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561364457600080fd5b505afa158015613658573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061367c91906138b8565b9050613687565b5060005b600081600c541115801561369d57506000600c54115b1561372e57600d54600c5460405163a9059cbb60e01b81526001600160a01b038981166004830152602482019290925291169063a9059cbb90604401602060405180830381600087803b1580156136f357600080fd5b505af1158015613707573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061372b919061385c565b90505b6000834711801561373f5750600084115b15613798576040516001600160a01b038816908590600081818185875af1925050503d806000811461378d576040519150601f19603f3d011682016040523d82523d6000602084013e613792565b606091505b50909150505b80156137c55781156137b55783600c5495509550505050506137e9565b83600095509550505050506137e9565b81156137dd576000600c5495509550505050506137e9565b60008095509550505050505b915091565b60008083601f8401126137ff578182fd5b50813567ffffffffffffffff811115613816578182fd5b60208301915083602082850101111561382e57600080fd5b9250929050565b600060208284031215613846578081fd5b81356001600160a01b038116811461063d578182fd5b60006020828403121561386d578081fd5b8151801515811461063d578182fd5b60006020828403121561388d578081fd5b815162ffffff198116811461063d578182fd5b6000602082840312156138b1578081fd5b5035919050565b6000602082840312156138c9578081fd5b5051919050565b6000806000606084860312156138e4578182fd5b505081359360208301359350604090920135919050565b6000806040838503121561390d578182fd5b50508035926020909101359150565b600080600080600060808688031215613933578081fd5b8535945060208601359350604086013567ffffffffffffffff811115613957578182fd5b613963888289016137ee565b96999598509660600135949350505050565b6000806000806040858703121561398a578384fd5b843567ffffffffffffffff808211156139a1578586fd5b6139ad888389016137ee565b909650945060208701359150808211156139c5578384fd5b506139d2878288016137ee565b95989497509550505050565b600080600080600080606087890312156139f6578081fd5b863567ffffffffffffffff80821115613a0d578283fd5b613a198a838b016137ee565b90985096506020890135915080821115613a31578283fd5b613a3d8a838b016137ee565b90965094506040890135915080821115613a55578283fd5b50613a6289828a016137ee565b979a9699509497509295939492505050565b600060208284031215613a85578081fd5b815163ffffffff8116811461063d578182fd5b600060208284031215613aa9578081fd5b81516001600160601b038116811461063d578182fd5b60008351613ad1818460208801613cba565b6001600160f81b0319939093169190920190815260010192915050565b62ffffff1991909116815260200190565b62ffffff19929092168252602082015260400190565b6000604082528351806040840152613b34816060850160208801613cba565b64ffffffffff93909316602083015250601f91909101601f191601606001919050565b60208082526025908201527f426974636f696e52656c61793a20626c6f636b2068656164657220697320746f6040820152641bc81bdb1960da1b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60008219821115613c4557613c45613d30565b500190565b600082613c5957613c59613d46565b500490565b60006001600160601b0380841680613c7857613c78613d46565b92169190910492915050565b6000816000190483118215151615613c9e57613c9e613d30565b500290565b600082821015613cb557613cb5613d30565b500390565b60005b83811015613cd5578181015183820152602001613cbd565b83811115613ce4576000848401525b50505050565b600081613cf957613cf9613d30565b506000190190565b6000600019821415613d1557613d15613d30565b5060010190565b600082613d2b57613d2b613d46565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fdfea26469706673582212205214e838c0e48b3011b6449efa8803368586838da4bfe4cf214227dab163508564736f6c63430008020033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x21A JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x882A5EE0 GT PUSH2 0x123 JUMPI DUP1 PUSH4 0xB9BBD9BD GT PUSH2 0xAB JUMPI DUP1 PUSH4 0xE2761AF0 GT PUSH2 0x6F JUMPI DUP1 PUSH4 0xE2761AF0 EQ PUSH2 0x5B9 JUMPI DUP1 PUSH4 0xEFBC7BE4 EQ PUSH2 0x5CF JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x5E5 JUMPI DUP1 PUSH4 0xFA041AF5 EQ PUSH2 0x605 JUMPI DUP1 PUSH4 0xFD9C6E85 EQ PUSH2 0x61B JUMPI PUSH2 0x21A JUMP JUMPDEST DUP1 PUSH4 0xB9BBD9BD EQ PUSH2 0x52E JUMPI DUP1 PUSH4 0xB9E88AC1 EQ PUSH2 0x54E JUMPI DUP1 PUSH4 0xC20DC664 EQ PUSH2 0x56E JUMPI DUP1 PUSH4 0xC7814529 EQ PUSH2 0x584 JUMPI DUP1 PUSH4 0xD0A89739 EQ PUSH2 0x599 JUMPI PUSH2 0x21A JUMP JUMPDEST DUP1 PUSH4 0x9F156414 GT PUSH2 0xF2 JUMPI DUP1 PUSH4 0x9F156414 EQ PUSH2 0x4A2 JUMPI DUP1 PUSH4 0xA072BC50 EQ PUSH2 0x4B8 JUMPI DUP1 PUSH4 0xA3DB54EB EQ PUSH2 0x4CE JUMPI DUP1 PUSH4 0xB36161BD EQ PUSH2 0x4EE JUMPI DUP1 PUSH4 0xB985621A EQ PUSH2 0x50E JUMPI PUSH2 0x21A JUMP JUMPDEST DUP1 PUSH4 0x882A5EE0 EQ PUSH2 0x422 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x437 JUMPI DUP1 PUSH4 0x901186BB EQ PUSH2 0x455 JUMPI DUP1 PUSH4 0x926D44E2 EQ PUSH2 0x475 JUMPI PUSH2 0x21A JUMP JUMPDEST DUP1 PUSH4 0x5B732892 GT PUSH2 0x1A6 JUMPI DUP1 PUSH4 0x65941683 GT PUSH2 0x175 JUMPI DUP1 PUSH4 0x65941683 EQ PUSH2 0x397 JUMPI DUP1 PUSH4 0x65DA41B9 EQ PUSH2 0x3B7 JUMPI DUP1 PUSH4 0x665B634F EQ PUSH2 0x3D7 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x3ED JUMPI DUP1 PUSH4 0x7FA637FC EQ PUSH2 0x402 JUMPI PUSH2 0x21A JUMP JUMPDEST DUP1 PUSH4 0x5B732892 EQ PUSH2 0x336 JUMPI DUP1 PUSH4 0x5B88A0E5 EQ PUSH2 0x34C JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x35F JUMPI DUP1 PUSH4 0x60B5C390 EQ PUSH2 0x377 JUMPI PUSH2 0x21A JUMP JUMPDEST DUP1 PUSH4 0x30017B3B GT PUSH2 0x1ED JUMPI DUP1 PUSH4 0x30017B3B EQ PUSH2 0x2A6 JUMPI DUP1 PUSH4 0x4354DA25 EQ PUSH2 0x2C6 JUMPI DUP1 PUSH4 0x465E7559 EQ PUSH2 0x2E9 JUMPI DUP1 PUSH4 0x54EEA796 EQ PUSH2 0x300 JUMPI DUP1 PUSH4 0x57D775F8 EQ PUSH2 0x320 JUMPI PUSH2 0x21A JUMP JUMPDEST DUP1 PUSH4 0x108F438D EQ PUSH2 0x21F JUMPI DUP1 PUSH4 0x113764BE EQ PUSH2 0x25C JUMPI DUP1 PUSH4 0x2B97BE24 EQ PUSH2 0x27B JUMPI DUP1 PUSH4 0x2F796D90 EQ PUSH2 0x290 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x22B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xD SLOAD PUSH2 0x23F SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x268 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xA SLOAD JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x253 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x287 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xB SLOAD PUSH2 0x26D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x29C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26D PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26D PUSH2 0x2C1 CALLDATASIZE PUSH1 0x4 PUSH2 0x38FB JUMP JUMPDEST PUSH2 0x631 JUMP JUMPDEST PUSH2 0x2D9 PUSH2 0x2D4 CALLDATASIZE PUSH1 0x4 PUSH2 0x391C JUMP JUMPDEST PUSH2 0x646 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x253 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2FE PUSH2 0xA71 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x30C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2FE PUSH2 0x31B CALLDATASIZE PUSH1 0x4 PUSH2 0x38A0 JUMP JUMPDEST PUSH2 0xAA5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x32C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26D PUSH1 0x10 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x342 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26D PUSH1 0x12 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x358 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP SELFBALANCE PUSH2 0x26D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x36B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x2 SLOAD PUSH1 0xFF AND PUSH2 0x2D9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x383 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26D PUSH2 0x392 CALLDATASIZE PUSH1 0x4 PUSH2 0x38A0 JUMP JUMPDEST PUSH2 0xAD4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2FE PUSH2 0x3B2 CALLDATASIZE PUSH1 0x4 PUSH2 0x38A0 JUMP JUMPDEST PUSH2 0xAE7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2D9 PUSH2 0x3D2 CALLDATASIZE PUSH1 0x4 PUSH2 0x3975 JUMP JUMPDEST PUSH2 0xB16 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26D PUSH1 0xE SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2FE PUSH2 0x1001 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x40E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2D9 PUSH2 0x41D CALLDATASIZE PUSH1 0x4 PUSH2 0x39DE JUMP JUMPDEST PUSH2 0x1035 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x42E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26D PUSH2 0x16AE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x443 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x23F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x461 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2FE PUSH2 0x470 CALLDATASIZE PUSH1 0x4 PUSH2 0x38A0 JUMP JUMPDEST PUSH2 0x172F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x481 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26D PUSH2 0x490 CALLDATASIZE PUSH1 0x4 PUSH2 0x38A0 JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4AE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26D PUSH1 0x11 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26D PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2FE PUSH2 0x4E9 CALLDATASIZE PUSH1 0x4 PUSH2 0x38A0 JUMP JUMPDEST PUSH2 0x175E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x4FA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2FE PUSH2 0x509 CALLDATASIZE PUSH1 0x4 PUSH2 0x38A0 JUMP JUMPDEST PUSH2 0x178D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x51A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2D9 PUSH2 0x529 CALLDATASIZE PUSH1 0x4 PUSH2 0x38D0 JUMP JUMPDEST PUSH2 0x17BC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x53A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26D PUSH2 0x549 CALLDATASIZE PUSH1 0x4 PUSH2 0x38FB JUMP JUMPDEST PUSH2 0x17D3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x55A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2FE PUSH2 0x569 CALLDATASIZE PUSH1 0x4 PUSH2 0x38A0 JUMP JUMPDEST PUSH2 0x181D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x57A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26D PUSH1 0xF SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x590 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2FE PUSH2 0x184C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26D PUSH2 0x5B4 CALLDATASIZE PUSH1 0x4 PUSH2 0x38FB JUMP JUMPDEST PUSH2 0x187E JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26D PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26D PUSH1 0x6 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x2FE PUSH2 0x600 CALLDATASIZE PUSH1 0x4 PUSH2 0x3835 JUMP JUMPDEST PUSH2 0x190B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x611 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26D PUSH1 0x13 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x627 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x26D PUSH1 0xC SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x63D DUP4 DUP4 PUSH2 0x19A6 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x674 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x66B SWAP1 PUSH2 0x3BFB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE PUSH2 0x685 PUSH1 0x2 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x6A2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x66B SWAP1 PUSH2 0x3B9C JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH2 0x6B0 SWAP1 PUSH1 0x1 PUSH2 0x3C32 JUMP JUMPDEST PUSH2 0x6BB DUP7 PUSH1 0x6 PUSH2 0x3C32 JUMP JUMPDEST LT ISZERO PUSH2 0xA60 JUMPI PUSH1 0x0 JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 LT ISZERO PUSH2 0xA08 JUMPI PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH2 0x724 SWAP2 SWAP1 DUP5 SWAP1 DUP2 LT PUSH2 0x70D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD PUSH1 0x2 ADD SLOAD PUSH2 0x1A24 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP7 DUP7 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD DUP3 SWAP1 MSTORE POP PUSH1 0x40 MLOAD PUSH4 0x34FCCA53 PUSH1 0xE1 SHL DUP2 MSTORE PUSH20 0x0 SWAP6 PUSH4 0x69F994A6 SWAP6 POP PUSH2 0x793 SWAP5 POP SWAP3 POP PUSH1 0x4 ADD PUSH2 0x3B15 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x7AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x7BF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x7E3 SWAP2 SWAP1 PUSH2 0x387C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x22A24AF3 PUSH1 0xE1 SHL DUP2 MSTORE PUSH20 0x0 SWAP2 PUSH4 0x454495E6 SWAP2 PUSH2 0x81F SWAP2 PUSH3 0xFFFFFF NOT AND SWAP1 PUSH1 0x4 ADD PUSH2 0x3AEE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x837 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x84B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x86F SWAP2 SWAP1 PUSH2 0x387C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x87C DUP11 PUSH2 0x1A24 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xAA65716D PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP6 SWAP1 MSTORE PUSH3 0xFFFFFF NOT DUP5 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP9 SWAP1 MSTORE SWAP1 SWAP2 POP PUSH20 0x0 SWAP1 PUSH4 0xAA65716D SWAP1 PUSH1 0x84 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x8F8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x91C SWAP2 SWAP1 PUSH2 0x385C JUMP JUMPDEST ISZERO PUSH2 0x9F2 JUMPI PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH2 0x96B SWAP2 SWAP1 DUP7 SWAP1 DUP2 LT PUSH2 0x954 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD PUSH1 0x4 ADD SLOAD PUSH2 0x1AA4 JUMP JUMPDEST PUSH2 0x9CC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x426974636F696E52656C61793A2067657474696E672066656520776173206E6F PUSH1 0x44 DUP3 ADD MSTORE PUSH12 0x1D081CDD58D8D95CDCD99D5B PUSH1 0xA2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x66B JUMP JUMPDEST PUSH1 0x1 PUSH1 0x12 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x9DF SWAP2 SWAP1 PUSH2 0x3C32 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH1 0x1 SWAP6 POP PUSH2 0xA64 SWAP5 POP POP POP POP POP JUMP JUMPDEST POP POP POP DUP1 DUP1 PUSH2 0xA00 SWAP1 PUSH2 0x3D01 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x6C4 JUMP JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x426974636F696E52656C61793A20747820686173206E6F74206265656E20696E PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x18DB1D591959 PUSH1 0xD2 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x66B JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST PUSH1 0x1 DUP1 SSTORE SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xA9B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x66B SWAP1 PUSH2 0x3BC6 JUMP JUMPDEST PUSH2 0xAA3 PUSH2 0x1B61 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xACF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x66B SWAP1 PUSH2 0x3BC6 JUMP JUMPDEST PUSH1 0x10 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0xADF DUP3 PUSH2 0x1BD6 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xB11 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x66B SWAP1 PUSH2 0x3BC6 JUMP JUMPDEST PUSH1 0x13 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0xB3B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x66B SWAP1 PUSH2 0x3BFB JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE PUSH2 0xB4C PUSH1 0x2 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST ISZERO PUSH2 0xB69 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x66B SWAP1 PUSH2 0x3B9C JUMP JUMPDEST PUSH1 0x0 DUP4 DUP4 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD DUP3 SWAP1 MSTORE POP PUSH1 0x40 MLOAD PUSH4 0x34FCCA53 PUSH1 0xE1 SHL DUP2 MSTORE PUSH20 0x0 SWAP6 PUSH4 0x69F994A6 SWAP6 POP PUSH2 0xBD6 SWAP5 POP SWAP3 POP PUSH1 0x4 ADD PUSH2 0x3B15 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xBEE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xC02 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xC26 SWAP2 SWAP1 PUSH2 0x387C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x29536399 PUSH1 0xE2 SHL DUP2 MSTORE PUSH20 0x0 SWAP2 PUSH4 0xA54D8E64 SWAP2 PUSH2 0xC62 SWAP2 PUSH3 0xFFFFFF NOT AND SWAP1 PUSH1 0x4 ADD PUSH2 0x3AEE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xC7A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xC8E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xCB2 SWAP2 SWAP1 PUSH2 0x387C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP7 DUP7 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD DUP3 SWAP1 MSTORE POP PUSH1 0x40 MLOAD PUSH4 0x34FCCA53 PUSH1 0xE1 SHL DUP2 MSTORE PUSH20 0x0 SWAP6 PUSH4 0x69F994A6 SWAP6 POP PUSH2 0xD21 SWAP5 POP SWAP3 POP PUSH1 0x4 ADD PUSH2 0x3B15 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xD39 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xD4D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xD71 SWAP2 SWAP1 PUSH2 0x387C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x9DAFD21 PUSH1 0xE3 SHL DUP2 MSTORE PUSH20 0x0 SWAP2 PUSH4 0x4ED7E908 SWAP2 PUSH2 0xDAD SWAP2 PUSH3 0xFFFFFF NOT AND SWAP1 PUSH1 0x4 ADD PUSH2 0x3AEE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xDC5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xDD9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xDFD SWAP2 SWAP1 PUSH2 0x387C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2C9C3B9F PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH20 0x0 SWAP1 PUSH4 0x5938773E SWAP1 PUSH2 0xE3D SWAP1 PUSH3 0xFFFFFF NOT DUP7 AND SWAP1 PUSH1 0x4 ADD PUSH2 0x3AEE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE55 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xE69 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE8D SWAP2 SWAP1 PUSH2 0x385C JUMP JUMPDEST PUSH2 0xEFF JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x39 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x426974636F696E52656C61793A20686561646572206172726179206C656E6774 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x68206D75737420626520646976697369626C6520627920383000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x66B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2C9C3B9F PUSH1 0xE1 SHL DUP2 MSTORE PUSH20 0x0 SWAP1 PUSH4 0x5938773E SWAP1 PUSH2 0xF3C SWAP1 PUSH3 0xFFFFFF NOT DUP6 AND SWAP1 PUSH1 0x4 ADD PUSH2 0x3AEE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xF54 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0xF68 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xF8C SWAP2 SWAP1 PUSH2 0x385C JUMP JUMPDEST PUSH2 0xFE6 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x25 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x426974636F696E52656C61793A20616E63686F72206D75737420626520383020 PUSH1 0x44 DUP3 ADD MSTORE PUSH5 0x6279746573 PUSH1 0xD8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x66B JUMP JUMPDEST PUSH2 0xFF2 DUP2 DUP4 PUSH1 0x0 PUSH2 0x1C36 JUMP JUMPDEST PUSH1 0x1 DUP1 SSTORE SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x102B JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x66B SWAP1 PUSH2 0x3BC6 JUMP JUMPDEST PUSH2 0xAA3 PUSH1 0x0 PUSH2 0x2521 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x2 PUSH1 0x1 SLOAD EQ ISZERO PUSH2 0x105A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x66B SWAP1 PUSH2 0x3BFB JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 SSTORE PUSH2 0x106B PUSH1 0x2 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST ISZERO PUSH2 0x1088 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x66B SWAP1 PUSH2 0x3B9C JUMP JUMPDEST PUSH1 0x0 DUP8 DUP8 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD DUP3 SWAP1 MSTORE POP PUSH1 0x40 MLOAD PUSH4 0x34FCCA53 PUSH1 0xE1 SHL DUP2 MSTORE PUSH20 0x0 SWAP6 PUSH4 0x69F994A6 SWAP6 POP PUSH2 0x10F5 SWAP5 POP SWAP3 POP PUSH1 0x4 ADD PUSH2 0x3B15 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x110D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x1121 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1145 SWAP2 SWAP1 PUSH2 0x387C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x9DAFD21 PUSH1 0xE3 SHL DUP2 MSTORE PUSH20 0x0 SWAP2 PUSH4 0x4ED7E908 SWAP2 PUSH2 0x1181 SWAP2 PUSH3 0xFFFFFF NOT AND SWAP1 PUSH1 0x4 ADD PUSH2 0x3AEE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1199 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x11AD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x11D1 SWAP2 SWAP1 PUSH2 0x387C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP7 DUP7 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD DUP3 SWAP1 MSTORE POP PUSH1 0x40 MLOAD PUSH4 0x34FCCA53 PUSH1 0xE1 SHL DUP2 MSTORE PUSH20 0x0 SWAP6 PUSH4 0x69F994A6 SWAP6 POP PUSH2 0x1240 SWAP5 POP SWAP3 POP PUSH1 0x4 ADD PUSH2 0x3B15 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1258 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x126C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1290 SWAP2 SWAP1 PUSH2 0x387C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x9DAFD21 PUSH1 0xE3 SHL DUP2 MSTORE PUSH20 0x0 SWAP2 PUSH4 0x4ED7E908 SWAP2 PUSH2 0x12CC SWAP2 PUSH3 0xFFFFFF NOT AND SWAP1 PUSH1 0x4 ADD PUSH2 0x3AEE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x12E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x12F8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x131C SWAP2 SWAP1 PUSH2 0x387C JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP6 DUP6 DUP1 DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD DUP3 SWAP1 MSTORE POP PUSH1 0x40 MLOAD PUSH4 0x34FCCA53 PUSH1 0xE1 SHL DUP2 MSTORE PUSH20 0x0 SWAP6 PUSH4 0x69F994A6 SWAP6 POP PUSH2 0x138B SWAP5 POP SWAP3 POP PUSH1 0x4 ADD PUSH2 0x3B15 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x13A3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x13B7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x13DB SWAP2 SWAP1 PUSH2 0x387C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x29536399 PUSH1 0xE2 SHL DUP2 MSTORE PUSH20 0x0 SWAP2 PUSH4 0xA54D8E64 SWAP2 PUSH2 0x1417 SWAP2 PUSH3 0xFFFFFF NOT AND SWAP1 PUSH1 0x4 ADD PUSH2 0x3AEE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x142F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x1443 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1467 SWAP2 SWAP1 PUSH2 0x387C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x2C9C3B9F PUSH1 0xE1 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH20 0x0 SWAP1 PUSH4 0x5938773E SWAP1 PUSH2 0x14A7 SWAP1 PUSH3 0xFFFFFF NOT DUP8 AND SWAP1 PUSH1 0x4 ADD PUSH2 0x3AEE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x14BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x14D3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x14F7 SWAP2 SWAP1 PUSH2 0x385C JUMP JUMPDEST DUP1 ISZERO PUSH2 0x158B JUMPI POP PUSH1 0x40 MLOAD PUSH4 0x2C9C3B9F PUSH1 0xE1 SHL DUP2 MSTORE PUSH20 0x0 SWAP1 PUSH4 0x5938773E SWAP1 PUSH2 0x153B SWAP1 PUSH3 0xFFFFFF NOT DUP7 AND SWAP1 PUSH1 0x4 ADD PUSH2 0x3AEE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1553 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x1567 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x158B SWAP2 SWAP1 PUSH2 0x385C JUMP JUMPDEST DUP1 ISZERO PUSH2 0x161F JUMPI POP PUSH1 0x40 MLOAD PUSH4 0x2C9C3B9F PUSH1 0xE1 SHL DUP2 MSTORE PUSH20 0x0 SWAP1 PUSH4 0x5938773E SWAP1 PUSH2 0x15CF SWAP1 PUSH3 0xFFFFFF NOT DUP6 AND SWAP1 PUSH1 0x4 ADD PUSH2 0x3AEE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x15E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x15FB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x161F SWAP2 SWAP1 PUSH2 0x385C JUMP JUMPDEST PUSH2 0x1691 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3C PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x426974636F696E52656C61793A2062616420617267732E20436865636B206865 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6164657220616E642061727261792062797465206C656E677468732E00000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x66B JUMP JUMPDEST PUSH2 0x169C DUP4 DUP4 DUP4 PUSH2 0x2571 JUMP JUMPDEST PUSH1 0x1 DUP1 SSTORE SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0xD SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x16F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1706 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x172A SWAP2 SWAP1 PUSH2 0x38B8 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1759 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x66B SWAP1 PUSH2 0x3BC6 JUMP JUMPDEST PUSH1 0xE SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1788 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x66B SWAP1 PUSH2 0x3BC6 JUMP JUMPDEST PUSH1 0xF SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x17B7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x66B SWAP1 PUSH2 0x3BC6 JUMP JUMPDEST PUSH1 0x5 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17C9 DUP5 DUP5 DUP5 PUSH2 0x2CC5 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD PUSH2 0x63D SWAP2 SWAP1 DUP5 SWAP1 DUP2 LT PUSH2 0x1806 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD PUSH1 0x0 ADD SLOAD PUSH2 0x1A24 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1847 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x66B SWAP1 PUSH2 0x3BC6 JUMP JUMPDEST PUSH1 0xC SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1876 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x66B SWAP1 PUSH2 0x3BC6 JUMP JUMPDEST PUSH2 0xAA3 PUSH2 0x2D14 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x11 SLOAD PUSH1 0x64 PUSH2 0x188F SWAP2 SWAP1 PUSH2 0x3C84 JUMP JUMPDEST PUSH1 0x10 SLOAD PUSH1 0xE SLOAD PUSH2 0x18A0 SWAP1 PUSH1 0x1 PUSH2 0x3C32 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP7 SWAP1 DUP2 LT PUSH2 0x18CE JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD PUSH1 0x4 ADD SLOAD PUSH1 0xF SLOAD PUSH2 0x18ED SWAP2 SWAP1 PUSH2 0x3C84 JUMP JUMPDEST PUSH2 0x18F7 SWAP2 SWAP1 PUSH2 0x3C84 JUMP JUMPDEST PUSH2 0x1901 SWAP2 SWAP1 PUSH2 0x3C84 JUMP JUMPDEST PUSH2 0x63D SWAP2 SWAP1 PUSH2 0x3C4A JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1935 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x66B SWAP1 PUSH2 0x3BC6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x199A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH6 0x646472657373 PUSH1 0xD0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x66B JUMP JUMPDEST PUSH2 0x19A3 DUP2 PUSH2 0x2521 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x19D6 JUMPI PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 DUP1 PUSH2 0x19CE DUP2 PUSH2 0x3D01 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x19AB JUMP JUMPDEST POP DUP1 PUSH2 0x63D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1E PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x426974636F696E52656C61793A20756E6B6E6F776E20616E636573746F720000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x66B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x60 DUP2 DUP1 JUMPDEST PUSH1 0x20 DUP2 LT ISZERO PUSH2 0x1A98 JUMPI DUP3 DUP6 PUSH2 0x1A41 DUP4 PUSH1 0x1F PUSH2 0x3CA3 JUMP JUMPDEST PUSH1 0x20 DUP2 LT PUSH2 0x1A5F JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST BYTE PUSH1 0xF8 SHL PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x1A74 SWAP3 SWAP2 SWAP1 PUSH2 0x3ABF JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE SWAP3 POP DUP1 DUP1 PUSH2 0x1A90 SWAP1 PUSH2 0x3D01 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1A2B JUMP JUMPDEST POP POP PUSH1 0x20 ADD MLOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x11 SLOAD PUSH1 0x64 PUSH2 0x1AB6 SWAP2 SWAP1 PUSH2 0x3C84 JUMP JUMPDEST PUSH1 0x10 SLOAD PUSH1 0xE SLOAD PUSH2 0x1AC7 SWAP1 PUSH1 0x1 PUSH2 0x3C32 JUMP JUMPDEST DUP6 PUSH1 0xF SLOAD PUSH2 0x1AD5 SWAP2 SWAP1 PUSH2 0x3C84 JUMP JUMPDEST PUSH2 0x1ADF SWAP2 SWAP1 PUSH2 0x3C84 JUMP JUMPDEST PUSH2 0x1AE9 SWAP2 SWAP1 PUSH2 0x3C84 JUMP JUMPDEST PUSH2 0x1AF3 SWAP2 SWAP1 PUSH2 0x3C4A JUMP JUMPDEST SWAP1 POP DUP1 CALLVALUE LT ISZERO PUSH2 0x1B45 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x426974636F696E52656C61793A20666565206973206E6F7420656E6F75676800 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x66B JUMP JUMPDEST PUSH2 0x1B58 CALLER PUSH2 0x1B53 DUP4 CALLVALUE PUSH2 0x3CA3 JUMP JUMPDEST PUSH2 0x2D8E JUMP JUMPDEST POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1B84 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x66B SWAP1 PUSH2 0x3B9C JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH32 0x62E78CEA01BEE320CD4E420270B5EA74000D11B0C9F74754EBDBFC544B05A258 PUSH2 0x1BB9 CALLER SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x1C21 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xD PUSH1 0x24 DUP3 ADD MSTORE PUSH13 0x556E6B6E6F776E20626C6F636B PUSH1 0x98 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x66B JUMP JUMPDEST POP PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x8 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0xAE2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x7F6F123 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH20 0x0 SWAP1 PUSH4 0x1FDBC48C SWAP1 PUSH2 0x1C78 SWAP1 PUSH3 0xFFFFFF NOT DUP10 AND SWAP1 PUSH1 0x4 ADD PUSH2 0x3AEE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1C90 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x1CA4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1CC8 SWAP2 SWAP1 PUSH2 0x38B8 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x1CD5 DUP3 PUSH2 0x1BD6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xDF905561 PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH20 0x0 SWAP1 PUSH4 0xDF905561 SWAP1 PUSH2 0x1D1A SWAP1 PUSH3 0xFFFFFF NOT DUP11 AND SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x3AFF JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1D32 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x1D46 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1D6A SWAP2 SWAP1 PUSH2 0x387C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x62EF7DAD PUSH1 0xE0 SHL DUP2 MSTORE PUSH20 0x0 SWAP2 PUSH4 0x62EF7DAD SWAP2 PUSH2 0x1DA6 SWAP2 PUSH3 0xFFFFFF NOT AND SWAP1 PUSH1 0x4 ADD PUSH2 0x3AEE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1DBE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x1DD2 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1DF6 SWAP2 SWAP1 PUSH2 0x38B8 JUMP JUMPDEST SWAP1 POP DUP5 DUP1 PUSH2 0x1E90 JUMPI POP PUSH1 0x40 MLOAD PUSH4 0x62EF7DAD PUSH1 0xE0 SHL DUP2 MSTORE DUP2 SWAP1 PUSH20 0x0 SWAP1 PUSH4 0x62EF7DAD SWAP1 PUSH2 0x1E3E SWAP1 PUSH3 0xFFFFFF NOT DUP13 AND SWAP1 PUSH1 0x4 ADD PUSH2 0x3AEE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1E56 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x1E6A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1E8E SWAP2 SWAP1 PUSH2 0x38B8 JUMP JUMPDEST EQ JUMPDEST PUSH2 0x1EF7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x32 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x426974636F696E52656C61793A20756E65787065637465642072657461726765 PUSH1 0x44 DUP3 ADD MSTORE PUSH18 0x1D081BDB88195E1D195C9B985B0818D85B1B PUSH1 0x72 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x66B JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x9CB855CB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x50 SWAP1 PUSH20 0x0 SWAP1 PUSH4 0x9CB855CB SWAP1 PUSH2 0x1F3D SWAP1 PUSH3 0xFFFFFF NOT DUP15 AND SWAP1 PUSH1 0x4 ADD PUSH2 0x3AEE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1F55 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x1F69 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1F8D SWAP2 SWAP1 PUSH2 0x3A98 JUMP JUMPDEST PUSH2 0x1F97 SWAP2 SWAP1 PUSH2 0x3C5E JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB AND DUP2 LT ISZERO PUSH2 0x2511 JUMPI PUSH1 0x40 MLOAD PUSH4 0xDF905561 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH20 0x0 SWAP1 PUSH4 0xDF905561 SWAP1 PUSH2 0x1FE9 SWAP1 PUSH3 0xFFFFFF NOT DUP15 AND SWAP1 DUP7 SWAP1 PUSH1 0x4 ADD PUSH2 0x3AFF JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2001 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x2015 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2039 SWAP2 SWAP1 PUSH2 0x387C JUMP JUMPDEST SWAP1 POP PUSH2 0x2045 DUP3 DUP8 PUSH2 0x3C32 JUMP JUMPDEST PUSH2 0x2050 SWAP1 PUSH1 0x1 PUSH2 0x3C32 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x7F6F123 PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 SWAP5 POP PUSH20 0x0 SWAP1 PUSH4 0x1FDBC48C SWAP1 PUSH2 0x2090 SWAP1 PUSH3 0xFFFFFF NOT DUP6 AND SWAP1 PUSH1 0x4 ADD PUSH2 0x3AEE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x20A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x20BC JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x20E0 SWAP2 SWAP1 PUSH2 0x38B8 JUMP JUMPDEST SWAP3 POP DUP9 DUP1 PUSH2 0x20F8 JUMPI POP PUSH2 0x20F5 PUSH2 0x7E0 DUP6 PUSH2 0x3D1C JUMP JUMPDEST ISZERO ISZERO JUMPDEST PUSH2 0x217E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x4B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x426974636F696E52656C61793A20686561646572732073686F756C6420626520 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7375626D69747465642062792063616C6C696E67206164644865616465727357 PUSH1 0x64 DUP3 ADD MSTORE PUSH11 0x1A5D1A14995D185C99D95D PUSH1 0xAA SHL PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 ADD PUSH2 0x66B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x62EF7DAD PUSH1 0xE0 SHL DUP2 MSTORE DUP6 SWAP1 PUSH20 0x0 SWAP1 PUSH4 0x62EF7DAD SWAP1 PUSH2 0x21BD SWAP1 PUSH3 0xFFFFFF NOT DUP7 AND SWAP1 PUSH1 0x4 ADD PUSH2 0x3AEE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x21D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x21E9 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x220D SWAP2 SWAP1 PUSH2 0x38B8 JUMP JUMPDEST EQ PUSH2 0x226C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x426974636F696E52656C61793A20746172676574206368616E67656420756E65 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x787065637465646C79 PUSH1 0xB8 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x66B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH3 0xC7423 PUSH1 0xE0 SHL SUB NOT DUP2 MSTORE PUSH20 0x0 SWAP1 PUSH4 0xFFF38BDD SWAP1 PUSH2 0x22AE SWAP1 PUSH3 0xFFFFFF NOT DUP6 AND SWAP1 DUP12 SWAP1 PUSH1 0x4 ADD PUSH2 0x3AFF JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x22C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x22DA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x22FE SWAP2 SWAP1 PUSH2 0x385C JUMP JUMPDEST PUSH2 0x2367 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x34 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x426974636F696E52656C61793A206865616465727320646F206E6F7420666F72 PUSH1 0x44 DUP3 ADD MSTORE PUSH20 0x3690309031B7B739B4B9BA32B73A1031B430B4B7 PUSH1 0x61 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x66B JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x5 SLOAD PUSH2 0x2377 SWAP1 DUP7 PUSH2 0x3C32 JUMP JUMPDEST GT PUSH2 0x2394 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x66B SWAP1 PUSH2 0x3B57 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x24FA JUMPI PUSH1 0x40 MLOAD PUSH4 0x40BEC88F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE DUP6 SWAP1 PUSH20 0x0 SWAP1 PUSH4 0x40BEC88F SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x23F4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x2408 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x242C SWAP2 SWAP1 PUSH2 0x38B8 JUMP JUMPDEST GT ISZERO PUSH2 0x248C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x29 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x426974636F696E52656C61793A2068656164657220776F726B20697320696E73 PUSH1 0x44 DUP3 ADD MSTORE PUSH9 0x1D59999A58DA595B9D PUSH1 0xBA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x66B JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP11 SWAP1 SSTORE PUSH1 0x8 SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 DUP5 SWAP1 SSTORE PUSH2 0x24B4 DUP2 DUP6 PUSH2 0x2EAC JUMP JUMPDEST CALLER PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP8 DUP6 PUSH32 0xFB8FFF3E2DAA665D496373CED291B62ABA4162F24632A1597E286621016E9A1F DUP7 PUSH1 0x40 MLOAD PUSH2 0x24F1 SWAP2 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST DUP3 SWAP7 POP POP DUP1 DUP1 PUSH2 0x2509 SWAP1 PUSH2 0x3D01 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x1EFD JUMP JUMPDEST POP PUSH1 0x1 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x7F6F123 PUSH1 0xE2 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 DUP2 SWAP1 PUSH2 0x260C SWAP1 PUSH20 0x0 SWAP1 PUSH4 0x1FDBC48C SWAP1 PUSH2 0x25B7 SWAP1 PUSH3 0xFFFFFF NOT DUP11 AND SWAP1 PUSH1 0x4 ADD PUSH2 0x3AEE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x25CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x25E3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2607 SWAP2 SWAP1 PUSH2 0x38B8 JUMP JUMPDEST PUSH2 0x1BD6 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x7F6F123 PUSH1 0xE2 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH2 0x2653 SWAP1 PUSH20 0x0 SWAP1 PUSH4 0x1FDBC48C SWAP1 PUSH2 0x25B7 SWAP1 PUSH3 0xFFFFFF NOT DUP11 AND SWAP1 PUSH1 0x4 ADD PUSH2 0x3AEE JUMP JUMPDEST SWAP1 POP PUSH2 0x2661 PUSH2 0x7E0 DUP3 PUSH2 0x3D1C JUMP JUMPDEST PUSH2 0x7DF EQ PUSH2 0x26EB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x4B PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x426974636F696E52656C61793A206D7573742070726F7669646520746865206C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x61737420686561646572206F662074686520636C6F73696E6720646966666963 PUSH1 0x64 DUP3 ADD MSTORE PUSH11 0x1D5B1D1E481C195C9A5BD9 PUSH1 0xAA SHL PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 ADD PUSH2 0x66B JUMP JUMPDEST PUSH2 0x26F7 DUP3 PUSH2 0x7DF PUSH2 0x3C32 JUMP JUMPDEST DUP2 EQ PUSH2 0x2764 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x36 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x426974636F696E52656C61793A206D7573742070726F76696465206578616374 PUSH1 0x44 DUP3 ADD MSTORE PUSH22 0x1B1E480C48191A59999A58DD5B1D1E481C195C9A5BD9 PUSH1 0x52 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x66B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xCDDB4507 PUSH1 0xE0 SHL DUP2 MSTORE PUSH20 0x0 SWAP1 PUSH4 0xCDDB4507 SWAP1 PUSH2 0x27A1 SWAP1 PUSH3 0xFFFFFF NOT DUP10 AND SWAP1 PUSH1 0x4 ADD PUSH2 0x3AEE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x27B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x27CD JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x27F1 SWAP2 SWAP1 PUSH2 0x38B8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xCDDB4507 PUSH1 0xE0 SHL DUP2 MSTORE PUSH20 0x0 SWAP1 PUSH4 0xCDDB4507 SWAP1 PUSH2 0x282E SWAP1 PUSH3 0xFFFFFF NOT DUP12 AND SWAP1 PUSH1 0x4 ADD PUSH2 0x3AEE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2846 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x285A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x287E SWAP2 SWAP1 PUSH2 0x38B8 JUMP JUMPDEST EQ PUSH2 0x28E9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x35 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x426974636F696E52656C61793A20706572696F64206865616465722064696666 PUSH1 0x44 DUP3 ADD MSTORE PUSH21 0xD2C6EAD8E8D2CAE640C8DE40DCDEE840DAC2E8C6D PUSH1 0x5B SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x66B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xDF905561 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 SWAP1 PUSH20 0x0 SWAP1 PUSH4 0xDF905561 SWAP1 PUSH2 0x292B SWAP1 PUSH3 0xFFFFFF NOT DUP10 AND SWAP1 DUP6 SWAP1 PUSH1 0x4 ADD PUSH2 0x3AFF JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2943 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x2957 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x297B SWAP2 SWAP1 PUSH2 0x387C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x62EF7DAD PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH20 0x0 SWAP1 PUSH4 0x62EF7DAD SWAP1 PUSH2 0x29BE SWAP1 PUSH3 0xFFFFFF NOT DUP7 AND SWAP1 PUSH1 0x4 ADD PUSH2 0x3AEE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x29D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x29EA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2A0E SWAP2 SWAP1 PUSH2 0x38B8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x62EF7DAD PUSH1 0xE0 SHL DUP2 MSTORE SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH20 0x0 SWAP1 PUSH4 0xB2591232 SWAP1 DUP3 SWAP1 PUSH4 0x62EF7DAD SWAP1 PUSH2 0x2A59 SWAP1 PUSH3 0xFFFFFF NOT DUP16 AND SWAP1 PUSH1 0x4 ADD PUSH2 0x3AEE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2A71 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x2A85 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2AA9 SWAP2 SWAP1 PUSH2 0x38B8 JUMP JUMPDEST DUP12 PUSH3 0xFFFFFF NOT AND PUSH20 0x0 PUSH4 0xF172B060 SWAP1 SWAP2 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2AE8 SWAP2 SWAP1 PUSH2 0x3AEE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2B00 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x2B14 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2B38 SWAP2 SWAP1 PUSH2 0x3A74 JUMP JUMPDEST DUP12 PUSH3 0xFFFFFF NOT AND PUSH20 0x0 PUSH4 0xF172B060 SWAP1 SWAP2 PUSH1 0x40 MLOAD DUP3 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x2B77 SWAP2 SWAP1 PUSH2 0x3AEE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2B8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x2BA3 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2BC7 SWAP2 SWAP1 PUSH2 0x3A74 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT PUSH1 0xE0 DUP7 SWAP1 SHL AND DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH4 0xFFFFFFFF SWAP2 DUP3 AND PUSH1 0x24 DUP5 ADD MSTORE AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2C11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x2C25 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2C49 SWAP2 SWAP1 PUSH2 0x38B8 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 DUP4 AND EQ PUSH2 0x2CAC JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x27 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x426974636F696E52656C61793A20696E76616C69642072657461726765742070 PUSH1 0x44 DUP3 ADD MSTORE PUSH7 0x1C9BDD9A591959 PUSH1 0xCA SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x66B JUMP JUMPDEST PUSH2 0x2CB8 DUP9 DUP9 PUSH1 0x1 PUSH2 0x1C36 JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2D08 JUMPI DUP6 DUP3 EQ ISZERO PUSH2 0x2CE5 JUMPI PUSH1 0x1 SWAP3 POP POP POP PUSH2 0x17CC JUMP JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 SLOAD SWAP1 DUP1 PUSH2 0x2D00 DUP2 PUSH2 0x3D01 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x2CCA JUMP JUMPDEST POP PUSH1 0x0 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0xFF AND PUSH2 0x2D5D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x14 PUSH1 0x24 DUP3 ADD MSTORE PUSH20 0x14185D5CD8589B194E881B9BDD081C185D5CD959 PUSH1 0x62 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x66B JUMP JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH32 0x5DB9EE0A495BF2E6FF9C91A7834C1BA4FDD244A5E8AA4E537BD38AEAE4B073AA CALLER PUSH2 0x1BB9 JUMP JUMPDEST DUP1 SELFBALANCE LT ISZERO PUSH2 0x2DDE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x66B JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x2E2B JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2E30 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x2EA7 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20756E61626C6520746F2073656E642076616C75652C2072 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6563697069656E74206D61792068617665207265766572746564000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x66B JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x5 SLOAD PUSH2 0x2EBC SWAP1 DUP4 PUSH2 0x3C32 JUMP JUMPDEST GT PUSH2 0x2ED9 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x66B SWAP1 PUSH2 0x3B57 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xA0 DUP2 ADD DUP3 MSTORE PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP2 SWAP1 MSTORE DUP2 DUP4 ADD DUP2 SWAP1 MSTORE PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x80 DUP3 ADD MSTORE SWAP1 MLOAD PUSH4 0x7F6F123 PUSH1 0xE2 SHL DUP2 MSTORE PUSH20 0x0 SWAP1 PUSH4 0x1FDBC48C SWAP1 PUSH2 0x2F3D SWAP1 PUSH3 0xFFFFFF NOT DUP8 AND SWAP1 PUSH1 0x4 ADD PUSH2 0x3AEE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2F55 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x2F69 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x2F8D SWAP2 SWAP1 PUSH2 0x38B8 JUMP JUMPDEST DUP2 MSTORE PUSH1 0x40 MLOAD PUSH4 0x383EF313 PUSH1 0xE1 SHL DUP2 MSTORE PUSH20 0x0 SWAP1 PUSH4 0x707DE626 SWAP1 PUSH2 0x2FCC SWAP1 PUSH3 0xFFFFFF NOT DUP8 AND SWAP1 PUSH1 0x4 ADD PUSH2 0x3AEE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x2FE4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x2FF8 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x301C SWAP2 SWAP1 PUSH2 0x38B8 JUMP JUMPDEST PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 MLOAD PUSH4 0x4EDFC3D5 PUSH1 0xE1 SHL DUP2 MSTORE PUSH20 0x0 SWAP1 PUSH4 0x9DBF87AA SWAP1 PUSH2 0x305E SWAP1 PUSH3 0xFFFFFF NOT DUP8 AND SWAP1 PUSH1 0x4 ADD PUSH2 0x3AEE JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3076 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 0x308A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x30AE SWAP2 SWAP1 PUSH2 0x38B8 JUMP JUMPDEST PUSH1 0x40 DUP3 DUP2 ADD SWAP2 DUP3 MSTORE CALLER PUSH1 0x60 DUP5 ADD SWAP1 DUP2 MSTORE GASPRICE PUSH1 0x80 DUP6 ADD SWAP1 DUP2 MSTORE PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE SWAP4 DUP2 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP1 DUP3 ADD DUP4 SSTORE SWAP2 DUP4 MSTORE SWAP2 DUP6 SWAP1 KECCAK256 DUP8 MLOAD PUSH1 0x5 SWAP1 SWAP4 MUL ADD SWAP2 DUP3 SSTORE SWAP4 DUP7 ADD MLOAD SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 SSTORE SWAP3 MLOAD PUSH1 0x2 DUP4 ADD SSTORE MLOAD PUSH1 0x3 DUP3 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE SWAP1 MLOAD PUSH1 0x4 SWAP2 DUP3 ADD SSTORE SLOAD DUP3 GT ISZERO PUSH2 0x2EA7 JUMPI PUSH1 0x1 PUSH1 0x4 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0x3147 SWAP2 SWAP1 PUSH2 0x3C32 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x3155 SWAP1 POP PUSH2 0x315D JUMP JUMPDEST PUSH2 0x2EA7 PUSH2 0x3461 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x3 SLOAD PUSH1 0x4 SLOAD PUSH2 0x3170 SWAP2 SWAP1 PUSH2 0x3CA3 JUMP JUMPDEST LT PUSH2 0xAA3 JUMPI PUSH1 0x5 SLOAD PUSH1 0x4 SLOAD PUSH1 0x0 JUMPDEST DUP3 ISZERO PUSH2 0x31FF JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP4 SWAP1 DUP2 LT PUSH2 0x31B2 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD PUSH1 0x1 ADD SLOAD SWAP1 POP PUSH2 0x31DC DUP2 PUSH1 0x1 DUP6 PUSH2 0x31D7 SWAP2 SWAP1 PUSH2 0x3CA3 JUMP JUMPDEST PUSH2 0x3496 JUMP JUMPDEST SWAP2 POP DUP4 PUSH2 0x31E8 DUP2 PUSH2 0x3CEA JUMP JUMPDEST SWAP5 POP POP DUP3 DUP1 PUSH2 0x31F6 SWAP1 PUSH2 0x3CEA JUMP JUMPDEST SWAP4 POP POP POP PUSH2 0x317E JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 SWAP1 DUP2 LT PUSH2 0x322D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD PUSH1 0x9 PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP2 SLOAD DUP2 LT PUSH2 0x326E JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 DUP5 SLOAD PUSH1 0x5 SWAP1 SWAP4 MUL ADD SWAP2 DUP3 SSTORE PUSH1 0x1 DUP1 DUP6 ADD SLOAD DUP2 DUP5 ADD SSTORE PUSH1 0x2 DUP1 DUP7 ADD SLOAD SWAP1 DUP5 ADD SSTORE PUSH1 0x3 DUP1 DUP7 ADD SLOAD SWAP1 DUP5 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 0x4 SWAP5 DUP6 ADD SLOAD SWAP5 SWAP1 SWAP3 ADD SWAP4 SWAP1 SWAP4 SSTORE DUP5 DUP3 MSTORE PUSH1 0x9 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD GT ISZERO PUSH2 0x2EA7 JUMPI PUSH2 0x32E7 DUP3 PUSH2 0x351A JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD DUP3 SWAP2 PUSH2 0x333B SWAP2 DUP4 SWAP1 PUSH2 0x3319 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x3 PUSH1 0x5 SWAP1 SWAP3 MUL ADD ADD SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x35B2 JUMP JUMPDEST PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP4 SWAP6 POP SWAP2 SWAP4 POP SWAP1 SWAP2 PUSH2 0x336D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP1 DUP4 KECCAK256 PUSH1 0x3 PUSH1 0x5 SWAP1 SWAP4 MUL ADD SWAP2 SWAP1 SWAP2 ADD SLOAD DUP7 DUP4 MSTORE PUSH1 0x9 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP3 AND SWAP3 DUP8 SWAP3 PUSH32 0x4FEC6FFA2052E80DB9DAADC2384A8F634057472E28EA7F1BD3EEBFC92B5B0F8E SWAP3 SWAP2 SWAP1 PUSH2 0x33DE JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD PUSH1 0x0 ADD SLOAD PUSH1 0x9 PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 DUP2 SLOAD DUP2 LT PUSH2 0x3423 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP2 DUP3 SWAP1 KECCAK256 PUSH1 0x1 PUSH1 0x5 SWAP1 SWAP3 MUL ADD ADD SLOAD PUSH1 0x40 DUP1 MLOAD SWAP4 DUP5 MSTORE SWAP2 DUP4 ADD MSTORE DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x80 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x10 SLOAD PUSH1 0x4 SLOAD PUSH2 0x3471 SWAP2 SWAP1 PUSH2 0x3D1C JUMP JUMPDEST PUSH2 0xAA3 JUMPI PUSH1 0x13 SLOAD PUSH1 0x12 SLOAD LT PUSH2 0x3488 JUMPI PUSH1 0x12 SLOAD PUSH2 0x348C JUMP JUMPDEST PUSH1 0x13 SLOAD JUMPDEST PUSH1 0x11 SSTORE PUSH1 0x0 PUSH1 0x12 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 LT ISZERO PUSH2 0x3510 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 SWAP1 DUP2 LT PUSH2 0x34DE JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x5 MUL ADD PUSH1 0x0 ADD SLOAD DUP5 EQ ISZERO PUSH2 0x34FE JUMPI SWAP1 POP PUSH2 0x640 JUMP JUMPDEST DUP1 PUSH2 0x3508 DUP2 PUSH2 0x3D01 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x349A JUMP JUMPDEST POP PUSH1 0x0 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 LT ISZERO PUSH2 0x35AE JUMPI PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD DUP3 SWAP1 DUP2 LT PUSH2 0x3561 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 DUP3 KECCAK256 PUSH1 0x5 SWAP1 SWAP2 MUL ADD DUP2 DUP2 SSTORE PUSH1 0x1 DUP1 DUP3 ADD DUP4 SWAP1 SSTORE PUSH1 0x2 DUP3 ADD DUP4 SWAP1 SSTORE PUSH1 0x3 DUP3 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP1 SSTORE PUSH1 0x4 SWAP1 SWAP2 ADD SWAP2 SWAP1 SWAP2 SSTORE PUSH2 0x35A7 SWAP1 DUP3 PUSH2 0x3C32 JUMP JUMPDEST SWAP1 POP PUSH2 0x351D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x64 PUSH1 0xE SLOAD PUSH1 0x1 PUSH2 0x35C8 SWAP2 SWAP1 PUSH2 0x3C32 JUMP JUMPDEST GASPRICE PUSH1 0xF SLOAD PUSH2 0x35D6 SWAP2 SWAP1 PUSH2 0x3C84 JUMP JUMPDEST PUSH2 0x35E0 SWAP2 SWAP1 PUSH2 0x3C84 JUMP JUMPDEST PUSH2 0x35EA SWAP2 SWAP1 PUSH2 0x3C4A JUMP JUMPDEST PUSH1 0xD SLOAD SWAP1 SWAP2 POP PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND ISZERO PUSH2 0x3683 JUMPI PUSH1 0xD SLOAD PUSH1 0x40 MLOAD PUSH4 0x70A08231 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x3644 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3658 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x367C SWAP2 SWAP1 PUSH2 0x38B8 JUMP JUMPDEST SWAP1 POP PUSH2 0x3687 JUMP JUMPDEST POP PUSH1 0x0 JUMPDEST PUSH1 0x0 DUP2 PUSH1 0xC SLOAD GT ISZERO DUP1 ISZERO PUSH2 0x369D JUMPI POP PUSH1 0x0 PUSH1 0xC SLOAD GT JUMPDEST ISZERO PUSH2 0x372E JUMPI PUSH1 0xD SLOAD PUSH1 0xC SLOAD PUSH1 0x40 MLOAD PUSH4 0xA9059CBB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE SWAP2 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x36F3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x3707 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x372B SWAP2 SWAP1 PUSH2 0x385C JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH1 0x0 DUP4 SELFBALANCE GT DUP1 ISZERO PUSH2 0x373F JUMPI POP PUSH1 0x0 DUP5 GT JUMPDEST ISZERO PUSH2 0x3798 JUMPI PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND SWAP1 DUP6 SWAP1 PUSH1 0x0 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x378D JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x3792 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP1 SWAP2 POP POP JUMPDEST DUP1 ISZERO PUSH2 0x37C5 JUMPI DUP2 ISZERO PUSH2 0x37B5 JUMPI DUP4 PUSH1 0xC SLOAD SWAP6 POP SWAP6 POP POP POP POP POP PUSH2 0x37E9 JUMP JUMPDEST DUP4 PUSH1 0x0 SWAP6 POP SWAP6 POP POP POP POP POP PUSH2 0x37E9 JUMP JUMPDEST DUP2 ISZERO PUSH2 0x37DD JUMPI PUSH1 0x0 PUSH1 0xC SLOAD SWAP6 POP SWAP6 POP POP POP POP POP PUSH2 0x37E9 JUMP JUMPDEST PUSH1 0x0 DUP1 SWAP6 POP SWAP6 POP POP POP POP POP JUMPDEST SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x37FF JUMPI DUP2 DUP3 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3816 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x382E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3846 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x63D JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x386D JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x63D JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x388D JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH3 0xFFFFFF NOT DUP2 AND DUP2 EQ PUSH2 0x63D JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x38B1 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x38C9 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x38E4 JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP2 CALLDATALOAD SWAP4 PUSH1 0x20 DUP4 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 SWAP1 SWAP3 ADD CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x390D JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x3933 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP6 CALLDATALOAD SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x3957 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 0x3963 DUP9 DUP3 DUP10 ADD PUSH2 0x37EE JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP7 PUSH1 0x60 ADD CALLDATALOAD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x398A JUMPI DUP4 DUP5 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x39A1 JUMPI DUP6 DUP7 REVERT JUMPDEST PUSH2 0x39AD DUP9 DUP4 DUP10 ADD PUSH2 0x37EE JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x39C5 JUMPI DUP4 DUP5 REVERT JUMPDEST POP PUSH2 0x39D2 DUP8 DUP3 DUP9 ADD PUSH2 0x37EE JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x39F6 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x3A0D JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x3A19 DUP11 DUP4 DUP12 ADD PUSH2 0x37EE JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x3A31 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH2 0x3A3D DUP11 DUP4 DUP12 ADD PUSH2 0x37EE JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x3A55 JUMPI DUP3 DUP4 REVERT JUMPDEST POP PUSH2 0x3A62 DUP10 DUP3 DUP11 ADD PUSH2 0x37EE JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3A85 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH4 0xFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x63D JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3AA9 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x63D JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 DUP4 MLOAD PUSH2 0x3AD1 DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0x3CBA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xF8 SHL SUB NOT SWAP4 SWAP1 SWAP4 AND SWAP2 SWAP1 SWAP3 ADD SWAP1 DUP2 MSTORE PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH3 0xFFFFFF NOT SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH3 0xFFFFFF NOT SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 DUP3 MSTORE DUP4 MLOAD DUP1 PUSH1 0x40 DUP5 ADD MSTORE PUSH2 0x3B34 DUP2 PUSH1 0x60 DUP6 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x3CBA JUMP JUMPDEST PUSH5 0xFFFFFFFFFF SWAP4 SWAP1 SWAP4 AND PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x1F SWAP2 SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND ADD PUSH1 0x60 ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x25 SWAP1 DUP3 ADD MSTORE PUSH32 0x426974636F696E52656C61793A20626C6F636B2068656164657220697320746F PUSH1 0x40 DUP3 ADD MSTORE PUSH5 0x1BC81BDB19 PUSH1 0xDA SHL PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x10 SWAP1 DUP3 ADD MSTORE PUSH16 0x14185D5CD8589B194E881C185D5CD959 PUSH1 0x82 SHL PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE PUSH1 0x1F SWAP1 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x3C45 JUMPI PUSH2 0x3C45 PUSH2 0x3D30 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x3C59 JUMPI PUSH2 0x3C59 PUSH2 0x3D46 JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1 PUSH1 0x1 PUSH1 0x60 SHL SUB DUP1 DUP5 AND DUP1 PUSH2 0x3C78 JUMPI PUSH2 0x3C78 PUSH2 0x3D46 JUMP JUMPDEST SWAP3 AND SWAP2 SWAP1 SWAP2 DIV SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x0 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x3C9E JUMPI PUSH2 0x3C9E PUSH2 0x3D30 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x3CB5 JUMPI PUSH2 0x3CB5 PUSH2 0x3D30 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x3CD5 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x3CBD JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x3CE4 JUMPI PUSH1 0x0 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH2 0x3CF9 JUMPI PUSH2 0x3CF9 PUSH2 0x3D30 JUMP JUMPDEST POP PUSH1 0x0 NOT ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x0 NOT DUP3 EQ ISZERO PUSH2 0x3D15 JUMPI PUSH2 0x3D15 PUSH2 0x3D30 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x3D2B JUMPI PUSH2 0x3D2B PUSH2 0x3D46 JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 MSTORE EQ 0xE8 CODESIZE 0xC0 0xE4 DUP12 ADDRESS GT 0xB6 DIFFICULTY SWAP15 STATICCALL DUP9 SUB CALLDATASIZE DUP6 DUP7 DUP4 DUP14 LOG4 0xBF 0xE4 0xCF 0x21 TIMESTAMP 0x27 0xDA 0xB1 PUSH4 0x50856473 PUSH16 0x6C634300080200330000000000000000 ",
          "sourceMap": "540:27832:42:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1373:40;;;;;;;;;;-1:-1:-1;1373:40:42;;;;-1:-1:-1;;;;;1373:40:42;;;;;;-1:-1:-1;;;;;6791:32:66;;;6773:51;;6761:2;6746:18;1373:40:42;;;;;;;;5612:118;;;;;;;;;;-1:-1:-1;5707:16:42;;5612:118;;;8513:25:66;;;8501:2;8486:18;5612:118:42;8468:76:66;5910:112:42;;;;;;;;;;-1:-1:-1;6002:13:42;;5910:112;;926:40;;;;;;;;;;;;;;;;7210:148;;;;;;;;;;-1:-1:-1;7210:148:42;;;;;:::i;:::-;;:::i;11031:1192::-;;;;;;:::i;:::-;;:::i;:::-;;;7279:14:66;;7272:22;7254:41;;7242:2;7227:18;11031:1192:42;7209:92:66;3652:75:42;;;;;;;;;;;;;:::i;:::-;;9463:114;;;;;;;;;;-1:-1:-1;9463:114:42;;;;;:::i;:::-;;:::i;1550:32::-;;;;;;;;;;;;;;;;1631:40;;;;;;;;;;;;;;;;6481:106;;;;;;;;;;-1:-1:-1;6559:21:42;6481:106;;1041:84:8;;;;;;;;;;-1:-1:-1;1111:7:8;;;;1041:84;;6839:118:42;;;;;;;;;;-1:-1:-1;6839:118:42;;;;;:::i;:::-;;:::i;9846:114::-;;;;;;;;;;-1:-1:-1;9846:114:42;;;;;:::i;:::-;;:::i;12608:510::-;;;;;;;;;;-1:-1:-1;12608:510:42;;;;;:::i;:::-;;:::i;1419:41::-;;;;;;;;;;;;;;;;1605:92:7;;;;;;;;;;;;;:::i;13698:694:42:-;;;;;;;;;;-1:-1:-1;13698:694:42;;;;;:::i;:::-;;:::i;6163:134::-;;;;;;;;;;;;;:::i;973:85:7:-;;;;;;;;;;-1:-1:-1;1019:7:7;1045:6;-1:-1:-1;;;;;1045:6:7;973:85;;9126:150:42;;;;;;;;;;-1:-1:-1;9126:150:42;;;;;:::i;:::-;;:::i;5288:135::-;;;;;;;;;;-1:-1:-1;5288:135:42;;;;;:::i;:::-;5372:4;5395:14;;;:5;:14;;;;;:21;;5288:135;1588:37;;;;;;;;;;;;;;;;972:42;;;;;;;;;;;;;;;;10253:138;;;;;;;;;;-1:-1:-1;10253:138:42;;;;;:::i;:::-;;:::i;8675:154::-;;;;;;;;;;-1:-1:-1;8675:154:42;;;;;:::i;:::-;;:::i;7811:181::-;;;;;;;;;;-1:-1:-1;7811:181:42;;;;;:::i;:::-;;:::i;4245:167::-;;;;;;;;;;-1:-1:-1;4245:167:42;;;;;:::i;:::-;;:::i;8247:138::-;;;;;;;;;;-1:-1:-1;8247:138:42;;;;;:::i;:::-;;:::i;1506:38::-;;;;;;;;;;;;;;;;3873:79;;;;;;;;;;;;;:::i;4719:241::-;;;;;;;;;;-1:-1:-1;4719:241:42;;;;;:::i;:::-;;:::i;886:34::-;;;;;;;;;;;;;;;;1021:40;;;;;;;;;;;;;;;;1846:189:7;;;;;;;;;;-1:-1:-1;1846:189:7;;;;;:::i;:::-;;:::i;1677:32:42:-;;;;;;;;;;;;;;;;1329:38;;;;;;;;;;;;;;;;7210:148;7296:7;7322:29;7336:5;7343:7;7322:13;:29::i;:::-;7315:36;;7210:148;;;;;:::o;11031:1192::-;11264:4;1680:1:9;2259:7;;:19;;2251:63;;;;-1:-1:-1;;;2251:63:9;;;;;;;:::i;:::-;;;;;;;;;1680:1;2389:7;:18;1355:8:8::1;1111:7:::0;;;;1041:84;;1355:8:::1;1354:9;1346:38;;;;-1:-1:-1::0;;;1346:38:8::1;;;;;;;:::i;:::-;11394:19:42::2;::::0;:23:::2;::::0;11416:1:::2;11394:23;:::i;:::-;11375:16;:12:::0;11390:1:::2;11375:16;:::i;:::-;:42;11371:846;;;11438:9;11433:635;11457:19;::::0;;;:5:::2;:19;::::0;;;;:26;11453:30;::::2;11433:635;;;11508:19;11545::::0;;;:5:::2;:19;::::0;;;;:22;;11530:49:::2;::::0;11545:19;11565:1;;11545:22;::::2;;;-1:-1:-1::0;;;11545:22:42::2;;;;;;;;;;;;;;;;;;;:33;;;11530:14;:49::i;:::-;11508:71;;11597:25;11625:18;;:22;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::2;::::0;;;-1:-1:-1;11625:25:42::2;::::0;-1:-1:-1;;;11625:25:42;;:22:::2;::::0;::::2;::::0;-1:-1:-1;11625:25:42::2;::::0;-1:-1:-1;11625:22:42;-1:-1:-1;11625:25:42::2;;;:::i;:::-;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:44;::::0;-1:-1:-1;;;11625:44:42;;:42:::2;::::0;::::2;::::0;:44:::2;::::0;-1:-1:-1;;11625:42:42::2;::::0;:44:::2;;;:::i;:::-;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;11597:72;;11714:14;11731:21;11746:5;11731:14;:21::i;:::-;11774:61;::::0;-1:-1:-1;;;11774:61:42;;::::2;::::0;::::2;8788:25:66::0;;;8829:18;;;8822:34;;;-1:-1:-1;;8892:26:66;;8872:18;;;8865:54;8935:18;;;8928:34;;;11714:38:42;;-1:-1:-1;11774:7:42::2;::::0;:13:::2;::::0;8760:19:66;;11774:61:42::2;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;11770:284;;;11875:19;::::0;;;:5:::2;:19;::::0;;;;:22;;11867:40:::2;::::0;11875:19;11895:1;;11875:22;::::2;;;-1:-1:-1::0;;;11875:22:42::2;;;;;;;;;;;;;;;;;;;:31;;;11867:7;:40::i;:::-;11859:97;;;::::0;-1:-1:-1;;;11859:97:42;;12899:2:66;11859:97:42::2;::::0;::::2;12881:21:66::0;12938:2;12918:18;;;12911:30;12977:34;12957:18;;;12950:62;-1:-1:-1;;;13028:18:66;;;13021:42;13080:19;;11859:97:42::2;12871:234:66::0;11859:97:42::2;12001:1;11978:19;;:24;;;;;;;:::i;:::-;::::0;;;-1:-1:-1;12031:4:42::2;::::0;-1:-1:-1;12024:11:42::2;::::0;-1:-1:-1;;;;;12024:11:42::2;11770:284;11433:635;;;11485:3;;;;;:::i;:::-;;;;11433:635;;;-1:-1:-1::0;12081:56:42::2;::::0;-1:-1:-1;;;12081:56:42;;16241:2:66;12081:56:42::2;::::0;::::2;16223:21:66::0;16280:2;16260:18;;;16253:30;16319:34;16299:18;;;16292:62;-1:-1:-1;;;16370:18:66;;;16363:36;16416:19;;12081:56:42::2;16213:228:66::0;12081:56:42::2;-1:-1:-1::0;12158:5:42::2;11371:846;1637:1:9::0;2562:22;;11031:1192:42;;-1:-1:-1;;;;;11031:1192:42:o;3652:75::-;1019:7:7;1045:6;-1:-1:-1;;;;;1045:6:7;666:10:11;1185:23:7;1177:68;;;;-1:-1:-1;;;1177:68:7;;;;;;;:::i;:::-;3712:8:42::1;:6;:8::i;:::-;3652:75::o:0;9463:114::-;1019:7:7;1045:6;-1:-1:-1;;;;;1045:6:7;666:10:11;1185:23:7;1177:68;;;;-1:-1:-1;;;1177:68:7;;;;;;;:::i;:::-;9544:11:42::1;:26:::0;9463:114::o;6839:118::-;6906:7;6932:18;6944:5;6932:11;:18::i;:::-;6925:25;;6839:118;;;;:::o;9846:114::-;1019:7:7;1045:6;-1:-1:-1;;;;;1045:6:7;666:10:11;1185:23:7;1177:68;;;;-1:-1:-1;;;1177:68:7;;;;;;;:::i;:::-;9927:11:42::1;:26:::0;9846:114::o;12608:510::-;12731:4;1680:1:9;2259:7;;:19;;2251:63;;;;-1:-1:-1;;;2251:63:9;;;;;;;:::i;:::-;1680:1;2389:7;:18;1355:8:8::1;1111:7:::0;;;;1041:84;;1355:8:::1;1354:9;1346:38;;;;-1:-1:-1::0;;;1346:38:8::1;;;;;;;:::i;:::-;12747:20:42::2;12770:8;;:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::2;::::0;;;-1:-1:-1;12770:15:42::2;::::0;-1:-1:-1;;;12770:15:42;;:12:::2;::::0;::::2;::::0;-1:-1:-1;12770:15:42::2;::::0;-1:-1:-1;12770:12:42;-1:-1:-1;12770:15:42::2;;;:::i;:::-;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:34;::::0;-1:-1:-1;;;12770:34:42;;:32:::2;::::0;::::2;::::0;:34:::2;::::0;-1:-1:-1;;12770:32:42::2;::::0;:34:::2;;;:::i;:::-;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;12747:57;;12814:19;12836:7;;:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::2;::::0;;;-1:-1:-1;12836:14:42::2;::::0;-1:-1:-1;;;12836:14:42;;:11:::2;::::0;::::2;::::0;-1:-1:-1;12836:14:42::2;::::0;-1:-1:-1;12836:11:42;-1:-1:-1;12836:14:42::2;;;:::i;:::-;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:28;::::0;-1:-1:-1;;;12836:28:42;;:26:::2;::::0;::::2;::::0;:28:::2;::::0;-1:-1:-1;;12836:26:42::2;::::0;:28:::2;;;:::i;:::-;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;12883:22;::::0;-1:-1:-1;;;12883:22:42;;12814:50;;-1:-1:-1;12883:20:42::2;::::0;::::2;::::0;:22:::2;::::0;-1:-1:-1;;12883:20:42;::::2;::::0;:22:::2;;;:::i;:::-;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;12875:92;;;::::0;-1:-1:-1;;;12875:92:42;;18548:2:66;12875:92:42::2;::::0;::::2;18530:21:66::0;18587:2;18567:18;;;18560:30;18626:34;18606:18;;;18599:62;18697:27;18677:18;;;18670:55;18742:19;;12875:92:42::2;18520:247:66::0;12875:92:42::2;12985:21;::::0;-1:-1:-1;;;12985:21:42;;:19:::2;::::0;::::2;::::0;:21:::2;::::0;-1:-1:-1;;12985:19:42;::::2;::::0;:21:::2;;;:::i;:::-;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;12977:71;;;::::0;-1:-1:-1;;;12977:71:42;;16993:2:66;12977:71:42::2;::::0;::::2;16975:21:66::0;17032:2;17012:18;;;17005:30;17071:34;17051:18;;;17044:62;-1:-1:-1;;;17122:18:66;;;17115:35;17167:19;;12977:71:42::2;16965:227:66::0;12977:71:42::2;13066:45;13078:11;13091:12;13105:5;13066:11;:45::i;:::-;1637:1:9::0;2562:22;;13059:52:42;12608:510;-1:-1:-1;;;;;;;12608:510:42:o;1605:92:7:-;1019:7;1045:6;-1:-1:-1;;;;;1045:6:7;666:10:11;1185:23:7;1177:68;;;;-1:-1:-1;;;1177:68:7;;;;;;;:::i;:::-;1669:21:::1;1687:1;1669:9;:21::i;13698:694:42:-:0;13913:4;1680:1:9;2259:7;;:19;;2251:63;;;;-1:-1:-1;;;2251:63:9;;;;;;;:::i;:::-;1680:1;2389:7;:18;1355:8:8::1;1111:7:::0;;;;1041:84;;1355:8:::1;1354:9;1346:38;;;;-1:-1:-1::0;;;1346:38:8::1;;;;;;;:::i;:::-;13929:17:42::2;13949:21;;:25;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::2;::::0;;;-1:-1:-1;13949:28:42::2;::::0;-1:-1:-1;;;13949:28:42;;:25:::2;::::0;::::2;::::0;-1:-1:-1;13949:28:42::2;::::0;-1:-1:-1;13949:25:42;-1:-1:-1;13949:28:42::2;;;:::i;:::-;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:42;::::0;-1:-1:-1;;;13949:42:42;;:40:::2;::::0;::::2;::::0;:42:::2;::::0;-1:-1:-1;;13949:40:42::2;::::0;:42:::2;;;:::i;:::-;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;13929:62;;14001:15;14019:19;;:23;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::2;::::0;;;-1:-1:-1;14019:26:42::2;::::0;-1:-1:-1;;;14019:26:42;;:23:::2;::::0;::::2;::::0;-1:-1:-1;14019:26:42::2;::::0;-1:-1:-1;14019:23:42;-1:-1:-1;14019:26:42::2;;;:::i;:::-;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:40;::::0;-1:-1:-1;;;14019:40:42;;:38:::2;::::0;::::2;::::0;:40:::2;::::0;-1:-1:-1;;14019:38:42::2;::::0;:40:::2;;;:::i;:::-;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;14001:58;;14069:20;14092:8;;:12;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::2;::::0;;;-1:-1:-1;14092:15:42::2;::::0;-1:-1:-1;;;14092:15:42;;:12:::2;::::0;::::2;::::0;-1:-1:-1;14092:15:42::2;::::0;-1:-1:-1;14092:12:42;-1:-1:-1;14092:15:42::2;;;:::i;:::-;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:34;::::0;-1:-1:-1;;;14092:34:42;;:32:::2;::::0;::::2;::::0;:34:::2;::::0;-1:-1:-1;;14092:32:42::2;::::0;:34:::2;;;:::i;:::-;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;14158:19;::::0;-1:-1:-1;;;14158:19:42;;14069:57;;-1:-1:-1;14158:17:42::2;::::0;::::2;::::0;:19:::2;::::0;-1:-1:-1;;14158:17:42;::::2;::::0;:19:::2;;;:::i;:::-;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:40;;;;-1:-1:-1::0;14181:17:42::2;::::0;-1:-1:-1;;;14181:17:42;;:15:::2;::::0;::::2;::::0;:17:::2;::::0;-1:-1:-1;;14181:15:42;::::2;::::0;:17:::2;;;:::i;:::-;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;14158:66;;;;-1:-1:-1::0;14202:22:42::2;::::0;-1:-1:-1;;;14202:22:42;;:20:::2;::::0;::::2;::::0;:22:::2;::::0;-1:-1:-1;;14202:20:42;::::2;::::0;:22:::2;;;:::i;:::-;;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;14137:173;;;::::0;-1:-1:-1;;;14137:173:42;;18119:2:66;14137:173:42::2;::::0;::::2;18101:21:66::0;18158:2;18138:18;;;18131:30;18197:34;18177:18;;;18170:62;18268:30;18248:18;;;18241:58;18316:19;;14137:173:42::2;18091:250:66::0;14137:173:42::2;14328:57;14352:9;14363:7;14372:12;14328:23;:57::i;:::-;1637:1:9::0;2562:22;;14321:64:42;13698:694;-1:-1:-1;;;;;;;;;;13698:694:42:o;6163:134::-;6248:16;;6241:49;;-1:-1:-1;;;6241:49:42;;6284:4;6241:49;;;6773:51:66;6218:4:42;;-1:-1:-1;;;;;6248:16:42;;6241:34;;6746:18:66;;6241:49:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6234:56;;6163:134;:::o;9126:150::-;1019:7:7;1045:6;-1:-1:-1;;;;;1045:6:7;666:10:11;1185:23:7;1177:68;;;;-1:-1:-1;;;1177:68:7;;;;;;;:::i;:::-;9225:20:42::1;:44:::0;9126:150::o;10253:138::-;1019:7:7;1045:6;-1:-1:-1;;;;;1045:6:7;666:10:11;1185:23:7;1177:68;;;;-1:-1:-1;;;1177:68:7;;;;;;;:::i;:::-;10346:17:42::1;:38:::0;10253:138::o;8675:154::-;1019:7:7;1045:6;-1:-1:-1;;;;;1045:6:7;666:10:11;1185:23:7;1177:68;;;;-1:-1:-1;;;1177:68:7;;;;;;;:::i;:::-;8776:21:42::1;:46:::0;8675:154::o;7811:181::-;7919:4;7942:43;7954:9;7965:11;7978:6;7942:11;:43::i;:::-;7935:50;;7811:181;;;;;;:::o;4245:167::-;4332:7;4373:14;;;:5;:14;;;;;:22;;4358:47;;4373:14;4388:6;;4373:22;;;;-1:-1:-1;;;4373:22:42;;;;;;;;;;;;;;;;;;;:31;;;4358:14;:47::i;8247:138::-;1019:7:7;1045:6;-1:-1:-1;;;;;1045:6:7;666:10:11;1185:23:7;1177:68;;;;-1:-1:-1;;;1177:68:7;;;;;;;:::i;:::-;8340:17:42::1;:38:::0;8247:138::o;3873:79::-;1019:7:7;1045:6;-1:-1:-1;;;;;1045:6:7;666:10:11;1185:23:7;1177:68;;;;-1:-1:-1;;;1177:68:7;;;;;;;:::i;:::-;3935:10:42::1;:8;:10::i;4719:241::-:0;4805:4;4936:16;;4930:3;:22;;;;:::i;:::-;4913:11;;4888:20;;4884:24;;:1;:24;:::i;:::-;4849:14;;;;:5;:14;;;;;:22;;4864:6;;4849:22;;;;-1:-1:-1;;;4849:22:42;;;;;;;;;;;;;;;;;;;:31;;;4829:17;;:51;;;;:::i;:::-;:80;;;;:::i;:::-;:96;;;;:::i;:::-;4828:125;;;;:::i;1846:189:7:-;1019:7;1045:6;-1:-1:-1;;;;;1045:6:7;666:10:11;1185:23:7;1177:68;;;;-1:-1:-1;;;1177:68:7;;;;;;;:::i;:::-;-1:-1:-1;;;;;1934:22:7;::::1;1926:73;;;::::0;-1:-1:-1;;;1926:73:7;;11666:2:66;1926:73:7::1;::::0;::::1;11648:21:66::0;11705:2;11685:18;;;11678:30;11744:34;11724:18;;;11717:62;-1:-1:-1;;;11795:18:66;;;11788:36;11841:19;;1926:73:7::1;11638:228:66::0;1926:73:7::1;2009:19;2019:8;2009:9;:19::i;:::-;1846:189:::0;:::o;15101:334:42:-;15179:7;15217:5;15179:7;15232:97;15256:7;15252:1;:11;15232:97;;;15295:23;;;;:13;:23;;;;;;;;15265:3;;;;:::i;:::-;;;;15232:97;;;-1:-1:-1;15346:22:42;15338:65;;;;-1:-1:-1;;;15338:65:42;;17760:2:66;15338:65:42;;;17742:21:66;17799:2;17779:18;;;17772:30;17838:32;17818:18;;;17811:60;17888:18;;15338:65:42;17732:180:66;16323:334:42;16385:7;16404:17;16385:7;;16455:101;16479:2;16475:1;:6;16455:101;;;16526:4;16532:6;16539:4;16542:1;16539:2;:4;:::i;:::-;16532:12;;;;;-1:-1:-1;;;16532:12:42;;;;;;;;;;;;16509:36;;;;;;;;;:::i;:::-;;;;;;;;;;;;;16502:43;;16483:3;;;;;:::i;:::-;;;;16455:101;;;-1:-1:-1;;16614:2:42;16604:13;16598:20;;16323:334;-1:-1:-1;;16323:334:42:o;16867:472::-;16917:4;16932:14;17053:16;;17047:3;:22;;;;:::i;:::-;17030:11;;17005:20;;17001:24;;:1;:24;:::i;:::-;16989:8;16969:17;;:28;;;;:::i;:::-;:57;;;;:::i;:::-;:73;;;;:::i;:::-;16968:102;;;;:::i;:::-;16956:114;;17101:9;17088;:22;;17080:66;;;;-1:-1:-1;;;17080:66:42;;19382:2:66;17080:66:42;;;19364:21:66;19421:2;19401:18;;;19394:30;19460:33;19440:18;;;19433:61;19511:18;;17080:66:42;19354:181:66;17080:66:42;17250:61;17276:10;17289:21;17301:9;17289;:21;:::i;:::-;17250:17;:61::i;:::-;-1:-1:-1;17328:4:42;;16867:472;-1:-1:-1;;16867:472:42:o;1806:115:8:-;1111:7;;;;1354:9;1346:38;;;;-1:-1:-1;;;1346:38:8;;;;;;;:::i;:::-;1865:7:::1;:14:::0;;-1:-1:-1;;1865:14:8::1;1875:4;1865:14;::::0;;1894:20:::1;1901:12;666:10:11::0;587:96;;1901:12:8::1;1894:20;::::0;-1:-1:-1;;;;;6791:32:66;;;6773:51;;6761:2;6746:18;1894:20:8::1;;;;;;;1806:115::o:0;14623:225:42:-;14682:7;14705:18;;;:11;:18;;;;;;14701:141;;14744:23;;-1:-1:-1;;;14744:23:42;;12557:2:66;14744:23:42;;;12539:21:66;12596:2;12576:18;;;12569:30;-1:-1:-1;;;12615:18:66;;;12608:43;12668:18;;14744:23:42;12529:163:66;14701:141:42;-1:-1:-1;14813:18:42;;;;:11;:18;;;;;;14806:25;;17838:2517;17998:17;;-1:-1:-1;;;17998:17:42;;17928:4;;;;17998:15;;;;:17;;-1:-1:-1;;17998:15:42;;;:17;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;17974:41;;18025:21;18049:26;18061:13;18049:11;:26::i;:::-;18132:28;;-1:-1:-1;;;18132:28:42;;18025:50;;-1:-1:-1;18114:15:42;;18132:25;;;;:28;;-1:-1:-1;;18132:25:42;;;18114:15;;18132:28;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:37;;-1:-1:-1;;;18132:37:42;;:35;;;;:37;;-1:-1:-1;;18132:35:42;;:37;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;18114:55;;18201:9;:40;;;-1:-1:-1;18214:16:42;;-1:-1:-1;;;18214:16:42;;18234:7;;18214:14;;;;:16;;-1:-1:-1;;18214:14:42;;;:16;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:27;18201:40;18180:137;;;;-1:-1:-1;;;18180:137:42;;10066:2:66;18180:137:42;;;10048:21:66;10105:2;10085:18;;;10078:30;10144:34;10124:18;;;10117:62;-1:-1:-1;;;10195:18:66;;;10188:48;10253:19;;18180:137:42;10038:240:66;18180:137:42;18567:15;18592:20;18627:9;18622:1706;18646:14;;-1:-1:-1;;;18646:14:42;;18663:2;;18646:12;;;;:14;;-1:-1:-1;;18646:12:42;;;:14;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:19;;;;:::i;:::-;-1:-1:-1;;;;;18642:23:42;:1;:23;18622:1706;;;18704:28;;-1:-1:-1;;;18704:28:42;;18686:15;;18704:25;;;;:28;;-1:-1:-1;;18704:25:42;;;18730:1;;18704:28;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;18686:46;-1:-1:-1;18756:17:42;18772:1;18756:13;:17;:::i;:::-;:21;;18776:1;18756:21;:::i;:::-;18806:17;;-1:-1:-1;;;18806:17:42;;18746:31;;-1:-1:-1;18806:15:42;;;;:17;;-1:-1:-1;;18806:15:42;;;:17;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;18791:32;;18984:9;:32;;;-1:-1:-1;18997:14:42;19007:4;18997:7;:14;:::i;:::-;:19;;18984:32;18976:136;;;;-1:-1:-1;;;18976:136:42;;15757:2:66;18976:136:42;;;15739:21:66;15796:2;15776:18;;;15769:30;15835:34;15815:18;;;15808:62;15906:34;15886:18;;;15879:62;-1:-1:-1;;;15957:19:66;;;15950:42;16009:19;;18976:136:42;15729:305:66;18976:136:42;19205:16;;-1:-1:-1;;;19205:16:42;;19225:7;;19205:14;;;;:16;;-1:-1:-1;;19205:14:42;;;:16;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:27;19197:81;;;;-1:-1:-1;;;19197:81:42;;13312:2:66;19197:81:42;;;13294:21:66;13351:2;13331:18;;;13324:30;13390:34;13370:18;;;13363:62;-1:-1:-1;;;13441:18:66;;;13434:39;13490:19;;19197:81:42;13284:231:66;19197:81:42;19300:34;;-1:-1:-1;;;;;;19300:34:42;;:19;;;;:34;;-1:-1:-1;;19300:19:42;;;19320:13;;19300:34;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;19292:99;;;;-1:-1:-1;;;19292:99:42;;15336:2:66;19292:99:42;;;15318:21:66;15375:2;15355:18;;;15348:30;15414:34;15394:18;;;15387:62;-1:-1:-1;;;15465:18:66;;;15458:50;15525:19;;19292:99:42;15308:242:66;19292:99:42;19448:19;;19424:21;;19414:31;;:7;:31;:::i;:::-;:53;19406:103;;;;-1:-1:-1;;;19406:103:42;;;;;;;:::i;:::-;19821:1;19782:27;;;:13;:27;;;;;;19778:498;;19872:50;;-1:-1:-1;;;19872:50:42;;;;;8513:25:66;;;19926:7:42;;19872:12;;:27;;8486:18:66;;19872:50:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:61;;19843:173;;;;-1:-1:-1;;;19843:173:42;;10834:2:66;19843:173:42;;;10816:21:66;10873:2;10853:18;;;10846:30;10912:34;10892:18;;;10885:62;-1:-1:-1;;;10963:18:66;;;10956:39;11012:19;;19843:173:42;10806:231:66;19843:173:42;20035:27;;;;:13;:27;;;;;;;;:43;;;20096:11;:25;;;;;:35;;;20149:29;20161:7;20124;20149:11;:29::i;:::-;20250:10;-1:-1:-1;;;;;20201:60:42;20235:13;20212:7;20201:60;20221:12;20201:60;;;;8513:25:66;;8501:2;8486:18;;8468:76;20201:60:42;;;;;;;;19778:498;20305:12;20289:28;;18622:1706;18667:3;;;;;:::i;:::-;;;;18622:1706;;;-1:-1:-1;20344:4:42;;17838:2517;-1:-1:-1;;;;;;;;;17838:2517:42:o;2041:169:7:-;2096:16;2115:6;;-1:-1:-1;;;;;2131:17:7;;;-1:-1:-1;;;;;;2131:17:7;;;;;;2163:40;;2115:6;;;;;;;2163:40;;2096:16;2163:40;2041:169;;:::o;26911:1459:42:-;27152:19;;-1:-1:-1;;;27152:19:42;;27046:4;;;;27140:32;;27152:17;;;;:19;;-1:-1:-1;;27152:17:42;;;:19;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;27140:11;:32::i;:::-;27215:17;;-1:-1:-1;;;27215:17:42;;27117:55;;-1:-1:-1;27182:18:42;;27203:30;;27215:15;;;;:17;;-1:-1:-1;;27215:15:42;;;:17;;;:::i;27203:30::-;27182:51;-1:-1:-1;27331:17:42;27344:4;27182:51;27331:17;:::i;:::-;27352:4;27331:25;27310:138;;;;-1:-1:-1;;;27310:138:42;;12073:2:66;27310:138:42;;;12055:21:66;12112:2;12092:18;;;12085:30;12151:34;12131:18;;;12124:62;12222:34;12202:18;;;12195:62;-1:-1:-1;;;12273:19:66;;;12266:42;12325:19;;27310:138:42;12045:305:66;27310:138:42;27493:19;:12;27508:4;27493:19;:::i;:::-;27479:10;:33;27458:125;;;;-1:-1:-1;;;27458:125:42;;13722:2:66;27458:125:42;;;13704:21:66;13761:2;13741:18;;;13734:30;13800:34;13780:18;;;13773:62;-1:-1:-1;;;13851:18:66;;;13844:52;13913:19;;27458:125:42;13694:244:66;27458:125:42;27634:14;;-1:-1:-1;;;27634:14:42;;:12;;;;:14;;-1:-1:-1;;27634:12:42;;;:14;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;27614:16;;-1:-1:-1;;;27614:16:42;;:14;;;;:16;;-1:-1:-1;;27614:14:42;;;:16;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:34;27593:125;;;;-1:-1:-1;;;27593:125:42;;11244:2:66;27593:125:42;;;11226:21:66;11283:2;11263:18;;;11256:30;11322:34;11302:18;;;11295:62;-1:-1:-1;;;11373:18:66;;;11366:51;11434:19;;27593:125:42;11216:243:66;27593:125:42;27843:28;;-1:-1:-1;;;27843:28:42;;27823:17;;27843:25;;;;:28;;-1:-1:-1;;27843:25:42;;;27823:17;;27843:28;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;27905:18;;-1:-1:-1;;;27905:18:42;;27823:48;;-1:-1:-1;27881:21:42;;27905:16;;;;:18;;-1:-1:-1;;27905:16:42;;;:18;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;27998;;-1:-1:-1;;;27998:18:42;;27881:42;;-1:-1:-1;27933:23:42;;27959:7;;:25;;:7;;27998:16;;:18;;-1:-1:-1;;27998:16:42;;;:18;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;28030:9;:14;;;;;;;:16;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;28060:7;:12;;;;;;;:14;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;27959:125;;-1:-1:-1;;;;;;27959:125:42;;;;;;;;;;20480:25:66;;;;27959:125:42;20570:15:66;;;20550:18;;;20543:43;20622:15;20602:18;;;20595:43;20453:18;;27959:125:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;27933:151;;28152:13;28132:15;28116:13;:31;28115:50;28094:161;;;;-1:-1:-1;;;28094:161:42;;18974:2:66;28094:161:42;;;18956:21:66;19013:2;18993:18;;;18986:30;19052:34;19032:18;;;19025:62;-1:-1:-1;;;19103:18:66;;;19096:37;19150:19;;28094:161:42;18946:229:66;28094:161:42;28327:36;28339:7;28348:8;28358:4;28327:11;:36::i;:::-;28320:43;26911:1459;-1:-1:-1;;;;;;;;;26911:1459:42:o;15888:429::-;15988:4;16023:11;15988:4;16109:180;16133:6;16129:1;:10;16109:180;;;16176:9;16164:8;:21;16160:71;;;16212:4;16205:11;;;;;;16160:71;16255:23;;;;:13;:23;;;;;;;;16141:3;;;;:::i;:::-;;;;16109:180;;;-1:-1:-1;16305:5:42;;15888:429;-1:-1:-1;;;;;15888:429:42:o;2053:117:8:-;1111:7;;;;1612:41;;;;-1:-1:-1;;;1612:41:8;;10485:2:66;1612:41:8;;;10467:21:66;10524:2;10504:18;;;10497:30;-1:-1:-1;;;10543:18:66;;;10536:50;10603:18;;1612:41:8;10457:170:66;1612:41:8;2111:7:::1;:15:::0;;-1:-1:-1;;2111:15:8::1;::::0;;2141:22:::1;666:10:11::0;2150:12:8::1;587:96:11::0;2012:312:10;2126:6;2101:21;:31;;2093:73;;;;-1:-1:-1;;;2093:73:10;;14978:2:66;2093:73:10;;;14960:21:66;15017:2;14997:18;;;14990:30;15056:31;15036:18;;;15029:59;15105:18;;2093:73:10;14950:179:66;2093:73:10;2178:12;2196:9;-1:-1:-1;;;;;2196:14:10;2218:6;2196:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2177:52;;;2247:7;2239:78;;;;-1:-1:-1;;;2239:78:10;;14145:2:66;2239:78:10;;;14127:21:66;14184:2;14164:18;;;14157:30;14223:34;14203:18;;;14196:62;14294:28;14274:18;;;14267:56;14340:19;;2239:78:10;14117:248:66;2239:78:10;2012:312;;;:::o;22412:730:42:-;22585:19;;22561:21;;22551:31;;:7;:31;:::i;:::-;:53;22543:103;;;;-1:-1:-1;;;22543:103:42;;;;;;;:::i;:::-;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;22725:17:42;;-1:-1:-1;;;22725:17:42;;:15;;;;:17;;-1:-1:-1;;22725:15:42;;;:17;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;22699:43;;22780:16;;-1:-1:-1;;;22780:16:42;;:14;;;;:16;;-1:-1:-1;;22780:14:42;;;:16;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;22752:25;;;:44;22834:20;;-1:-1:-1;;;22834:20:42;;:18;;;;:20;;-1:-1:-1;;22834:18:42;;;:20;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;22806:25;;;;:48;;;22889:10;22864:22;;;:35;;;22935:11;22909:23;;;:37;;;-1:-1:-1;22956:14:42;;;:5;:14;;;;;;;:35;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;22956:35:42;-1:-1:-1;;;;;22956:35:42;;;;;;;;;;;;;;;;23014:19;23004:29;;23001:135;;;23071:1;23048:19;;:24;;;;;;;:::i;:::-;;;;-1:-1:-1;23086:13:42;;-1:-1:-1;23086:11:42;:13::i;:::-;23113:12;:10;:12::i;23752:1506::-;23920:21;;23902:13;;23880:19;;:35;;;;:::i;:::-;23879:62;23875:1377;;23967:21;;24023:19;;23956:8;24088:318;24095:7;;24088:318;;24191:24;24218:20;;;:5;:20;;;;;:31;;24239:9;;24218:31;;;;-1:-1:-1;;;24218:31:42;;;;;;;;;;;;;;;;;;;:42;;;24191:69;;24290:45;24301:16;24333:1;24319:13;:15;;;;:::i;:::-;24290:10;:45::i;:::-;24278:57;-1:-1:-1;24353:5:42;;;;:::i;:::-;;;;24376:15;;;;;:::i;:::-;;;;24088:318;;;;24519:20;;;;:5;:20;;;;;:31;;24540:9;;24519:31;;;;-1:-1:-1;;;24519:31:42;;;;;;;;;;;;;;;;;;;24493:5;:20;24499:13;24493:20;;;;;;;;;;;24514:1;24493:23;;;;;;-1:-1:-1;;;24493:23:42;;;;;;;;;;;;;;;;;:57;;:23;;;;;:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;24493:57:42;-1:-1:-1;;;;;24493:57:42;;;;;;;;;;;;;;;;;;;;;;24567:20;;;:5;:20;;;;;;:27;:31;24564:678;;;24617:27;24630:13;24617:12;:27::i;:::-;24742:20;24867;;;:5;:20;;;;;:23;;24742:20;;24855:44;;24742:20;;24867:23;;-1:-1:-1;;;24867:23:42;;;;;;;;;;;;;;;;;:31;:23;;;;;:31;;-1:-1:-1;;;;;24867:31:42;24855:11;:44::i;:::-;25104:20;;;;:5;:20;;;;;:23;;24818:81;;-1:-1:-1;24818:81:42;;-1:-1:-1;25104:20:42;;:23;;-1:-1:-1;;;25104:23:42;;;;;;;;;;;;;;;;;:31;:23;;;;;:31;;;;;24994:20;;;:5;:20;;;;;;:23;;-1:-1:-1;;;;;25104:31:42;;;;24959:13;;24923:304;;24994:20;25104:23;24994;;-1:-1:-1;;;24994:23:42;;;;;;;;;;;;;;;;;;;:32;;;25048:5;:20;25054:13;25048:20;;;;;;;;;;;25069:1;25048:23;;;;;;-1:-1:-1;;;25048:23:42;;;;;;;;;;;;;;;;;;:34;:23;;;;;:34;;24923:304;;;9204:25:66;;;9245:18;;;9238:34;9288:18;;9281:34;;;9346:2;9331:18;;9324:34;;;9191:3;9176:19;24923:304:42;;;;;;;24564:678;;23875:1377;;;23752:1506::o;23376:243::-;23443:11;;23421:19;;:33;;;;:::i;:::-;23417:196;;23517:11;;23495:19;;:33;23494:71;;23546:19;;23494:71;;;23532:11;;23494:71;23475:16;:90;23601:1;23579:19;:23;23376:243::o;25555:299::-;25632:4;;25648:182;25679:14;;;;:5;:14;;;;;:21;25671:29;;25648:182;;;25743:14;;;;:5;:14;;;;;:21;;25758:5;;25743:21;;;;-1:-1:-1;;;25743:21:42;;;;;;;;;;;;;;;;;;;:30;;;25728:11;:45;25725:95;;;25800:5;-1:-1:-1;25793:12:42;;25725:95;25702:7;;;;:::i;:::-;;;;25648:182;;;-1:-1:-1;25846:1:42;;25555:299;-1:-1:-1;;;25555:299:42:o;26129:226::-;26195:1;26206:143;26218:14;;;;:5;:14;;;;;:21;26212:27;;26206:143;;;26261:14;;;;:5;:14;;;;;:19;;26276:3;;26261:19;;;;-1:-1:-1;;;26261:19:42;;;;;;;;;;;;;;;;;;;;;26254:26;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;;;;26254:26:42;;;;;;;;;;;26330:8;;;;:::i;:::-;;;26206:143;;;26129:226;;:::o;20696:1402::-;20753:4;20759;20801:22;20889:3;20865:20;;20861:1;:24;;;;:::i;:::-;20846:11;20826:17;;:31;;;;:::i;:::-;:60;;;;:::i;:::-;:66;;;;:::i;:::-;20965:16;;20801:91;;-1:-1:-1;20928:23:42;;-1:-1:-1;;;;;20965:16:42;:30;20961:184;;21039:16;;21032:49;;-1:-1:-1;;;21032:49:42;;21075:4;21032:49;;;6773:51:66;-1:-1:-1;;;;;21039:16:42;;;;21032:34;;6746:18:66;;21032:49:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;21011:70;;20961:184;;;-1:-1:-1;21133:1:42;20961:184;21185:12;21232:18;21211:17;;:39;;:64;;;;;21274:1;21254:17;;:21;21211:64;21207:249;;;21390:16;;21427:17;;21383:62;;-1:-1:-1;;;21383:62:42;;-1:-1:-1;;;;;7027:32:66;;;21383:62:42;;;7009:51:66;7076:18;;;7069:34;;;;21390:16:42;;;21383:33;;6982:18:66;;21383:62:42;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;21373:72;;21207:249;21496:12;21546:17;21522:21;:41;:66;;;;;21587:1;21567:17;:21;21522:66;21518:211;;;21666:52;;-1:-1:-1;;;;;21666:22:42;;;21696:17;;21666:52;;;;21696:17;21666:22;:52;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;21653:65:42;;-1:-1:-1;;21518:211:42;21743:7;21739:353;;;21770:7;21766:159;;;21805:17;21824;;21797:45;;;;;;;;;;21766:159;21889:17;21908:1;21881:29;;;;;;;;;;21739:353;21959:7;21955:127;;;21994:1;21997:17;;21986:29;;;;;;;;;;21955:127;22062:1;22065;22054:13;;;;;;;;20696:1402;;;;:::o;14:375:66:-;;;129:3;122:4;114:6;110:17;106:27;96:2;;154:8;144;137:26;96:2;-1:-1:-1;184:20:66;;227:18;216:30;;213:2;;;266:8;256;249:26;213:2;310:4;302:6;298:17;286:29;;362:3;355:4;346:6;338;334:19;330:30;327:39;324:2;;;379:1;376;369:12;324:2;86:303;;;;;:::o;394:306::-;;506:2;494:9;485:7;481:23;477:32;474:2;;;527:6;519;512:22;474:2;558:23;;-1:-1:-1;;;;;610:31:66;;600:42;;590:2;;661:6;653;646:22;705:297;;825:2;813:9;804:7;800:23;796:32;793:2;;;846:6;838;831:22;793:2;883:9;877:16;936:5;929:13;922:21;915:5;912:32;902:2;;963:6;955;948:22;1007:304;;1130:2;1118:9;1109:7;1105:23;1101:32;1098:2;;;1151:6;1143;1136:22;1098:2;1182:16;;-1:-1:-1;;1227:25:66;;1217:36;;1207:2;;1272:6;1264;1257:22;1316:190;;1428:2;1416:9;1407:7;1403:23;1399:32;1396:2;;;1449:6;1441;1434:22;1396:2;-1:-1:-1;1477:23:66;;1386:120;-1:-1:-1;1386:120:66:o;1511:194::-;;1634:2;1622:9;1613:7;1609:23;1605:32;1602:2;;;1655:6;1647;1640:22;1602:2;-1:-1:-1;1683:16:66;;1592:113;-1:-1:-1;1592:113:66:o;1710:326::-;;;;1856:2;1844:9;1835:7;1831:23;1827:32;1824:2;;;1877:6;1869;1862:22;1824:2;-1:-1:-1;;1905:23:66;;;1975:2;1960:18;;1947:32;;-1:-1:-1;2026:2:66;2011:18;;;1998:32;;1814:222;-1:-1:-1;1814:222:66:o;2041:258::-;;;2170:2;2158:9;2149:7;2145:23;2141:32;2138:2;;;2191:6;2183;2176:22;2138:2;-1:-1:-1;;2219:23:66;;;2289:2;2274:18;;;2261:32;;-1:-1:-1;2128:171:66:o;2304:634::-;;;;;;2486:3;2474:9;2465:7;2461:23;2457:33;2454:2;;;2508:6;2500;2493:22;2454:2;2549:9;2536:23;2526:33;;2606:2;2595:9;2591:18;2578:32;2568:42;;2661:2;2650:9;2646:18;2633:32;2688:18;2680:6;2677:30;2674:2;;;2725:6;2717;2710:22;2674:2;2769:58;2819:7;2810:6;2799:9;2795:22;2769:58;:::i;:::-;2444:494;;;;-1:-1:-1;2846:8:66;2928:2;2913:18;2900:32;;2444:494;-1:-1:-1;;;;2444:494:66:o;2943:747::-;;;;;3110:2;3098:9;3089:7;3085:23;3081:32;3078:2;;;3131:6;3123;3116:22;3078:2;3176:9;3163:23;3205:18;3246:2;3238:6;3235:14;3232:2;;;3267:6;3259;3252:22;3232:2;3311:58;3361:7;3352:6;3341:9;3337:22;3311:58;:::i;:::-;3388:8;;-1:-1:-1;3285:84:66;-1:-1:-1;3476:2:66;3461:18;;3448:32;;-1:-1:-1;3492:16:66;;;3489:2;;;3526:6;3518;3511:22;3489:2;;3570:60;3622:7;3611:8;3600:9;3596:24;3570:60;:::i;:::-;3068:622;;;;-1:-1:-1;3649:8:66;-1:-1:-1;;;;3068:622:66:o;3695:1044::-;;;;;;;3898:2;3886:9;3877:7;3873:23;3869:32;3866:2;;;3919:6;3911;3904:22;3866:2;3964:9;3951:23;3993:18;4034:2;4026:6;4023:14;4020:2;;;4055:6;4047;4040:22;4020:2;4099:58;4149:7;4140:6;4129:9;4125:22;4099:58;:::i;:::-;4176:8;;-1:-1:-1;4073:84:66;-1:-1:-1;4264:2:66;4249:18;;4236:32;;-1:-1:-1;4280:16:66;;;4277:2;;;4314:6;4306;4299:22;4277:2;4358:60;4410:7;4399:8;4388:9;4384:24;4358:60;:::i;:::-;4437:8;;-1:-1:-1;4332:86:66;-1:-1:-1;4525:2:66;4510:18;;4497:32;;-1:-1:-1;4541:16:66;;;4538:2;;;4575:6;4567;4560:22;4538:2;;4619:60;4671:7;4660:8;4649:9;4645:24;4619:60;:::i;:::-;3856:883;;;;-1:-1:-1;3856:883:66;;-1:-1:-1;3856:883:66;;4698:8;;3856:883;-1:-1:-1;;;3856:883:66:o;5401:300::-;;5523:2;5511:9;5502:7;5498:23;5494:32;5491:2;;;5544:6;5536;5529:22;5491:2;5581:9;5575:16;5631:10;5624:5;5620:22;5613:5;5610:33;5600:2;;5662:6;5654;5647:22;5706:316;;5828:2;5816:9;5807:7;5803:23;5799:32;5796:2;;;5849:6;5841;5834:22;5796:2;5886:9;5880:16;-1:-1:-1;;;;;5929:5:66;5925:38;5918:5;5915:49;5905:2;;5983:6;5975;5968:22;6027:385;;6220:6;6214:13;6236:53;6282:6;6277:3;6270:4;6262:6;6258:17;6236:53;:::i;:::-;-1:-1:-1;;;;;;6350:26:66;;;;6311:16;;;;6336:41;;;6404:1;6393:13;;6190:222;-1:-1:-1;;6190:222:66:o;7306:205::-;-1:-1:-1;;7478:26:66;;;;7460:45;;7448:2;7433:18;;7415:96::o;7516:276::-;-1:-1:-1;;7716:26:66;;;;7698:45;;7774:2;7759:18;;7752:34;7686:2;7671:18;;7653:139::o;9369:490::-;;9559:2;9548:9;9541:21;9591:6;9585:13;9634:6;9629:2;9618:9;9614:18;9607:34;9650:68;9711:6;9706:2;9695:9;9691:18;9684:4;9676:6;9672:17;9650:68;:::i;:::-;9839:12;9827:25;;;;9820:4;9805:20;;9798:55;-1:-1:-1;9779:2:66;9758:15;;;;-1:-1:-1;;9754:29:66;9739:45;9786:2;9735:54;;9531:328;-1:-1:-1;9531:328:66:o;14370:401::-;14572:2;14554:21;;;14611:2;14591:18;;;14584:30;14650:34;14645:2;14630:18;;14623:62;-1:-1:-1;;;14716:2:66;14701:18;;14694:35;14761:3;14746:19;;14544:227::o;16446:340::-;16648:2;16630:21;;;16687:2;16667:18;;;16660:30;-1:-1:-1;;;16721:2:66;16706:18;;16699:46;16777:2;16762:18;;16620:166::o;17197:356::-;17399:2;17381:21;;;17418:18;;;17411:30;17477:34;17472:2;17457:18;;17450:62;17544:2;17529:18;;17371:182::o;19540:355::-;19742:2;19724:21;;;19781:2;19761:18;;;19754:30;19820:33;19815:2;19800:18;;19793:61;19886:2;19871:18;;19714:181::o;20649:128::-;;20720:1;20716:6;20713:1;20710:13;20707:2;;;20726:18;;:::i;:::-;-1:-1:-1;20762:9:66;;20697:80::o;20782:120::-;;20848:1;20838:2;;20853:18;;:::i;:::-;-1:-1:-1;20887:9:66;;20828:74::o;20907:207::-;;-1:-1:-1;;;;;21025:2:66;21022:1;21018:10;21047:3;21037:2;;21054:18;;:::i;:::-;21092:10;;21088:20;;;;;20952:162;-1:-1:-1;;20952:162:66:o;21119:168::-;;21225:1;21221;21217:6;21213:14;21210:1;21207:21;21202:1;21195:9;21188:17;21184:45;21181:2;;;21232:18;;:::i;:::-;-1:-1:-1;21272:9:66;;21171:116::o;21292:125::-;;21360:1;21357;21354:8;21351:2;;;21365:18;;:::i;:::-;-1:-1:-1;21402:9:66;;21341:76::o;21422:258::-;21494:1;21504:113;21518:6;21515:1;21512:13;21504:113;;;21594:11;;;21588:18;21575:11;;;21568:39;21540:2;21533:10;21504:113;;;21635:6;21632:1;21629:13;21626:2;;;21670:1;21661:6;21656:3;21652:16;21645:27;21626:2;;21475:205;;;:::o;21685:136::-;;21752:5;21742:2;;21761:18;;:::i;:::-;-1:-1:-1;;;21797:18:66;;21732:89::o;21826:135::-;;-1:-1:-1;;21886:17:66;;21883:2;;;21906:18;;:::i;:::-;-1:-1:-1;21953:1:66;21942:13;;21873:88::o;21966:112::-;;22024:1;22014:2;;22029:18;;:::i;:::-;-1:-1:-1;22063:9:66;;22004:74::o;22083:127::-;22144:10;22139:3;22135:20;22132:1;22125:31;22175:4;22172:1;22165:15;22199:4;22196:1;22189:15;22215:127;22276:10;22271:3;22267:20;22264:1;22257:31;22307:4;22304:1;22297:15;22331:4;22328:1;22321:15"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "3152400",
            "executionCost": "infinite",
            "totalCost": "infinite"
          },
          "external": {
            "TeleportDAOToken()": "1073",
            "addHeaders(bytes,bytes)": "infinite",
            "addHeadersWithRetarget(bytes,bytes,bytes)": "infinite",
            "availableTDT()": "infinite",
            "availableTNT()": "262",
            "baseQueries()": "1105",
            "checkTxProof(bytes32,uint256,bytes,uint256)": "infinite",
            "currentEpochQueries()": "1041",
            "epochLength()": "1129",
            "finalizationParameter()": "1062",
            "findAncestor(bytes32,uint256)": "infinite",
            "findHeight(bytes32)": "infinite",
            "getBlockHeaderFee(uint256,uint256)": "infinite",
            "getBlockHeaderHash(uint256,uint256)": "infinite",
            "getCurrentEpochDifficulty()": "1050",
            "getNumberOfSubmittedHeaders(uint256)": "1250",
            "getPrevEpochDifficulty()": "1083",
            "initialHeight()": "1039",
            "isAncestor(bytes32,bytes32,uint256)": "infinite",
            "lastEpochQueries()": "1040",
            "lastSubmittedHeight()": "1108",
            "owner()": "1088",
            "pauseRelay()": "23840",
            "paused()": "1094",
            "relayGenesisHash()": "1061",
            "relayerPercentageFee()": "1084",
            "renounceOwnership()": "23525",
            "rewardAmountInTDT()": "1127",
            "setBaseQueries(uint256)": "21109",
            "setEpochLength(uint256)": "21176",
            "setFinalizationParameter(uint256)": "21175",
            "setRelayerPercentageFee(uint256)": "21154",
            "setRewardAmountInTDT(uint256)": "21131",
            "setSubmissionGasUsed(uint256)": "21153",
            "submissionGasUsed()": "1084",
            "transferOwnership(address)": "23666",
            "unPauseRelay()": "23849"
          },
          "internal": {
            "_addHeaders(bytes29,bytes29,bool)": "infinite",
            "_addHeadersWithRetarget(bytes29,bytes29,bytes29)": "infinite",
            "_addToChain(bytes29,uint256)": "infinite",
            "_findAncestor(bytes32,uint256)": "infinite",
            "_findHeight(bytes32)": "infinite",
            "_findIndex(bytes32,uint256)": "infinite",
            "_getFee(uint256)": "infinite",
            "_isAncestor(bytes32,bytes32,uint256)": "infinite",
            "_pruneChain()": "infinite",
            "_pruneHeight(uint256)": "infinite",
            "_revertBytes32(bytes32)": "infinite",
            "_sendReward(address)": "infinite",
            "_updateFee()": "29134"
          }
        },
        "methodIdentifiers": {
          "TeleportDAOToken()": "108f438d",
          "addHeaders(bytes,bytes)": "65da41b9",
          "addHeadersWithRetarget(bytes,bytes,bytes)": "7fa637fc",
          "availableTDT()": "882a5ee0",
          "availableTNT()": "5b88a0e5",
          "baseQueries()": "fa041af5",
          "checkTxProof(bytes32,uint256,bytes,uint256)": "4354da25",
          "currentEpochQueries()": "5b732892",
          "epochLength()": "57d775f8",
          "finalizationParameter()": "a072bc50",
          "findAncestor(bytes32,uint256)": "30017b3b",
          "findHeight(bytes32)": "60b5c390",
          "getBlockHeaderFee(uint256,uint256)": "d0a89739",
          "getBlockHeaderHash(uint256,uint256)": "b9bbd9bd",
          "getCurrentEpochDifficulty()": "113764be",
          "getNumberOfSubmittedHeaders(uint256)": "926d44e2",
          "getPrevEpochDifficulty()": "2b97be24",
          "initialHeight()": "e2761af0",
          "isAncestor(bytes32,bytes32,uint256)": "b985621a",
          "lastEpochQueries()": "9f156414",
          "lastSubmittedHeight()": "2f796d90",
          "owner()": "8da5cb5b",
          "pauseRelay()": "465e7559",
          "paused()": "5c975abb",
          "relayGenesisHash()": "efbc7be4",
          "relayerPercentageFee()": "665b634f",
          "renounceOwnership()": "715018a6",
          "rewardAmountInTDT()": "fd9c6e85",
          "setBaseQueries(uint256)": "65941683",
          "setEpochLength(uint256)": "54eea796",
          "setFinalizationParameter(uint256)": "b36161bd",
          "setRelayerPercentageFee(uint256)": "901186bb",
          "setRewardAmountInTDT(uint256)": "b9e88ac1",
          "setSubmissionGasUsed(uint256)": "a3db54eb",
          "submissionGasUsed()": "c20dc664",
          "transferOwnership(address)": "f2fde38b",
          "unPauseRelay()": "c7814529"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_genesisHeader\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_height\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_periodStart\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_TeleportDAOToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"selfHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"parentHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"BlockAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"selfHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"parentHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmountTNT\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmountTDT\",\"type\":\"uint256\"}],\"name\":\"BlockFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TeleportDAOToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_anchor\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_headers\",\"type\":\"bytes\"}],\"name\":\"addHeaders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_oldPeriodStartHeader\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_oldPeriodEndHeader\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_headers\",\"type\":\"bytes\"}],\"name\":\"addHeadersWithRetarget\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableTDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableTNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseQueries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_txid\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_blockHeight\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_intermediateNodes\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"checkTxProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpochQueries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizationParameter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"}],\"name\":\"findAncestor\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"findHeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_height\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getBlockHeaderFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_height\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getBlockHeaderHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentEpochDifficulty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_height\",\"type\":\"uint256\"}],\"name\":\"getNumberOfSubmittedHeaders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrevEpochDifficulty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialHeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ancestor\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_descendant\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"isAncestor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastEpochQueries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastSubmittedHeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseRelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relayGenesisHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relayerPercentageFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardAmountInTDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseQueries\",\"type\":\"uint256\"}],\"name\":\"setBaseQueries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epochLength\",\"type\":\"uint256\"}],\"name\":\"setEpochLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_finalizationParameter\",\"type\":\"uint256\"}],\"name\":\"setFinalizationParameter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_relayerPercentageFee\",\"type\":\"uint256\"}],\"name\":\"setRelayerPercentageFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardAmountInTDT\",\"type\":\"uint256\"}],\"name\":\"setRewardAmountInTDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_submissionGasUsed\",\"type\":\"uint256\"}],\"name\":\"setSubmissionGasUsed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"submissionGasUsed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unPauseRelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addHeaders(bytes,bytes)\":{\"details\":\"We check integrity and consistency of the header chain\",\"params\":{\"_anchor\":\"The header immediately preceeding the new chain\",\"_headers\":\"A tightly-packed list of 80-byte Bitcoin headers\"},\"returns\":{\"_0\":\"True if successfully written, error otherwise\"}},\"addHeadersWithRetarget(bytes,bytes,bytes)\":{\"details\":\"Checks the retarget, the heights, and the linkage\",\"params\":{\"_headers\":\"A tightly-packed list of 80-byte Bitcoin headers\",\"_oldPeriodEndHeader\":\"The last header in the difficulty period being closed (anchor of new headers)\",\"_oldPeriodStartHeader\":\"The first header in the difficulty period being closed\"},\"returns\":{\"_0\":\"True if successfully written, error otherwise\"}},\"availableTDT()\":{\"returns\":{\"_0\":\"Amount of TDT available in Relay treasury\"}},\"availableTNT()\":{\"returns\":{\"_0\":\"Amount of target blockchain native token available in Relay treasury\"}},\"checkTxProof(bytes32,uint256,bytes,uint256)\":{\"details\":\"Checks if the block is finalized, and Merkle proof is correct\",\"params\":{\"_blockHeight\":\"Block height of the desired tx\",\"_index\":\"Part of the Merkle proof for the desired tx\",\"_intermediateNodes\":\"Part of the Merkle proof for the desired tx\",\"_txid\":\"Desired transaction's tx Id\"},\"returns\":{\"_0\":\"True if the provided tx is confirmed on the source blockchain, False otherwise\"}},\"constructor\":{\"params\":{\"_genesisHeader\":\"The starting header\",\"_height\":\"The starting height\",\"_periodStart\":\"The hash of the first header in the genesis epoch\"}},\"findAncestor(bytes32,uint256)\":{\"details\":\"Will fail if the header is unknown\",\"params\":{\"_hash\":\"The header hash to search for\"},\"returns\":{\"_0\":\"The height of the header, or error if unknown\"}},\"findHeight(bytes32)\":{\"details\":\"Will fail if the header is unknown\",\"params\":{\"_hash\":\"The header hash to search for\"},\"returns\":{\"_0\":\"The height of the header, or error if unknown\"}},\"getBlockHeaderFee(uint256,uint256)\":{\"params\":{\"_height\":\"The height of the desired block header\",\"_index\":\"The index of the desired block header in that height\"},\"returns\":{\"_0\":\"Block header's fee price for a query\"}},\"getBlockHeaderHash(uint256,uint256)\":{\"params\":{\"_height\":\"The height of the desired block header\",\"_index\":\"The index of the desired block header in that height\"},\"returns\":{\"_0\":\"Block header's hash\"}},\"getCurrentEpochDifficulty()\":{\"details\":\"This is updated when a new heavist header has a new diff\",\"returns\":{\"_0\":\"The difficulty of the bestKnownDigest\"}},\"getNumberOfSubmittedHeaders(uint256)\":{\"details\":\"This shows the number of temporary forks in that specific height\",\"params\":{\"_height\":\"The desired height of the blockchain\"},\"returns\":{\"_0\":\"Number of block headers stored in the same height\"}},\"getPrevEpochDifficulty()\":{\"details\":\"This is updated when a difficulty change is accepted\",\"returns\":{\"_0\":\"The difficulty of the previous epoch\"}},\"isAncestor(bytes32,bytes32,uint256)\":{\"details\":\"Limit the amount of lookups (and thus gas usage) with _limit\",\"params\":{\"_ancestor\":\"The prospective ancestor\",\"_descendant\":\"The descendant to check\",\"_limit\":\"The maximum number of blocks to check\"},\"returns\":{\"_0\":\"true if ancestor is at most limit blocks lower than descendant, otherwise false\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pauseRelay()\":{\"details\":\"@param\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setBaseQueries(uint256)\":{\"params\":{\"_baseQueries\":\"The base amount of queries we assume in each epoch                                     (This is for preventing user fees to grow significantly)\"}},\"setEpochLength(uint256)\":{\"params\":{\"_epochLength\":\"The length of epochs for estimating the user queries hence their fees\"}},\"setFinalizationParameter(uint256)\":{\"details\":\"This might change if finalization rule of the source chain gets updated\",\"params\":{\"_finalizationParameter\":\"The finalization parameter of the source chain\"}},\"setRelayerPercentageFee(uint256)\":{\"details\":\"This is updated when we want to change the Relayer reward\",\"params\":{\"_relayerPercentageFee\":\"Ratio > 1 that determines percentage of reward to the Relayer\"}},\"setRewardAmountInTDT(uint256)\":{\"details\":\"This award is for the relayer who has a finalized block header\",\"params\":{\"_rewardAmountInTDT\":\"The reward amount in TDT\"}},\"setSubmissionGasUsed(uint256)\":{\"details\":\"This is updated when the smart contract changes the way of getting block headers\",\"params\":{\"_submissionGasUsed\":\"The gas used for submitting one block header\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unPauseRelay()\":{\"details\":\"@param\"}},\"version\":1},\"userdoc\":{\"events\":{\"BlockAdded(uint256,bytes32,bytes32,address)\":{\"notice\":\"Emits when a block header is added\"},\"BlockFinalized(uint256,bytes32,bytes32,address,uint256,uint256)\":{\"notice\":\"Emits when a block header gets finalized\"}},\"kind\":\"user\",\"methods\":{\"addHeaders(bytes,bytes)\":{\"notice\":\"Adds headers to storage after validating\"},\"addHeadersWithRetarget(bytes,bytes,bytes)\":{\"notice\":\"Adds headers to storage, performs additional validation of retarget\"},\"availableTDT()\":{\"notice\":\"Getter for available TDT in treasury\"},\"availableTNT()\":{\"notice\":\"Getter for available target native token in treasury\"},\"checkTxProof(bytes32,uint256,bytes,uint256)\":{\"notice\":\"Checks if a tx is included and finalized on the source blockchain\"},\"constructor\":{\"notice\":\"Gives a starting point for the relay\"},\"findAncestor(bytes32,uint256)\":{\"notice\":\"Finds an ancestor for a block by its hash\"},\"findHeight(bytes32)\":{\"notice\":\"Finds the height of a header by its hash\"},\"getBlockHeaderFee(uint256,uint256)\":{\"notice\":\"Getter for an specific block header's fee price for a query\"},\"getBlockHeaderHash(uint256,uint256)\":{\"notice\":\"Getter for an specific block header's hash in the stored chain\"},\"getCurrentEpochDifficulty()\":{\"notice\":\"Getter for currentEpochDiff\"},\"getNumberOfSubmittedHeaders(uint256)\":{\"notice\":\"Getter for the number of block headers in the same height\"},\"getPrevEpochDifficulty()\":{\"notice\":\"Getter for prevEpochDiff\"},\"isAncestor(bytes32,bytes32,uint256)\":{\"notice\":\"Checks if a hash is an ancestor of the current one\"},\"pauseRelay()\":{\"notice\":\"Pause the relay, so only the functions can be called which are whenPaused\"},\"setBaseQueries(uint256)\":{\"notice\":\"Setter for baseQueries\"},\"setEpochLength(uint256)\":{\"notice\":\"Setter for epochLength\"},\"setFinalizationParameter(uint256)\":{\"notice\":\"Setter for finalizationParameter\"},\"setRelayerPercentageFee(uint256)\":{\"notice\":\"Setter for relayerPercentageFee\"},\"setRewardAmountInTDT(uint256)\":{\"notice\":\"Setter for rewardAmountInTDT\"},\"setSubmissionGasUsed(uint256)\":{\"notice\":\"Setter for submissionGasUsed\"},\"unPauseRelay()\":{\"notice\":\"Un-pause the relay, so only the functions can be called which are whenNotPaused\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/relay/BitcoinRelay.sol\":\"BitcoinRelay\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/erc20/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    // events\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    // read-only functions\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    // state-changing functions\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9210fa056ea67b530890ea968948270e0d22a15bd428a2edd4915ef25c4eb918\",\"license\":\"MIT\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMath {\\n    function add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x, 'ds-math-add-overflow');\\n    }\\n\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\\n    }\\n\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\\n    }\\n    \\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b; //TODO: edit it\\n    }\\n}\",\"keccak256\":\"0x0e9e1f6ce97bc6b4de34121b05b78ef753eb8399f1087e8daf8cb5ac0e33954c\",\"license\":\"MIT\"},\"contracts/libraries/TypedMemView.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./SafeMath.sol\\\";\\n\\nlibrary TypedMemView {\\n    using SafeMath for uint256;\\n\\n    // Why does this exist?\\n    // the solidity `bytes memory` type has a few weaknesses.\\n    // 1. You can't index ranges effectively\\n    // 2. You can't slice without copying\\n    // 3. The underlying data may represent any type\\n    // 4. Solidity never deallocates memory, and memory costs grow\\n    //    superlinearly\\n\\n    // By using a memory view instead of a `bytes memory` we get the following\\n    // advantages:\\n    // 1. Slices are done on the stack, by manipulating the pointer\\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\\n    // 3. We can insert type info into the pointer, and typecheck at runtime\\n\\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\\n    // algorithms.\\n\\n    // Why bytes29?\\n    // We want to avoid confusion between views, digests, and other common\\n    // types so we chose a large and uncommonly used odd number of bytes\\n    //\\n    // Note that while bytes are left-aligned in a word, integers and addresses\\n    // are right-aligned. This means when working in assembly we have to\\n    // account for the 3 unused bytes on the righthand side\\n    //\\n    // First 5 bytes are a type flag.\\n    // - ff_ffff_fffe is reserved for unknown type.\\n    // - ff_ffff_ffff is reserved for invalid types/errors.\\n    // next 12 are memory address\\n    // next 12 are len\\n    // bottom 3 bytes are empty\\n\\n    // Assumptions:\\n    // - non-modification of memory.\\n    // - No Solidity updates\\n    // - - wrt free mem point\\n    // - - wrt bytes representation in memory\\n    // - - wrt memory addressing in general\\n\\n    // Usage:\\n    // - create type constants\\n    // - use `assertType` for runtime type assertions\\n    // - - unfortunately we can't do this at compile time yet :(\\n    // - recommended: implement modifiers that perform type checking\\n    // - - e.g.\\n    // - - `uint40 constant MY_TYPE = 3;`\\n    // - - ` modifer onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\\n    // - instantiate a typed view from a bytearray using `ref`\\n    // - use `index` to inspect the contents of the view\\n    // - use `slice` to create smaller views into the same memory\\n    // - - `slice` can increase the offset\\n    // - - `slice can decrease the length`\\n    // - - must specify the output type of `slice`\\n    // - - `slice` will return a null view if you try to overrun\\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\\n    // - use `equal` for typed comparisons.\\n\\n\\n    // The null view\\n    bytes29 public constant NULL = hex\\\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\\";\\n    uint256 constant LOW_12_MASK = 0xffffffffffffffffffffffff;\\n    uint8 constant TWELVE_BYTES = 96;\\n\\n    /**\\n     * @notice      Returns the encoded hex character that represents the lower 4 bits of the argument.\\n     * @param _b    The byte\\n     * @return      char - The encoded hex character\\n     */\\n    function nibbleHex(uint8 _b) public pure returns (uint8 char) {\\n        // This can probably be done more efficiently, but it's only in error\\n        // paths, so we don't really care :)\\n        uint8 _nibble = _b | 0xf0; // set top 4, keep bottom 4\\n        if (_nibble == 0xf0) {return 0x30;} // 0\\n        if (_nibble == 0xf1) {return 0x31;} // 1\\n        if (_nibble == 0xf2) {return 0x32;} // 2\\n        if (_nibble == 0xf3) {return 0x33;} // 3\\n        if (_nibble == 0xf4) {return 0x34;} // 4\\n        if (_nibble == 0xf5) {return 0x35;} // 5\\n        if (_nibble == 0xf6) {return 0x36;} // 6\\n        if (_nibble == 0xf7) {return 0x37;} // 7\\n        if (_nibble == 0xf8) {return 0x38;} // 8\\n        if (_nibble == 0xf9) {return 0x39;} // 9\\n        if (_nibble == 0xfa) {return 0x61;} // a\\n        if (_nibble == 0xfb) {return 0x62;} // b\\n        if (_nibble == 0xfc) {return 0x63;} // c\\n        if (_nibble == 0xfd) {return 0x64;} // d\\n        if (_nibble == 0xfe) {return 0x65;} // e\\n        if (_nibble == 0xff) {return 0x66;} // f\\n    }\\n\\n    /**\\n     * @notice      Returns a uint16 containing the hex-encoded byte.\\n     *              `the first 8 bits of encoded is the nibbleHex of top 4 bits of _b`\\n     *              `the second 8 bits of encoded is the nibbleHex of lower 4 bits of _b`\\n     * @param _b    The byte\\n     * @return      encoded - The hex-encoded byte\\n     */\\n    function byteHex(uint8 _b) public pure returns (uint16 encoded) {\\n        encoded |= nibbleHex(_b >> 4); // top 4 bits\\n        encoded <<= 8;\\n        encoded |= nibbleHex(_b); // lower 4 bits\\n    }\\n\\n    /**\\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\\n     *              `second` contains the encoded lower 16 bytes.\\n     *\\n     * @param _b    The 32 bytes as uint256\\n     * @return      first - The top 16 bytes\\n     * @return      second - The bottom 16 bytes\\n     */\\n    function encodeHex(uint256 _b) public pure returns (uint256 first, uint256 second) {\\n        for (uint8 i = 31; i > 15; i -= 1) {\\n            uint8 _byte = uint8(_b >> (i * 8));\\n            first |= byteHex(_byte);\\n            if (i != 16) {\\n                first <<= 16;\\n            }\\n        }\\n\\n        // abusing underflow here =_=\\n        for (uint8 i = 15; i < 255 ; i -= 1) {\\n            uint8 _byte = uint8(_b >> (i * 8));\\n            second |= byteHex(_byte);\\n            if (i != 0) {\\n                second <<= 16;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice          Changes the endianness of a uint256.\\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\\n     * @param _b        The unsigned integer to reverse\\n     * @return          v - The reversed value\\n     */\\n    function reverseUint256(uint256 _b) public pure returns (uint256 v) {\\n        v = _b;\\n\\n        // swap bytes\\n        v = ((v >> 8) & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\\n        ((v & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) << 8);\\n        // swap 2-byte long pairs\\n        v = ((v >> 16) & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\\n        ((v & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) << 16);\\n        // swap 4-byte long pairs\\n        v = ((v >> 32) & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\\n        ((v & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) << 32);\\n        // swap 8-byte long pairs\\n        v = ((v >> 64) & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\\n        ((v & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) << 64);\\n        // swap 16-byte long pairs\\n        v = (v >> 128) | (v << 128);\\n    }\\n\\n    /**\\n     * @notice      Create a mask with the highest `_len` bits set.\\n     * @param _len  The length\\n     * @return      mask - The mask\\n     */\\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\\n        // ugly. redo without assembly?\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            mask := sar(\\n            sub(_len, 1),\\n            0x8000000000000000000000000000000000000000000000000000000000000000\\n            )\\n        }\\n    }\\n\\n    /**\\n     * @notice      Return the null view.\\n     * @return      bytes29 - The null view\\n     */\\n    function nullView() public pure returns (bytes29) {\\n        return NULL;\\n    }\\n\\n    /**\\n     * @notice      Check if the view is null.\\n     * @return      bool - True if the view is null\\n     */\\n    function isNull(bytes29 memView) public pure returns (bool) {\\n        return memView == NULL;\\n    }\\n\\n    /**\\n     * @notice      Check if the view is not null.\\n     * @return      bool - True if the view is not null\\n     */\\n    function notNull(bytes29 memView) public pure returns (bool) {\\n        return !isNull(memView);\\n    }\\n\\n    /**\\n     * @notice          Check if the view is of a valid type and points to a valid location\\n     *                  in memory.\\n     * @dev             We perform this check by examining solidity's unallocated memory\\n     *                  pointer and ensuring that the view's upper bound is less than that.\\n     * @param memView   The view\\n     * @return          ret - True if the view is valid\\n     */\\n    function isValid(bytes29 memView) public pure returns (bool ret) {\\n        if (typeOf(memView) == 0xffffffffff) {return false;}\\n        uint256 _end = end(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ret := not(gt(_end, mload(0x40)))\\n        }\\n    }\\n\\n    /**\\n     * @notice          Require that a typed memory view be valid.\\n     * @dev             Returns the view for easy chaining.\\n     * @param memView   The view\\n     * @return          bytes29 - The validated view\\n     */\\n    function assertValid(bytes29 memView) public pure returns (bytes29) {\\n        require(isValid(memView), \\\"Validity assertion failed\\\");\\n        return memView;\\n    }\\n\\n    /**\\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\\n     * @param memView   The view\\n     * @param _expected The expected type\\n     * @return          bool - True if the memview is of the expected type\\n     */\\n    function isType(bytes29 memView, uint40 _expected) public pure returns (bool) {\\n        return typeOf(memView) == _expected;\\n    }\\n\\n    /**\\n     * @notice          Require that a typed memory view has a specific type.\\n     * @dev             Returns the view for easy chaining.\\n     * @param memView   The view\\n     * @param _expected The expected type\\n     * @return          bytes29 - The view with validated type\\n     */\\n    function assertType(bytes29 memView, uint40 _expected) public pure returns (bytes29) {\\n        if (!isType(memView, _expected)) {\\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\\n            (, uint256 e) = encodeHex(uint256(_expected));\\n            string memory err = string(\\n                abi.encodePacked(\\n                    \\\"Type assertion failed. Got 0x\\\",\\n                    uint80(g),\\n                    \\\". Expected 0x\\\",\\n                    uint80(e)\\n                )\\n            );\\n            revert(err);\\n        }\\n        return memView;\\n    }\\n\\n    /**\\n     * @notice          Return an identical view with a different type.\\n     * @param memView   The view\\n     * @param _newType  The new type\\n     * @return          newView - The new view with the specified type\\n     */\\n    function castTo(bytes29 memView, uint40 _newType) public pure returns (bytes29 newView) {\\n        // then | in the new type\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n        // shift off the top 5 bytes\\n            newView := or(newView, shr(40, shl(40, memView)))\\n            newView := or(newView, shl(216, _newType))\\n        }\\n    }\\n\\n    /**\\n     * @notice          Unsafe raw pointer construction. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @dev             Unsafe raw pointer construction. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @param _type     The type\\n     * @param _loc      The memory address\\n     * @param _len      The length\\n     * @return          newView - The new view with the specified type, location and length\\n     */\\n    function unsafeBuildUnchecked(uint256 _type, uint256 _loc, uint256 _len) private pure returns (bytes29 newView) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            newView := shl(96, or(newView, _type)) // insert type\\n            newView := shl(96, or(newView, _loc))  // insert loc\\n            newView := shl(24, or(newView, _len))  // empty bottom 3 bytes\\n        }\\n    }\\n\\n    /**\\n     * @notice          Instantiate a new memory view. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @dev             Instantiate a new memory view. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @param _type     The type\\n     * @param _loc      The memory address\\n     * @param _len      The length\\n     * @return          newView - The new view with the specified type, location and length\\n     */\\n    function build(uint256 _type, uint256 _loc, uint256 _len) public pure returns (bytes29 newView) {\\n        uint256 _end = _loc.add(_len);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            if gt(_end, mload(0x40)) {\\n                _end := 0\\n            }\\n        }\\n        if (_end == 0) {\\n            return NULL;\\n        }\\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\\n    }\\n\\n    /**\\n     * @notice          Instantiate a memory view from a byte array.\\n     * @dev             Note that due to Solidity memory representation, it is not possible to\\n     *                  implement a deref, as the `bytes` type stores its len in memory.\\n     * @param arr       The byte array\\n     * @param newType   The type\\n     * @return          bytes29 - The memory view\\n     */\\n    function ref(bytes memory arr, uint40 newType) public pure returns (bytes29) {\\n        uint256 _len = arr.length;\\n\\n        uint256 _loc;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            _loc := add(arr, 0x20)  // our view is of the data, not the struct\\n        }\\n\\n        return build(newType, _loc, _len);\\n    }\\n\\n    /**\\n     * @notice          Return the associated type information.\\n     * @param memView   The memory view\\n     * @return          _type - The type associated with the view\\n     */\\n    function typeOf(bytes29 memView) public pure returns (uint40 _type) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n        // 216 == 256 - 40\\n            _type := shr(216, memView) // shift out lower 24 bytes\\n        }\\n    }\\n\\n    /**\\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the 5-byte type flag is equal\\n     */\\n    function sameType(bytes29 left, bytes29 right) public pure returns (bool) {\\n        // XOR the inputs to check their difference\\n        return (left ^ right) >> (2 * TWELVE_BYTES) == 0;\\n    }\\n\\n    /**\\n     * @notice          Return the memory address of the underlying bytes.\\n     * @param memView   The view\\n     * @return          _loc - The memory address\\n     */\\n    function loc(bytes29 memView) public pure returns (uint96 _loc) {\\n        uint256 _mask = LOW_12_MASK;  // assembly can't use globals\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n        // 120 bits = 12 bytes (the encoded loc) + 3 bytes (empty low space)\\n            _loc := and(shr(120, memView), _mask)\\n        }\\n    }\\n\\n    /**\\n     * @notice          The number of memory words this memory view occupies, rounded up.\\n     * @param memView   The view\\n     * @return          uint256 - The number of memory words\\n     */\\n    function words(bytes29 memView) public pure returns (uint256) {\\n        return uint256(len(memView)).add(32) / 32;\\n    }\\n\\n    /**\\n     * @notice          The in-memory footprint of a fresh copy of the view.\\n     * @param memView   The view\\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\\n     */\\n    function footprint(bytes29 memView) public pure returns (uint256) {\\n        return words(memView) * 32;\\n    }\\n\\n    /**\\n     * @notice          The number of bytes of the view.\\n     * @param memView   The view\\n     * @return          _len - The length of the view\\n     */\\n    function len(bytes29 memView) public pure returns (uint96 _len) {\\n        uint256 _mask = LOW_12_MASK;  // assembly can't use globals\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            _len := and(shr(24, memView), _mask)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Returns the endpoint of `memView`.\\n     * @param memView   The view\\n     * @return          uint256 - The endpoint of `memView`\\n     */\\n    function end(bytes29 memView) public pure returns (uint256) {\\n        return loc(memView) + len(memView);\\n    }\\n\\n    /**\\n     * @notice          Safe slicing without memory modification.\\n     * @param memView   The view\\n     * @param _index    The start index\\n     * @param _len      The length\\n     * @param newType   The new type\\n     * @return          bytes29 - The new view\\n     */\\n    function slice(bytes29 memView, uint256 _index, uint256 _len, uint40 newType) public pure returns (bytes29) {\\n        uint256 _loc = loc(memView);\\n\\n        // Ensure it doesn't overrun the view\\n        if (_loc.add(_index).add(_len) > end(memView)) {\\n            return NULL;\\n        }\\n\\n        _loc = _loc.add(_index);\\n        return build(newType, _loc, _len);\\n    }\\n\\n    /**\\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\\n     * @param memView   The view\\n     * @param _len      The length\\n     * @param newType   The new type\\n     * @return          bytes29 - The new view\\n     */\\n    function prefix(bytes29 memView, uint256 _len, uint40 newType) public pure returns (bytes29) {\\n        return slice(memView, 0, _len, newType);\\n    }\\n\\n    /**\\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\\n     * @param memView   The view\\n     * @param _len      The length\\n     * @param newType   The new type\\n     * @return          bytes29 - The new view\\n     */\\n    function postfix(bytes29 memView, uint256 _len, uint40 newType) public pure returns (bytes29) {\\n        return slice(memView, uint256(len(memView)).sub(_len), _len, newType);\\n    }\\n\\n    /**\\n     * @notice          Construct an error message for an indexing overrun.\\n     * @param _loc      The memory address\\n     * @param _len      The length\\n     * @param _index    The index\\n     * @param _slice    The slice where the overrun occurred\\n     * @return          err - The err\\n     */\\n    function indexErrOverrun(\\n        uint256 _loc,\\n        uint256 _len,\\n        uint256 _index,\\n        uint256 _slice\\n    ) public pure returns (string memory err) {\\n        (, uint256 a) = encodeHex(_loc);\\n        (, uint256 b) = encodeHex(_len);\\n        (, uint256 c) = encodeHex(_index);\\n        (, uint256 d) = encodeHex(_slice);\\n        err = string(\\n            abi.encodePacked(\\n                \\\"TypedMemView/index - Overran the view. Slice is at 0x\\\",\\n                uint48(a),\\n                \\\" with length 0x\\\",\\n                uint48(b),\\n                \\\". Attempted to index at offset 0x\\\",\\n                uint48(c),\\n                \\\" with length 0x\\\",\\n                uint48(d),\\n                \\\".\\\"\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice          Load up to 32 bytes from the view onto the stack.\\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\\n     *                  This can be immediately cast to a smaller fixed-length byte array.\\n     *                  To automatically cast to an integer, use `indexUint`.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @param _bytes    The bytes\\n     * @return          result - The 32 byte result\\n     */\\n    function index(bytes29 memView, uint256 _index, uint8 _bytes) public pure returns (bytes32 result) {\\n        if (_bytes == 0) {return bytes32(0);}\\n        if (_index.add(_bytes) > len(memView)) {\\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\\n        }\\n        require(_bytes <= 32, \\\"TypedMemView/index - Attempted to index more than 32 bytes\\\");\\n\\n        // FIXME: why the following lines need `unchecked`\\n    unchecked {\\n        uint8 bitLength = _bytes * 8;\\n        uint256 _loc = loc(memView);\\n        uint256 _mask = leftMask(bitLength);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            result := and(mload(add(_loc, _index)), _mask)\\n        }\\n    }\\n\\n    }\\n\\n    /**\\n     * @notice          Parse an unsigned integer from the view at `_index`.\\n     * @dev             Requires that the view have >= `_bytes` bytes following that index.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @param _bytes    The bytes\\n     * @return          result - The unsigned integer\\n     */\\n    function indexUint(bytes29 memView, uint256 _index, uint8 _bytes) public pure returns (uint256 result) {\\n        return uint256(index(memView, _index, _bytes)) >> ((32 - _bytes) * 8);\\n    }\\n\\n    /**\\n     * @notice          Parse an unsigned integer from LE bytes.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @param _bytes    The bytes\\n     * @return          result - The unsigned integer\\n     */\\n    function indexLEUint(bytes29 memView, uint256 _index, uint8 _bytes) public pure returns (uint256 result) {\\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\\n    }\\n\\n    /**\\n     * @notice          Parse an address from the view at `_index`. Requires that the view have >= 20 bytes\\n     *                  following that index.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @return          address - The address\\n     */\\n    function indexAddress(bytes29 memView, uint256 _index) public pure returns (address) {\\n        return address(uint160(indexUint(memView, _index, 20)));\\n    }\\n\\n    /**\\n     * @notice          Return the keccak256 hash of the underlying memory\\n     * @param memView   The view\\n     * @return          digest - The keccak256 hash of the underlying memory\\n     */\\n    function keccak(bytes29 memView) public pure returns (bytes32 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            digest := keccak256(_loc, _len)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Return the sha2 digest of the underlying memory.\\n     * @dev             We explicitly deallocate memory afterwards.\\n     * @param memView   The view\\n     * @return          digest - The sha2 hash of the underlying memory\\n     */\\n    function sha2(bytes29 memView) public view returns (bytes32 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\\n            digest := mload(ptr)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\\n     * @param memView   The pre-image\\n     * @return          digest - the Digest\\n     */\\n    function hash160(bytes29 memView) public view returns (bytes20 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2\\n            pop(staticcall(gas(), 3, ptr, 0x20, ptr, 0x20)) // rmd160\\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\\n        }\\n    }\\n\\n    /**\\n     * @notice          Implements bitcoin's hash256 (double sha2)\\n     * @param memView   A view of the preimage\\n     * @return          digest - the Digest\\n     */\\n    function hash256(bytes29 memView) public view returns (bytes32 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\\n            pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha2 #2\\n            digest := mload(ptr)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Return true if the underlying memory is equal. Else false.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the underlying memory is equal\\n     */\\n    function untypedEqual(bytes29 left, bytes29 right) public pure returns (bool) {\\n        return (loc(left) == loc(right) && len(left) == len(right)) || keccak(left) == keccak(right);\\n    }\\n\\n    /**\\n     * @notice          Return false if the underlying memory is equal. Else true.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - False if the underlying memory is equal\\n     */\\n    function untypedNotEqual(bytes29 left, bytes29 right) public pure returns (bool) {\\n        return !untypedEqual(left, right);\\n    }\\n\\n    /**\\n     * @notice          Compares type equality.\\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the types are the same\\n     */\\n    function equal(bytes29 left, bytes29 right) public pure returns (bool) {\\n        return left == right || (typeOf(left) == typeOf(right) && keccak(left) == keccak(right));\\n    }\\n\\n    /**\\n     * @notice          Compares type inequality.\\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the types are not the same\\n     */\\n    function notEqual(bytes29 left, bytes29 right) public pure returns (bool) {\\n        return !equal(left, right);\\n    }\\n\\n    /**\\n     * @notice          Copy the view to a location, return an unsafe memory reference\\n     * @dev             Super Dangerous direct memory access.\\n     *\\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\\n     *                  As such it MUST be consumed IMMEDIATELY.\\n     *                  This function is private to prevent unsafe usage by callers.\\n     * @param memView   The view\\n     * @param _newLoc   The new location\\n     * @return          written - the unsafe memory reference\\n     */\\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\\n        require(notNull(memView), \\\"TypedMemView/copyTo - Null pointer deref\\\");\\n        require(isValid(memView), \\\"TypedMemView/copyTo - Invalid pointer deref\\\");\\n        uint256 _len = len(memView);\\n        uint256 _oldLoc = loc(memView);\\n\\n        uint256 ptr;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40)\\n        // revert if we're writing in occupied memory\\n            if gt(ptr, _newLoc) {\\n                revert(0x60, 0x20) // empty revert message\\n            }\\n\\n        // use the identity precompile to copy\\n        // guaranteed not to fail, so pop the success\\n            pop(staticcall(gas(), 4, _oldLoc, _len, _newLoc, _len))\\n        }\\n\\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\\n    }\\n\\n    /**\\n     * @notice          Copies the referenced memory to a new loc in memory, returning a `bytes` pointing to\\n     *                  the new memory\\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n     * @param memView   The view\\n     * @return          ret - The view pointing to the new memory\\n     */\\n    function clone(bytes29 memView) public view returns (bytes memory ret) {\\n        uint256 ptr;\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n            ret := ptr\\n        }\\n        unsafeCopyTo(memView, ptr + 0x20);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\\n            mstore(ptr, _len) // write len of new array (in bytes)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\\n     * @dev             Super Dangerous direct memory access.\\n     *\\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\\n     *                  As such it MUST be consumed IMMEDIATELY.\\n     *                  This function is private to prevent unsafe usage by callers.\\n     * @param memViews  The views\\n     * @return          unsafeView - The conjoined view pointing to the new memory\\n     */\\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location) private view returns (bytes29 unsafeView) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n        // revert if we're writing in occupied memory\\n            if gt(ptr, _location) {\\n                revert(0x60, 0x20) // empty revert message\\n            }\\n        }\\n\\n        uint256 _offset = 0;\\n        for (uint256 i = 0; i < memViews.length; i ++) {\\n            bytes29 memView = memViews[i];\\n            unsafeCopyTo(memView, _location + _offset);\\n            _offset += len(memView);\\n        }\\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\\n    }\\n\\n    /**\\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\\n     * @param memViews  The views\\n     * @return          bytes32 - The keccak256 digest\\n     */\\n    function joinKeccak(bytes29[] memory memViews) public view returns (bytes32) {\\n        uint256 ptr;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n        }\\n        return keccak(unsafeJoin(memViews, ptr));\\n    }\\n\\n    /**\\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\\n     * @param memViews  The views\\n     * @return          bytes32 - The sha256 digest\\n     */\\n    function joinSha2(bytes29[] memory memViews) public view returns (bytes32) {\\n        uint256 ptr;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n        }\\n        return sha2(unsafeJoin(memViews, ptr));\\n    }\\n\\n    /**\\n     * @notice          copies all views, joins them into a new bytearray.\\n     * @param memViews  The views\\n     * @return          ret - The new byte array\\n     */\\n    function join(bytes29[] memory memViews) public view returns (bytes memory ret) {\\n        uint256 ptr;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n        }\\n\\n        bytes29 _newView = unsafeJoin(memViews, ptr + 0x20);\\n        uint256 _written = len(_newView);\\n        uint256 _footprint = footprint(_newView);\\n\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n        // store the legnth\\n            mstore(ptr, _written)\\n        // new pointer is old + 0x20 + the footprint of the body\\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\\n            ret := ptr\\n        }\\n    }\\n}\",\"keccak256\":\"0x2a8fbc963c1d8e124fcfd48685672d36433b36afd4c76a1fea5e6260c1dea4b5\",\"license\":\"MIT\"},\"contracts/libraries/ViewBTC.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./TypedMemView.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\nlibrary ViewBTC {\\n    using TypedMemView for bytes29;\\n    using SafeMath for uint256;\\n\\n    // The target at minimum Difficulty. Also the target of the genesis block\\n    uint256 public constant DIFF1_TARGET = 0xffff0000000000000000000000000000000000000000000000000000;\\n\\n    uint256 public constant RETARGET_PERIOD = 2 * 7 * 24 * 60 * 60;  // 2 weeks in seconds\\n    uint256 public constant RETARGET_PERIOD_BLOCKS = 2016;  // 2 weeks in blocks\\n\\n    enum BTCTypes {\\n        Unknown,            // 0x0\\n        CompactInt,         // 0x1\\n        ScriptSig,          // 0x2 - with length prefix\\n        Outpoint,           // 0x3\\n        TxIn,               // 0x4\\n        IntermediateTxIns,  // 0x5 - used in vin parsing\\n        Vin,                // 0x6\\n        ScriptPubkey,       // 0x7 - with length prefix\\n        PKH,                // 0x8 - the 20-byte payload digest\\n        WPKH,               // 0x9 - the 20-byte payload digest\\n        WSH,                // 0xa - the 32-byte payload digest\\n        SH,                 // 0xb - the 20-byte payload digest\\n        OpReturnPayload,    // 0xc\\n        TxOut,              // 0xd\\n        IntermediateTxOuts, // 0xe - used in vout parsing\\n        Vout,               // 0xf\\n        Header,             // 0x10\\n        HeaderArray,        // 0x11\\n        MerkleNode,         // 0x12\\n        MerkleStep,         // 0x13\\n        MerkleArray         // 0x14\\n    }\\n\\n    // TODO: any way to bubble up more info?\\n    // @notice             requires `memView` to be of a specified type\\n    // @param memView      a 29-byte view with a 5-byte type\\n    // @param t            the expected type (e.g. BTCTypes.Outpoint, BTCTypes.TxIn, etc)\\n    // @return             passes if it is the correct type, errors if not\\n    modifier typeAssert(bytes29 memView, BTCTypes t) {\\n        memView.assertType(uint40(t));\\n        _;\\n    }\\n\\n    // Revert with an error message re: non-minimal VarInts\\n    function revertNonMinimal(bytes29 ref) private pure returns (string memory) {\\n        (, uint256 g) = TypedMemView.encodeHex(ref.indexUint(0, uint8(ref.len())));\\n        string memory err = string(\\n            abi.encodePacked(\\n                \\\"Non-minimal var int. Got 0x\\\",\\n                uint144(g)\\n            )\\n        );\\n        revert(err);\\n    }\\n\\n    // @notice             reads a compact int from the view at the specified index\\n    // @param memView      a 29-byte view with a 5-byte type\\n    // @param _index       the index\\n    // @return             the compact int at the specified index\\n    function indexCompactInt(bytes29 memView, uint256 _index) public pure returns (uint64 number) {\\n        uint256 flag = memView.indexUint(_index, 1);\\n        if (flag <= 0xfc) {\\n            return uint64(flag);\\n        } else if (flag == 0xfd) {\\n            number = uint64(memView.indexLEUint(_index + 1, 2));\\n            if (compactIntLength(number) != 3) {revertNonMinimal(memView.slice(_index, 3, 0));}\\n        } else if (flag == 0xfe) {\\n            number = uint64(memView.indexLEUint(_index + 1, 4));\\n            if (compactIntLength(number) != 5) {revertNonMinimal(memView.slice(_index, 5, 0));}\\n        } else if (flag == 0xff) {\\n            number = uint64(memView.indexLEUint(_index + 1, 8));\\n            if (compactIntLength(number) != 9) {revertNonMinimal(memView.slice(_index, 9, 0));}\\n        }\\n    }\\n\\n    // @notice         gives the total length (in bytes) of a CompactInt-encoded number\\n    // @param number   the number as uint64\\n    // @return         the compact integer as uint8\\n    function compactIntLength(uint64 number) public pure returns (uint8) {\\n        if (number <= 0xfc) {\\n            return 1;\\n        } else if (number <= 0xffff) {\\n            return 3;\\n        } else if (number <= 0xffffffff) {\\n            return 5;\\n        } else {\\n            return 9;\\n        }\\n    }\\n\\n    // @notice             extracts the LE txid from an outpoint\\n    // @param _outpoint    the outpoint\\n    // @return             the LE txid\\n    function txidLE(bytes29 _outpoint) public pure typeAssert(_outpoint, BTCTypes.Outpoint) returns (bytes32) {\\n        return _outpoint.index(0, 32);\\n    }\\n\\n    // @notice             extracts the index as an integer from the outpoint\\n    // @param _outpoint    the outpoint\\n    // @return             the index\\n    function outpointIdx(bytes29 _outpoint) public pure typeAssert(_outpoint, BTCTypes.Outpoint) returns (uint32) {\\n        return uint32(_outpoint.indexLEUint(32, 4));\\n    }\\n\\n    // @notice          extracts the outpoint from an input\\n    // @param _input    the input\\n    // @return          the outpoint as a typed memory\\n    function outpoint(bytes29 _input) public pure typeAssert(_input, BTCTypes.TxIn) returns (bytes29) {\\n        return _input.slice(0, 36, uint40(BTCTypes.Outpoint));\\n    }\\n\\n    // @notice           extracts the script sig from an input\\n    // @param _input     the input\\n    // @return           the script sig as a typed memory\\n    function scriptSig(bytes29 _input) public pure typeAssert(_input, BTCTypes.TxIn) returns (bytes29) {\\n        uint64 scriptLength = indexCompactInt(_input, 36);\\n        return _input.slice(36, compactIntLength(scriptLength) + scriptLength, uint40(BTCTypes.ScriptSig));\\n    }\\n\\n    // @notice         extracts the sequence from an input\\n    // @param _input   the input\\n    // @return         the sequence\\n    function sequence(bytes29 _input) public pure typeAssert(_input, BTCTypes.TxIn) returns (uint32) {\\n        uint64 scriptLength = indexCompactInt(_input, 36);\\n        uint256 scriptEnd = 36 + compactIntLength(scriptLength) + scriptLength;\\n        return uint32(_input.indexLEUint(scriptEnd, 4));\\n    }\\n\\n    // @notice         determines the length of the first input in an array of inputs\\n    // @param _inputs  the vin without its length prefix\\n    // @return         the input length\\n    function inputLength(bytes29 _inputs) public pure typeAssert(_inputs, BTCTypes.IntermediateTxIns) returns (uint256) {\\n        uint64 scriptLength = indexCompactInt(_inputs, 36);\\n        return uint256(compactIntLength(scriptLength)) + uint256(scriptLength) + 36 + 4;\\n    }\\n\\n    // @notice         extracts the input at a specified index\\n    // @param _vin     the vin\\n    // @param _index   the index of the desired input\\n    // @return         the desired input\\n    function indexVin(bytes29 _vin, uint256 _index) public pure typeAssert(_vin, BTCTypes.Vin) returns (bytes29) {\\n        uint256 _nIns = uint256(indexCompactInt(_vin, 0));\\n        uint256 _viewLen = _vin.len();\\n        require(_index < _nIns, \\\"Vin read overrun\\\");\\n\\n        uint256 _offset = uint256(compactIntLength(uint64(_nIns)));\\n        bytes29 _remaining;\\n        for (uint256 _i = 0; _i < _index; _i += 1) {\\n            _remaining = _vin.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxIns));\\n            _offset += inputLength(_remaining);\\n        }\\n\\n        _remaining = _vin.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxIns));\\n        uint256 _len = inputLength(_remaining);\\n        return _vin.slice(_offset, _len, uint40(BTCTypes.TxIn));\\n    }\\n\\n    // @notice         extracts the raw LE bytes of the output value\\n    // @param _output  the output\\n    // @return         the raw LE bytes of the output value\\n    function valueBytes(bytes29 _output) public pure typeAssert(_output, BTCTypes.TxOut) returns (bytes8) {\\n        return bytes8(_output.index(0, 8));\\n    }\\n\\n    // @notice         extracts the value from an output\\n    // @param _output  the output\\n    // @return         the value\\n    // function value(bytes29 _output) internal pure typeAssert(_output, BTCTypes.TxOut) returns (uint64) {\\n    //     return uint64(_output.indexLEUint(0, 8));\\n    // }\\n    function value(bytes29 _output) public pure returns (uint64) {\\n        return uint64(_output.indexLEUint(0, 8));\\n    }\\n\\n    // @notice             extracts the scriptPubkey from an output\\n    // @param _output      the output\\n    // @return             the scriptPubkey\\n    function scriptPubkey(bytes29 _output) public pure typeAssert(_output, BTCTypes.TxOut) returns (bytes29) {\\n        uint64 scriptLength = indexCompactInt(_output, 8);\\n        return _output.slice(8, compactIntLength(scriptLength) + scriptLength, uint40(BTCTypes.ScriptPubkey));\\n    }\\n\\n    function scriptPubkeyBytes(bytes29 _output) public pure typeAssert(_output, BTCTypes.TxOut) returns (bytes32) {\\n        uint64 scriptLength = indexCompactInt(_output, 8);\\n        bytes29 scriptPubkeyView = _output.slice(8, compactIntLength(scriptLength) + scriptLength, uint40(BTCTypes.ScriptPubkey));\\n        return scriptPubkeyView.index(compactIntLength(scriptLength), uint8(scriptLength));\\n    }\\n\\n    // @notice             determines the length of the first output in an array of outputs\\n    // @param _outputs     the vout without its length prefix\\n    // @return             the output length\\n    function outputLength(bytes29 _outputs) public pure typeAssert(_outputs, BTCTypes.IntermediateTxOuts) returns (uint256) {\\n        uint64 scriptLength = indexCompactInt(_outputs, 8);\\n        return uint256(compactIntLength(scriptLength)) + uint256(scriptLength) + 8;\\n    }\\n\\n    // @notice         extracts the output at a specified index\\n    // @param _vout    the vout\\n    // @param _index   the index of the desired output\\n    // @return         the desired output\\n    // function indexVout(bytes29 _vout, uint256 _index) internal pure typeAssert(_vout, BTCTypes.Vout) returns (bytes29) {\\n    //     uint256 _nOuts = uint256(indexCompactInt(_vout, 0));\\n    //     uint256 _viewLen = _vout.len();\\n    //     require(_index < _nOuts, \\\"Vout read overrun\\\");\\n\\n    //     uint256 _offset = uint256(compactIntLength(uint64(_nOuts)));\\n    //     bytes29 _remaining;\\n    //     for (uint256 _i = 0; _i < _index; _i += 1) {\\n    //         _remaining = _vout.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxOuts));\\n    //         _offset += outputLength(_remaining);\\n    //     }\\n\\n    //     _remaining = _vout.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxOuts));\\n    //     uint256 _len = outputLength(_remaining);\\n    //     return _vout.slice(_offset, _len, uint40(BTCTypes.TxOut));\\n    // }\\n    function indexVout(bytes29 _vout, uint256 _index) public pure returns (bytes29) {\\n        uint256 _nOuts = uint256(indexCompactInt(_vout, 0));\\n        uint256 _viewLen = _vout.len();\\n        require(_index < _nOuts, \\\"Vout read overrun\\\");\\n\\n        uint256 _offset = uint256(compactIntLength(uint64(_nOuts)));\\n        bytes29 _remaining;\\n        for (uint256 _i = 0; _i < _index; _i += 1) {\\n            _remaining = _vout.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxOuts));\\n            _offset += outputLength(_remaining);\\n        }\\n\\n        _remaining = _vout.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxOuts));\\n        uint256 _len = outputLength(_remaining);\\n        return _vout.slice(_offset, _len, uint40(BTCTypes.TxOut));\\n    }\\n\\n    // @notice         extracts the Op Return Payload\\n    // @param _spk     the scriptPubkey\\n    // @return         the Op Return Payload (or null if not a valid Op Return output)\\n    function opReturnPayload(bytes29 _spk) public pure typeAssert(_spk, BTCTypes.ScriptPubkey) returns (bytes29) {\\n        uint64 _bodyLength = indexCompactInt(_spk, 0);\\n        uint64 _payloadLen = uint64(_spk.indexUint(3, 1));\\n\\n        // TODO: the max length of op return (with the prefixes) is 83, please check it for other consequences\\n        // Also the _spk.indexUint(3, 1) != _bodyLength - 3 has changed from _spk.indexUint(2, 1) != _bodyLength - 2\\n        if (_bodyLength > 83 || _bodyLength < 4 || _spk.indexUint(1, 1) != 0x6a || _spk.indexUint(3, 1) != _bodyLength - 3) {\\n            return TypedMemView.nullView();\\n        }\\n        // TODO: check, the previous starting index of slice was 3\\n        return _spk.slice(4, _payloadLen, uint40(BTCTypes.OpReturnPayload));\\n    }\\n\\n    // @notice         extracts the payload from a scriptPubkey\\n    // @param _spk     the scriptPubkey\\n    // @return         the payload (or null if not a valid PKH, SH, WPKH, or WSH output)\\n    function payload(bytes29 _spk) public pure typeAssert(_spk, BTCTypes.ScriptPubkey) returns (bytes29) {\\n        uint256 _spkLength = _spk.len();\\n        uint256 _bodyLength = indexCompactInt(_spk, 0);\\n        if (_bodyLength > 0x22 || _bodyLength < 0x16 || _bodyLength + 1 != _spkLength) {\\n            return TypedMemView.nullView();\\n        }\\n\\n        // Legacy\\n        if (_bodyLength == 0x19 && _spk.indexUint(0, 4) == 0x1976a914 && _spk.indexUint(_spkLength - 2, 2) == 0x88ac) {\\n            return _spk.slice(4, 20, uint40(BTCTypes.PKH));\\n        } else if (_bodyLength == 0x17 && _spk.indexUint(0, 3) == 0x17a914 && _spk.indexUint(_spkLength - 1, 1) == 0x87) {\\n            return _spk.slice(3, 20, uint40(BTCTypes.SH));\\n        }\\n\\n        // Witness v0\\n        if (_spk.indexUint(1, 1) == 0) {\\n            uint256 _payloadLen = _spk.indexUint(2, 1);\\n            if (_bodyLength != 0x22 && _bodyLength != 0x16 || _payloadLen != _bodyLength - 2) {\\n                return TypedMemView.nullView();\\n            }\\n            uint40 newType = uint40(_payloadLen == 0x20 ? BTCTypes.WSH : BTCTypes.WPKH);\\n            return _spk.slice(3, _payloadLen, newType);\\n        }\\n\\n        return TypedMemView.nullView();\\n    }\\n\\n    // @notice     (loosely) verifies an spk and converts to a typed memory\\n    // @dev        will return null in error cases. Will not check for disabled opcodes.\\n    // @param _spk the spk\\n    // @return     the typed spk (or null if error)\\n    function tryAsSPK(bytes29 _spk) public pure typeAssert(_spk, BTCTypes.Unknown) returns (bytes29) {\\n        if (_spk.len() == 0) {\\n            return TypedMemView.nullView();\\n        }\\n        uint64 _len = indexCompactInt(_spk, 0);\\n        if (_spk.len() == compactIntLength(_len) + _len) {\\n            return _spk.castTo(uint40(BTCTypes.ScriptPubkey));\\n        } else {\\n            return TypedMemView.nullView();\\n        }\\n    }\\n\\n    // @notice     verifies the vin and converts to a typed memory\\n    // @dev        will return null in error cases\\n    // @param _vin the vin\\n    // @return     the typed vin (or null if error)\\n    function tryAsVin(bytes29 _vin) public pure typeAssert(_vin, BTCTypes.Unknown) returns (bytes29) {\\n        if (_vin.len() == 0) {\\n            return TypedMemView.nullView();\\n        }\\n        uint64 _nIns = indexCompactInt(_vin, 0);\\n        uint256 _viewLen = _vin.len();\\n        if (_nIns == 0) {\\n            return TypedMemView.nullView();\\n        }\\n\\n        uint256 _offset = uint256(compactIntLength(_nIns));\\n        for (uint256 i = 0; i < _nIns; i++) {\\n            if (_offset >= _viewLen) {\\n                // We've reached the end, but are still trying to read more\\n                return TypedMemView.nullView();\\n            }\\n            bytes29 _remaining = _vin.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxIns));\\n            _offset += inputLength(_remaining);\\n        }\\n        if (_offset != _viewLen) {\\n            return TypedMemView.nullView();\\n        }\\n        return _vin.castTo(uint40(BTCTypes.Vin));\\n    }\\n\\n    // @notice         verifies the vout and converts to a typed memory\\n    // @dev            will return null in error cases\\n    // @param _vout    the vout\\n    // @return         the typed vout (or null if error)\\n    function tryAsVout(bytes29 _vout) public pure typeAssert(_vout, BTCTypes.Unknown) returns (bytes29) {\\n        if (_vout.len() == 0) {\\n            return TypedMemView.nullView();\\n        }\\n        uint64 _nOuts = indexCompactInt(_vout, 0);\\n\\n        uint256 _viewLen = _vout.len();\\n        if (_nOuts == 0) {\\n            return TypedMemView.nullView();\\n        }\\n\\n        uint256 _offset = uint256(compactIntLength(_nOuts));\\n        for (uint256 i = 0; i < _nOuts; i++) {\\n            if (_offset >= _viewLen) {\\n                // We've reached the end, but are still trying to read more\\n                return TypedMemView.nullView();\\n            }\\n            bytes29 _remaining = _vout.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxOuts));\\n            _offset += outputLength(_remaining);\\n        }\\n        if (_offset != _viewLen) {\\n            return TypedMemView.nullView();\\n        }\\n        return _vout.castTo(uint40(BTCTypes.Vout));\\n    }\\n\\n    // @notice         verifies the header and converts to a typed memory\\n    // @dev            will return null in error cases\\n    // @param _header  the header\\n    // @return         the typed header (or null if error)\\n    function tryAsHeader(bytes29 _header) public pure typeAssert(_header, BTCTypes.Unknown) returns (bytes29) {\\n        if (_header.len() != 80) {\\n            return TypedMemView.nullView();\\n        }\\n        return _header.castTo(uint40(BTCTypes.Header));\\n    }\\n\\n\\n    // @notice         Index a header array.\\n    // @dev            Errors on overruns\\n    // @param _arr     The header array\\n    // @param index    The 0-indexed location of the header to get\\n    // @return         the typed header at `index`\\n    function indexHeaderArray(bytes29 _arr, uint256 index) public pure typeAssert(_arr, BTCTypes.HeaderArray) returns (bytes29) {\\n        uint256 _start = index * (80);\\n        return _arr.slice(_start, 80, uint40(BTCTypes.Header));\\n    }\\n\\n\\n    // @notice     verifies the header array and converts to a typed memory\\n    // @dev        will return null in error cases\\n    // @param _arr the header array\\n    // @return     the typed header array (or null if error)\\n    function tryAsHeaderArray(bytes29 _arr) public pure typeAssert(_arr, BTCTypes.Unknown) returns (bytes29) {\\n        if (_arr.len() % 80 != 0) {\\n            return TypedMemView.nullView();\\n        }\\n        return _arr.castTo(uint40(BTCTypes.HeaderArray));\\n    }\\n\\n    // @notice     verifies the merkle array and converts to a typed memory\\n    // @dev        will return null in error cases\\n    // @param _arr the merkle array\\n    // @return     the typed merkle array (or null if error)\\n    function tryAsMerkleArray(bytes29 _arr) public pure typeAssert(_arr, BTCTypes.Unknown) returns (bytes29) {\\n        if (_arr.len() % 32 != 0) {\\n            return TypedMemView.nullView();\\n        }\\n        return _arr.castTo(uint40(BTCTypes.MerkleArray));\\n    }\\n\\n    // @notice         extracts the merkle root from the header\\n    // @param _header  the header\\n    // @return         the merkle root\\n    // function merkleRoot(bytes29 _header) internal pure typeAssert(_header, BTCTypes.Header) returns (bytes32) {\\n    //     return _header.index(36, 32);\\n    // }\\n\\n    function merkleRoot(bytes29 _header) public pure returns (bytes32) {\\n        return _header.index(36, 32);\\n    }\\n\\n    // @notice         extracts the target from the header\\n    // @param _header  the header\\n    // @return         the target\\n    function target(bytes29  _header) public pure typeAssert(_header, BTCTypes.Header) returns (uint256) {\\n        uint256 _mantissa = _header.indexLEUint(72, 3);\\n        require(_header.indexUint(75, 1) > 2, \\\"ViewBTC: invalid target difficulty\\\");\\n        uint256 _exponent = _header.indexUint(75, 1) - 3;\\n        return _mantissa * (256 ** _exponent);\\n    }\\n\\n    // @notice         calculates the difficulty from a target\\n    // @param _target  the target\\n    // @return         the difficulty\\n    function toDiff(uint256  _target) public pure returns (uint256) {\\n        return DIFF1_TARGET / (_target);\\n    }\\n\\n    // @notice         extracts the difficulty from the header\\n    // @param _header  the header\\n    // @return         the difficulty\\n    function diff(bytes29  _header) public pure typeAssert(_header, BTCTypes.Header) returns (uint256) {\\n        return toDiff(target(_header));\\n    }\\n\\n    // @notice         extracts the timestamp from the header\\n    // @param _header  the header\\n    // @return         the timestamp\\n    function time(bytes29  _header) public pure typeAssert(_header, BTCTypes.Header) returns (uint32) {\\n        return uint32(_header.indexLEUint(68, 4));\\n    }\\n\\n    // @notice         extracts the parent hash from the header\\n    // @param _header  the header\\n    // @return         the parent hash\\n    function parent(bytes29 _header) public pure typeAssert(_header, BTCTypes.Header) returns (bytes32) {\\n        return _header.index(4, 32);\\n    }\\n\\n    // @notice         calculates the Proof of Work hash of the header\\n    // @param _header  the header\\n    // @return         the Proof of Work hash\\n    function workHash(bytes29 _header) public view typeAssert(_header, BTCTypes.Header) returns (bytes32) {\\n        return _header.hash256();\\n    }\\n\\n    // @notice         calculates the Proof of Work hash of the header, and converts to an integer\\n    // @param _header  the header\\n    // @return         the Proof of Work hash as an integer\\n    function work(bytes29 _header) public view typeAssert(_header, BTCTypes.Header) returns (uint256) {\\n        return TypedMemView.reverseUint256(uint256(workHash(_header)));\\n    }\\n\\n    // @notice          Concatenates and hashes two inputs for merkle proving\\n    // @dev             Not recommended to call directly.\\n    // @param _a        The first hash\\n    // @param _b        The second hash\\n    // @return          The double-sha256 of the concatenated hashes\\n    function _merkleStep(bytes32 _a, bytes32 _b) public view returns (bytes32 digest) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            mstore(ptr, _a)\\n            mstore(add(ptr, 0x20), _b)\\n            pop(staticcall(gas(), 2, ptr, 0x40, ptr, 0x20)) // sha2 #1\\n            pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha2 #2\\n            digest := mload(ptr)\\n        }\\n    }\\n\\n    // @notice         verifies a merkle proof\\n    // @param _leaf    the leaf in LE format\\n    // @param _proof   the proof nodes in LE format\\n    // @param _root    the merkle root in BE format (same as the merkle root that is stored in the block header)\\n    // @param _index   the index\\n    // @return         true if valid, false if otherwise\\n    function checkMerkle(\\n        bytes32 _leaf,\\n        bytes29 _proof,\\n        bytes32 _root,\\n        uint256 _index\\n    ) public view returns (bool) {\\n        uint256 nodes = _proof.len() / 32;\\n        if (nodes == 0) {\\n            return _leaf == _root;\\n        }\\n\\n        uint256 _idx = _index;\\n        bytes32 _current = _leaf;\\n\\n        for (uint i = 0; i < nodes; i++) {\\n            bytes32 _next = _proof.index(i * 32, 32);\\n            if (_idx % 2 == 1) {\\n                _current = _merkleStep(_next, _current);\\n            } else {\\n                _current = _merkleStep(_current, _next);\\n            }\\n            _idx >>= 1;\\n        }\\n\\n        return revertBytes32(_current) == _root;\\n    }\\n\\n    function revertBytes32(bytes32 input) public pure returns(bytes32) {\\n        bytes memory temp;\\n        bytes32 result;\\n        for (uint i = 0; i < 32; i++) {\\n            temp = abi.encodePacked(temp, input[31-i]);\\n        }\\n        assembly {\\n            result := mload(add(temp, 32))\\n        }\\n        return result;\\n    }\\n    // @notice                 performs the bitcoin difficulty retarget\\n    // @dev                    implements the Bitcoin algorithm precisely\\n    // @param _previousTarget  the target of the previous period\\n    // @param _firstTimestamp  the timestamp of the first block in the difficulty period\\n    // @param _secondTimestamp the timestamp of the last block in the difficulty period\\n    // @return                 the new period's target threshold\\n    function retargetAlgorithm(\\n        uint256 _previousTarget,\\n        uint256 _firstTimestamp,\\n        uint256 _secondTimestamp\\n    ) public pure returns (uint256) {\\n        uint256 _elapsedTime = _secondTimestamp - _firstTimestamp;\\n\\n        // Normalize ratio to factor of 4 if very long or very short\\n        if (_elapsedTime < RETARGET_PERIOD / (4)) {\\n            _elapsedTime = RETARGET_PERIOD / (4);\\n        }\\n        if (_elapsedTime > RETARGET_PERIOD * (4)) {\\n            _elapsedTime = RETARGET_PERIOD * (4);\\n        }\\n\\n        /*\\n            NB: high targets e.g. ffff0020 can cause overflows here\\n                so we divide it by 256**2, then multiply by 256**2 later\\n                we know the target is evenly divisible by 256**2, so this isn't an issue\\n        */\\n        uint256 _adjusted = _previousTarget / (65536) * (_elapsedTime);\\n        return _adjusted.div(RETARGET_PERIOD) * (65536);\\n    }\\n}\",\"keccak256\":\"0xe856c1e2351a041f90374797baba5d25fdaf0f5e0986638dec3236c3b2eac866\",\"license\":\"MIT\"},\"contracts/libraries/ViewSPV.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./TypedMemView.sol\\\";\\nimport \\\"./ViewBTC.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\n\\nlibrary ViewSPV {\\n    using TypedMemView for bytes;\\n    using TypedMemView for bytes29;\\n    using ViewBTC for bytes29;\\n    using SafeMath for uint256;\\n\\n    uint256 constant ERR_BAD_LENGTH = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n    uint256 constant ERR_INVALID_CHAIN = 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe;\\n    uint256 constant ERR_LOW_WORK = 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd;\\n\\n    function getErrBadLength() public pure returns (uint256) {\\n        return ERR_BAD_LENGTH;\\n    }\\n\\n    function getErrInvalidChain() public pure returns (uint256) {\\n        return ERR_INVALID_CHAIN;\\n    }\\n\\n    function getErrLowWork() public pure returns (uint256) {\\n        return ERR_LOW_WORK;\\n    }\\n\\n    // @notice             requires `memView` to be of a specified type\\n    // @param memView      a 29-byte view with a 5-byte type\\n    // @param t            the expected type (e.g. BTCTypes.Outpoint, BTCTypes.TxIn, etc)\\n    // @return             passes if it is the correct type, errors if not\\n    modifier typeAssert(bytes29 memView, ViewBTC.BTCTypes t) {\\n        memView.assertType(uint40(t));\\n        _;\\n    }\\n\\n    // @notice                     Validates a tx inclusion in the block\\n    // @dev                        `index` is not a reliable indicator of location within a block\\n    // @param _txid                The txid (LE)\\n    // @param _merkleRoot          The merkle root (as in the block header)\\n    // @param _intermediateNodes   The proof's intermediate nodes (digests between leaf and root)\\n    // @param _index               The leaf's index in the tree (0-indexed)\\n    // @return                     true if fully valid, false otherwise\\n    // function prove(\\n    //     bytes32 _txid,\\n    //     bytes32 _merkleRoot,\\n    //     bytes29 _intermediateNodes,\\n    //     uint _index\\n    // ) internal view typeAssert(_intermediateNodes, ViewBTC.BTCTypes.MerkleArray) returns (bool) {\\n    //     // Shortcut the empty-block case\\n    //     if (_txid == _merkleRoot && _index == 0 && _intermediateNodes.len() == 0) {\\n    //         return true;\\n    //     }\\n\\n    //     return ViewBTC.checkMerkle(_txid, _intermediateNodes, _merkleRoot, _index);\\n    // }\\n    function prove(\\n        bytes32 _txid,\\n        bytes32 _merkleRoot,\\n        bytes29 _intermediateNodes,\\n        uint _index\\n    ) public view returns (bool) {\\n        // Shortcut the empty-block case\\n        if (revertBytes32(_txid) == _merkleRoot && _index == 0 && _intermediateNodes.len() == 0) {\\n            return true;\\n        }\\n\\n        return ViewBTC.checkMerkle(_txid, _intermediateNodes, _merkleRoot, _index);\\n    }\\n\\n    function revertBytes32(bytes32 input) public pure returns(bytes32) {\\n        bytes memory temp;\\n        bytes32 result;\\n        for (uint i = 0; i < 32; i++) {\\n            temp = abi.encodePacked(temp, input[31-i]);\\n        }\\n        assembly {\\n            result := mload(add(temp, 32))\\n        }\\n        return result;\\n    }\\n\\n    // @notice             Hashes transaction to get txid\\n    // @dev                Supports Legacy and Witness\\n    // @param _version     4-bytes version\\n    // @param _vin         Raw bytes length-prefixed input vector\\n    // @param _vout        Raw bytes length-prefixed output vector\\n    // @param _locktime    4-byte tx locktime\\n    // @return             32-byte transaction id, little endian\\n    function calculateTxId(\\n        bytes4 _version,\\n        bytes29 _vin,\\n        bytes29 _vout,\\n        bytes4 _locktime\\n    ) public view typeAssert(_vin, ViewBTC.BTCTypes.Vin) typeAssert(_vout, ViewBTC.BTCTypes.Vout) returns (bytes32) {\\n        // TODO: write in assembly\\n        return abi.encodePacked(_version, _vin.clone(), _vout.clone(), _locktime).ref(0).hash256();\\n    }\\n\\n    // TODO: add test for checkWork\\n    // @notice             Checks validity of header work\\n    // @param _header      Header view\\n    // @param _target      The target threshold\\n    // @return             true if header work is valid, false otherwise\\n    function checkWork(bytes29 _header, uint256 _target) public view typeAssert(_header, ViewBTC.BTCTypes.Header) returns (bool) {\\n        return _header.work() < _target;\\n    }\\n\\n\\n    // @notice                     Checks validity of header chain\\n    // @dev                        Compares current header parent to previous header's digest\\n    // @param _header              The raw bytes header\\n    // @param _prevHeaderDigest    The previous header's digest\\n    // @return                     true if the connect is valid, false otherwise\\n    function checkParent(bytes29 _header, bytes32 _prevHeaderDigest) public pure typeAssert(_header, ViewBTC.BTCTypes.Header) returns (bool) {\\n        return _header.parent() == _prevHeaderDigest;\\n    }\\n\\n    // @notice             Checks validity of header chain\\n    // @notice             Compares the hash of each header to the prevHash in the next header\\n    // @param _headers     Raw byte array of header chain\\n    // @return             The total accumulated difficulty of the header chain, or an error code\\n    function checkChain(bytes29 _headers) public view typeAssert(_headers, ViewBTC.BTCTypes.HeaderArray) returns (uint256 _totalDifficulty) {\\n        bytes32 _digest;\\n        uint256 _headerCount = _headers.len() / 80;\\n        for (uint256 i = 0; i < _headerCount; i += 1) {\\n            bytes29 _header = _headers.indexHeaderArray(i);\\n            if (i != 0) {\\n                if (!checkParent(_header, _digest)) {return ERR_INVALID_CHAIN;}\\n            }\\n            _digest = _header.workHash();\\n            uint256 _work = TypedMemView.reverseUint256(uint256(_digest));\\n            uint256 _target = _header.target();\\n\\n            if (_work > _target) {return ERR_LOW_WORK;}\\n\\n            _totalDifficulty += ViewBTC.toDiff(_target);\\n        }\\n    }\\n}\",\"keccak256\":\"0xf4960e953d71c254b022eb2e9bb45897a70ee0488b53abbd65ea4d222bd96be5\",\"license\":\"MIT\"},\"contracts/relay/BitcoinRelay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../libraries/SafeMath.sol\\\";\\nimport \\\"../libraries/TypedMemView.sol\\\";\\nimport \\\"../libraries/ViewBTC.sol\\\";\\nimport \\\"../libraries/ViewSPV.sol\\\";\\nimport \\\"./interfaces/IBitcoinRelay.sol\\\";\\nimport \\\"../erc20/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract BitcoinRelay is IBitcoinRelay, Ownable, ReentrancyGuard, Pausable {\\n    using SafeMath for uint256;\\n    using TypedMemView for bytes;\\n    using TypedMemView for bytes29;\\n    using ViewBTC for bytes29;\\n    using ViewSPV for bytes29;\\n\\n    /* using BytesLib for bytes;\\n    using BTCUtils for bytes;\\n    using ValidateSPV for bytes; */\\n\\n    uint public override initialHeight;\\n    uint public override lastSubmittedHeight;\\n    uint public override finalizationParameter;\\n\\n    bytes32 public override relayGenesisHash;\\n    mapping(bytes32 => bytes32) internal previousBlock;\\n    mapping(bytes32 => uint256) internal blockHeight;\\n    mapping(uint => blockHeader[]) private chain;\\n\\n    uint256 internal currentEpochDiff;\\n    uint256 internal prevEpochDiff;\\n\\n    // Reward parameters\\n    uint public override rewardAmountInTDT;\\n    address public override TeleportDAOToken;\\n    uint public override relayerPercentageFee; // Multiplied by 100 - greater than 100\\n    uint public override submissionGasUsed;\\n    uint public override epochLength;\\n    uint public override lastEpochQueries;\\n    uint public override currentEpochQueries;\\n    uint public override baseQueries;\\n    mapping (uint => uint) private numberOfQueries;\\n\\n\\n\\n    /// @notice                   Gives a starting point for the relay\\n    /// @param  _genesisHeader    The starting header\\n    /// @param  _height           The starting height\\n    /// @param  _periodStart      The hash of the first header in the genesis epoch\\n    constructor(\\n        bytes memory _genesisHeader,\\n        uint256 _height,\\n        bytes32 _periodStart,\\n        address _TeleportDAOToken\\n    ) {\\n        bytes29 _genesisView = _genesisHeader.ref(0).tryAsHeader();\\n        require(_genesisView.notNull(), \\\"BitcoinRelay: stop being dumb\\\");\\n        bytes32 _genesisHash = _genesisView.hash256();\\n        // Add the initial block header to the chain\\n        blockHeader memory newBlockHeader;\\n        newBlockHeader.selfHash = _genesisHash;\\n        newBlockHeader.merkleRoot = _genesisView.merkleRoot();\\n        newBlockHeader.relayer = msg.sender;\\n        newBlockHeader.gasPrice = tx.gasprice;\\n        chain[_height].push(newBlockHeader);\\n\\n        // require(\\n        //     _periodStart & bytes32(0x0000000000000000000000000000000000000000000000000000000000ffffff) == bytes32(0),\\n        //     \\\"Period start hash does not have work. Hint: wrong byte order?\\\");\\n        relayGenesisHash = _genesisHash;\\n        blockHeight[_genesisHash] = _height;\\n        blockHeight[_periodStart] = _height - (_height % 2016);\\n        // Added parameters\\n        finalizationParameter = 1;\\n        lastSubmittedHeight = _height;\\n        initialHeight = _height;\\n        // Reward parameters\\n        TeleportDAOToken = _TeleportDAOToken;\\n        relayerPercentageFee = 0;\\n        epochLength = 5;\\n        baseQueries = epochLength;\\n        lastEpochQueries = baseQueries;\\n        currentEpochQueries = 0;\\n        submissionGasUsed = 100000;\\n    }\\n\\n    /// @notice                 Pause the relay, so only the functions can be called which are whenPaused\\n    /// @dev\\n    /// @param\\n    function pauseRelay() external override onlyOwner {\\n        _pause();\\n    }\\n\\n    /// @notice                 Un-pause the relay, so only the functions can be called which are whenNotPaused\\n    /// @dev\\n    /// @param\\n    function unPauseRelay() external override onlyOwner {\\n        _unpause();\\n    }\\n\\n    /// @notice             Getter for an specific block header's hash in the stored chain\\n    /// @param  _height     The height of the desired block header\\n    /// @param  _index      The index of the desired block header in that height\\n    /// @return             Block header's hash\\n    function getBlockHeaderHash (uint _height, uint _index) external view override returns(bytes32) {\\n        return _revertBytes32(chain[_height][_index].selfHash);\\n    }\\n\\n    /// @notice             Getter for an specific block header's fee price for a query\\n    /// @param  _height     The height of the desired block header\\n    /// @param  _index      The index of the desired block header in that height\\n    /// @return             Block header's fee price for a query\\n    function getBlockHeaderFee (uint _height, uint _index) external view override returns(uint) {\\n        return (submissionGasUsed * chain[_height][_index].gasPrice * (1 + relayerPercentageFee) * (epochLength)) / (100 * lastEpochQueries);\\n    }\\n\\n    /// @notice             Getter for the number of block headers in the same height\\n    /// @dev                This shows the number of temporary forks in that specific height\\n    /// @param  _height     The desired height of the blockchain\\n    /// @return             Number of block headers stored in the same height\\n    function getNumberOfSubmittedHeaders (uint _height) external view override returns (uint) {\\n        return chain[_height].length;\\n    }\\n\\n    /// @notice     Getter for currentEpochDiff\\n    /// @dev        This is updated when a new heavist header has a new diff\\n    /// @return     The difficulty of the bestKnownDigest\\n    function getCurrentEpochDifficulty() external view override returns (uint256) {\\n        return currentEpochDiff;\\n    }\\n    /// @notice     Getter for prevEpochDiff\\n    /// @dev        This is updated when a difficulty change is accepted\\n    /// @return     The difficulty of the previous epoch\\n    function getPrevEpochDifficulty() external view override returns (uint256) {\\n        return prevEpochDiff;\\n    }\\n\\n    /// @notice             Getter for available TDT in treasury\\n    /// @return             Amount of TDT available in Relay treasury\\n    function availableTDT() external view override returns(uint) {\\n        return IERC20(TeleportDAOToken).balanceOf(address(this));\\n    }\\n\\n    /// @notice             Getter for available target native token in treasury\\n    /// @return             Amount of target blockchain native token available in Relay treasury\\n    function availableTNT() external view override returns(uint) {\\n        return address(this).balance;\\n    }\\n\\n    /// @notice         Finds the height of a header by its hash\\n    /// @dev            Will fail if the header is unknown\\n    /// @param _hash  The header hash to search for\\n    /// @return         The height of the header, or error if unknown\\n    function findHeight(bytes32 _hash) external view override returns (uint256) {\\n        return _findHeight(_hash);\\n    }\\n\\n    /// @notice         Finds an ancestor for a block by its hash\\n    /// @dev            Will fail if the header is unknown\\n    /// @param _hash  The header hash to search for\\n    /// @return         The height of the header, or error if unknown\\n    function findAncestor(bytes32 _hash, uint256 _offset) external view override returns (bytes32) {\\n        return _findAncestor(_hash, _offset);\\n    }\\n\\n    /// @notice             Checks if a hash is an ancestor of the current one\\n    /// @dev                Limit the amount of lookups (and thus gas usage) with _limit\\n    /// @param _ancestor    The prospective ancestor\\n    /// @param _descendant  The descendant to check\\n    /// @param _limit       The maximum number of blocks to check\\n    /// @return             true if ancestor is at most limit blocks lower than descendant, otherwise false\\n    function isAncestor(bytes32 _ancestor, bytes32 _descendant, uint256 _limit) external view override returns (bool) {\\n        return _isAncestor(_ancestor, _descendant, _limit);\\n    }\\n\\n    /// @notice                             Setter for rewardAmountInTDT\\n    /// @dev                                This award is for the relayer who has a finalized block header\\n    /// @param _rewardAmountInTDT           The reward amount in TDT\\n    function setRewardAmountInTDT(uint _rewardAmountInTDT) external override onlyOwner {\\n        rewardAmountInTDT = _rewardAmountInTDT;\\n    }\\n\\n    /// @notice                             Setter for finalizationParameter\\n    /// @dev                                This might change if finalization rule of the source chain gets updated\\n    /// @param _finalizationParameter       The finalization parameter of the source chain\\n    function setFinalizationParameter(uint _finalizationParameter) external override onlyOwner {\\n        finalizationParameter = _finalizationParameter;\\n    }\\n\\n    /// @notice                             Setter for relayerPercentageFee\\n    /// @dev                                This is updated when we want to change the Relayer reward\\n    /// @param _relayerPercentageFee               Ratio > 1 that determines percentage of reward to the Relayer\\n    function setRelayerPercentageFee(uint _relayerPercentageFee) external override onlyOwner {\\n        relayerPercentageFee = _relayerPercentageFee;\\n    }\\n\\n    /// @notice                             Setter for epochLength\\n    /// @param _epochLength                 The length of epochs for estimating the user queries hence their fees\\n    function setEpochLength(uint _epochLength) external override onlyOwner {\\n        epochLength = _epochLength;\\n    }\\n\\n    /// @notice                             Setter for baseQueries\\n    /// @param _baseQueries                 The base amount of queries we assume in each epoch\\n    ///                                     (This is for preventing user fees to grow significantly)\\n    function setBaseQueries(uint _baseQueries) external override onlyOwner {\\n        baseQueries = _baseQueries;\\n    }\\n\\n    /// @notice                             Setter for submissionGasUsed\\n    /// @dev                                This is updated when the smart contract changes the way of getting block headers\\n    /// @param _submissionGasUsed           The gas used for submitting one block header\\n    function setSubmissionGasUsed(uint _submissionGasUsed) external override onlyOwner {\\n        submissionGasUsed = _submissionGasUsed;\\n    }\\n\\n    /// @notice                         Checks if a tx is included and finalized on the source blockchain\\n    /// @dev                            Checks if the block is finalized, and Merkle proof is correct\\n    /// @param  _txid                   Desired transaction's tx Id\\n    /// @param  _blockHeight            Block height of the desired tx\\n    /// @param  _intermediateNodes      Part of the Merkle proof for the desired tx\\n    /// @param  _index                  Part of the Merkle proof for the desired tx\\n    /// @return                         True if the provided tx is confirmed on the source blockchain, False otherwise\\n    function checkTxProof (\\n        bytes32 _txid, // In BE form\\n        uint _blockHeight,\\n        bytes calldata _intermediateNodes, // In LE form\\n        uint _index\\n    ) external payable nonReentrant whenNotPaused override returns (bool) {\\n        // Check for block confirmation\\n        // TODO: change 6 with something different\\n        if (_blockHeight + 6 < lastSubmittedHeight + 1) {\\n            for (uint256 i = 0; i < chain[_blockHeight].length; i++) {\\n                bytes32 _merkleRoot = _revertBytes32(chain[_blockHeight][i].merkleRoot);\\n                bytes29 intermediateNodes = _intermediateNodes.ref(0).tryAsMerkleArray(); // Check for errors if any\\n                bytes32 txIdLE = _revertBytes32(_txid);\\n                if (ViewSPV.prove(txIdLE, _merkleRoot, intermediateNodes, _index)) {\\n                    require(_getFee(chain[_blockHeight][i].gasPrice), \\\"BitcoinRelay: getting fee was not successful\\\");\\n                    currentEpochQueries += 1;\\n                    return true;\\n                }\\n            }\\n            require(false, \\\"BitcoinRelay: tx has not been included\\\");\\n            return false;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /// @notice             Adds headers to storage after validating\\n    /// @dev                We check integrity and consistency of the header chain\\n    /// @param  _anchor     The header immediately preceeding the new chain\\n    /// @param  _headers    A tightly-packed list of 80-byte Bitcoin headers\\n    /// @return             True if successfully written, error otherwise\\n    function addHeaders(bytes calldata _anchor, bytes calldata _headers) external nonReentrant whenNotPaused override returns (bool) {\\n        bytes29 _headersView = _headers.ref(0).tryAsHeaderArray();\\n        bytes29 _anchorView = _anchor.ref(0).tryAsHeader();\\n\\n        require(_headersView.notNull(), \\\"BitcoinRelay: header array length must be divisible by 80\\\");\\n        require(_anchorView.notNull(), \\\"BitcoinRelay: anchor must be 80 bytes\\\");\\n\\n        return _addHeaders(_anchorView, _headersView, false);\\n    }\\n\\n    /// @notice                       Adds headers to storage, performs additional validation of retarget\\n    /// @dev                          Checks the retarget, the heights, and the linkage\\n    /// @param  _oldPeriodStartHeader The first header in the difficulty period being closed\\n    /// @param  _oldPeriodEndHeader   The last header in the difficulty period being closed (anchor of new headers)\\n    /// @param  _headers              A tightly-packed list of 80-byte Bitcoin headers\\n    /// @return                       True if successfully written, error otherwise\\n    function addHeadersWithRetarget(\\n        bytes calldata _oldPeriodStartHeader,\\n        bytes calldata _oldPeriodEndHeader,\\n        bytes calldata _headers\\n    ) external nonReentrant whenNotPaused override returns (bool) {\\n        bytes29 _oldStart = _oldPeriodStartHeader.ref(0).tryAsHeader();\\n        bytes29 _oldEnd = _oldPeriodEndHeader.ref(0).tryAsHeader();\\n        bytes29 _headersView = _headers.ref(0).tryAsHeaderArray();\\n\\n        require(\\n            _oldStart.notNull() && _oldEnd.notNull() && _headersView.notNull(),\\n            \\\"BitcoinRelay: bad args. Check header and array byte lengths.\\\"\\n        );\\n\\n        return _addHeadersWithRetarget(_oldStart, _oldEnd, _headersView);\\n    }\\n\\n    /// @notice         Finds the height of a header by its hash\\n    /// @dev            Will fail if the header is unknown\\n    /// @param _hash  The header hash to search for\\n    /// @return         The height of the header\\n    function _findHeight(bytes32 _hash) internal view returns (uint256) {\\n        if (blockHeight[_hash] == 0) {\\n            revert(\\\"Unknown block\\\");\\n        }\\n        else {\\n            return blockHeight[_hash];\\n        }\\n    }\\n\\n    /// @notice         Finds an ancestor for a block by its hash\\n    /// @dev            Will fail if the header is unknown\\n    /// @param _hash  The header hash to search for\\n    /// @return         The height of the header, or error if unknown\\n    function _findAncestor(bytes32 _hash, uint256 _offset) internal view returns (bytes32) {\\n        bytes32 _current = _hash;\\n        for (uint256 i = 0; i < _offset; i++) {\\n            _current = previousBlock[_current];\\n        }\\n        require(_current != bytes32(0), \\\"BitcoinRelay: unknown ancestor\\\");\\n        return _current;\\n    }\\n\\n    /// @notice             Checks if a hash is an ancestor of the current one\\n    /// @dev                Limit the amount of lookups (and thus gas usage) with _limit\\n    /// @param _ancestor    The prospective ancestor\\n    /// @param _descendant  The descendant to check\\n    /// @param _limit       The maximum number of blocks to check\\n    /// @return             true if ancestor is at most limit blocks lower than descendant, otherwise false\\n    function _isAncestor(bytes32 _ancestor, bytes32 _descendant, uint256 _limit) internal view returns (bool) {\\n        bytes32 _current = _descendant;\\n        /* NB: 200 gas/read, so gas is capped at ~200 * limit */\\n        for (uint256 i = 0; i < _limit; i++) {\\n            if (_current == _ancestor) {\\n                return true;\\n            }\\n            _current = previousBlock[_current];\\n        }\\n        return false;\\n    }\\n\\n    function _revertBytes32(bytes32 _input) internal pure returns(bytes32) {\\n        bytes memory temp;\\n        bytes32 result;\\n        for (uint256 i = 0; i < 32; i++) {\\n            temp = abi.encodePacked(temp, _input[31-i]);\\n        }\\n        assembly {\\n            result := mload(add(temp, 32))\\n        }\\n        return result;\\n    }\\n\\n    /// @notice                 Gets fee from the user\\n    /// @dev                    Fee is paid in target blockchain native token\\n    /// @return                 True if the fee payment was successful\\n    function _getFee(uint gasPrice) internal returns (bool){\\n        uint feeAmount;\\n        feeAmount = (submissionGasUsed * gasPrice * (1 + relayerPercentageFee) * (epochLength)) / (100 * lastEpochQueries);\\n        require(msg.value >= feeAmount, \\\"BitcoinRelay: fee is not enough\\\");\\n        // (sentFee, dataFee) = payable(msg.sender).call{value: (msg.value - feeAmount)}(\\\"\\\");\\n        Address.sendValue(payable(msg.sender), msg.value - feeAmount);\\n        return true;\\n    }\\n\\n\\n    /// @notice             Adds headers to storage after validating\\n    /// @dev                We check integrity and consistency of the header chain\\n    /// @param  _anchor     The header immediately preceeding the new chain\\n    /// @param  _headers    A tightly-packed list of new 80-byte Bitcoin headers to record\\n    /// @param  _internal   True if called internally from addHeadersWithRetarget, false otherwise\\n    /// @return             True if successfully written, error otherwise\\n    function _addHeaders(bytes29 _anchor, bytes29 _headers, bool _internal) internal returns (bool) {\\n        // Extract basic info\\n        bytes32 _previousHash = _anchor.hash256();\\n        uint256 _anchorHeight = _findHeight(_previousHash);  /* NB: errors if unknown */\\n        uint256 _target = _headers.indexHeaderArray(0).target();\\n\\n        require(\\n            _internal || _anchor.target() == _target,\\n            \\\"BitcoinRelay: unexpected retarget on external call\\\"\\n        );\\n\\n        /*\\n        NB:\\n        1. check that the header has sufficient work\\n        2. check that headers are in a coherent chain (no retargets, hash links good)\\n        3. Store the block connection\\n        4. Store the height\\n        */\\n        uint256 _height;\\n        bytes32 _currentHash;\\n        for (uint256 i = 0; i < _headers.len() / 80; i++) {\\n            bytes29 _header = _headers.indexHeaderArray(i);\\n            _height = _anchorHeight + i + 1;\\n            _currentHash = _header.hash256();\\n\\n            // This requires submitting multiplies of 2016 with retarget and avoids accepting\\n            // a new epoch with no retarget\\n            require(_internal || _height % 2016 != 0,\\n                \\\"BitcoinRelay: headers should be submitted by calling addHeadersWithRetarget\\\");\\n\\n            /* NB: we do still need to make chain level checks tho */\\n            require(_header.target() == _target, \\\"BitcoinRelay: target changed unexpectedly\\\");\\n            require(_header.checkParent(_previousHash), \\\"BitcoinRelay: headers do not form a consistent chain\\\");\\n\\n            require(_height + finalizationParameter > lastSubmittedHeight, \\\"BitcoinRelay: block header is too old\\\");\\n            /*\\n            NB:\\n            if the block is already authenticated, we don't need to a work check\\n            Or write anything to state. This saves gas\\n            */\\n            // The below check prevents adding a replicated block header\\n            if (previousBlock[_currentHash] == bytes32(0)) {\\n                require(\\n                    TypedMemView.reverseUint256(uint256(_currentHash)) <= _target,\\n                    \\\"BitcoinRelay: header work is insufficient\\\"\\n                );\\n\\n                previousBlock[_currentHash] = _previousHash;\\n                blockHeight[_currentHash] = _height;\\n                _addToChain(_header, _height);\\n                emit BlockAdded(_height, _currentHash, _previousHash, msg.sender);\\n            }\\n            _previousHash = _currentHash;\\n        }\\n        return true;\\n    }\\n\\n    /// @notice                     Sends reward and compensation to the relayer\\n    /// @dev                        We pay the block submission cost in TNT and the extra reward in TDT\\n    /// @param  _relayer            The relayer address\\n    /// @return                     True if the amount is paid and False if treasury is empty\\n    function _sendReward(address _relayer) internal returns (uint, uint) {\\n\\n        // Reward in TNT\\n        uint rewardAmountInTNT = submissionGasUsed * tx.gasprice * (1 + relayerPercentageFee) / 100;\\n\\n        // Reward in TDT\\n        uint contractTDTBalance;\\n        if (TeleportDAOToken != address(0)) {\\n            contractTDTBalance = IERC20(TeleportDAOToken).balanceOf(address(this));\\n        } else {\\n            contractTDTBalance = 0;\\n        }\\n\\n        // Send reward in TDT\\n        bool sentTDT;\\n        if (rewardAmountInTDT <= contractTDTBalance && rewardAmountInTDT > 0) {\\n            // Call ERC20 token contract to transfer reward tokens to the relayer\\n            sentTDT = IERC20(TeleportDAOToken).transfer(_relayer, rewardAmountInTDT);\\n        }\\n\\n        // Send reward in TNT\\n        bool sentTNT;\\n        if (address(this).balance > rewardAmountInTNT && rewardAmountInTNT > 0) {\\n            // note: no need to revert if failed\\n            (sentTNT,) = payable(_relayer).call{value: rewardAmountInTNT}(\\\"\\\");\\n        }\\n\\n        if (sentTNT) {\\n            if (sentTDT) {\\n                return (rewardAmountInTNT, rewardAmountInTDT);\\n            } else {\\n                return (rewardAmountInTNT, 0);\\n            }\\n        } else {\\n            if (sentTDT) {\\n                return (0, rewardAmountInTDT);\\n            } else {\\n                return (0, 0);\\n            }\\n        }\\n    }\\n\\n    /// @notice                     Adds a header to the chain\\n    /// @dev                        We prune the chain if the new header causes other block headers to get finalized\\n    /// @param  _header             The new block header\\n    /// @param  _height             The height of the new block header\\n    function _addToChain(bytes29 _header, uint _height) internal {\\n        // Prevent relayers to submit too old block headers\\n        require(_height + finalizationParameter > lastSubmittedHeight, \\\"BitcoinRelay: block header is too old\\\");\\n        blockHeader memory newBlockHeader;\\n        newBlockHeader.selfHash = _header.hash256();\\n        newBlockHeader.parentHash = _header.parent();\\n        newBlockHeader.merkleRoot = _header.merkleRoot();\\n        newBlockHeader.relayer = msg.sender;\\n        newBlockHeader.gasPrice = tx.gasprice;\\n        chain[_height].push(newBlockHeader);\\n        if(_height > lastSubmittedHeight){\\n            lastSubmittedHeight += 1;\\n            _pruneChain();\\n            _updateFee();\\n        }\\n    }\\n\\n    /// @notice                     Reset the number of users in an epoch when a new epoch starts\\n    /// @dev                        This parameter is used when calculating the fee that relay gets from a user in the next epoch\\n    function _updateFee() internal {\\n        if (lastSubmittedHeight % epochLength == 0) {\\n            lastEpochQueries = (currentEpochQueries < baseQueries) ? baseQueries : currentEpochQueries;\\n            currentEpochQueries = 0;\\n        }\\n    }\\n\\n    /// @notice                     Finalizes a block header and removes all the other headers in the same height\\n    /// @dev\\n    function _pruneChain() internal {\\n        // Make sure that we have at least finalizationParameter blocks on relay\\n        if ((lastSubmittedHeight - initialHeight) >= finalizationParameter){\\n            uint idx = finalizationParameter;\\n            uint currentHeight = lastSubmittedHeight;\\n            uint stableIdx = 0;\\n            while (idx > 0) {\\n                // bytes29 header = chain[currentHeight][stableIdx];\\n                bytes32 parentHeaderHash = chain[currentHeight][stableIdx].parentHash;\\n                stableIdx = _findIndex(parentHeaderHash, currentHeight-1);\\n                idx--;\\n                currentHeight--;\\n            }\\n            // Keep the finalized block header and delete rest of headers\\n            chain[currentHeight][0] = chain[currentHeight][stableIdx];\\n            if(chain[currentHeight].length > 1){\\n                _pruneHeight(currentHeight);\\n                // A new block has been finalized, we send its relayer's reward\\n                uint rewardAmountTNT;\\n                uint rewardAmountTDT;\\n                (rewardAmountTNT, rewardAmountTDT) = _sendReward(chain[currentHeight][0].relayer);\\n\\n                emit BlockFinalized(\\n                    currentHeight,\\n                    chain[currentHeight][0].selfHash,\\n                    chain[currentHeight][0].parentHash,\\n                    chain[currentHeight][0].relayer,\\n                    rewardAmountTNT,\\n                    rewardAmountTDT\\n                );\\n            }\\n        }\\n    }\\n\\n    /// @notice                     Finds the index of a block header in a specific height\\n    /// @dev\\n    /// @param  _headerHash         The block header hash\\n    /// @param  _height             The height of the block header\\n    /// @return                     Index of the block header\\n    function _findIndex(bytes32 _headerHash, uint _height) internal view returns(uint) {\\n        for(uint256 index = 0; index < chain[_height].length; index++) {\\n            if(_headerHash == chain[_height][index].selfHash) {\\n                return index;\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    /// @notice                     Deletes all the block header in the same height except the first header\\n    /// @dev                        The first header is the one that has gotten finalized\\n    /// @param  _height             The height of the new block header\\n    function _pruneHeight(uint _height) internal {\\n        uint idx = 1;\\n        while(idx < chain[_height].length){\\n            delete chain[_height][idx]; // check if it should be backwards?\\n            idx += 1;\\n        }\\n    }\\n\\n    /// @notice                       Adds headers to storage, performs additional validation of retarget\\n    /// @dev                          Checks the retarget, the heights, and the linkage\\n    /// @param  _oldStart             The first header in the difficulty period being closed\\n    /// @param  _oldEnd               The last header in the difficulty period being closed\\n    /// @param  _headers              A tightly-packed list of 80-byte Bitcoin headers\\n    /// @return                       True if successfully written, error otherwise\\n    function _addHeadersWithRetarget(\\n        bytes29 _oldStart,\\n        bytes29 _oldEnd,\\n        bytes29 _headers\\n    ) internal returns (bool) {\\n\\n        /* NB: requires that both blocks are known */\\n        uint256 _startHeight = _findHeight(_oldStart.hash256());\\n        uint256 _endHeight = _findHeight(_oldEnd.hash256());\\n\\n        /* NB: retargets should happen at 2016 block intervals */\\n        require(\\n            _endHeight % 2016 == 2015,\\n            \\\"BitcoinRelay: must provide the last header of the closing difficulty period\\\");\\n        require(\\n            _endHeight == _startHeight + 2015,\\n            \\\"BitcoinRelay: must provide exactly 1 difficulty period\\\");\\n        require(\\n            _oldStart.diff() == _oldEnd.diff(),\\n            \\\"BitcoinRelay: period header difficulties do not match\\\");\\n\\n        /* NB: This comparison looks weird because header nBits encoding truncates targets */\\n        bytes29 _newStart = _headers.indexHeaderArray(0);\\n        uint256 _actualTarget = _newStart.target();\\n        uint256 _expectedTarget = ViewBTC.retargetAlgorithm(\\n            _oldStart.target(),\\n            _oldStart.time(),\\n            _oldEnd.time()\\n        );\\n        require(\\n            (_actualTarget & _expectedTarget) == _actualTarget, // shouldn't it be == _expected??\\n            \\\"BitcoinRelay: invalid retarget provided\\\");\\n\\n        // Pass all but the first through to be added\\n        return _addHeaders(_oldEnd, _headers, true);\\n    }\\n}\\n\",\"keccak256\":\"0x16d9573cc8e5065651c60e3db23106ecd2cfcb1276801e40461d711b76350351\",\"license\":\"MIT\"},\"contracts/relay/interfaces/IBitcoinRelay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBitcoinRelay {\\n    // structures\\n\\n    /// @notice                 \\tStructure for recording block header\\n    /// @param selfHash             Hash of block header\\n    /// @param parentHash          \\tHash of parent block header\\n    /// @param merkleRoot       \\tMerkle root of transactions in the block\\n    /// @param relayer              Address of relayer who submitted the block header\\n    struct blockHeader {\\n        bytes32 selfHash;\\n        bytes32 parentHash;\\n        bytes32 merkleRoot;\\n        address relayer;\\n        uint gasPrice;\\n    }\\n\\n    // events\\n\\n    /// @notice                     Emits when a block header is added\\n    /// @param height               Height of submitted header\\n    /// @param selfHash             Hash of submitted header\\n    /// @param parentHash           Parent hash of submitted header\\n    /// @param relayer              Address of relayer who submitted the block header\\n    event BlockAdded(\\n        uint indexed height,\\n        bytes32 selfHash,\\n        bytes32 indexed parentHash,\\n        address indexed relayer\\n    );\\n\\n    /// @notice                     Emits when a block header gets finalized\\n    /// @param height               Height of the header\\n    /// @param selfHash             Hash of the header\\n    /// @param parentHash           Parent hash of the header\\n    /// @param relayer              Address of relayer who submitted the block header\\n    /// @param rewardAmountTNT      Amount of reward that the relayer receives in target native token\\n    /// @param rewardAmountTDT      Amount of reward that the relayer receives in TDT\\n    event BlockFinalized(\\n        uint indexed height,\\n        bytes32 selfHash,\\n        bytes32 parentHash,\\n        address indexed relayer,\\n        uint rewardAmountTNT,\\n        uint rewardAmountTDT\\n    );\\n\\n    // Read-only functions\\n\\n    function relayGenesisHash() external view returns (bytes32);\\n\\n    function initialHeight() external view returns(uint);\\n\\n    function lastSubmittedHeight() external view returns(uint);\\n\\n    function finalizationParameter() external view returns(uint);\\n\\n    function TeleportDAOToken() external view returns(address);\\n\\n    function relayerPercentageFee() external view returns(uint);\\n\\n    function epochLength() external view returns(uint);\\n\\n    function lastEpochQueries() external view returns(uint);\\n\\n    function currentEpochQueries() external view returns(uint);\\n\\n    function baseQueries() external view returns(uint);\\n\\n    function submissionGasUsed() external view returns(uint);\\n\\n    function getBlockHeaderHash(uint height, uint index) external view returns(bytes32);\\n\\n    function getBlockHeaderFee (uint _height, uint _index) external view returns(uint);\\n\\n    function getNumberOfSubmittedHeaders(uint height) external view returns (uint);\\n\\n    function getCurrentEpochDifficulty() external view returns (uint256);\\n\\n    function getPrevEpochDifficulty() external view returns (uint256);\\n\\n    function availableTDT() external view returns(uint);\\n\\n    function availableTNT() external view returns(uint);\\n\\n    function findHeight(bytes32 _hash) external view returns (uint256);\\n\\n    function findAncestor(bytes32 _hash, uint256 _offset) external view returns (bytes32); // see if it's needed\\n\\n    function isAncestor(bytes32 _ancestor, bytes32 _descendant, uint256 _limit) external view returns (bool); // see if it's needed\\n\\n    function rewardAmountInTDT() external view returns (uint);\\n\\n\\n    // State-changing functions\\n    function pauseRelay() external;\\n\\n    function unPauseRelay() external;\\n\\n    function setRewardAmountInTDT(uint _rewardAmountInTDT) external;\\n\\n    function setFinalizationParameter(uint _finalizationParameter) external;\\n\\n    function setRelayerPercentageFee(uint _relayerPercentageFee) external;\\n\\n    function setEpochLength(uint _epochLength) external;\\n\\n    function setBaseQueries(uint _baseQueries) external;\\n\\n    function setSubmissionGasUsed(uint _submissionGasUsed) external;\\n\\n    function checkTxProof(\\n        bytes32 txid,\\n        uint blockHeight,\\n        bytes calldata intermediateNodes,\\n        uint index\\n    ) external payable returns (bool);\\n\\n    function addHeaders(bytes calldata _anchor, bytes calldata _headers) external returns (bool);\\n\\n    function addHeadersWithRetarget(\\n        bytes calldata _oldPeriodStartHeader,\\n        bytes calldata _oldPeriodEndHeader,\\n        bytes calldata _headers\\n    ) external returns (bool);\\n\\n}\",\"keccak256\":\"0x25d1496a8052c2a141ce541bc3b278c4a50390a58eb7f4c8deb093bf085c1fcc\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
      "storageLayout": {
        "storage": [
          {
            "astId": 807,
            "contract": "contracts/relay/BitcoinRelay.sol:BitcoinRelay",
            "label": "_owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1006,
            "contract": "contracts/relay/BitcoinRelay.sol:BitcoinRelay",
            "label": "_status",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 921,
            "contract": "contracts/relay/BitcoinRelay.sol:BitcoinRelay",
            "label": "_paused",
            "offset": 0,
            "slot": "2",
            "type": "t_bool"
          },
          {
            "astId": 12157,
            "contract": "contracts/relay/BitcoinRelay.sol:BitcoinRelay",
            "label": "initialHeight",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 12160,
            "contract": "contracts/relay/BitcoinRelay.sol:BitcoinRelay",
            "label": "lastSubmittedHeight",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 12163,
            "contract": "contracts/relay/BitcoinRelay.sol:BitcoinRelay",
            "label": "finalizationParameter",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 12166,
            "contract": "contracts/relay/BitcoinRelay.sol:BitcoinRelay",
            "label": "relayGenesisHash",
            "offset": 0,
            "slot": "6",
            "type": "t_bytes32"
          },
          {
            "astId": 12170,
            "contract": "contracts/relay/BitcoinRelay.sol:BitcoinRelay",
            "label": "previousBlock",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_bytes32,t_bytes32)"
          },
          {
            "astId": 12174,
            "contract": "contracts/relay/BitcoinRelay.sol:BitcoinRelay",
            "label": "blockHeight",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_bytes32,t_uint256)"
          },
          {
            "astId": 12180,
            "contract": "contracts/relay/BitcoinRelay.sol:BitcoinRelay",
            "label": "chain",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint256,t_array(t_struct(blockHeader)13791_storage)dyn_storage)"
          },
          {
            "astId": 12182,
            "contract": "contracts/relay/BitcoinRelay.sol:BitcoinRelay",
            "label": "currentEpochDiff",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 12184,
            "contract": "contracts/relay/BitcoinRelay.sol:BitcoinRelay",
            "label": "prevEpochDiff",
            "offset": 0,
            "slot": "11",
            "type": "t_uint256"
          },
          {
            "astId": 12187,
            "contract": "contracts/relay/BitcoinRelay.sol:BitcoinRelay",
            "label": "rewardAmountInTDT",
            "offset": 0,
            "slot": "12",
            "type": "t_uint256"
          },
          {
            "astId": 12190,
            "contract": "contracts/relay/BitcoinRelay.sol:BitcoinRelay",
            "label": "TeleportDAOToken",
            "offset": 0,
            "slot": "13",
            "type": "t_address"
          },
          {
            "astId": 12193,
            "contract": "contracts/relay/BitcoinRelay.sol:BitcoinRelay",
            "label": "relayerPercentageFee",
            "offset": 0,
            "slot": "14",
            "type": "t_uint256"
          },
          {
            "astId": 12196,
            "contract": "contracts/relay/BitcoinRelay.sol:BitcoinRelay",
            "label": "submissionGasUsed",
            "offset": 0,
            "slot": "15",
            "type": "t_uint256"
          },
          {
            "astId": 12199,
            "contract": "contracts/relay/BitcoinRelay.sol:BitcoinRelay",
            "label": "epochLength",
            "offset": 0,
            "slot": "16",
            "type": "t_uint256"
          },
          {
            "astId": 12202,
            "contract": "contracts/relay/BitcoinRelay.sol:BitcoinRelay",
            "label": "lastEpochQueries",
            "offset": 0,
            "slot": "17",
            "type": "t_uint256"
          },
          {
            "astId": 12205,
            "contract": "contracts/relay/BitcoinRelay.sol:BitcoinRelay",
            "label": "currentEpochQueries",
            "offset": 0,
            "slot": "18",
            "type": "t_uint256"
          },
          {
            "astId": 12208,
            "contract": "contracts/relay/BitcoinRelay.sol:BitcoinRelay",
            "label": "baseQueries",
            "offset": 0,
            "slot": "19",
            "type": "t_uint256"
          },
          {
            "astId": 12212,
            "contract": "contracts/relay/BitcoinRelay.sol:BitcoinRelay",
            "label": "numberOfQueries",
            "offset": 0,
            "slot": "20",
            "type": "t_mapping(t_uint256,t_uint256)"
          }
        ],
        "types": {
          "t_address": {
            "encoding": "inplace",
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_struct(blockHeader)13791_storage)dyn_storage": {
            "base": "t_struct(blockHeader)13791_storage",
            "encoding": "dynamic_array",
            "label": "struct IBitcoinRelay.blockHeader[]",
            "numberOfBytes": "32"
          },
          "t_bool": {
            "encoding": "inplace",
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "encoding": "inplace",
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_bytes32)": {
            "encoding": "mapping",
            "key": "t_bytes32",
            "label": "mapping(bytes32 => bytes32)",
            "numberOfBytes": "32",
            "value": "t_bytes32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "encoding": "mapping",
            "key": "t_bytes32",
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32",
            "value": "t_uint256"
          },
          "t_mapping(t_uint256,t_array(t_struct(blockHeader)13791_storage)dyn_storage)": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => struct IBitcoinRelay.blockHeader[])",
            "numberOfBytes": "32",
            "value": "t_array(t_struct(blockHeader)13791_storage)dyn_storage"
          },
          "t_mapping(t_uint256,t_uint256)": {
            "encoding": "mapping",
            "key": "t_uint256",
            "label": "mapping(uint256 => uint256)",
            "numberOfBytes": "32",
            "value": "t_uint256"
          },
          "t_struct(blockHeader)13791_storage": {
            "encoding": "inplace",
            "label": "struct IBitcoinRelay.blockHeader",
            "members": [
              {
                "astId": 13782,
                "contract": "contracts/relay/BitcoinRelay.sol:BitcoinRelay",
                "label": "selfHash",
                "offset": 0,
                "slot": "0",
                "type": "t_bytes32"
              },
              {
                "astId": 13784,
                "contract": "contracts/relay/BitcoinRelay.sol:BitcoinRelay",
                "label": "parentHash",
                "offset": 0,
                "slot": "1",
                "type": "t_bytes32"
              },
              {
                "astId": 13786,
                "contract": "contracts/relay/BitcoinRelay.sol:BitcoinRelay",
                "label": "merkleRoot",
                "offset": 0,
                "slot": "2",
                "type": "t_bytes32"
              },
              {
                "astId": 13788,
                "contract": "contracts/relay/BitcoinRelay.sol:BitcoinRelay",
                "label": "relayer",
                "offset": 0,
                "slot": "3",
                "type": "t_address"
              },
              {
                "astId": 13790,
                "contract": "contracts/relay/BitcoinRelay.sol:BitcoinRelay",
                "label": "gasPrice",
                "offset": 0,
                "slot": "4",
                "type": "t_uint256"
              }
            ],
            "numberOfBytes": "160"
          },
          "t_uint256": {
            "encoding": "inplace",
            "label": "uint256",
            "numberOfBytes": "32"
          }
        }
      },
      "userdoc": {
        "events": {
          "BlockAdded(uint256,bytes32,bytes32,address)": {
            "notice": "Emits when a block header is added"
          },
          "BlockFinalized(uint256,bytes32,bytes32,address,uint256,uint256)": {
            "notice": "Emits when a block header gets finalized"
          }
        },
        "kind": "user",
        "methods": {
          "addHeaders(bytes,bytes)": {
            "notice": "Adds headers to storage after validating"
          },
          "addHeadersWithRetarget(bytes,bytes,bytes)": {
            "notice": "Adds headers to storage, performs additional validation of retarget"
          },
          "availableTDT()": {
            "notice": "Getter for available TDT in treasury"
          },
          "availableTNT()": {
            "notice": "Getter for available target native token in treasury"
          },
          "checkTxProof(bytes32,uint256,bytes,uint256)": {
            "notice": "Checks if a tx is included and finalized on the source blockchain"
          },
          "constructor": {
            "notice": "Gives a starting point for the relay"
          },
          "findAncestor(bytes32,uint256)": {
            "notice": "Finds an ancestor for a block by its hash"
          },
          "findHeight(bytes32)": {
            "notice": "Finds the height of a header by its hash"
          },
          "getBlockHeaderFee(uint256,uint256)": {
            "notice": "Getter for an specific block header's fee price for a query"
          },
          "getBlockHeaderHash(uint256,uint256)": {
            "notice": "Getter for an specific block header's hash in the stored chain"
          },
          "getCurrentEpochDifficulty()": {
            "notice": "Getter for currentEpochDiff"
          },
          "getNumberOfSubmittedHeaders(uint256)": {
            "notice": "Getter for the number of block headers in the same height"
          },
          "getPrevEpochDifficulty()": {
            "notice": "Getter for prevEpochDiff"
          },
          "isAncestor(bytes32,bytes32,uint256)": {
            "notice": "Checks if a hash is an ancestor of the current one"
          },
          "pauseRelay()": {
            "notice": "Pause the relay, so only the functions can be called which are whenPaused"
          },
          "setBaseQueries(uint256)": {
            "notice": "Setter for baseQueries"
          },
          "setEpochLength(uint256)": {
            "notice": "Setter for epochLength"
          },
          "setFinalizationParameter(uint256)": {
            "notice": "Setter for finalizationParameter"
          },
          "setRelayerPercentageFee(uint256)": {
            "notice": "Setter for relayerPercentageFee"
          },
          "setRewardAmountInTDT(uint256)": {
            "notice": "Setter for rewardAmountInTDT"
          },
          "setSubmissionGasUsed(uint256)": {
            "notice": "Setter for submissionGasUsed"
          },
          "unPauseRelay()": {
            "notice": "Un-pause the relay, so only the functions can be called which are whenNotPaused"
          }
        },
        "version": 1
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"contracts/connectors/interfaces/IExchangeConnector.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IExchangeConnector {\\n\\n    // Events\\n    event Swap(address[] path, uint[] amounts, address receiver);\\n\\n    // Read-only functions\\n\\n    function name() external view returns (string memory);\\n\\n    function exchangeRouter() external view returns (address);\\n\\n    function liquidityPoolFactory() external view returns (address);\\n\\n    function wrappedNativeToken() external view returns (address);\\n\\n    function getInputAmount(\\n        uint _outputAmount,\\n        address _inputToken,\\n        address _outputToken\\n    ) external returns (bool, uint);\\n\\n    function getOutputAmount(\\n        uint _inputAmount,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view returns (bool, uint);\\n\\n    // State-changing functions\\n\\n    function setExchangeRouter(address _exchangeRouter) external;\\n\\n    function setLiquidityPoolFactory() external;\\n\\n    function setWrappedNativeToken(address _wrappedNativeToken) external;\\n\\n    function swap(\\n        uint256 _inputAmount,\\n        uint256 _outputAmount,\\n        address[] memory _path,\\n        address _to,\\n        uint256 _deadline,\\n        bool _isFixedToken\\n    ) external returns(bool, uint[] memory);\\n}\"\n    },\n    \"contracts/routers/InstantRouter.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport './interfaces/IInstantRouter.sol';\\nimport '../connectors/interfaces/IExchangeConnector.sol';\\nimport '../pools/interfaces/IInstantPool.sol';\\nimport '../pools/interfaces/ICollateralPool.sol';\\nimport '../pools/interfaces/ICollateralPoolFactory.sol';\\nimport '../erc20/interfaces/IERC20.sol';\\nimport '../oracle/interfaces/IPriceOracle.sol';\\nimport \\\"../relay/interfaces/IBitcoinRelay.sol\\\";\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport \\\"hardhat/console.sol\\\"; // Just for test\\n\\ncontract InstantRouter is IInstantRouter, Ownable, ReentrancyGuard {\\n\\n    mapping(address => instantRequest[]) public instantRequests;\\n    uint public override slasherPercentageReward;\\n    uint public override paybackDeadline;\\n    address public override teleBTC;\\n    address public override teleBTCInstantPool;\\n    address public override relay;\\n    address public override priceOracle;\\n    address public override collateralPoolFactory;\\n\\n    /// @notice                             This contract handles instant transfer and instant exchange requests\\n    /// @dev                                It manages instant pool contract\\n    /// @param _teleBTC                     Address of teleBTC contract\\n    /// @param _relay                       Address of price oracle contract\\n    /// @param _priceOracle                 Address of collateral pool factory contract\\n    /// @param _collateralPoolFactory       Address of relay contract\\n    /// @param _slasherPercentageReward     Percentage of total collateral that goes to slasher\\n    /// @param _paybackDeadline             Dealine of paying back the borrowed tokens from instant pool\\n    constructor(\\n        address _teleBTC,\\n        address _relay,\\n        address _priceOracle,\\n        address _collateralPoolFactory,\\n        uint _slasherPercentageReward,\\n        uint _paybackDeadline\\n    ) {\\n        teleBTC = _teleBTC;\\n        relay = _relay;\\n        priceOracle = _priceOracle;\\n        collateralPoolFactory = _collateralPoolFactory;\\n        slasherPercentageReward = _slasherPercentageReward;\\n        paybackDeadline = _paybackDeadline;\\n    }\\n\\n    /// @notice                  Gives the collateral amount corresponding to the request\\n    /// @param _user             Address of the user\\n    /// @param _index            Number of the instant request\\n    /// @return                  Amount of locked collateral\\n    function getLockedCollateralPoolTokenAmount(address _user, uint _index) external view override returns (uint) {\\n        return instantRequests[_user][_index].lockedCollateralPoolTokenAmount;\\n    }\\n\\n    /// @notice                   Gives the total number of user's requests\\n    /// @param _user              Address of the user\\n    /// @return                   The total number of user's requests\\n    function getUserRequestsLength(address _user) external view override returns (uint) {\\n        return instantRequests[_user].length;\\n    }\\n\\n    /// @notice                   Gives the user request deadline\\n    /// @param _user              Address of the user\\n    /// @param _index             Index of the request in user request list\\n    /// @return                   The deadline of that request\\n    function getUserRequestDeadline(address _user, uint _index) external view override returns (uint) {\\n        return instantRequests[_user][_index].deadline;\\n    }\\n\\n    /// @notice                   Changes the payback _deadline\\n    /// @dev                      Only owner can call this\\n    /// @param _paybackDeadline   The new payback _deadline\\n    function setPaybackDeadline(uint _paybackDeadline) external override onlyOwner {\\n        paybackDeadline = _paybackDeadline;\\n    }\\n\\n    /// @notice                             Changes the slasher reward\\n    /// @dev                                Only owner can call this\\n    /// @param _slasherPercentageReward     The new slasher reward\\n    function setSlasherPercentageReward(uint _slasherPercentageReward) external override onlyOwner {\\n        slasherPercentageReward = _slasherPercentageReward;\\n    }\\n\\n    /// @notice                                 Sets the teleBTC instant pool address\\n    /// @dev                                    Only owner can call this\\n    /// @param _teleBTCInstantPool              The new teleBTC instant pool address\\n    function setTeleBTCInstantPool(address _teleBTCInstantPool) external override onlyOwner {\\n        teleBTCInstantPool = _teleBTCInstantPool;\\n    }\\n\\n    /// @notice                   Transfers the loan amount to the user\\n    /// @dev                      Transfes required collateral pool token of user to itself\\n    /// @param _receiver          Address of the loan receiver\\n    /// @param _loanAmount        Amount of the loan\\n    /// @param _deadline          Deadline of getting the loan\\n    /// @param _collateralToken   Address of the collateral token\\n    /// @return                   True if getting loan was successful\\n    function instantCCTransfer(\\n        address _receiver,\\n        uint _loanAmount,\\n        uint _deadline,\\n        address _collateralToken\\n    ) external nonReentrant override returns (bool) {\\n        // Checks that deadline for getting loan has not passed\\n        require(_deadline >= block.timestamp, \\\"InstantRouter: deadline has passed\\\");\\n\\n        // Calculates the instant fee\\n        uint instantFee = IInstantPool(teleBTCInstantPool).instantPercentageFee()*_loanAmount/10000;\\n\\n        // Locks the required amount of user's collateral\\n        _lockCollateral(msg.sender, _loanAmount + instantFee, _collateralToken);\\n\\n        // Gets loan from instant pool\\n        IInstantPool(teleBTCInstantPool).getLoan(_receiver, _loanAmount);\\n\\n        emit InstantTransfer(\\n            msg.sender,\\n            _receiver,\\n            _loanAmount,\\n            instantFee,\\n            instantRequests[msg.sender][instantRequests[msg.sender].length - 1].deadline,\\n            _collateralToken\\n        );\\n        return true;\\n    }\\n\\n    /// @notice                   Exchanges the loan amount instantly for the user\\n    /// @dev                      Locks the required collateral amount of the user\\n    /// @param _receiver          Address of the loan receiver\\n    /// @param _loanAmount        Amount of the loan\\n    /// @param _amountOut         Amount of the output token\\n    /// @param _path              Path of exchanging tokens\\n    /// @param _deadline          Deadline of getting the loan\\n    /// @param _collateralToken   Address of collateral token\\n    /// @param _isFixedToken           Shows whether input or output is fixed in exchange\\n    /// @return\\n    function instantCCExchange(\\n        address _exchangeConnector,\\n        address _receiver,\\n        uint _loanAmount,\\n        uint _amountOut,\\n        address[] memory _path,\\n        uint _deadline,\\n        address _collateralToken,\\n        bool _isFixedToken\\n    ) external nonReentrant override returns(uint[] memory) {\\n        // Checks that deadline for exchanging has not passed\\n        require(_deadline >= block.timestamp, \\\"InstantRouter: deadline has passed\\\");\\n\\n        // Checks that the first token in teleBTC\\n        require(_path[0] == teleBTC, \\\"InstantRouter: input token is not valid\\\");\\n\\n        // Calculates the instant fee\\n        uint instantFee = IInstantPool(teleBTCInstantPool).instantPercentageFee()*_loanAmount/10000;\\n\\n        // Locks the required amount of user's collateral\\n        _lockCollateral(msg.sender, _loanAmount + instantFee, _collateralToken);\\n\\n        // Gets loan from instant pool\\n        IInstantPool(teleBTCInstantPool).getLoan(address(this), _loanAmount);\\n\\n        // Gives allowance to exchange connector\\n        IERC20(teleBTC).approve(_exchangeConnector, _loanAmount);\\n\\n        // Exchanges teleBTC for output token\\n        (bool result, uint[] memory amounts) = IExchangeConnector(_exchangeConnector).swap(\\n            _loanAmount,\\n            _amountOut,\\n            _path,\\n            _receiver,\\n            _deadline,\\n            _isFixedToken\\n        );\\n\\n        // Checks the exchanging result\\n        require(result == true, \\\"InstantRouter: exchange was not successful\\\");\\n\\n        emit InstantExchange(\\n            msg.sender,\\n            _receiver,\\n            _loanAmount,\\n            instantFee,\\n            _amountOut,\\n            _path,\\n            _isFixedToken,\\n            instantRequests[msg.sender][instantRequests[msg.sender].length - 1].deadline, // payback deadline\\n            _collateralToken\\n        );\\n        return amounts;\\n    }\\n\\n    /// @notice                             Settles loans of the user\\n    /// @param _user                        Address of the user who wants to pay back loans\\n    /// @param _teleBTCAmount               Amount of available teleBTC to pay back loans\\n    /// @return                             True if paying back is successful\\n    function payBackLoan(address _user, uint _teleBTCAmount) external nonReentrant override returns (bool) {\\n        uint remainedAmount = _teleBTCAmount;\\n        uint lastSubmittedHeight = IBitcoinRelay(relay).lastSubmittedHeight();\\n\\n        for (uint i = 1; i <= instantRequests[_user].length; i++) {\\n            if (\\n                remainedAmount >= instantRequests[_user][i-1].paybackAmount &&\\n                instantRequests[_user][i-1].deadline >= lastSubmittedHeight\\n            ) {\\n                remainedAmount = remainedAmount - instantRequests[_user][i-1].paybackAmount;\\n\\n                // Pays back the loan to instant pool\\n                IERC20(teleBTC).transferFrom(\\n                    msg.sender,\\n                    teleBTCInstantPool,\\n                    instantRequests[_user][i-1].paybackAmount\\n                );\\n\\n                // Unlocks the locked collateral pool token after paying the loan\\n                ICollateralPool(instantRequests[_user][i-1].collateralPool).transfer(\\n                    _user,\\n                    instantRequests[_user][i-1].lockedCollateralPoolTokenAmount\\n                );\\n\\n                emit PaybackLoan(\\n                    _user,\\n                    instantRequests[_user][i-1].paybackAmount,\\n                    instantRequests[_user][i-1].collateralToken,\\n                    instantRequests[_user][i-1].lockedCollateralPoolTokenAmount\\n                );\\n\\n                // Deletes the request after paying it\\n                _removeElement(_user, i-1);\\n                i--;\\n            }\\n\\n            if (remainedAmount == 0) {\\n                break;\\n            }\\n        }\\n\\n        // Transfers rest of teleBTC to user\\n        if (remainedAmount > 0) {\\n            IERC20(teleBTC).transferFrom(msg.sender, _user, remainedAmount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @notice                           Slashes collateral of user who did not pay back loan\\n    /// @dev                              Buys teleBTC using the collateral\\n    /// @param _exchangeRouter            Address of exchange router that is used to exchange collateral tokens to teleBTC\\n    /// @param _user                      Address of the slashed user\\n    /// @param _requestIndex              Index of the request that have not been paid back before deadline\\n    /// @return                           True if slashing is successful\\n    function slashUser(\\n        address _exchangeRouter,\\n        address _user,\\n        uint _requestIndex\\n    ) override nonReentrant external returns (bool) {\\n        // Gets exchange connector address\\n        address _exchangeConnector = IPriceOracle(priceOracle).exchangeConnector(_exchangeRouter);\\n        require(_exchangeConnector != address(0), \\\"InstantRouter: exchange connector is not acceptable\\\");\\n\\n        require(instantRequests[_user].length > _requestIndex, \\\"InstantRouter: request index does not exist\\\");\\n\\n        // Gets last submitted height on relay\\n        uint lastSubmittedHeight = IBitcoinRelay(relay).lastSubmittedHeight();\\n\\n        // Checks that deadline has passed\\n        require(\\n            instantRequests[_user][_requestIndex].deadline < lastSubmittedHeight,\\n            \\\"InstantRouter: deadline has not passed yet\\\"\\n        );\\n\\n        // Gets loan information\\n        uint lockedCollateralPoolTokenAmount = instantRequests[_user][_requestIndex].lockedCollateralPoolTokenAmount;\\n        address collateralToken = instantRequests[_user][_requestIndex].collateralToken;\\n        address collateralPool = instantRequests[_user][_requestIndex].collateralPool;\\n        uint paybackAmount = instantRequests[_user][_requestIndex].paybackAmount;\\n\\n        // Finds needed collateral token to pay back loan\\n        (bool result, uint requiredCollateralToken) = IExchangeConnector(_exchangeConnector).getInputAmount(\\n            paybackAmount,\\n            collateralToken,\\n            teleBTC\\n        );\\n        uint totalCollateralToken = ICollateralPool(collateralPool).equivalentCollateralToken(\\n            lockedCollateralPoolTokenAmount\\n        );\\n\\n        // Path of exchanging\\n        address[] memory path = new address[](2);\\n        path[0] = collateralToken;\\n        path[1] = teleBTC;\\n\\n        // Gets collateral token from collateral pool\\n        ICollateralPool(collateralPool).removeCollateral(lockedCollateralPoolTokenAmount);\\n\\n        // Checks that locked collateral is enough to pay back loan\\n        if (totalCollateralToken >= requiredCollateralToken && result == true) {\\n            // Approves exchange connector to use collateral token\\n            IERC20(collateralToken).approve(_exchangeConnector, requiredCollateralToken);\\n\\n            // Exchanges collateral token for teleBTC\\n            IExchangeConnector(_exchangeConnector).swap(\\n                requiredCollateralToken,\\n                paybackAmount,\\n                path,\\n                teleBTCInstantPool,\\n                block.timestamp + 1,\\n                false\\n            );\\n\\n            uint slasherReward = (totalCollateralToken - requiredCollateralToken)*slasherPercentageReward/100;\\n\\n            // Sends reward to slasher\\n            IERC20(collateralToken).transfer(msg.sender, slasherReward);\\n\\n            // Deposits rest of the tokens to collateral pool\\n            ICollateralPool(collateralPool).addCollateral(\\n                _user,\\n                totalCollateralToken - requiredCollateralToken - slasherReward\\n            );\\n\\n            emit SlashUser(_user, collateralToken, requiredCollateralToken, paybackAmount);\\n        } else {\\n            // Approves exchange connector to use collateral token\\n            IERC20(collateralToken).approve(_exchangeConnector, totalCollateralToken);\\n\\n            // Buys teleBTC as much as possible and sends it to instant pool\\n            IExchangeConnector(_exchangeConnector).swap(\\n                totalCollateralToken,\\n                0,\\n                path,\\n                teleBTCInstantPool,\\n                block.timestamp + 1,\\n                true\\n            );\\n\\n            emit SlashUser(_user, collateralToken, totalCollateralToken, paybackAmount);\\n        }\\n\\n        // Deletes the request after slashing user\\n        _removeElement(_user, _requestIndex);\\n\\n        return true;\\n    }\\n\\n    /// @notice             Removes an element of array of user's instant requests\\n    /// @dev                Deletes and shifts the array\\n    /// @param _user        Address of the user whose instant requests array is considered\\n    /// @param _index       Index of the element that will be deleted\\n    function _removeElement(address _user, uint _index) internal {\\n        require(_index < instantRequests[_user].length, \\\"InstantRouter: index is out of bound\\\");\\n        for (uint i = _index; i < instantRequests[_user].length - 1; i++) {\\n            instantRequests[_user][i] = instantRequests[_user][i+1];\\n        }\\n        instantRequests[_user].pop();\\n    }\\n\\n    /// @notice                   Locks the required amount of user's collateral\\n    /// @dev                      Records the instant request to be used in future\\n    /// @param _user              Address of the loan receiver\\n    /// @param _payBackAmount     Amount of the (loan + fee) that should be paid back\\n    /// @param _collateralToken   Address of the collateral\\n    /// @return                   True if collateral is locked successfully\\n    function _lockCollateral(\\n        address _user,\\n        uint _payBackAmount,\\n        address _collateralToken\\n    ) internal returns (bool) {\\n        // Checks that collateral token is acceptable\\n        require(\\n            ICollateralPoolFactory(collateralPoolFactory).isCollateral(_collateralToken),\\n            \\\"InstantRouter: collateral token is not acceptable\\\"\\n        );\\n\\n        // Gets the collateral pool address\\n        address collateralPool = ICollateralPoolFactory(collateralPoolFactory).getCollateralPoolByToken(\\n            _collateralToken\\n        );\\n\\n        // Gets collateralization ratio\\n        uint collateralizationRatio = ICollateralPool(collateralPool).collateralizationRatio();\\n\\n        // Gets the equivalent amount of collateral token\\n        uint equivalentCollateralToken = IPriceOracle(priceOracle).equivalentOutputAmount(\\n            _payBackAmount, // input amount\\n            IERC20(teleBTC).decimals(),\\n            IERC20(_collateralToken).decimals(),\\n            teleBTC,\\n            _collateralToken // output token\\n        );\\n\\n        // Finds needed collateral token for getting loan\\n        uint requiredCollateralToken = equivalentCollateralToken*collateralizationRatio/100;\\n        uint requiredCollateralPoolToken = ICollateralPool(collateralPool).equivalentCollateralPoolToken(\\n            requiredCollateralToken\\n        );\\n\\n        // Transfers collateral pool token from user to itself\\n        ICollateralPool(collateralPool).transferFrom(_user, address(this), requiredCollateralPoolToken);\\n\\n        // Records the instant request\\n        instantRequest memory request;\\n        request.user = _user;\\n        request.paybackAmount = _payBackAmount;\\n        request.lockedCollateralPoolTokenAmount = requiredCollateralPoolToken;\\n        request.collateralPool = collateralPool;\\n        request.collateralToken = _collateralToken;\\n        request.deadline = IBitcoinRelay(relay).lastSubmittedHeight() + paybackDeadline;\\n        instantRequests[_user].push(request);\\n\\n        return true;\\n    }\\n}\"\n    },\n    \"contracts/routers/interfaces/IInstantRouter.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IInstantRouter {\\n    // Structures\\n\\n    /// @notice                                 Structure for recording instant requests\\n    /// @param user                             Address of user who recieves loan\\n    /// @param collateralPool                   Address of collateral pool\\n    /// @param paybackAmount                    Amount of requested loan\\n    /// @param collateralToken                  Address of underlying collateral token\\n    /// @param lockedCollateralPoolTokenAmount  Amount of locked collateral pool token for getting loan\\n    /// @param deadline                         Deadline of paying back the loan\\n    struct instantRequest {\\n        address user;\\n        address collateralPool;\\n\\t\\taddress collateralToken;\\n        uint paybackAmount;\\n        uint lockedCollateralPoolTokenAmount;\\n        uint deadline;\\n    }\\n\\n    // Events\\n\\n    /// @notice                            Emits when a loan gets paid back\\n    /// @param user                        Address of user who recieves loan\\n    /// @param paybackAmount               Amount of (loan + fee) that should be paid back\\n    /// @param collateralToken             Address of underlying collateral token\\n    /// @param lockedCollateralPoolToken   Amount of locked collateral pool token for getting loan\\n    event PaybackLoan(\\n\\t\\taddress indexed user, \\n\\t\\tuint paybackAmount, \\n\\t\\taddress indexed collateralToken, \\n\\t\\tuint lockedCollateralPoolToken\\n\\t);\\n\\n    /// @notice                         Emits when a user gets slashed\\n    /// @param user                     Address of user who recieves loan\\n    /// @param collateralToken          Address of collateral underlying token\\n\\t/// @param slashedAmount            How much user got slashed\\n\\t/// @param paybackAmount            Address of collateral underlying token\\n    event SlashUser(\\n\\t\\taddress indexed user, \\n\\t\\taddress indexed collateralToken, \\n\\t\\tuint slashedAmount, \\n\\t\\tuint paybackAmount\\n\\t);\\n\\n    /// @notice                     Emits when a user submits instant transfer request\\n    /// @param user                 Address of the user who made the request\\n    /// @param receiver             Address of the loan receiver\\n    /// @param loanAmount           Amount of the loan\\n    /// @param instantFee           Amount of the instant loan fee\\n    /// @param deadline             Deadline of paying back the loan\\n    /// @param collateralToken      Address of the collateral token\\n    event InstantTransfer(\\n        address indexed user, \\n        address receiver, \\n        uint loanAmount, \\n        uint instantFee, \\n        uint indexed deadline, \\n        address indexed collateralToken\\n    );\\n\\n    /// @notice                     Emits when a user submits instant exchange request\\n    /// @param user                 Address of the user who made the request\\n    /// @param receiver             Address of the loan receiver\\n    /// @param loanAmount           Amount of the loan\\n    /// @param instantFee           Amount of the instant loan fee\\n    /// @param amountOut            Amount of the output token\\n    /// @param path                 Path of exchanging tokens\\n    /// @param isFixed              Shows whether input or output is fixed in exchange\\n    /// @param deadline             Deadline of getting the loan\\n    /// @param collateralToken      Address of the collateral token\\n    event InstantExchange(\\n        address indexed user, \\n        address receiver, \\n        uint loanAmount, \\n        uint instantFee,\\n        uint amountOut,\\n        address[] path,\\n        bool isFixed,\\n        uint indexed deadline, \\n        address indexed collateralToken\\n    );\\n\\n    // Read-only functions\\n\\n    function teleBTCInstantPool() external view returns (address);\\n\\n    function teleBTC() external view returns (address);\\n\\n    function relay() external view returns (address);\\n\\n\\tfunction collateralPoolFactory() external view returns (address);\\n\\n\\tfunction priceOracle() external view returns (address);\\n\\n    function slasherPercentageReward() external view returns (uint);\\n\\n    function paybackDeadline() external view returns (uint);\\n    \\n    function getLockedCollateralPoolTokenAmount(address _user, uint _index) external view returns (uint);\\n\\n    function getUserRequestsLength(address _user) external view returns (uint);\\n\\n    function getUserRequestDeadline(address _user, uint _index) external view returns (uint);\\n\\n    // State-changing functions\\n\\n    function setPaybackDeadline(uint _paybackDeadline) external;\\n\\n    function setSlasherPercentageReward(uint _slasherPercentageReward) external;\\n\\n    function setTeleBTCInstantPool(address _teleBTCInstantPool) external;\\n\\n    function instantCCTransfer(\\n        address _receiver,\\n        uint _loanAmount,\\n        uint _deadline,\\n        address _collateralPool\\n    ) external returns (bool);\\n\\n    function instantCCExchange(\\n\\t\\taddress _exchangeConnector,\\n        address _receiver,\\n        uint _loanAmount, \\n        uint _amountOut, \\n        address[] memory _path, \\n        uint _deadline,\\n        address _collateralToken,\\n        bool _isFixedToken\\n    ) external returns (uint[] memory);\\n\\n    function payBackLoan(address _user, uint _teleBTCAmount) external returns (bool);\\n\\n    function slashUser(\\t\\t\\n\\t\\taddress _exchangeConnector, \\n\\t\\taddress _user, \\n\\t\\tuint _requestIndex\\n\\t) external returns (bool);\\n\\n}\"\n    },\n    \"contracts/pools/interfaces/IInstantPool.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0; \\n\\nimport '../../erc20/interfaces/IERC20.sol';\\n\\ninterface IInstantPool is IERC20 {\\n\\n\\t// Events\\n\\n\\t/// @notice                             emits when some liquidity gets added to the pool               \\n\\t/// @param user                         User who added the liquidity\\n\\t/// @param teleBTCAmount                Amount of teleBTC added to the pool\\n\\t/// @param instantPoolTokenAmount       User's share from the pool\\n\\tevent AddLiquidity(address indexed user, uint teleBTCAmount, uint instantPoolTokenAmount); \\n\\n\\t/// @notice                             Emits when some liquidity gets removed from the pool\\n\\t/// @param user                         User who removed the liquidity\\n\\t/// @param teleBTCAmount                Amount of teleBTC removed from the pool\\n\\t/// @param instantPoolTokenAmount       User's share from the pool\\n\\tevent RemoveLiquidity(address indexed user, uint teleBTCAmount, uint instantPoolTokenAmount);\\n\\n\\t/// @notice                       Adds collateral to collateral pool\\n\\t/// @param user                   User who wants to get the loan\\n\\t/// @param requestedAmount        Amount of loan requested and sent to the user\\n\\t/// @param instantFee             Amount of fee that the user should pay back later with the loan\\n\\tevent InstantLoan(address indexed user, uint256 requestedAmount, uint instantFee);\\n\\n\\t// Read-only functions\\n\\n\\tfunction teleBTC() external view returns (address);\\n\\n\\tfunction instantRouter() external view returns (address);\\n\\n\\tfunction totalAddedTeleBTC() external view returns (uint);\\n\\n\\tfunction availableTeleBTC() external view returns (uint);\\n\\n\\tfunction totalUnpaidLoan() external view returns (uint);\\n\\n\\tfunction instantPercentageFee() external view returns (uint);\\n\\n\\t// State-changing functions\\n\\n\\tfunction setInstantRouter(address _instantRouter) external;\\n\\n\\tfunction setInstantPercentageFee(uint _instantPercentageFee) external;\\n\\n\\tfunction setTeleBTC(address _teleBTC) external;\\n\\n\\tfunction addLiquidity(address _user, uint _amount) external returns (uint);\\n\\n\\tfunction addLiquidityWithoutMint(uint _amount) external returns (bool);\\n\\n\\tfunction removeLiquidity(address _user, uint _instantPoolTokenAmount) external returns (uint);\\n\\n\\tfunction getLoan(address _user, uint _amount) external returns (bool);\\n\\n}\"\n    },\n    \"contracts/pools/interfaces/ICollateralPool.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '../../erc20/interfaces/IERC20.sol';\\n\\ninterface ICollateralPool is IERC20 {\\n\\n\\t// Events\\n\\n\\tevent AddCollateral(address indexed user, uint amount, uint collateralPoolTokenAmount);\\n\\n\\tevent RemoveCollateral(address indexed user, uint amount, uint collateralPoolTokenAmount);\\n\\n\\t// Read-only functions\\n\\n\\tfunction collateralToken() external view returns (address);\\n\\n\\tfunction collateralizationRatio() external view returns(uint);\\n\\n\\tfunction totalAddedCollateral() external view returns (uint);\\n\\n\\tfunction equivalentCollateralToken(uint _collateralPoolTokenAmount) external view returns (uint);\\n\\n\\tfunction equivalentCollateralPoolToken(uint _collateralTokenAmount) external view returns (uint);\\n\\n\\t// State-changing functions\\n\\n\\tfunction setCollateralizationRatio(uint _collateralizationRatio) external;\\n\\n\\tfunction addCollateral(address _user, uint _amount) external returns (bool);\\n\\n\\tfunction removeCollateral(uint _collateralPoolTokenAmount) external returns (bool);\\n\\n}\"\n    },\n    \"contracts/pools/interfaces/ICollateralPoolFactory.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICollateralPoolFactory {\\n\\n    // Events\\n\\n    /// @notice                             Emits when a collateral pool is created\\n    /// @param name                         Name of the collateral token\\n    /// @param collateralToken              Collateral token address\\n    /// @param collateralizationRatio       At most (collateral value)/(collateralization ratio) can be moved instantly by the user\\n    /// @param collateralPool               Collateral pool contract address\\n    event CreateCollateralPool(\\n        string name,\\n        address indexed collateralToken,\\n        uint collateralizationRatio,\\n        address collateralPool\\n    );\\n\\n    /// @notice                 Emits when a collateral pool is removed\\n    /// @param collateralToken  Collateral token address\\n    /// @param collateralPool   Collateral pool contract address\\n    event RemoveCollateralPool(\\n        address indexed collateralToken,\\n        address collateralPool\\n    );\\n\\n    // Read-only functions\\n\\n    function instantRouter() external view returns (address);\\n\\n    function getCollateralPoolByToken(address _collateralToken) external view returns (address);\\n\\n    function allCollateralPools(uint _index) external view returns (address);\\n\\n    function allCollateralPoolsLength() external view returns (uint);\\n\\n    function isCollateral(address _collateralToken) external view returns (bool);\\n\\n    // State-changing functions\\n\\n    function setInstantRouter(address _instantRouter) external;\\n\\n    function createCollateralPool(address _collateralToken, uint _collateralizationRatio) external returns (address);\\n\\n    function removeCollateralPool(address _collateralToken, uint _index) external returns (bool);\\n}\"\n    },\n    \"contracts/erc20/interfaces/IERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    // events\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    // read-only functions\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    // state-changing functions\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\\n\"\n    },\n    \"contracts/oracle/interfaces/IPriceOracle.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IPriceOracle {\\n\\n    /// @notice                     Emits when new exchange router is added\\n    /// @param exchangeRouter       Address of new exchange router\\n    /// @param exchangeConnector    Address of exchange connector\\n    event ExchangeConnectorAdded(address exchangeRouter, address exchangeConnector);\\n\\n    /// @notice                     Emits when an exchange router is removed\\n    /// @param exchangeRouter       Address of removed exchange router\\n    event ExchangeConnectorRemoved(address exchangeRouter);\\n\\n    /// @notice                     Emits when a price proxy is set\\n    /// @param _firstToken          Address of the first token\\n    /// @param _secondToken         Address of the second token\\n    /// @param _priceProxyAddress   Address of price proxy contract\\n    event SetPriceProxy(address _firstToken, address _secondToken, address _priceProxyAddress);\\n\\n    // Read-only functions\\n    \\n    /// @notice                     Gives price proxy address for a pair of tokens\\n    /// @param _firstToken          Address of the first token\\n    /// @param _secondToken         Address of the second token\\n    /// @return                     Address of price proxy contract\\n    function ChainlinkPriceProxy(address _firstToken, address _secondToken) external view returns (address);\\n\\n    /// @notice                     Gives exchange connector address for an exchange router\\n    /// @param _exchangeRouter      Address of exchange router\\n    /// @return                     Address of exchange connector\\n    function exchangeConnector(address _exchangeRouter) external view returns (address);\\n\\n    /// @notice                     Gives address of an exchange router from exchange routers list\\n    /// @param _index               Index of exchange router\\n    /// @return                     Address of exchange router\\n    function exchangeRoutersList(uint _index) external view returns (address);\\n\\n    function getExchangeRoutersListLength() external view returns (uint);\\n\\n    function acceptableDelay() external view returns (uint);\\n\\n    function equivalentOutputAmount(\\n        uint _inputAmount,\\n        uint _inputDecimals,\\n        uint _outputDecimals,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view returns (uint);\\n\\n    function equivalentOutputAmountFromOracle(\\n        uint _inputAmount,\\n        uint _inputDecimals,\\n        uint _outputDecimals,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view returns (uint);\\n\\n    function equivalentOutputAmountFromExchange(\\n        address _exchangeRouter,\\n        uint _inputAmount,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view returns (uint);\\n    \\n    // State-changing functions\\n    \\n    function addExchangeConnector(address _exchangeRouter, address _exchangeConnector) external;\\n\\n    function removeExchangeConnector(uint _exchangeRouterIndex) external;\\n\\n    function setPriceProxy(address _firstToken, address _secondToken, address _priceProxyAddress) external;\\n\\n    function setAcceptableDelay(uint _acceptableDelay) external;\\n}\"\n    },\n    \"contracts/relay/interfaces/IBitcoinRelay.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBitcoinRelay {\\n    // structures\\n\\n    /// @notice                 \\tStructure for recording block header\\n    /// @param selfHash             Hash of block header\\n    /// @param parentHash          \\tHash of parent block header\\n    /// @param merkleRoot       \\tMerkle root of transactions in the block\\n    /// @param relayer              Address of relayer who submitted the block header\\n    struct blockHeader {\\n        bytes32 selfHash;\\n        bytes32 parentHash;\\n        bytes32 merkleRoot;\\n        address relayer;\\n        uint gasPrice;\\n    }\\n\\n    // events\\n\\n    /// @notice                     Emits when a block header is added\\n    /// @param height               Height of submitted header\\n    /// @param selfHash             Hash of submitted header\\n    /// @param parentHash           Parent hash of submitted header\\n    /// @param relayer              Address of relayer who submitted the block header\\n    event BlockAdded(\\n        uint indexed height,\\n        bytes32 selfHash,\\n        bytes32 indexed parentHash,\\n        address indexed relayer\\n    );\\n\\n    /// @notice                     Emits when a block header gets finalized\\n    /// @param height               Height of the header\\n    /// @param selfHash             Hash of the header\\n    /// @param parentHash           Parent hash of the header\\n    /// @param relayer              Address of relayer who submitted the block header\\n    /// @param rewardAmountTNT      Amount of reward that the relayer receives in target native token\\n    /// @param rewardAmountTDT      Amount of reward that the relayer receives in TDT\\n    event BlockFinalized(\\n        uint indexed height,\\n        bytes32 selfHash,\\n        bytes32 parentHash,\\n        address indexed relayer,\\n        uint rewardAmountTNT,\\n        uint rewardAmountTDT\\n    );\\n\\n    // Read-only functions\\n\\n    function relayGenesisHash() external view returns (bytes32);\\n\\n    function initialHeight() external view returns(uint);\\n\\n    function lastSubmittedHeight() external view returns(uint);\\n\\n    function finalizationParameter() external view returns(uint);\\n\\n    function TeleportDAOToken() external view returns(address);\\n\\n    function relayerPercentageFee() external view returns(uint);\\n\\n    function epochLength() external view returns(uint);\\n\\n    function lastEpochQueries() external view returns(uint);\\n\\n    function currentEpochQueries() external view returns(uint);\\n\\n    function baseQueries() external view returns(uint);\\n\\n    function submissionGasUsed() external view returns(uint);\\n\\n    function getBlockHeaderHash(uint height, uint index) external view returns(bytes32);\\n\\n    function getBlockHeaderFee (uint _height, uint _index) external view returns(uint);\\n\\n    function getNumberOfSubmittedHeaders(uint height) external view returns (uint);\\n\\n    function getCurrentEpochDifficulty() external view returns (uint256);\\n\\n    function getPrevEpochDifficulty() external view returns (uint256);\\n\\n    function availableTDT() external view returns(uint);\\n\\n    function availableTNT() external view returns(uint);\\n\\n    function findHeight(bytes32 _hash) external view returns (uint256);\\n\\n    function findAncestor(bytes32 _hash, uint256 _offset) external view returns (bytes32); // see if it's needed\\n\\n    function isAncestor(bytes32 _ancestor, bytes32 _descendant, uint256 _limit) external view returns (bool); // see if it's needed\\n\\n    function rewardAmountInTDT() external view returns (uint);\\n\\n\\n    // State-changing functions\\n    function pauseRelay() external;\\n\\n    function unPauseRelay() external;\\n\\n    function setRewardAmountInTDT(uint _rewardAmountInTDT) external;\\n\\n    function setFinalizationParameter(uint _finalizationParameter) external;\\n\\n    function setRelayerPercentageFee(uint _relayerPercentageFee) external;\\n\\n    function setEpochLength(uint _epochLength) external;\\n\\n    function setBaseQueries(uint _baseQueries) external;\\n\\n    function setSubmissionGasUsed(uint _submissionGasUsed) external;\\n\\n    function checkTxProof(\\n        bytes32 txid,\\n        uint blockHeight,\\n        bytes calldata intermediateNodes,\\n        uint index\\n    ) external payable returns (bool);\\n\\n    function addHeaders(bytes calldata _anchor, bytes calldata _headers) external returns (bool);\\n\\n    function addHeadersWithRetarget(\\n        bytes calldata _oldPeriodStartHeader,\\n        bytes calldata _oldPeriodEndHeader,\\n        bytes calldata _headers\\n    ) external returns (bool);\\n\\n}\"\n    },\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\n    },\n    \"hardhat/console.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Context.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\"\n    },\n    \"contracts/uniswap/v2-periphery/libraries/TransferHelper.sol\": {\n      \"content\": \"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeApprove: approve failed'\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeTransfer: transfer failed'\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::transferFrom: transferFrom failed'\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\\n    }\\n}\"\n    },\n    \"contracts/uniswap/v2-periphery/interfaces/IWETH.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n    function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\\n\"\n    },\n    \"contracts/uniswap/v2-periphery/interfaces/IERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\\n\"\n    },\n    \"contracts/uniswap/v2-periphery/interfaces/IUniswapV2Router01.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\"\n    },\n    \"contracts/uniswap/v2-periphery/interfaces/IUniswapV2Router02.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\"\n    },\n    \"contracts/connectors/UniswapV2Connector.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IExchangeConnector.sol\\\";\\nimport \\\"../uniswap/v2-periphery/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"../uniswap/v2-core/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"../uniswap/v2-core/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"../erc20/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract UniswapV2Connector is IExchangeConnector, Ownable, ReentrancyGuard {\\n\\n    string public override name;\\n    address public override exchangeRouter;\\n    address public override liquidityPoolFactory;\\n    address public override wrappedNativeToken;\\n\\n    /// @notice                          Setter for exchange router\\n    /// @param _name                     Name of the connected exchange\\n    /// @param _exchangeRouter           Address of the connected exchange\\n    /// @param _wrappedNativeToken       Address of the wrapped native token that exchange uses\\n    constructor(string memory _name, address _exchangeRouter, address _wrappedNativeToken) {\\n        name = _name;\\n        exchangeRouter = _exchangeRouter;\\n        liquidityPoolFactory = IUniswapV2Router02(exchangeRouter).factory();\\n        wrappedNativeToken = _wrappedNativeToken;\\n    }\\n\\n    /// @notice                             Setter for exchange router\\n    /// @dev                                Gets address of liquidity pool factory from new exchange router\\n    /// @param _exchangeRouter              Address of the exchange router contract\\n    function setExchangeRouter(address _exchangeRouter) external override onlyOwner {\\n        exchangeRouter = _exchangeRouter;\\n        liquidityPoolFactory = IUniswapV2Router02(exchangeRouter).factory();\\n    }\\n\\n    /// @notice            Setter for liquidity pool factory\\n    /// @dev               Gets address from exchange router\\n    function setLiquidityPoolFactory() external override onlyOwner {\\n        liquidityPoolFactory = IUniswapV2Router02(exchangeRouter).factory();\\n    }\\n\\n    /// @notice                              Setter for wrapped native token\\n    /// @param _wrappedNativeToken           Address of the wrapped native token contract\\n    function setWrappedNativeToken(address _wrappedNativeToken) external override onlyOwner {\\n        wrappedNativeToken = _wrappedNativeToken;\\n    }\\n\\n    function getInputAmount(\\n        uint _outputAmount,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view override returns (bool, uint) {\\n\\n        // Checks that the liquidity pool exists\\n        if (\\n            IUniswapV2Factory(liquidityPoolFactory).getPair(_inputToken, _outputToken) == address(0)\\n        ) {\\n            return (false, 0);\\n        }\\n\\n        // // Gets reserves of input token and output token\\n        // (uint reserveIn, uint reserveOut) = IUniswapV2Router02(exchangeRouter).getReserves(\\n        //     _inputToken,\\n        //     _outputToken\\n        // );\\n\\n        // return (true, IUniswapV2Router02(exchangeRouter).getAmountIn(_outputAmount, reserveIn, reserveOut));\\n        address[] memory path = new address[](2);\\n        path[0] = _inputToken;\\n        path[1] = _outputToken;\\n        uint[] memory result = IUniswapV2Router02(exchangeRouter).getAmountsIn(_outputAmount, path);\\n\\n        return (true, result[0]);\\n    }\\n\\n    function getOutputAmount(\\n        uint _inputAmount,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view override returns (bool, uint) {\\n\\n        // Checks that the liquidity pool exists\\n        if (\\n            IUniswapV2Factory(liquidityPoolFactory).getPair(_inputToken, _outputToken) == address(0)\\n        ) {\\n            return (false, 0);\\n        }\\n\\n        // // Gets reserves of input token and output token\\n        // (uint reserveIn, uint reserveOut) = IUniswapV2Router02(exchangeRouter).getReserves(\\n        //     _inputToken,\\n        //     _outputToken\\n        // );\\n\\n        // return (true, IUniswapV2Router02(exchangeRouter).getAmountOut(_inputAmount, reserveIn, reserveOut));\\n\\n        address[] memory path = new address[](2);\\n        path[0] = _inputToken;\\n        path[1] = _outputToken;\\n        uint[] memory result = IUniswapV2Router02(exchangeRouter).getAmountsOut(_inputAmount, path);\\n\\n        return (true, result[0]);\\n    }\\n\\n    /// @notice                     Exchanges input token for output token through exchange router\\n    /// @dev                        Checks exchange conditions before exchanging\\n    /// @param _inputAmount         Amount of input token\\n    /// @param _outputAmount        Amount of output token\\n    /// @param _path                List of tokens that are used for exchanging\\n    /// @param _to                  Receiver address\\n    /// @param _deadline            Deadline of exchanging tokens\\n    /// @param _isFixedToken        True if the first token amount is fixed\\n    /// @return _result             True if the exchange is successful\\n    /// @return _amounts            Amounts of tokens that are involved in exchanging\\n    function swap(\\n        uint256 _inputAmount,\\n        uint256 _outputAmount,\\n        address[] memory _path,\\n        address _to,\\n        uint256 _deadline,\\n        bool _isFixedToken\\n    ) external override nonReentrant returns(bool _result, uint[] memory _amounts) {\\n        uint neededInputAmount;\\n        (_result, neededInputAmount) = _checkExchangeConditions(\\n            _inputAmount,\\n            _outputAmount,\\n            _path,\\n            _deadline,\\n            _isFixedToken\\n        );\\n        if (_result) {\\n            // Gets tokens from user\\n            IERC20(_path[0]).transferFrom(msg.sender, address(this), neededInputAmount);\\n            // Gives allowance to exchange router\\n            IERC20(_path[0]).approve(exchangeRouter, neededInputAmount);\\n\\n            if (_isFixedToken == false && _path[_path.length-1] != wrappedNativeToken) {\\n                _amounts = IUniswapV2Router02(exchangeRouter).swapTokensForExactTokens(\\n                    _outputAmount,\\n                    _inputAmount,\\n                    _path,\\n                    _to,\\n                    _deadline\\n                );\\n            }\\n\\n            if (_isFixedToken == false && _path[_path.length-1] == wrappedNativeToken) {\\n                _amounts = IUniswapV2Router02(exchangeRouter).swapTokensForExactETH(\\n                    _outputAmount,\\n                    _inputAmount,\\n                    _path,\\n                    _to,\\n                    _deadline\\n                );\\n            }\\n\\n            if (_isFixedToken == true && _path[_path.length-1] != wrappedNativeToken) {\\n                _amounts = IUniswapV2Router02(exchangeRouter).swapExactTokensForTokens(\\n                    _inputAmount,\\n                    _outputAmount,\\n                    _path,\\n                    _to,\\n                    _deadline\\n                );\\n            }\\n\\n            if (_isFixedToken == true && _path[_path.length-1] == wrappedNativeToken) {\\n                _amounts = IUniswapV2Router02(exchangeRouter).swapExactTokensForETH(\\n                    _inputAmount,\\n                    _outputAmount,\\n                    _path,\\n                    _to,\\n                    _deadline\\n                );\\n            }\\n            emit Swap(_path, _amounts, _to);\\n        }\\n    }\\n\\n    /// @notice                           Checks if exchanging can happen successfully\\n    /// @dev                              Avoids reverting the request by exchange router\\n    /// @return                           True if exchange conditions are satisfied\\n    /// @return                           Needed amount of input token\\n    function _checkExchangeConditions(\\n        uint256 _inputAmount,\\n        uint256 _outputAmount,\\n        address[] memory _path,\\n        uint256 _deadline,\\n        bool _isFixedToken\\n    ) internal view returns (bool, uint) {\\n        // Checks deadline has not passed\\n        // TODO: un-comment on production\\n        if (_deadline < 2236952) {\\n            return (false, 0);\\n        }\\n        // if (_deadline < block.timestamp) {\\n        //     return (false, 0);\\n        // }\\n\\n        // Checks that the liquidity pool exists\\n        address liquidityPool =\\n        IUniswapV2Factory(liquidityPoolFactory).getPair(_path[0], _path[_path.length-1]);\\n        if (liquidityPool == address(0)) {\\n            return (false, 0);\\n        }\\n\\n        // Gets reserves of input token and output token\\n        (uint reserveIn, uint reserveOut, /*timestamp*/) = IUniswapV2Pair(liquidityPool).getReserves();\\n\\n        // Checks that enough liquidity for output token exists\\n        if (_outputAmount > reserveOut) {\\n            return (false, 0);\\n        }\\n\\n        if (_isFixedToken == false) {\\n            // Checks that the input amount is enough\\n            uint requiredAmountIn = IUniswapV2Router02(exchangeRouter).getAmountIn(\\n                _outputAmount,\\n                reserveIn,\\n                reserveOut\\n            );\\n            return (_inputAmount >= requiredAmountIn ? true : false, requiredAmountIn);\\n        } else {\\n            // Checks that the output amount is enough\\n            uint exchangedAmountOut = IUniswapV2Router02(exchangeRouter).getAmountOut(\\n                _inputAmount,\\n                reserveIn,\\n                reserveOut\\n            );\\n            return (exchangedAmountOut >= _outputAmount ? true : false, _inputAmount);\\n        }\\n    }\\n\\n}\"\n    },\n    \"contracts/uniswap/v2-core/interfaces/IUniswapV2Pair.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\n    },\n    \"contracts/uniswap/v2-core/interfaces/IUniswapV2Factory.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\n    },\n    \"contracts/routers/CCTransferRouter.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../libraries/TxHelper.sol\\\";\\nimport \\\"./interfaces/ICCTransferRouter.sol\\\";\\nimport \\\"../erc20/interfaces/ITeleBTC.sol\\\";\\nimport \\\"../relay/interfaces/IBitcoinRelay.sol\\\";\\nimport \\\"./interfaces/IInstantRouter.sol\\\";\\nimport \\\"../lockers/interfaces/ILockers.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract CCTransferRouter is ICCTransferRouter, Ownable, ReentrancyGuard {\\n\\n    modifier nonZeroAddress(address _address) {\\n        require(_address != address(0), \\\"CCTransferRouter: address is zero\\\");\\n        _;\\n    }\\n\\n    // Public variables\\n    uint public override startingBlockNumber;\\n    uint public override chainId;\\n    uint public override appId;\\n    uint public override protocolPercentageFee; // A number between 0 to 10000\\n    address public override relay;\\n    address public override lockers;\\n    address public override teleBTC;\\n    address public override instantRouter;\\n    address public override treasury;\\n    mapping(bytes32 => ccTransferRequest) public ccTransferRequests; // TxId to CCTransferRequest structure\\n\\n    /// @notice                             Gives default params to initiate cc transfer router\\n    /// @param _startingBlockNumber         Requests that are included in a block older than _startingBlockNumber cannot be executed\\n    /// @param _protocolPercentageFee       Percentage amount of protocol fee (min: %0.01)\\n    /// @param _chainId                     Id of the underlying chain\\n    /// @param _appId                       Id of ccTransfer dApp\\n    /// @param _relay                       The Relay address to validate data from source chain\\n    /// @param _lockers                     Lockers' contract address\\n    /// @param _teleBTC                     TeleportDAO BTC ERC20 token address\\n    /// @param _treasury                    Address of treasury that collects protocol fees\\n    constructor(\\n        uint _startingBlockNumber,\\n        uint _protocolPercentageFee,\\n        uint _chainId,\\n        uint _appId,\\n        address _relay,\\n        address _lockers,\\n        address _teleBTC,\\n        address _treasury\\n    ) {\\n        startingBlockNumber = _startingBlockNumber;\\n        protocolPercentageFee = _protocolPercentageFee;\\n        require(10000 >= _protocolPercentageFee, \\\"CCTransferRouter: invalid percentage fee\\\");\\n        chainId = _chainId;\\n        appId = _appId;\\n        relay = _relay;\\n        lockers = _lockers;\\n        teleBTC = _teleBTC;\\n        treasury = _treasury;\\n    }\\n\\n    /// @notice                             Setter for protocol percentage fee\\n    /// @dev                                Only owner can call this\\n    /// @param _protocolPercentageFee       Percentage amount of protocol fee\\n    function setProtocolPercentageFee(uint _protocolPercentageFee) external override onlyOwner {\\n        require(\\n            10000 >= _protocolPercentageFee,\\n            \\\"CCTransferRouter: protocol fee is out of range\\\"\\n        );\\n        protocolPercentageFee = _protocolPercentageFee;\\n    }\\n\\n    /// @notice                             Setter for relay\\n    /// @param _relay                       Address of the relay contract\\n    function setRelay(address _relay) external override nonZeroAddress(_relay) onlyOwner {\\n        relay = _relay;\\n    }\\n\\n    /// @notice                             Setter for relay\\n    /// @param _lockers                     Address of the lockers contract\\n    function setLockers(address _lockers) external override nonZeroAddress(_lockers) onlyOwner {\\n        lockers = _lockers;\\n    }\\n\\n    /// @notice                             Setter for instant router\\n    /// @param _instantRouter               Address of the instant router contract\\n    function setInstantRouter(address _instantRouter) external override nonZeroAddress(_instantRouter) onlyOwner {\\n        instantRouter = _instantRouter;\\n    }\\n\\n    /// @notice                             Setter for teleBTC\\n    /// @param _teleBTC                     TeleportDAO BTC ERC20 token address\\n    function setTeleBTC(address _teleBTC) external override nonZeroAddress(_teleBTC) onlyOwner {\\n        teleBTC = _teleBTC;\\n    }\\n\\n    /// @notice                             Setter for treasury\\n    /// @param _treasury                    Treasury address\\n    function setTreasury(address _treasury) external override nonZeroAddress(_treasury) onlyOwner {\\n        treasury = _treasury;\\n    }\\n\\n    /// @notice                             Check if the request has been executed before\\n    /// @dev                                This is to avoid re-submitting a used request\\n    /// @param _txId                        The txId of request on the source chain\\n    /// @return                             True if the request has been executed\\n    function isRequestUsed(bytes32 _txId) external view override returns (bool) {\\n        return ccTransferRequests[_txId].isUsed ? true : false;\\n    }\\n\\n    /// @notice                             Executes the cross chain transfer request\\n    /// @dev                                Validates the transfer request, then,\\n    ///                                     if speed is 1, the request is instant\\n    ///                                     which pays back the loan,\\n    ///                                     if the speed is 0, it is a normal transfer\\n    /// @param _version                     Version of the Bitcoin transaction\\n    /// @param _vin                         Transaction inputs\\n    /// @param _vout                        Transaction outputs\\n    /// @param _locktime                    Bitcoin transaction locktime\\n    /// @param _blockNumber                 The block number of the request tx\\n    /// @param _intermediateNodes           Merkle proof for tx\\n    /// @param _index                       Index of tx in the block\\n    /// @param _lockerScriptHash            Script hash of locker that user has sent BTC to it\\n    /// @return                             True if the transfer is successful\\n    function ccTransfer(\\n        // Bitcoin tx\\n        bytes4 _version,\\n        bytes memory _vin,\\n        bytes calldata _vout,\\n        bytes4 _locktime,\\n        // Bitcoin block number\\n        uint256 _blockNumber,\\n        // Merkle proof\\n        bytes calldata _intermediateNodes,\\n        uint _index,\\n        address _lockerScriptHash\\n    ) external payable nonReentrant nonZeroAddress(_lockerScriptHash) override returns (bool) {\\n        require(_blockNumber >= startingBlockNumber, \\\"CCTransferRouter: request is too old\\\");\\n\\n        // Finds txId on the source chain\\n        bytes32 txId = TxHelper.calculateTxId(_version, _vin, _vout, _locktime);\\n\\n        require(\\n            !ccTransferRequests[txId].isUsed,\\n            \\\"CCTransferRouter: request has been used before\\\"\\n        );\\n\\n        require(_locktime == bytes4(0), \\\"CCTransferRouter: lock time is non -zero\\\");\\n\\n        // Extracts information from the request\\n        _saveCCTransferRequest(_lockerScriptHash, _vout, txId);\\n\\n        // Checks if tx has been confirmed on source chain\\n        require(\\n            _isConfirmed(\\n                txId,\\n                _blockNumber,\\n                _intermediateNodes,\\n                _index\\n            ),\\n            \\\"CCTransferRouter: transaction has not been finalized yet\\\"\\n        );\\n\\n        // Normal cc transfer request\\n        if (ccTransferRequests[txId].speed == 0) {\\n            uint receivedAmount = _sendTeleBTC(_lockerScriptHash, txId);\\n            emit CCTransfer(\\n                ccTransferRequests[txId].recipientAddress,\\n                ccTransferRequests[txId].inputAmount,\\n                receivedAmount,\\n                ccTransferRequests[txId].speed,\\n                msg.sender,\\n                ccTransferRequests[txId].fee\\n            );\\n            return true;\\n        } else {\\n            // Pays back instant loan (ccTransferRequests[txId].speed == 1)\\n            uint receivedAmount = _payBackInstantLoan(_lockerScriptHash, txId);\\n            emit CCTransfer(\\n                ccTransferRequests[txId].recipientAddress,\\n                ccTransferRequests[txId].inputAmount,\\n                receivedAmount,\\n                ccTransferRequests[txId].speed,\\n                msg.sender,\\n                ccTransferRequests[txId].fee\\n            );\\n            return true;\\n        }\\n    }\\n\\n    /// @notice                             Sends minted teleBTC to the user\\n    /// @param _lockerScriptHash            Locker's script hash\\n    /// @param _txId                        The transaction ID of the request\\n    /// @return _remainedAmount             Amount of teleBTC that user receives after reducing fees\\n    function _sendTeleBTC(address _lockerScriptHash, bytes32 _txId) private returns (uint _remainedAmount) {\\n        // Gets remained amount after reducing fees\\n        _remainedAmount = _mintAndReduceFees(_lockerScriptHash, _txId);\\n\\n        // Transfers rest of tokens to recipient\\n        ITeleBTC(teleBTC).transfer(\\n            ccTransferRequests[_txId].recipientAddress,\\n            _remainedAmount\\n        );\\n    }\\n\\n    /// @notice                             Executes the paying back instant loan request\\n    /// @param _lockerScriptHash            Locker's script hash\\n    /// @param _txId                        The transaction ID of the request\\n    /// @return _remainedAmount             Amount of teleBTC that user receives after reducing fees\\n    function _payBackInstantLoan(\\n        address _lockerScriptHash, \\n        bytes32 _txId\\n    ) private returns (uint _remainedAmount) {\\n\\n        // Gets remained amount after reducing fees\\n        _remainedAmount = _mintAndReduceFees(_lockerScriptHash, _txId);\\n\\n        // Gives allowance to instant router to transfer remained teleBTC\\n        ITeleBTC(teleBTC).approve(\\n            instantRouter,\\n            _remainedAmount\\n        );\\n\\n        // Pays back instant loan\\n        IInstantRouter(instantRouter).payBackLoan(\\n            ccTransferRequests[_txId].recipientAddress,\\n            _remainedAmount\\n        );\\n    }\\n\\n    /// @notice                             Parses and saves the request\\n    /// @dev                                Checks that user has sent BTC to a valid locker\\n    /// @param _lockerScriptHash            Locker's script hash\\n    /// @param _vout                        The outputs of the tx\\n    /// @param _txId                        The txID of the request\\n    function _saveCCTransferRequest(\\n        address _lockerScriptHash,\\n        bytes memory _vout,\\n        bytes32 _txId\\n    ) private {\\n\\n        require(\\n            ILockers(lockers).isLocker(_lockerScriptHash),\\n            \\\"CCTransferRouter: no locker with the given script hash exists\\\"\\n        );\\n\\n        // Extracts value and opreturn data from request\\n        ccTransferRequest memory request; // Defines it to save gas\\n        bytes memory arbitraryData;\\n        (request.inputAmount, arbitraryData) = TxHelper.parseValueAndData(_vout, _lockerScriptHash);\\n\\n        // Checks that input amount is not zero\\n        require(request.inputAmount > 0, \\\"CCTransferRouter: input amount is zero\\\");\\n\\n        // Checks chain id and app id\\n        require(TxHelper.parseChainId(arbitraryData) == chainId, \\\"CCTransferRouter: chain id is not correct\\\");\\n        require(TxHelper.parseAppId(arbitraryData) == appId, \\\"CCTransferRouter: app id is not correct\\\");\\n\\n        // Calculates fee\\n        uint percentageFee = TxHelper.parsePercentageFee(arbitraryData);\\n        require(percentageFee < 10000, \\\"CCTransferRouter: percentage fee is out of range\\\");\\n        request.fee = percentageFee*request.inputAmount/10000;\\n\\n        // Parses recipient address and request speed\\n        request.recipientAddress = TxHelper.parseRecipientAddress(arbitraryData);\\n        request.speed = TxHelper.parseSpeed(arbitraryData);\\n        require(request.speed == 0 || request.speed == 1, \\\"CCTransferRouter: speed is out of range\\\");\\n\\n        // Marks the request as used\\n        request.isUsed = true;\\n\\n        // Saves the request data\\n        ccTransferRequests[_txId] = request;\\n    }\\n\\n    /// @notice                             Checks if tx has been finalized on source chain\\n    /// @dev                                Pays relay fee using included ETH in the transaction\\n    /// @param _txId                        The request tx\\n    /// @param _blockNumber                 The block number of the tx\\n    /// @param _intermediateNodes           Merkle proof for tx\\n    /// @param _index                       Index of tx in the block\\n    /// @return                             True if the tx is finalized on the source chain\\n    function _isConfirmed(\\n        bytes32 _txId,\\n        uint256 _blockNumber,\\n        bytes memory _intermediateNodes,\\n        uint _index\\n    ) private returns (bool) {\\n        // Calculates fee amount\\n        uint feeAmount = IBitcoinRelay(relay).getBlockHeaderFee(_blockNumber, 0); // Index 0 is for finalized blocks\\n        require(msg.value >= feeAmount, \\\"CCTransferRouter: paid fee is not sufficient\\\");\\n\\n        // Calls relay contract (transfers all msg.value to it)\\n        bytes memory data = Address.functionCallWithValue(\\n            relay,\\n            abi.encodeWithSignature(\\n                \\\"checkTxProof(bytes32,uint256,bytes,uint256)\\\",\\n                _txId,\\n                _blockNumber,\\n                _intermediateNodes,\\n                _index\\n            ),\\n            feeAmount\\n        );\\n        \\n        // Sends extra ETH back to msg.sender\\n        Address.sendValue(payable(msg.sender), msg.value - feeAmount);\\n\\n        return abi.decode(data, (bool));\\n    }\\n\\n    /// @notice                       Mints teleBTC by calling lockers contract\\n    /// @param _lockerScriptHash      Locker's script hash\\n    /// @param _txId                  The transaction ID of the request\\n    /// @return _remainedAmount       Amount of teleBTC that user receives after reducing all fees (protocol, locker, teleporter)\\n    function _mintAndReduceFees(\\n        address _lockerScriptHash,\\n        bytes32 _txId\\n    ) private returns (uint _remainedAmount) {\\n\\n        // Mints teleBTC for cc transfer router\\n        // Lockers contract gets locker's fee\\n        uint mintedAmount = ILockers(lockers).mint(\\n            _lockerScriptHash,\\n            address(this),\\n            ccTransferRequests[_txId].inputAmount\\n        );\\n\\n        // Calculates fees\\n        uint protocolFee = ccTransferRequests[_txId].inputAmount*protocolPercentageFee/10000;\\n        uint teleporterFee = ccTransferRequests[_txId].fee;\\n\\n        // Pays Teleporter fee\\n        if (teleporterFee > 0) {\\n            ITeleBTC(teleBTC).transfer(msg.sender, teleporterFee);\\n        }\\n\\n        // Pays protocol fee\\n        if (protocolFee > 0) {\\n            ITeleBTC(teleBTC).transfer(treasury, protocolFee);\\n        }\\n\\n        _remainedAmount = mintedAmount - protocolFee - teleporterFee;\\n    }\\n}\"\n    },\n    \"contracts/libraries/TxHelper.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./TypedMemView.sol\\\";\\nimport \\\"./ViewBTC.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n\\n// A library for parsing bitcoin transactions\\nlibrary TxHelper {\\n\\n    using TypedMemView for bytes;\\n    using TypedMemView for bytes29;\\n    using ViewBTC for bytes29;\\n\\n    /// @notice                           Parse the bitcoin amount and the op_return of a transaction as data\\n    /// @dev                              Support 3 types of transaction outputs, p2pkh, p2sh and p2wpkh\\n    /// @param _vout                      The vout of a bitcoin transaction\\n    /// @param _desiredRecipient          20 bytes, public_key hash or redeem_script hash which is using in bitcoin locking script\\n    /// @return                           bitcoinAmount of the _desiredRecipient (20 bytes, public_key hash or redeem_script hash)\\n    /// @return                           arbitraryData or the op_return of the transaction\\n    function parseValueAndData(\\n        bytes memory _vout,\\n        address _desiredRecipient\\n    ) internal view returns (uint64 bitcoinAmount, bytes memory arbitraryData) {\\n        bytes29 voutView = _vout.ref(0).tryAsVout();\\n        require(!voutView.isNull(), \\\"TxHelper: vout is null\\\");\\n\\n        bytes29 output;\\n        bytes29 scriptPubkey;\\n        bytes29 _arbitraryData;\\n        address bitcoinRecipient;\\n\\n        uint _numberOfOutputs = uint256(ViewBTC.indexCompactInt(voutView, 0));\\n\\n        for (uint index = 0; index < _numberOfOutputs; index++) {\\n            output = ViewBTC.indexVout(voutView, index);\\n            scriptPubkey = ViewBTC.scriptPubkey(output);\\n            _arbitraryData = ViewBTC.opReturnPayload(scriptPubkey);\\n\\n            // Checks whether the output is an arbitarary data or not\\n            if(_arbitraryData == 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) {\\n                // Output is not an arbitrary data\\n\\n                if (scriptPubkey.len() == 23 || scriptPubkey.len() == 24) {\\n                    // It is P2SH: OP_HASH160 ScriptHash OP_EQUAL\\n                    bitcoinRecipient = scriptPubkey.indexAddress(3);\\n                }\\n\\n                if (scriptPubkey.len() == 26) {\\n                    // It is P2PKH: OP_DUP OP_HASH160 PubKeyHash OP_EQUALVERIFY OP_CHECKSIG\\n                    bitcoinRecipient = scriptPubkey.indexAddress(4);\\n                }\\n\\n                if (scriptPubkey.len() == 21) {\\n                    // It is P2WPKH: 0 PubKeyHash\\n                    bitcoinRecipient = scriptPubkey.indexAddress(2);\\n                }\\n\\n                if (scriptPubkey.len() == 33) {\\n                    // It is P2WSH: 0 ScriptHash\\n                    bitcoinRecipient = scriptPubkey.indexAddress(2);\\n                }\\n\\n                if (bitcoinRecipient == _desiredRecipient) {\\n                    bitcoinAmount = ViewBTC.value(output);\\n                }\\n\\n            } else {\\n                arbitraryData = _arbitraryData.clone(); // bytes29.clone() returns the whole bytes array\\n            }\\n        }\\n\\n        return (bitcoinAmount, arbitraryData);\\n    }\\n\\n    function _parseValueAndData(\\n        bytes memory _vout,\\n        bytes memory _desiredRecipient\\n    ) internal view returns (uint64 bitcoinAmount, bytes memory arbitraryData) {\\n        bytes29 voutView = _vout.ref(0).tryAsVout();\\n        require(!voutView.isNull(), \\\"TxHelper: vout is null\\\");\\n\\n        bytes29 output;\\n        bytes29 scriptPubkey;\\n        bytes29 _arbitraryData;\\n        bytes memory bitcoinRecipient;\\n\\n        uint _numberOfOutputs = uint256(ViewBTC.indexCompactInt(voutView, 0));\\n\\n        for (uint index = 0; index < _numberOfOutputs; index++) {\\n            output = ViewBTC.indexVout(voutView, index);\\n            scriptPubkey = ViewBTC.scriptPubkey(output);\\n            _arbitraryData = ViewBTC.opReturnPayload(scriptPubkey);\\n\\n            // Checks whether the output is an arbitarary data or not\\n            if(_arbitraryData == 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) {\\n                // Output is not an arbitrary data\\n\\n                if (scriptPubkey.len() == 23 || scriptPubkey.len() == 24) {\\n                    // It is P2SH: OP_HASH160 ScriptHash OP_EQUAL (20 bytes)\\n                    bitcoinRecipient = abi.encodePacked(scriptPubkey.indexAddress(3));\\n                }\\n\\n                if (scriptPubkey.len() == 26) {\\n                    // It is P2PKH: OP_DUP OP_HASH160 PubKeyHash OP_EQUALVERIFY OP_CHECKSIG (20 bytes)\\n                    bitcoinRecipient = abi.encodePacked(scriptPubkey.indexAddress(4));\\n                }\\n\\n                if (scriptPubkey.len() == 21) {\\n                    // It is P2WPKH: 0 PubKeyHash (20 bytes)\\n                    bitcoinRecipient = abi.encodePacked(scriptPubkey.indexAddress(2));\\n                }\\n\\n                if (scriptPubkey.len() == 33) {\\n                    // It is P2WSH: 0 ScriptHash (32 bytes)\\n                    bitcoinRecipient = abi.encodePacked(scriptPubkey.index(2, 32));\\n                }\\n\\n                if (\\n                    keccak256(abi.encodePacked(bitcoinRecipient)) == keccak256(abi.encodePacked(_desiredRecipient))\\n                ) {\\n                    bitcoinAmount = ViewBTC.value(output);\\n                }\\n\\n            } else {\\n                arbitraryData = _arbitraryData.clone(); // bytes29.clone() returns the whole bytes array\\n            }\\n        }\\n\\n        return (bitcoinAmount, arbitraryData);\\n    }\\n\\n    function parseTotalValue(bytes memory vout) internal pure returns (uint64) {\\n        bytes29 voutView = vout.ref(0).tryAsVout();\\n        bytes29 output;\\n        uint64 totalValue;\\n\\n        uint _numberOfOutputs = uint256(ViewBTC.indexCompactInt(voutView, 0));\\n        for (uint index = 0; index < _numberOfOutputs; index++) {\\n            output = ViewBTC.indexVout(voutView, index);\\n            totalValue = totalValue + ViewBTC.value(output);\\n        }\\n\\n        return totalValue;\\n    }\\n\\n    function parseChainId(bytes memory arbitraryData) internal pure returns (uint8 parsedValue) {\\n        bytes memory slicedBytes = sliceBytes(arbitraryData, 0, 0);\\n        assembly {\\n            parsedValue := mload(add(slicedBytes, 1))\\n        }\\n    }\\n\\n    function parseAppId(bytes memory arbitraryData) internal pure returns (uint16 parsedValue) {\\n        bytes memory slicedBytes = sliceBytes(arbitraryData, 1, 2);\\n        assembly {\\n            parsedValue := mload(add(slicedBytes, 2))\\n        }\\n    }\\n\\n    function parseRecipientAddress(bytes memory arbitraryData) internal pure returns (address parsedValue) {\\n        bytes memory slicedBytes = sliceBytes(arbitraryData, 3, 22);\\n        assembly {\\n            parsedValue := mload(add(slicedBytes, 20))\\n        }\\n    }\\n\\n    function parsePercentageFee(bytes memory arbitraryData) internal pure returns (uint16 parsedValue) {\\n        bytes memory slicedBytes = sliceBytes(arbitraryData, 23, 24);\\n        assembly {\\n            parsedValue := mload(add(slicedBytes, 2))\\n        }\\n    }\\n\\n    function parseSpeed(bytes memory arbitraryData) internal pure returns (uint8 parsedValue) {\\n        bytes memory slicedBytes = sliceBytes(arbitraryData, 25, 25);\\n        assembly {\\n            parsedValue := mload(add(slicedBytes, 1))\\n        }\\n    }\\n\\n    function parseExchangeToken(bytes memory arbitraryData) internal pure returns (address parsedValue){\\n        bytes memory slicedBytes = sliceBytes(arbitraryData, 26, 45);\\n        assembly {\\n            parsedValue := mload(add(slicedBytes, 20))\\n        }\\n    }\\n\\n    function parseExchangeOutputAmount(bytes memory arbitraryData) internal pure returns (uint224 parsedValue){\\n        bytes memory slicedBytes = sliceBytes(arbitraryData, 46, 73);\\n        assembly {\\n            parsedValue := mload(add(slicedBytes, 28))\\n        }\\n    }\\n\\n    function parseDeadline(bytes memory arbitraryData) internal pure returns (uint32 parsedValue){\\n        bytes memory slicedBytes = sliceBytes(arbitraryData, 74, 77);\\n        assembly {\\n            parsedValue := mload(add(slicedBytes, 4))\\n        }\\n    }\\n\\n    function parseIsFixedToken(bytes memory arbitraryData) internal pure returns (uint8 parsedValue){\\n        bytes memory slicedBytes = sliceBytes(arbitraryData, 78, 78);\\n        assembly {\\n            parsedValue := mload(add(slicedBytes, 1))\\n        }\\n    }\\n\\n    // TODO: use parseExchangeToken to check if the request is a exchange or a transfer\\n    // function parseIsExchange (bytes memory arbitraryData) internal returns (bool parsedValue) {\\n    //     bytes memory slicedBytes = sliceBytes(arbitraryData, 28, 28);\\n    //     bytes1 zero = 0x00;\\n    //     if (slicedBytes[0] == zero) {\\n    //         parsedValue = false;\\n    //     } else {\\n    //         parsedValue = true;\\n    //     }\\n    // }\\n\\n    // function parseSpeed(bytes memory arbitraryData) internal returns (uint8 parsedValue){\\n    //     bytes memory slicedBytes = sliceBytes(arbitraryData, 29, 29);\\n    //     assembly {\\n    //         parsedValue := mload(add(slicedBytes, 1))\\n    //     }\\n    // }\\n\\n    function sliceBytes(\\n        bytes memory data,\\n        uint start,\\n        uint end\\n    ) internal pure returns (bytes memory result) {\\n        bytes1 temp;\\n        for (uint i = start; i < end + 1; i++) {\\n            temp = data[i];\\n            result = abi.encodePacked(result, temp);\\n        }\\n    }\\n\\n    function calculateTxId (\\n        bytes4 _version,\\n        bytes memory _vin,\\n        bytes calldata _vout,\\n        bytes4 _locktime\\n    ) internal pure returns (bytes32) {\\n        bytes32 inputHash1 = sha256(abi.encodePacked(_version, _vin, _vout, _locktime));\\n        bytes32 inputHash2 = sha256(abi.encodePacked(inputHash1));\\n        return revertBytes32(inputHash2);\\n    }\\n\\n    function revertBytes32(bytes32 input) internal pure returns (bytes32) {\\n        bytes memory temp;\\n        bytes32 result;\\n        for (uint i = 0; i < 32; i++) {\\n            temp = abi.encodePacked(temp, input[31-i]);\\n        }\\n        assembly {\\n            result := mload(add(temp, 32))\\n        }\\n        return result;\\n    }\\n\\n    function parseInput(bytes memory vin, uint index) internal pure returns (bytes29 input) {\\n        bytes29 vinView = vin.ref(0).tryAsVin();\\n        // Extract the desired input\\n        input = ViewBTC.indexVin(vinView, index);\\n    }\\n\\n    function parseInputScriptSig(bytes memory vin, uint index) internal view returns (bytes memory scriptSig) {\\n        // Extract the desired input\\n        bytes29 input = parseInput(vin, index);\\n        // Extract the script sig\\n        bytes29 scriptSigMemView = ViewBTC.scriptSig(input);\\n        // Extract redeem script from the script sig\\n        scriptSig = scriptSigMemView.clone();\\n    }\\n\\n    function numberOfOutputs(bytes memory vout) internal pure returns (uint _numberOfOutputs) {\\n        bytes29 voutView = vout.ref(0).tryAsVout();\\n        _numberOfOutputs = uint256(ViewBTC.indexCompactInt(voutView, 0));\\n    }\\n\\n    // TODO: add exchange path to arbitrary data (for now, user only gives us the exchnage token address)\\n    // function parsePath(bytes memory arbitraryData)\\n    //     internal\\n    //     returns (address[] memory)\\n    // {\\n    //     uint256 sizeofPath;\\n    //     assembly {\\n    //         sizeofPath := mload(add(arbitraryData, 356)) // bias = 4*32 + 4\\n    //     } // found the postion using testing\\n    //     address temp;\\n    //     uint256 index;\\n    //     index = 356 + 32;\\n\\n    //     for (uint256 i = 0; i < sizeofPath; i++) {\\n    //         assembly {\\n    //             temp := mload(add(arbitraryData, index))\\n    //         }\\n    //         parsedPath.push(temp);\\n    //         index = index + 32;\\n    //     }\\n    //     return parsedPath;\\n    // }\\n\\n}\\n\"\n    },\n    \"contracts/routers/interfaces/ICCTransferRouter.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICCTransferRouter {\\n\\n\\t// Structures\\n\\n\\t/// @notice                    Structure for recording cross-chain transfer requests\\n\\t/// @param inputAmount         Amount of locked BTC on source chain\\n\\t/// @param recipientAddress    Address of transfer recipient\\n\\t/// @param fee                 Amount of fee that is paid to Teleporter (tx, relayer and teleporter fees)\\n\\t/// @param speed               Speed of the request (normal or instant)\\n\\t/// @param isUsed              Whether the tx is used or not\\n\\tstruct ccTransferRequest {\\n\\t\\tuint inputAmount;\\n\\t\\taddress recipientAddress;\\n\\t\\tuint fee;\\n\\t\\tuint256 speed;\\n\\t\\tbool isUsed;\\n\\t}\\n\\n\\t// Events\\n\\n\\t/// @notice                    Emits when a cc transfer request gets done\\n\\t/// @param user                Address of teleBTC recipient\\n\\t/// @param inputAmount         Amount of tokens that user locked on source chain\\n\\t/// @param receivedAmount      Amount of tokens that user receives\\n\\t/// @param speed               Speed of the request (normal or instant)\\n\\t/// @param teleporter          Address of teleporter who submitted the request\\n\\t/// @param teleporterFee       Amount of fee that is paid to Teleporter (tx, relayer and teleporter fees)\\n\\tevent CCTransfer(\\n\\t\\taddress indexed user, \\n\\t\\tuint inputAmount, \\n\\t\\tuint receivedAmount,\\n\\t\\tuint indexed speed,\\n\\t\\taddress teleporter,\\n\\t\\tuint teleporterFee\\n\\t);\\n\\n\\t// Read-only functions\\n\\t\\n\\tfunction startingBlockNumber() external view returns (uint);\\n\\t\\n\\tfunction protocolPercentageFee() external view returns (uint);\\n\\t\\n\\tfunction chainId() external view returns (uint);\\n\\n\\tfunction appId() external view returns (uint);\\n\\n\\tfunction relay() external view returns (address);\\n\\n\\tfunction instantRouter() external view returns (address);\\n\\n\\tfunction lockers() external view returns (address);\\n\\n\\tfunction teleBTC() external view returns (address);\\n\\n\\tfunction treasury() external view returns (address);\\n\\n\\tfunction isRequestUsed(bytes32 _txId) external view returns (bool);\\n\\n\\t// State-changing functions\\n\\n\\tfunction setRelay(address _relay) external;\\n\\n\\tfunction setInstantRouter(address _instantRouter) external;\\n\\n\\tfunction setLockers(address _lockers) external;\\n\\n\\tfunction setTeleBTC(address _teleBTC) external;\\n\\n\\tfunction setTreasury(address _treasury) external;\\n\\n\\tfunction setProtocolPercentageFee(uint _protocolPercentageFee) external;\\n\\n\\tfunction ccTransfer(\\n\\t\\t// Bitcoin tx\\n\\t\\tbytes4 _version,\\n\\t\\tbytes memory _vin,\\n\\t\\tbytes calldata _vout,\\n\\t\\tbytes4 _locktime,\\n\\t\\t// Bitcoin block number\\n\\t\\tuint256 _blockNumber,\\n\\t\\t// Merkle proof\\n\\t\\tbytes calldata _intermediateNodes,\\n\\t\\tuint _index,\\n\\t\\taddress lockerBitcoinDecodedAddress\\n\\t) external payable returns (bool);\\n}\"\n    },\n    \"contracts/erc20/interfaces/ITeleBTC.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport './IERC20.sol';\\n\\ninterface ITeleBTC is IERC20 {\\n\\n    // Events\\n\\n    event Mint(address indexed to, uint value);\\n\\n    event Burn(address indexed to, uint value);\\n\\n    // state-changing functions\\n\\n    function addMinter(address account) external;\\n\\n    function removeMinter(address account) external;\\n\\n    function addBurner(address account) external;\\n\\n    function removeBurner(address account) external;\\n\\n    function mint(address receiver, uint amount) external returns(bool);\\n\\n    function burn(uint256 amount) external returns(bool);\\n\\n    function mintTestToken() external; // Just for test TODO: remove it\\n\\n}\"\n    },\n    \"contracts/lockers/interfaces/ILockers.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ILockers {\\n\\n    // Events\\n\\n    event RequestAddLocker(\\n        address indexed lockerTargetAddress,\\n        bytes lockerRedeemScript,\\n        uint TDTLockedAmount,\\n        uint nativeTokenLockedAmount,\\n        bool indexed isScriptHash\\n    );\\n\\n    event RequestRemoveLocker(\\n        address indexed lockerTargetAddress,\\n        bytes lockerRedeemScript,\\n        uint TDTUnlockedAmount,\\n        uint nativeTokenUnlockedAmount,\\n        uint netMinted        //   = totalMinted  - totalBurnt which needs to be burnt\\n    );\\n\\n    event LockerAdded(\\n        address indexed lockerTargetAddress,\\n        bytes lockerRedeemScript,\\n        uint TDTLockedAmount,\\n        uint nativeTokenLockedAmount,\\n        bool isScriptHash\\n    // uint addingTime\\n    );\\n\\n    event LockerRemoved(\\n        address indexed lockerTargetAddress,\\n        bytes lockerRedeemScript,\\n        uint TDTUnlockedAmount,\\n        uint nativeTokenUnlockedAmount\\n    );\\n\\n    event LockerSlashed(\\n        address indexed lockerTargetAddress,\\n        uint slashedCollateralAmount\\n    );\\n\\n    // Read-only functions\\n\\n    function getLockerTargetAddress(address  _lockerScriptHash) external view returns (address);\\n\\n    function isLocker(address _lockerScriptHash) external view returns (bool);\\n\\n    function getNumberOfLockers() external view returns (uint);\\n\\n    function getLockerRedeemScript(address _lockerTargetAddress) external view returns (bytes memory);\\n\\n    function isActive(address _lockerTargetAddress) external view returns (bool);\\n\\n    function getLockerCapacity(address _lockerTargetAddress) external view returns (uint);\\n\\n    // State-changing functions\\n\\n    function pauseLocker() external;\\n\\n    function unPauseLocker() external;\\n\\n    function addMinter(address _account) external;\\n\\n    function removeMinter(address _account) external;\\n\\n    function addBurner(address _account) external;\\n\\n    function removeBurner(address _account) external;\\n\\n    function mint(address _lockerScriptHash, address _receiver, uint _amount) external returns(uint);\\n\\n    function burn(address _lockerScriptHash, uint256 _amount) external returns(uint);\\n\\n    function setMinRequiredTDTLockedAmount(uint _minRequiredTDTLockedAmount) external;\\n\\n    function setMinRequiredTNTLockedAmount(uint _minRequiredTNTLockedAmount) external;\\n\\n    function setPriceOracle(address _priceOracle) external;\\n\\n    function setCCBurnRouter(address _ccBurnRouter) external;\\n\\n    function setExchangeConnector(address _exchangeConnector) external;\\n\\n    function setTeleBTC(address _teleBTC) external;\\n\\n    function setCollateralRatio(uint _collateralRatio) external;\\n\\n    function liquidateLocker(\\n        address _lockerTargetAddress,\\n        uint _btcAmount\\n    ) external returns (bool);\\n\\n    function requestToBecomeLocker(\\n        bytes memory _candidateBitcoinAddress,\\n        address _candidateBitcoinDecodedAddress,\\n        uint _lockedTDTAmount,\\n        uint _lockedNativeTokenAmount\\n    ) external payable returns (bool);\\n\\n    function revokeRequest() external returns (bool);\\n\\n    function addLocker(address _lockerTargetAddress) external returns (bool);\\n\\n    function requestToRemoveLocker() external returns (bool);\\n\\n    function removeLocker(address _lockerTargetAddress) external returns(bool);\\n\\n    function selfRemoveLocker() external returns (bool);\\n\\n    function slashLocker(\\n        address _lockerTargetAddress, \\n        uint _rewardAmount,\\n        address _rewardRecipient,\\n        uint _amount, \\n        address _recipient\\n    ) external returns(bool);\\n\\n}\"\n    },\n    \"@openzeppelin/contracts/utils/Address.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/libraries/TypedMemView.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./SafeMath.sol\\\";\\n\\nlibrary TypedMemView {\\n    using SafeMath for uint256;\\n\\n    // Why does this exist?\\n    // the solidity `bytes memory` type has a few weaknesses.\\n    // 1. You can't index ranges effectively\\n    // 2. You can't slice without copying\\n    // 3. The underlying data may represent any type\\n    // 4. Solidity never deallocates memory, and memory costs grow\\n    //    superlinearly\\n\\n    // By using a memory view instead of a `bytes memory` we get the following\\n    // advantages:\\n    // 1. Slices are done on the stack, by manipulating the pointer\\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\\n    // 3. We can insert type info into the pointer, and typecheck at runtime\\n\\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\\n    // algorithms.\\n\\n    // Why bytes29?\\n    // We want to avoid confusion between views, digests, and other common\\n    // types so we chose a large and uncommonly used odd number of bytes\\n    //\\n    // Note that while bytes are left-aligned in a word, integers and addresses\\n    // are right-aligned. This means when working in assembly we have to\\n    // account for the 3 unused bytes on the righthand side\\n    //\\n    // First 5 bytes are a type flag.\\n    // - ff_ffff_fffe is reserved for unknown type.\\n    // - ff_ffff_ffff is reserved for invalid types/errors.\\n    // next 12 are memory address\\n    // next 12 are len\\n    // bottom 3 bytes are empty\\n\\n    // Assumptions:\\n    // - non-modification of memory.\\n    // - No Solidity updates\\n    // - - wrt free mem point\\n    // - - wrt bytes representation in memory\\n    // - - wrt memory addressing in general\\n\\n    // Usage:\\n    // - create type constants\\n    // - use `assertType` for runtime type assertions\\n    // - - unfortunately we can't do this at compile time yet :(\\n    // - recommended: implement modifiers that perform type checking\\n    // - - e.g.\\n    // - - `uint40 constant MY_TYPE = 3;`\\n    // - - ` modifer onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\\n    // - instantiate a typed view from a bytearray using `ref`\\n    // - use `index` to inspect the contents of the view\\n    // - use `slice` to create smaller views into the same memory\\n    // - - `slice` can increase the offset\\n    // - - `slice can decrease the length`\\n    // - - must specify the output type of `slice`\\n    // - - `slice` will return a null view if you try to overrun\\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\\n    // - use `equal` for typed comparisons.\\n\\n\\n    // The null view\\n    bytes29 public constant NULL = hex\\\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\\";\\n    uint256 constant LOW_12_MASK = 0xffffffffffffffffffffffff;\\n    uint8 constant TWELVE_BYTES = 96;\\n\\n    /**\\n     * @notice      Returns the encoded hex character that represents the lower 4 bits of the argument.\\n     * @param _b    The byte\\n     * @return      char - The encoded hex character\\n     */\\n    function nibbleHex(uint8 _b) public pure returns (uint8 char) {\\n        // This can probably be done more efficiently, but it's only in error\\n        // paths, so we don't really care :)\\n        uint8 _nibble = _b | 0xf0; // set top 4, keep bottom 4\\n        if (_nibble == 0xf0) {return 0x30;} // 0\\n        if (_nibble == 0xf1) {return 0x31;} // 1\\n        if (_nibble == 0xf2) {return 0x32;} // 2\\n        if (_nibble == 0xf3) {return 0x33;} // 3\\n        if (_nibble == 0xf4) {return 0x34;} // 4\\n        if (_nibble == 0xf5) {return 0x35;} // 5\\n        if (_nibble == 0xf6) {return 0x36;} // 6\\n        if (_nibble == 0xf7) {return 0x37;} // 7\\n        if (_nibble == 0xf8) {return 0x38;} // 8\\n        if (_nibble == 0xf9) {return 0x39;} // 9\\n        if (_nibble == 0xfa) {return 0x61;} // a\\n        if (_nibble == 0xfb) {return 0x62;} // b\\n        if (_nibble == 0xfc) {return 0x63;} // c\\n        if (_nibble == 0xfd) {return 0x64;} // d\\n        if (_nibble == 0xfe) {return 0x65;} // e\\n        if (_nibble == 0xff) {return 0x66;} // f\\n    }\\n\\n    /**\\n     * @notice      Returns a uint16 containing the hex-encoded byte.\\n     *              `the first 8 bits of encoded is the nibbleHex of top 4 bits of _b`\\n     *              `the second 8 bits of encoded is the nibbleHex of lower 4 bits of _b`\\n     * @param _b    The byte\\n     * @return      encoded - The hex-encoded byte\\n     */\\n    function byteHex(uint8 _b) public pure returns (uint16 encoded) {\\n        encoded |= nibbleHex(_b >> 4); // top 4 bits\\n        encoded <<= 8;\\n        encoded |= nibbleHex(_b); // lower 4 bits\\n    }\\n\\n    /**\\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\\n     *              `second` contains the encoded lower 16 bytes.\\n     *\\n     * @param _b    The 32 bytes as uint256\\n     * @return      first - The top 16 bytes\\n     * @return      second - The bottom 16 bytes\\n     */\\n    function encodeHex(uint256 _b) public pure returns (uint256 first, uint256 second) {\\n        for (uint8 i = 31; i > 15; i -= 1) {\\n            uint8 _byte = uint8(_b >> (i * 8));\\n            first |= byteHex(_byte);\\n            if (i != 16) {\\n                first <<= 16;\\n            }\\n        }\\n\\n        // abusing underflow here =_=\\n        for (uint8 i = 15; i < 255 ; i -= 1) {\\n            uint8 _byte = uint8(_b >> (i * 8));\\n            second |= byteHex(_byte);\\n            if (i != 0) {\\n                second <<= 16;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice          Changes the endianness of a uint256.\\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\\n     * @param _b        The unsigned integer to reverse\\n     * @return          v - The reversed value\\n     */\\n    function reverseUint256(uint256 _b) public pure returns (uint256 v) {\\n        v = _b;\\n\\n        // swap bytes\\n        v = ((v >> 8) & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\\n        ((v & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) << 8);\\n        // swap 2-byte long pairs\\n        v = ((v >> 16) & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\\n        ((v & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) << 16);\\n        // swap 4-byte long pairs\\n        v = ((v >> 32) & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\\n        ((v & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) << 32);\\n        // swap 8-byte long pairs\\n        v = ((v >> 64) & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\\n        ((v & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) << 64);\\n        // swap 16-byte long pairs\\n        v = (v >> 128) | (v << 128);\\n    }\\n\\n    /**\\n     * @notice      Create a mask with the highest `_len` bits set.\\n     * @param _len  The length\\n     * @return      mask - The mask\\n     */\\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\\n        // ugly. redo without assembly?\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            mask := sar(\\n            sub(_len, 1),\\n            0x8000000000000000000000000000000000000000000000000000000000000000\\n            )\\n        }\\n    }\\n\\n    /**\\n     * @notice      Return the null view.\\n     * @return      bytes29 - The null view\\n     */\\n    function nullView() public pure returns (bytes29) {\\n        return NULL;\\n    }\\n\\n    /**\\n     * @notice      Check if the view is null.\\n     * @return      bool - True if the view is null\\n     */\\n    function isNull(bytes29 memView) public pure returns (bool) {\\n        return memView == NULL;\\n    }\\n\\n    /**\\n     * @notice      Check if the view is not null.\\n     * @return      bool - True if the view is not null\\n     */\\n    function notNull(bytes29 memView) public pure returns (bool) {\\n        return !isNull(memView);\\n    }\\n\\n    /**\\n     * @notice          Check if the view is of a valid type and points to a valid location\\n     *                  in memory.\\n     * @dev             We perform this check by examining solidity's unallocated memory\\n     *                  pointer and ensuring that the view's upper bound is less than that.\\n     * @param memView   The view\\n     * @return          ret - True if the view is valid\\n     */\\n    function isValid(bytes29 memView) public pure returns (bool ret) {\\n        if (typeOf(memView) == 0xffffffffff) {return false;}\\n        uint256 _end = end(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ret := not(gt(_end, mload(0x40)))\\n        }\\n    }\\n\\n    /**\\n     * @notice          Require that a typed memory view be valid.\\n     * @dev             Returns the view for easy chaining.\\n     * @param memView   The view\\n     * @return          bytes29 - The validated view\\n     */\\n    function assertValid(bytes29 memView) public pure returns (bytes29) {\\n        require(isValid(memView), \\\"Validity assertion failed\\\");\\n        return memView;\\n    }\\n\\n    /**\\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\\n     * @param memView   The view\\n     * @param _expected The expected type\\n     * @return          bool - True if the memview is of the expected type\\n     */\\n    function isType(bytes29 memView, uint40 _expected) public pure returns (bool) {\\n        return typeOf(memView) == _expected;\\n    }\\n\\n    /**\\n     * @notice          Require that a typed memory view has a specific type.\\n     * @dev             Returns the view for easy chaining.\\n     * @param memView   The view\\n     * @param _expected The expected type\\n     * @return          bytes29 - The view with validated type\\n     */\\n    function assertType(bytes29 memView, uint40 _expected) public pure returns (bytes29) {\\n        if (!isType(memView, _expected)) {\\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\\n            (, uint256 e) = encodeHex(uint256(_expected));\\n            string memory err = string(\\n                abi.encodePacked(\\n                    \\\"Type assertion failed. Got 0x\\\",\\n                    uint80(g),\\n                    \\\". Expected 0x\\\",\\n                    uint80(e)\\n                )\\n            );\\n            revert(err);\\n        }\\n        return memView;\\n    }\\n\\n    /**\\n     * @notice          Return an identical view with a different type.\\n     * @param memView   The view\\n     * @param _newType  The new type\\n     * @return          newView - The new view with the specified type\\n     */\\n    function castTo(bytes29 memView, uint40 _newType) public pure returns (bytes29 newView) {\\n        // then | in the new type\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n        // shift off the top 5 bytes\\n            newView := or(newView, shr(40, shl(40, memView)))\\n            newView := or(newView, shl(216, _newType))\\n        }\\n    }\\n\\n    /**\\n     * @notice          Unsafe raw pointer construction. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @dev             Unsafe raw pointer construction. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @param _type     The type\\n     * @param _loc      The memory address\\n     * @param _len      The length\\n     * @return          newView - The new view with the specified type, location and length\\n     */\\n    function unsafeBuildUnchecked(uint256 _type, uint256 _loc, uint256 _len) private pure returns (bytes29 newView) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            newView := shl(96, or(newView, _type)) // insert type\\n            newView := shl(96, or(newView, _loc))  // insert loc\\n            newView := shl(24, or(newView, _len))  // empty bottom 3 bytes\\n        }\\n    }\\n\\n    /**\\n     * @notice          Instantiate a new memory view. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @dev             Instantiate a new memory view. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @param _type     The type\\n     * @param _loc      The memory address\\n     * @param _len      The length\\n     * @return          newView - The new view with the specified type, location and length\\n     */\\n    function build(uint256 _type, uint256 _loc, uint256 _len) public pure returns (bytes29 newView) {\\n        uint256 _end = _loc.add(_len);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            if gt(_end, mload(0x40)) {\\n                _end := 0\\n            }\\n        }\\n        if (_end == 0) {\\n            return NULL;\\n        }\\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\\n    }\\n\\n    /**\\n     * @notice          Instantiate a memory view from a byte array.\\n     * @dev             Note that due to Solidity memory representation, it is not possible to\\n     *                  implement a deref, as the `bytes` type stores its len in memory.\\n     * @param arr       The byte array\\n     * @param newType   The type\\n     * @return          bytes29 - The memory view\\n     */\\n    function ref(bytes memory arr, uint40 newType) public pure returns (bytes29) {\\n        uint256 _len = arr.length;\\n\\n        uint256 _loc;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            _loc := add(arr, 0x20)  // our view is of the data, not the struct\\n        }\\n\\n        return build(newType, _loc, _len);\\n    }\\n\\n    /**\\n     * @notice          Return the associated type information.\\n     * @param memView   The memory view\\n     * @return          _type - The type associated with the view\\n     */\\n    function typeOf(bytes29 memView) public pure returns (uint40 _type) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n        // 216 == 256 - 40\\n            _type := shr(216, memView) // shift out lower 24 bytes\\n        }\\n    }\\n\\n    /**\\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the 5-byte type flag is equal\\n     */\\n    function sameType(bytes29 left, bytes29 right) public pure returns (bool) {\\n        // XOR the inputs to check their difference\\n        return (left ^ right) >> (2 * TWELVE_BYTES) == 0;\\n    }\\n\\n    /**\\n     * @notice          Return the memory address of the underlying bytes.\\n     * @param memView   The view\\n     * @return          _loc - The memory address\\n     */\\n    function loc(bytes29 memView) public pure returns (uint96 _loc) {\\n        uint256 _mask = LOW_12_MASK;  // assembly can't use globals\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n        // 120 bits = 12 bytes (the encoded loc) + 3 bytes (empty low space)\\n            _loc := and(shr(120, memView), _mask)\\n        }\\n    }\\n\\n    /**\\n     * @notice          The number of memory words this memory view occupies, rounded up.\\n     * @param memView   The view\\n     * @return          uint256 - The number of memory words\\n     */\\n    function words(bytes29 memView) public pure returns (uint256) {\\n        return uint256(len(memView)).add(32) / 32;\\n    }\\n\\n    /**\\n     * @notice          The in-memory footprint of a fresh copy of the view.\\n     * @param memView   The view\\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\\n     */\\n    function footprint(bytes29 memView) public pure returns (uint256) {\\n        return words(memView) * 32;\\n    }\\n\\n    /**\\n     * @notice          The number of bytes of the view.\\n     * @param memView   The view\\n     * @return          _len - The length of the view\\n     */\\n    function len(bytes29 memView) public pure returns (uint96 _len) {\\n        uint256 _mask = LOW_12_MASK;  // assembly can't use globals\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            _len := and(shr(24, memView), _mask)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Returns the endpoint of `memView`.\\n     * @param memView   The view\\n     * @return          uint256 - The endpoint of `memView`\\n     */\\n    function end(bytes29 memView) public pure returns (uint256) {\\n        return loc(memView) + len(memView);\\n    }\\n\\n    /**\\n     * @notice          Safe slicing without memory modification.\\n     * @param memView   The view\\n     * @param _index    The start index\\n     * @param _len      The length\\n     * @param newType   The new type\\n     * @return          bytes29 - The new view\\n     */\\n    function slice(bytes29 memView, uint256 _index, uint256 _len, uint40 newType) public pure returns (bytes29) {\\n        uint256 _loc = loc(memView);\\n\\n        // Ensure it doesn't overrun the view\\n        if (_loc.add(_index).add(_len) > end(memView)) {\\n            return NULL;\\n        }\\n\\n        _loc = _loc.add(_index);\\n        return build(newType, _loc, _len);\\n    }\\n\\n    /**\\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\\n     * @param memView   The view\\n     * @param _len      The length\\n     * @param newType   The new type\\n     * @return          bytes29 - The new view\\n     */\\n    function prefix(bytes29 memView, uint256 _len, uint40 newType) public pure returns (bytes29) {\\n        return slice(memView, 0, _len, newType);\\n    }\\n\\n    /**\\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\\n     * @param memView   The view\\n     * @param _len      The length\\n     * @param newType   The new type\\n     * @return          bytes29 - The new view\\n     */\\n    function postfix(bytes29 memView, uint256 _len, uint40 newType) public pure returns (bytes29) {\\n        return slice(memView, uint256(len(memView)).sub(_len), _len, newType);\\n    }\\n\\n    /**\\n     * @notice          Construct an error message for an indexing overrun.\\n     * @param _loc      The memory address\\n     * @param _len      The length\\n     * @param _index    The index\\n     * @param _slice    The slice where the overrun occurred\\n     * @return          err - The err\\n     */\\n    function indexErrOverrun(\\n        uint256 _loc,\\n        uint256 _len,\\n        uint256 _index,\\n        uint256 _slice\\n    ) public pure returns (string memory err) {\\n        (, uint256 a) = encodeHex(_loc);\\n        (, uint256 b) = encodeHex(_len);\\n        (, uint256 c) = encodeHex(_index);\\n        (, uint256 d) = encodeHex(_slice);\\n        err = string(\\n            abi.encodePacked(\\n                \\\"TypedMemView/index - Overran the view. Slice is at 0x\\\",\\n                uint48(a),\\n                \\\" with length 0x\\\",\\n                uint48(b),\\n                \\\". Attempted to index at offset 0x\\\",\\n                uint48(c),\\n                \\\" with length 0x\\\",\\n                uint48(d),\\n                \\\".\\\"\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice          Load up to 32 bytes from the view onto the stack.\\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\\n     *                  This can be immediately cast to a smaller fixed-length byte array.\\n     *                  To automatically cast to an integer, use `indexUint`.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @param _bytes    The bytes\\n     * @return          result - The 32 byte result\\n     */\\n    function index(bytes29 memView, uint256 _index, uint8 _bytes) public pure returns (bytes32 result) {\\n        if (_bytes == 0) {return bytes32(0);}\\n        if (_index.add(_bytes) > len(memView)) {\\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\\n        }\\n        require(_bytes <= 32, \\\"TypedMemView/index - Attempted to index more than 32 bytes\\\");\\n\\n        // FIXME: why the following lines need `unchecked`\\n    unchecked {\\n        uint8 bitLength = _bytes * 8;\\n        uint256 _loc = loc(memView);\\n        uint256 _mask = leftMask(bitLength);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            result := and(mload(add(_loc, _index)), _mask)\\n        }\\n    }\\n\\n    }\\n\\n    /**\\n     * @notice          Parse an unsigned integer from the view at `_index`.\\n     * @dev             Requires that the view have >= `_bytes` bytes following that index.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @param _bytes    The bytes\\n     * @return          result - The unsigned integer\\n     */\\n    function indexUint(bytes29 memView, uint256 _index, uint8 _bytes) public pure returns (uint256 result) {\\n        return uint256(index(memView, _index, _bytes)) >> ((32 - _bytes) * 8);\\n    }\\n\\n    /**\\n     * @notice          Parse an unsigned integer from LE bytes.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @param _bytes    The bytes\\n     * @return          result - The unsigned integer\\n     */\\n    function indexLEUint(bytes29 memView, uint256 _index, uint8 _bytes) public pure returns (uint256 result) {\\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\\n    }\\n\\n    /**\\n     * @notice          Parse an address from the view at `_index`. Requires that the view have >= 20 bytes\\n     *                  following that index.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @return          address - The address\\n     */\\n    function indexAddress(bytes29 memView, uint256 _index) public pure returns (address) {\\n        return address(uint160(indexUint(memView, _index, 20)));\\n    }\\n\\n    /**\\n     * @notice          Return the keccak256 hash of the underlying memory\\n     * @param memView   The view\\n     * @return          digest - The keccak256 hash of the underlying memory\\n     */\\n    function keccak(bytes29 memView) public pure returns (bytes32 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            digest := keccak256(_loc, _len)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Return the sha2 digest of the underlying memory.\\n     * @dev             We explicitly deallocate memory afterwards.\\n     * @param memView   The view\\n     * @return          digest - The sha2 hash of the underlying memory\\n     */\\n    function sha2(bytes29 memView) public view returns (bytes32 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\\n            digest := mload(ptr)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\\n     * @param memView   The pre-image\\n     * @return          digest - the Digest\\n     */\\n    function hash160(bytes29 memView) public view returns (bytes20 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2\\n            pop(staticcall(gas(), 3, ptr, 0x20, ptr, 0x20)) // rmd160\\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\\n        }\\n    }\\n\\n    /**\\n     * @notice          Implements bitcoin's hash256 (double sha2)\\n     * @param memView   A view of the preimage\\n     * @return          digest - the Digest\\n     */\\n    function hash256(bytes29 memView) public view returns (bytes32 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\\n            pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha2 #2\\n            digest := mload(ptr)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Return true if the underlying memory is equal. Else false.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the underlying memory is equal\\n     */\\n    function untypedEqual(bytes29 left, bytes29 right) public pure returns (bool) {\\n        return (loc(left) == loc(right) && len(left) == len(right)) || keccak(left) == keccak(right);\\n    }\\n\\n    /**\\n     * @notice          Return false if the underlying memory is equal. Else true.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - False if the underlying memory is equal\\n     */\\n    function untypedNotEqual(bytes29 left, bytes29 right) public pure returns (bool) {\\n        return !untypedEqual(left, right);\\n    }\\n\\n    /**\\n     * @notice          Compares type equality.\\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the types are the same\\n     */\\n    function equal(bytes29 left, bytes29 right) public pure returns (bool) {\\n        return left == right || (typeOf(left) == typeOf(right) && keccak(left) == keccak(right));\\n    }\\n\\n    /**\\n     * @notice          Compares type inequality.\\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the types are not the same\\n     */\\n    function notEqual(bytes29 left, bytes29 right) public pure returns (bool) {\\n        return !equal(left, right);\\n    }\\n\\n    /**\\n     * @notice          Copy the view to a location, return an unsafe memory reference\\n     * @dev             Super Dangerous direct memory access.\\n     *\\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\\n     *                  As such it MUST be consumed IMMEDIATELY.\\n     *                  This function is private to prevent unsafe usage by callers.\\n     * @param memView   The view\\n     * @param _newLoc   The new location\\n     * @return          written - the unsafe memory reference\\n     */\\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\\n        require(notNull(memView), \\\"TypedMemView/copyTo - Null pointer deref\\\");\\n        require(isValid(memView), \\\"TypedMemView/copyTo - Invalid pointer deref\\\");\\n        uint256 _len = len(memView);\\n        uint256 _oldLoc = loc(memView);\\n\\n        uint256 ptr;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40)\\n        // revert if we're writing in occupied memory\\n            if gt(ptr, _newLoc) {\\n                revert(0x60, 0x20) // empty revert message\\n            }\\n\\n        // use the identity precompile to copy\\n        // guaranteed not to fail, so pop the success\\n            pop(staticcall(gas(), 4, _oldLoc, _len, _newLoc, _len))\\n        }\\n\\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\\n    }\\n\\n    /**\\n     * @notice          Copies the referenced memory to a new loc in memory, returning a `bytes` pointing to\\n     *                  the new memory\\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n     * @param memView   The view\\n     * @return          ret - The view pointing to the new memory\\n     */\\n    function clone(bytes29 memView) public view returns (bytes memory ret) {\\n        uint256 ptr;\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n            ret := ptr\\n        }\\n        unsafeCopyTo(memView, ptr + 0x20);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\\n            mstore(ptr, _len) // write len of new array (in bytes)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\\n     * @dev             Super Dangerous direct memory access.\\n     *\\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\\n     *                  As such it MUST be consumed IMMEDIATELY.\\n     *                  This function is private to prevent unsafe usage by callers.\\n     * @param memViews  The views\\n     * @return          unsafeView - The conjoined view pointing to the new memory\\n     */\\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location) private view returns (bytes29 unsafeView) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n        // revert if we're writing in occupied memory\\n            if gt(ptr, _location) {\\n                revert(0x60, 0x20) // empty revert message\\n            }\\n        }\\n\\n        uint256 _offset = 0;\\n        for (uint256 i = 0; i < memViews.length; i ++) {\\n            bytes29 memView = memViews[i];\\n            unsafeCopyTo(memView, _location + _offset);\\n            _offset += len(memView);\\n        }\\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\\n    }\\n\\n    /**\\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\\n     * @param memViews  The views\\n     * @return          bytes32 - The keccak256 digest\\n     */\\n    function joinKeccak(bytes29[] memory memViews) public view returns (bytes32) {\\n        uint256 ptr;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n        }\\n        return keccak(unsafeJoin(memViews, ptr));\\n    }\\n\\n    /**\\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\\n     * @param memViews  The views\\n     * @return          bytes32 - The sha256 digest\\n     */\\n    function joinSha2(bytes29[] memory memViews) public view returns (bytes32) {\\n        uint256 ptr;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n        }\\n        return sha2(unsafeJoin(memViews, ptr));\\n    }\\n\\n    /**\\n     * @notice          copies all views, joins them into a new bytearray.\\n     * @param memViews  The views\\n     * @return          ret - The new byte array\\n     */\\n    function join(bytes29[] memory memViews) public view returns (bytes memory ret) {\\n        uint256 ptr;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n        }\\n\\n        bytes29 _newView = unsafeJoin(memViews, ptr + 0x20);\\n        uint256 _written = len(_newView);\\n        uint256 _footprint = footprint(_newView);\\n\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n        // store the legnth\\n            mstore(ptr, _written)\\n        // new pointer is old + 0x20 + the footprint of the body\\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\\n            ret := ptr\\n        }\\n    }\\n}\"\n    },\n    \"contracts/libraries/ViewBTC.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./TypedMemView.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\nlibrary ViewBTC {\\n    using TypedMemView for bytes29;\\n    using SafeMath for uint256;\\n\\n    // The target at minimum Difficulty. Also the target of the genesis block\\n    uint256 public constant DIFF1_TARGET = 0xffff0000000000000000000000000000000000000000000000000000;\\n\\n    uint256 public constant RETARGET_PERIOD = 2 * 7 * 24 * 60 * 60;  // 2 weeks in seconds\\n    uint256 public constant RETARGET_PERIOD_BLOCKS = 2016;  // 2 weeks in blocks\\n\\n    enum BTCTypes {\\n        Unknown,            // 0x0\\n        CompactInt,         // 0x1\\n        ScriptSig,          // 0x2 - with length prefix\\n        Outpoint,           // 0x3\\n        TxIn,               // 0x4\\n        IntermediateTxIns,  // 0x5 - used in vin parsing\\n        Vin,                // 0x6\\n        ScriptPubkey,       // 0x7 - with length prefix\\n        PKH,                // 0x8 - the 20-byte payload digest\\n        WPKH,               // 0x9 - the 20-byte payload digest\\n        WSH,                // 0xa - the 32-byte payload digest\\n        SH,                 // 0xb - the 20-byte payload digest\\n        OpReturnPayload,    // 0xc\\n        TxOut,              // 0xd\\n        IntermediateTxOuts, // 0xe - used in vout parsing\\n        Vout,               // 0xf\\n        Header,             // 0x10\\n        HeaderArray,        // 0x11\\n        MerkleNode,         // 0x12\\n        MerkleStep,         // 0x13\\n        MerkleArray         // 0x14\\n    }\\n\\n    // TODO: any way to bubble up more info?\\n    // @notice             requires `memView` to be of a specified type\\n    // @param memView      a 29-byte view with a 5-byte type\\n    // @param t            the expected type (e.g. BTCTypes.Outpoint, BTCTypes.TxIn, etc)\\n    // @return             passes if it is the correct type, errors if not\\n    modifier typeAssert(bytes29 memView, BTCTypes t) {\\n        memView.assertType(uint40(t));\\n        _;\\n    }\\n\\n    // Revert with an error message re: non-minimal VarInts\\n    function revertNonMinimal(bytes29 ref) private pure returns (string memory) {\\n        (, uint256 g) = TypedMemView.encodeHex(ref.indexUint(0, uint8(ref.len())));\\n        string memory err = string(\\n            abi.encodePacked(\\n                \\\"Non-minimal var int. Got 0x\\\",\\n                uint144(g)\\n            )\\n        );\\n        revert(err);\\n    }\\n\\n    // @notice             reads a compact int from the view at the specified index\\n    // @param memView      a 29-byte view with a 5-byte type\\n    // @param _index       the index\\n    // @return             the compact int at the specified index\\n    function indexCompactInt(bytes29 memView, uint256 _index) public pure returns (uint64 number) {\\n        uint256 flag = memView.indexUint(_index, 1);\\n        if (flag <= 0xfc) {\\n            return uint64(flag);\\n        } else if (flag == 0xfd) {\\n            number = uint64(memView.indexLEUint(_index + 1, 2));\\n            if (compactIntLength(number) != 3) {revertNonMinimal(memView.slice(_index, 3, 0));}\\n        } else if (flag == 0xfe) {\\n            number = uint64(memView.indexLEUint(_index + 1, 4));\\n            if (compactIntLength(number) != 5) {revertNonMinimal(memView.slice(_index, 5, 0));}\\n        } else if (flag == 0xff) {\\n            number = uint64(memView.indexLEUint(_index + 1, 8));\\n            if (compactIntLength(number) != 9) {revertNonMinimal(memView.slice(_index, 9, 0));}\\n        }\\n    }\\n\\n    // @notice         gives the total length (in bytes) of a CompactInt-encoded number\\n    // @param number   the number as uint64\\n    // @return         the compact integer as uint8\\n    function compactIntLength(uint64 number) public pure returns (uint8) {\\n        if (number <= 0xfc) {\\n            return 1;\\n        } else if (number <= 0xffff) {\\n            return 3;\\n        } else if (number <= 0xffffffff) {\\n            return 5;\\n        } else {\\n            return 9;\\n        }\\n    }\\n\\n    // @notice             extracts the LE txid from an outpoint\\n    // @param _outpoint    the outpoint\\n    // @return             the LE txid\\n    function txidLE(bytes29 _outpoint) public pure typeAssert(_outpoint, BTCTypes.Outpoint) returns (bytes32) {\\n        return _outpoint.index(0, 32);\\n    }\\n\\n    // @notice             extracts the index as an integer from the outpoint\\n    // @param _outpoint    the outpoint\\n    // @return             the index\\n    function outpointIdx(bytes29 _outpoint) public pure typeAssert(_outpoint, BTCTypes.Outpoint) returns (uint32) {\\n        return uint32(_outpoint.indexLEUint(32, 4));\\n    }\\n\\n    // @notice          extracts the outpoint from an input\\n    // @param _input    the input\\n    // @return          the outpoint as a typed memory\\n    function outpoint(bytes29 _input) public pure typeAssert(_input, BTCTypes.TxIn) returns (bytes29) {\\n        return _input.slice(0, 36, uint40(BTCTypes.Outpoint));\\n    }\\n\\n    // @notice           extracts the script sig from an input\\n    // @param _input     the input\\n    // @return           the script sig as a typed memory\\n    function scriptSig(bytes29 _input) public pure typeAssert(_input, BTCTypes.TxIn) returns (bytes29) {\\n        uint64 scriptLength = indexCompactInt(_input, 36);\\n        return _input.slice(36, compactIntLength(scriptLength) + scriptLength, uint40(BTCTypes.ScriptSig));\\n    }\\n\\n    // @notice         extracts the sequence from an input\\n    // @param _input   the input\\n    // @return         the sequence\\n    function sequence(bytes29 _input) public pure typeAssert(_input, BTCTypes.TxIn) returns (uint32) {\\n        uint64 scriptLength = indexCompactInt(_input, 36);\\n        uint256 scriptEnd = 36 + compactIntLength(scriptLength) + scriptLength;\\n        return uint32(_input.indexLEUint(scriptEnd, 4));\\n    }\\n\\n    // @notice         determines the length of the first input in an array of inputs\\n    // @param _inputs  the vin without its length prefix\\n    // @return         the input length\\n    function inputLength(bytes29 _inputs) public pure typeAssert(_inputs, BTCTypes.IntermediateTxIns) returns (uint256) {\\n        uint64 scriptLength = indexCompactInt(_inputs, 36);\\n        return uint256(compactIntLength(scriptLength)) + uint256(scriptLength) + 36 + 4;\\n    }\\n\\n    // @notice         extracts the input at a specified index\\n    // @param _vin     the vin\\n    // @param _index   the index of the desired input\\n    // @return         the desired input\\n    function indexVin(bytes29 _vin, uint256 _index) public pure typeAssert(_vin, BTCTypes.Vin) returns (bytes29) {\\n        uint256 _nIns = uint256(indexCompactInt(_vin, 0));\\n        uint256 _viewLen = _vin.len();\\n        require(_index < _nIns, \\\"Vin read overrun\\\");\\n\\n        uint256 _offset = uint256(compactIntLength(uint64(_nIns)));\\n        bytes29 _remaining;\\n        for (uint256 _i = 0; _i < _index; _i += 1) {\\n            _remaining = _vin.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxIns));\\n            _offset += inputLength(_remaining);\\n        }\\n\\n        _remaining = _vin.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxIns));\\n        uint256 _len = inputLength(_remaining);\\n        return _vin.slice(_offset, _len, uint40(BTCTypes.TxIn));\\n    }\\n\\n    // @notice         extracts the raw LE bytes of the output value\\n    // @param _output  the output\\n    // @return         the raw LE bytes of the output value\\n    function valueBytes(bytes29 _output) public pure typeAssert(_output, BTCTypes.TxOut) returns (bytes8) {\\n        return bytes8(_output.index(0, 8));\\n    }\\n\\n    // @notice         extracts the value from an output\\n    // @param _output  the output\\n    // @return         the value\\n    // function value(bytes29 _output) internal pure typeAssert(_output, BTCTypes.TxOut) returns (uint64) {\\n    //     return uint64(_output.indexLEUint(0, 8));\\n    // }\\n    function value(bytes29 _output) public pure returns (uint64) {\\n        return uint64(_output.indexLEUint(0, 8));\\n    }\\n\\n    // @notice             extracts the scriptPubkey from an output\\n    // @param _output      the output\\n    // @return             the scriptPubkey\\n    function scriptPubkey(bytes29 _output) public pure typeAssert(_output, BTCTypes.TxOut) returns (bytes29) {\\n        uint64 scriptLength = indexCompactInt(_output, 8);\\n        return _output.slice(8, compactIntLength(scriptLength) + scriptLength, uint40(BTCTypes.ScriptPubkey));\\n    }\\n\\n    function scriptPubkeyBytes(bytes29 _output) public pure typeAssert(_output, BTCTypes.TxOut) returns (bytes32) {\\n        uint64 scriptLength = indexCompactInt(_output, 8);\\n        bytes29 scriptPubkeyView = _output.slice(8, compactIntLength(scriptLength) + scriptLength, uint40(BTCTypes.ScriptPubkey));\\n        return scriptPubkeyView.index(compactIntLength(scriptLength), uint8(scriptLength));\\n    }\\n\\n    // @notice             determines the length of the first output in an array of outputs\\n    // @param _outputs     the vout without its length prefix\\n    // @return             the output length\\n    function outputLength(bytes29 _outputs) public pure typeAssert(_outputs, BTCTypes.IntermediateTxOuts) returns (uint256) {\\n        uint64 scriptLength = indexCompactInt(_outputs, 8);\\n        return uint256(compactIntLength(scriptLength)) + uint256(scriptLength) + 8;\\n    }\\n\\n    // @notice         extracts the output at a specified index\\n    // @param _vout    the vout\\n    // @param _index   the index of the desired output\\n    // @return         the desired output\\n    // function indexVout(bytes29 _vout, uint256 _index) internal pure typeAssert(_vout, BTCTypes.Vout) returns (bytes29) {\\n    //     uint256 _nOuts = uint256(indexCompactInt(_vout, 0));\\n    //     uint256 _viewLen = _vout.len();\\n    //     require(_index < _nOuts, \\\"Vout read overrun\\\");\\n\\n    //     uint256 _offset = uint256(compactIntLength(uint64(_nOuts)));\\n    //     bytes29 _remaining;\\n    //     for (uint256 _i = 0; _i < _index; _i += 1) {\\n    //         _remaining = _vout.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxOuts));\\n    //         _offset += outputLength(_remaining);\\n    //     }\\n\\n    //     _remaining = _vout.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxOuts));\\n    //     uint256 _len = outputLength(_remaining);\\n    //     return _vout.slice(_offset, _len, uint40(BTCTypes.TxOut));\\n    // }\\n    function indexVout(bytes29 _vout, uint256 _index) public pure returns (bytes29) {\\n        uint256 _nOuts = uint256(indexCompactInt(_vout, 0));\\n        uint256 _viewLen = _vout.len();\\n        require(_index < _nOuts, \\\"Vout read overrun\\\");\\n\\n        uint256 _offset = uint256(compactIntLength(uint64(_nOuts)));\\n        bytes29 _remaining;\\n        for (uint256 _i = 0; _i < _index; _i += 1) {\\n            _remaining = _vout.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxOuts));\\n            _offset += outputLength(_remaining);\\n        }\\n\\n        _remaining = _vout.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxOuts));\\n        uint256 _len = outputLength(_remaining);\\n        return _vout.slice(_offset, _len, uint40(BTCTypes.TxOut));\\n    }\\n\\n    // @notice         extracts the Op Return Payload\\n    // @param _spk     the scriptPubkey\\n    // @return         the Op Return Payload (or null if not a valid Op Return output)\\n    function opReturnPayload(bytes29 _spk) public pure typeAssert(_spk, BTCTypes.ScriptPubkey) returns (bytes29) {\\n        uint64 _bodyLength = indexCompactInt(_spk, 0);\\n        uint64 _payloadLen = uint64(_spk.indexUint(3, 1));\\n\\n        // TODO: the max length of op return (with the prefixes) is 83, please check it for other consequences\\n        // Also the _spk.indexUint(3, 1) != _bodyLength - 3 has changed from _spk.indexUint(2, 1) != _bodyLength - 2\\n        if (_bodyLength > 83 || _bodyLength < 4 || _spk.indexUint(1, 1) != 0x6a || _spk.indexUint(3, 1) != _bodyLength - 3) {\\n            return TypedMemView.nullView();\\n        }\\n        // TODO: check, the previous starting index of slice was 3\\n        return _spk.slice(4, _payloadLen, uint40(BTCTypes.OpReturnPayload));\\n    }\\n\\n    // @notice         extracts the payload from a scriptPubkey\\n    // @param _spk     the scriptPubkey\\n    // @return         the payload (or null if not a valid PKH, SH, WPKH, or WSH output)\\n    function payload(bytes29 _spk) public pure typeAssert(_spk, BTCTypes.ScriptPubkey) returns (bytes29) {\\n        uint256 _spkLength = _spk.len();\\n        uint256 _bodyLength = indexCompactInt(_spk, 0);\\n        if (_bodyLength > 0x22 || _bodyLength < 0x16 || _bodyLength + 1 != _spkLength) {\\n            return TypedMemView.nullView();\\n        }\\n\\n        // Legacy\\n        if (_bodyLength == 0x19 && _spk.indexUint(0, 4) == 0x1976a914 && _spk.indexUint(_spkLength - 2, 2) == 0x88ac) {\\n            return _spk.slice(4, 20, uint40(BTCTypes.PKH));\\n        } else if (_bodyLength == 0x17 && _spk.indexUint(0, 3) == 0x17a914 && _spk.indexUint(_spkLength - 1, 1) == 0x87) {\\n            return _spk.slice(3, 20, uint40(BTCTypes.SH));\\n        }\\n\\n        // Witness v0\\n        if (_spk.indexUint(1, 1) == 0) {\\n            uint256 _payloadLen = _spk.indexUint(2, 1);\\n            if (_bodyLength != 0x22 && _bodyLength != 0x16 || _payloadLen != _bodyLength - 2) {\\n                return TypedMemView.nullView();\\n            }\\n            uint40 newType = uint40(_payloadLen == 0x20 ? BTCTypes.WSH : BTCTypes.WPKH);\\n            return _spk.slice(3, _payloadLen, newType);\\n        }\\n\\n        return TypedMemView.nullView();\\n    }\\n\\n    // @notice     (loosely) verifies an spk and converts to a typed memory\\n    // @dev        will return null in error cases. Will not check for disabled opcodes.\\n    // @param _spk the spk\\n    // @return     the typed spk (or null if error)\\n    function tryAsSPK(bytes29 _spk) public pure typeAssert(_spk, BTCTypes.Unknown) returns (bytes29) {\\n        if (_spk.len() == 0) {\\n            return TypedMemView.nullView();\\n        }\\n        uint64 _len = indexCompactInt(_spk, 0);\\n        if (_spk.len() == compactIntLength(_len) + _len) {\\n            return _spk.castTo(uint40(BTCTypes.ScriptPubkey));\\n        } else {\\n            return TypedMemView.nullView();\\n        }\\n    }\\n\\n    // @notice     verifies the vin and converts to a typed memory\\n    // @dev        will return null in error cases\\n    // @param _vin the vin\\n    // @return     the typed vin (or null if error)\\n    function tryAsVin(bytes29 _vin) public pure typeAssert(_vin, BTCTypes.Unknown) returns (bytes29) {\\n        if (_vin.len() == 0) {\\n            return TypedMemView.nullView();\\n        }\\n        uint64 _nIns = indexCompactInt(_vin, 0);\\n        uint256 _viewLen = _vin.len();\\n        if (_nIns == 0) {\\n            return TypedMemView.nullView();\\n        }\\n\\n        uint256 _offset = uint256(compactIntLength(_nIns));\\n        for (uint256 i = 0; i < _nIns; i++) {\\n            if (_offset >= _viewLen) {\\n                // We've reached the end, but are still trying to read more\\n                return TypedMemView.nullView();\\n            }\\n            bytes29 _remaining = _vin.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxIns));\\n            _offset += inputLength(_remaining);\\n        }\\n        if (_offset != _viewLen) {\\n            return TypedMemView.nullView();\\n        }\\n        return _vin.castTo(uint40(BTCTypes.Vin));\\n    }\\n\\n    // @notice         verifies the vout and converts to a typed memory\\n    // @dev            will return null in error cases\\n    // @param _vout    the vout\\n    // @return         the typed vout (or null if error)\\n    function tryAsVout(bytes29 _vout) public pure typeAssert(_vout, BTCTypes.Unknown) returns (bytes29) {\\n        if (_vout.len() == 0) {\\n            return TypedMemView.nullView();\\n        }\\n        uint64 _nOuts = indexCompactInt(_vout, 0);\\n\\n        uint256 _viewLen = _vout.len();\\n        if (_nOuts == 0) {\\n            return TypedMemView.nullView();\\n        }\\n\\n        uint256 _offset = uint256(compactIntLength(_nOuts));\\n        for (uint256 i = 0; i < _nOuts; i++) {\\n            if (_offset >= _viewLen) {\\n                // We've reached the end, but are still trying to read more\\n                return TypedMemView.nullView();\\n            }\\n            bytes29 _remaining = _vout.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxOuts));\\n            _offset += outputLength(_remaining);\\n        }\\n        if (_offset != _viewLen) {\\n            return TypedMemView.nullView();\\n        }\\n        return _vout.castTo(uint40(BTCTypes.Vout));\\n    }\\n\\n    // @notice         verifies the header and converts to a typed memory\\n    // @dev            will return null in error cases\\n    // @param _header  the header\\n    // @return         the typed header (or null if error)\\n    function tryAsHeader(bytes29 _header) public pure typeAssert(_header, BTCTypes.Unknown) returns (bytes29) {\\n        if (_header.len() != 80) {\\n            return TypedMemView.nullView();\\n        }\\n        return _header.castTo(uint40(BTCTypes.Header));\\n    }\\n\\n\\n    // @notice         Index a header array.\\n    // @dev            Errors on overruns\\n    // @param _arr     The header array\\n    // @param index    The 0-indexed location of the header to get\\n    // @return         the typed header at `index`\\n    function indexHeaderArray(bytes29 _arr, uint256 index) public pure typeAssert(_arr, BTCTypes.HeaderArray) returns (bytes29) {\\n        uint256 _start = index * (80);\\n        return _arr.slice(_start, 80, uint40(BTCTypes.Header));\\n    }\\n\\n\\n    // @notice     verifies the header array and converts to a typed memory\\n    // @dev        will return null in error cases\\n    // @param _arr the header array\\n    // @return     the typed header array (or null if error)\\n    function tryAsHeaderArray(bytes29 _arr) public pure typeAssert(_arr, BTCTypes.Unknown) returns (bytes29) {\\n        if (_arr.len() % 80 != 0) {\\n            return TypedMemView.nullView();\\n        }\\n        return _arr.castTo(uint40(BTCTypes.HeaderArray));\\n    }\\n\\n    // @notice     verifies the merkle array and converts to a typed memory\\n    // @dev        will return null in error cases\\n    // @param _arr the merkle array\\n    // @return     the typed merkle array (or null if error)\\n    function tryAsMerkleArray(bytes29 _arr) public pure typeAssert(_arr, BTCTypes.Unknown) returns (bytes29) {\\n        if (_arr.len() % 32 != 0) {\\n            return TypedMemView.nullView();\\n        }\\n        return _arr.castTo(uint40(BTCTypes.MerkleArray));\\n    }\\n\\n    // @notice         extracts the merkle root from the header\\n    // @param _header  the header\\n    // @return         the merkle root\\n    // function merkleRoot(bytes29 _header) internal pure typeAssert(_header, BTCTypes.Header) returns (bytes32) {\\n    //     return _header.index(36, 32);\\n    // }\\n\\n    function merkleRoot(bytes29 _header) public pure returns (bytes32) {\\n        return _header.index(36, 32);\\n    }\\n\\n    // @notice         extracts the target from the header\\n    // @param _header  the header\\n    // @return         the target\\n    function target(bytes29  _header) public pure typeAssert(_header, BTCTypes.Header) returns (uint256) {\\n        uint256 _mantissa = _header.indexLEUint(72, 3);\\n        require(_header.indexUint(75, 1) > 2, \\\"ViewBTC: invalid target difficulty\\\");\\n        uint256 _exponent = _header.indexUint(75, 1) - 3;\\n        return _mantissa * (256 ** _exponent);\\n    }\\n\\n    // @notice         calculates the difficulty from a target\\n    // @param _target  the target\\n    // @return         the difficulty\\n    function toDiff(uint256  _target) public pure returns (uint256) {\\n        return DIFF1_TARGET / (_target);\\n    }\\n\\n    // @notice         extracts the difficulty from the header\\n    // @param _header  the header\\n    // @return         the difficulty\\n    function diff(bytes29  _header) public pure typeAssert(_header, BTCTypes.Header) returns (uint256) {\\n        return toDiff(target(_header));\\n    }\\n\\n    // @notice         extracts the timestamp from the header\\n    // @param _header  the header\\n    // @return         the timestamp\\n    function time(bytes29  _header) public pure typeAssert(_header, BTCTypes.Header) returns (uint32) {\\n        return uint32(_header.indexLEUint(68, 4));\\n    }\\n\\n    // @notice         extracts the parent hash from the header\\n    // @param _header  the header\\n    // @return         the parent hash\\n    function parent(bytes29 _header) public pure typeAssert(_header, BTCTypes.Header) returns (bytes32) {\\n        return _header.index(4, 32);\\n    }\\n\\n    // @notice         calculates the Proof of Work hash of the header\\n    // @param _header  the header\\n    // @return         the Proof of Work hash\\n    function workHash(bytes29 _header) public view typeAssert(_header, BTCTypes.Header) returns (bytes32) {\\n        return _header.hash256();\\n    }\\n\\n    // @notice         calculates the Proof of Work hash of the header, and converts to an integer\\n    // @param _header  the header\\n    // @return         the Proof of Work hash as an integer\\n    function work(bytes29 _header) public view typeAssert(_header, BTCTypes.Header) returns (uint256) {\\n        return TypedMemView.reverseUint256(uint256(workHash(_header)));\\n    }\\n\\n    // @notice          Concatenates and hashes two inputs for merkle proving\\n    // @dev             Not recommended to call directly.\\n    // @param _a        The first hash\\n    // @param _b        The second hash\\n    // @return          The double-sha256 of the concatenated hashes\\n    function _merkleStep(bytes32 _a, bytes32 _b) public view returns (bytes32 digest) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            mstore(ptr, _a)\\n            mstore(add(ptr, 0x20), _b)\\n            pop(staticcall(gas(), 2, ptr, 0x40, ptr, 0x20)) // sha2 #1\\n            pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha2 #2\\n            digest := mload(ptr)\\n        }\\n    }\\n\\n    // @notice         verifies a merkle proof\\n    // @param _leaf    the leaf in LE format\\n    // @param _proof   the proof nodes in LE format\\n    // @param _root    the merkle root in BE format (same as the merkle root that is stored in the block header)\\n    // @param _index   the index\\n    // @return         true if valid, false if otherwise\\n    function checkMerkle(\\n        bytes32 _leaf,\\n        bytes29 _proof,\\n        bytes32 _root,\\n        uint256 _index\\n    ) public view returns (bool) {\\n        uint256 nodes = _proof.len() / 32;\\n        if (nodes == 0) {\\n            return _leaf == _root;\\n        }\\n\\n        uint256 _idx = _index;\\n        bytes32 _current = _leaf;\\n\\n        for (uint i = 0; i < nodes; i++) {\\n            bytes32 _next = _proof.index(i * 32, 32);\\n            if (_idx % 2 == 1) {\\n                _current = _merkleStep(_next, _current);\\n            } else {\\n                _current = _merkleStep(_current, _next);\\n            }\\n            _idx >>= 1;\\n        }\\n\\n        return revertBytes32(_current) == _root;\\n    }\\n\\n    function revertBytes32(bytes32 input) public pure returns(bytes32) {\\n        bytes memory temp;\\n        bytes32 result;\\n        for (uint i = 0; i < 32; i++) {\\n            temp = abi.encodePacked(temp, input[31-i]);\\n        }\\n        assembly {\\n            result := mload(add(temp, 32))\\n        }\\n        return result;\\n    }\\n    // @notice                 performs the bitcoin difficulty retarget\\n    // @dev                    implements the Bitcoin algorithm precisely\\n    // @param _previousTarget  the target of the previous period\\n    // @param _firstTimestamp  the timestamp of the first block in the difficulty period\\n    // @param _secondTimestamp the timestamp of the last block in the difficulty period\\n    // @return                 the new period's target threshold\\n    function retargetAlgorithm(\\n        uint256 _previousTarget,\\n        uint256 _firstTimestamp,\\n        uint256 _secondTimestamp\\n    ) public pure returns (uint256) {\\n        uint256 _elapsedTime = _secondTimestamp - _firstTimestamp;\\n\\n        // Normalize ratio to factor of 4 if very long or very short\\n        if (_elapsedTime < RETARGET_PERIOD / (4)) {\\n            _elapsedTime = RETARGET_PERIOD / (4);\\n        }\\n        if (_elapsedTime > RETARGET_PERIOD * (4)) {\\n            _elapsedTime = RETARGET_PERIOD * (4);\\n        }\\n\\n        /*\\n            NB: high targets e.g. ffff0020 can cause overflows here\\n                so we divide it by 256**2, then multiply by 256**2 later\\n                we know the target is evenly divisible by 256**2, so this isn't an issue\\n        */\\n        uint256 _adjusted = _previousTarget / (65536) * (_elapsedTime);\\n        return _adjusted.div(RETARGET_PERIOD) * (65536);\\n    }\\n}\"\n    },\n    \"contracts/libraries/SafeMath.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMath {\\n    function add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x, 'ds-math-add-overflow');\\n    }\\n\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\\n    }\\n\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\\n    }\\n    \\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b; //TODO: edit it\\n    }\\n}\"\n    },\n    \"contracts/routers/CCExchangeRouter.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/ICCExchangeRouter.sol\\\";\\nimport \\\"../connectors/interfaces/IExchangeConnector.sol\\\";\\nimport \\\"./interfaces/IInstantRouter.sol\\\";\\nimport \\\"../relay/interfaces/IBitcoinRelay.sol\\\";\\nimport \\\"../erc20/interfaces/ITeleBTC.sol\\\";\\nimport \\\"../lockers/interfaces/ILockers.sol\\\";\\nimport \\\"../libraries/TxHelper.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract CCExchangeRouter is ICCExchangeRouter, Ownable, ReentrancyGuard {\\n\\n    modifier nonZeroAddress(address _address) {\\n        require(_address != address(0), \\\"CCExchangeRouter: address is zero\\\");\\n        _;\\n    }\\n\\n    // Public variables\\n    uint public override startingBlockNumber;\\n    uint public override chainId;\\n    uint public override protocolPercentageFee; // A number between 0 to 10000\\n    address public override relay;\\n    address public override instantRouter;\\n    address public override lockers;\\n    address public override teleBTC;\\n    address public override treasury;\\n    mapping(uint => address) public override exchangeConnector; // mapping from app id to exchange connector address \\n\\n    // Private variables\\n    mapping(bytes32 => ccExchangeRequest) private ccExchangeRequests;\\n\\n    /// @notice                             Gives default params to initiate cc exchange router\\n    /// @param _startingBlockNumber         Requests that are included in a block older than _startingBlockNumber cannot be executed\\n    /// @param _protocolPercentageFee       Percentage amount of protocol fee (min: %0.01)\\n    /// @param _chainId                     Id of the underlying chain\\n    /// @param _relay                       The Relay address to validate data from source chain\\n    /// @param _lockers                     Lockers' contract address\\n    /// @param _teleBTC                     TeleportDAO BTC ERC20 token address\\n    /// @param _treasury                    Address of treasury that collects protocol fees\\n    constructor(\\n        uint _startingBlockNumber,\\n        uint _protocolPercentageFee,\\n        uint _chainId,\\n        address _lockers,\\n        address _relay,\\n        address _teleBTC,\\n        address _treasury\\n    ) {\\n        startingBlockNumber = _startingBlockNumber;\\n        protocolPercentageFee = _protocolPercentageFee;\\n        require(10000 >= _protocolPercentageFee, \\\"CCExchangeRouter: invalid percentage fee\\\");\\n        chainId = _chainId;\\n        relay = _relay;\\n        lockers = _lockers;\\n        teleBTC = _teleBTC;\\n        treasury = _treasury;\\n    }\\n\\n    /// @notice         Changes relay contract address\\n    /// @dev            Only owner can call this\\n    /// @param _relay   The new relay contract address\\n    function setRelay(address _relay) external override nonZeroAddress(_relay) onlyOwner {\\n        relay = _relay;\\n    }\\n\\n    /// @notice                 Changes instantRouter contract address\\n    /// @dev                    Only owner can call this\\n    /// @param _instantRouter   The new instantRouter contract address\\n    function setInstantRouter(address _instantRouter) external override nonZeroAddress(_instantRouter) onlyOwner {\\n        instantRouter = _instantRouter;\\n    }\\n\\n    /// @notice                 Changes lockers contract address\\n    /// @dev                    Only owner can call this\\n    /// @param _lockers         The new lockers contract address\\n    function setLockers(address _lockers) external override nonZeroAddress(_lockers) onlyOwner {\\n        lockers = _lockers;\\n    }\\n\\n    /// @notice                     Sets appId for an exchange connector\\n    /// @dev                        Only owner can call this. _exchangeConnector can be set to zero to inactive an app\\n    /// @param _appId               AppId of exchange connector\\n    /// @param _exchangeConnector   Address of exchange connector\\n    function setExchangeConnector(\\n        uint _appId, \\n        address _exchangeConnector\\n    ) external override onlyOwner {\\n        exchangeConnector[_appId] = _exchangeConnector;\\n        emit SetExchangeConnector(_appId, _exchangeConnector);\\n    }\\n\\n    /// @notice                 Changes teleBTC contract address\\n    /// @dev                    Only owner can call this\\n    /// @param _teleBTC         The new teleBTC contract address\\n    function setTeleBTC(address _teleBTC) external override nonZeroAddress(_teleBTC) onlyOwner {\\n        teleBTC = _teleBTC;\\n    }\\n\\n    /// @notice                             Setter for protocol percentage fee\\n    /// @dev                    Only owner can call this\\n    /// @param _protocolPercentageFee       Percentage amount of protocol fee\\n    function setProtocolPercentageFee(uint _protocolPercentageFee) external override onlyOwner {\\n        require(\\n            10000 >= _protocolPercentageFee,\\n            \\\"CCExchangeRouter: fee is out of range\\\"\\n        );\\n        protocolPercentageFee = _protocolPercentageFee;\\n    }\\n\\n    /// @notice                    Setter for treasury\\n    /// @dev                       Only owner can call this\\n    /// @param _treasury           Treasury address\\n    function setTreasury(address _treasury) external override nonZeroAddress(_treasury) onlyOwner {\\n        treasury = _treasury;\\n    }\\n\\n    /// @notice                             Check if the cc exchange request has been executed before\\n    /// @dev                                It prevents re-submitting an executed request\\n    /// @param _txId                        The transaction ID of request on source chain \\n    /// @return                             True if the cc exchange request has been already executed\\n    function isRequestUsed(bytes32 _txId) external view override returns (bool) {\\n        return ccExchangeRequests[_txId].isUsed ? true : false;\\n    }\\n\\n    /// @notice                     Executes a cross-chain exchange request after checking its merkle inclusion proof\\n    /// @dev                        Mints teleBTC for user if exchanging is not successful\\n    /// @param _version             Version of the transaction containing the user request\\n    /// @param _vin                 Inputs of the transaction containing the user request\\n    /// @param _vout                Outputs of the transaction containing the user request\\n    /// @param _locktime            Lock time of the transaction containing the user request\\n    /// @param _blockNumber         Height of the block containing the user request\\n    /// @param _intermediateNodes   Merkle inclusion proof for transaction containing the user request\\n    /// @param _index               Index of transaction containing the user request in the block\\n    /// @param _lockerScriptHash    Script hash of locker that user has sent BTC to it\\n    /// @return\\n    function ccExchange(\\n        bytes4 _version,\\n        bytes memory _vin,\\n        bytes calldata _vout,\\n        bytes4 _locktime,\\n        uint256 _blockNumber,\\n        bytes calldata _intermediateNodes,\\n        uint _index,\\n        address _lockerScriptHash\\n    ) external payable nonReentrant nonZeroAddress(_lockerScriptHash) override returns (bool) {\\n        require(_blockNumber >= startingBlockNumber, \\\"CCExchangeRouter: request is old\\\");\\n\\n        // Calculates transaction id\\n        bytes32 txId = TxHelper.calculateTxId(_version, _vin, _vout, _locktime);\\n\\n        // Checks that the request has not been processed before\\n        require(\\n            !ccExchangeRequests[txId].isUsed,\\n            \\\"CCExchangeRouter: the request has been used before\\\"\\n        );\\n\\n        require(_locktime == bytes4(0), \\\"CCExchangeRouter: lock time is non -zero\\\");\\n\\n        // Extracts information from the request\\n        _saveCCExchangeRequest(_lockerScriptHash, _vout, txId);\\n\\n        // Check if transaction has been confirmed on source chain\\n        require(\\n            _isConfirmed(\\n                txId,\\n                _blockNumber,\\n                _intermediateNodes,\\n                _index\\n            ),\\n            \\\"CCExchangeRouter: transaction has not been finalized on source chain yet\\\"\\n        );\\n\\n        // Normal cc exchange request\\n        if (ccExchangeRequests[txId].speed == 0) {\\n            require(\\n                _normalCCExchange(_lockerScriptHash, txId),\\n                \\\"CCExchangeRouter: normal cc exchange was not successful\\\"\\n            );\\n            return true;\\n        } else {\\n            // Pay back instant loan (ccExchangeRequests[txId].speed == 1)\\n            require(\\n                _payBackInstantLoan(_lockerScriptHash, txId),\\n                \\\"CCExchangeRouter: paying back instant loan was not successful\\\"\\n            );\\n            return true;\\n        }\\n    }\\n\\n    /// @notice                          Executes a normal cross-chain exchange request\\n    /// @dev                             Mints teleBTC for user if exchanging is not successful\\n    /// @param _lockerScriptHash         Locker's script hash    \\n    /// @param _txId                     Id of the transaction containing the user request\\n    /// @return                          True if exchanging is successful\\n    function _normalCCExchange(address _lockerScriptHash, bytes32 _txId) private returns (bool) {\\n        // Gets remained amount after reducing fees\\n        uint remainedInputAmount = _mintAndReduceFees(_lockerScriptHash, _txId);\\n\\n        bool result;\\n        uint[] memory amounts;\\n\\n        // Gets exchnage connector address\\n        address _exchangeConnector = exchangeConnector[ccExchangeRequests[_txId].appId];\\n\\n        if (_exchangeConnector != address(0)) {\\n            // Gives allowance to exchange connector to transfer from cc exchange router\\n            ITeleBTC(teleBTC).approve(\\n                _exchangeConnector,\\n                remainedInputAmount\\n            );\\n            // Exchanges minted teleBTC for output token\\n            (result, amounts) = IExchangeConnector(_exchangeConnector).swap(\\n                remainedInputAmount,\\n                ccExchangeRequests[_txId].outputAmount,\\n                ccExchangeRequests[_txId].path,\\n                ccExchangeRequests[_txId].recipientAddress,\\n                ccExchangeRequests[_txId].deadline,\\n                ccExchangeRequests[_txId].isFixedToken\\n            );\\n        } else {\\n            result = false;\\n        }\\n\\n        if (result) {\\n            // Emits CCExchange if exchange was successful\\n            emit CCExchange(\\n                ccExchangeRequests[_txId].recipientAddress,\\n                ccExchangeRequests[_txId].path[0],\\n                ccExchangeRequests[_txId].path[ccExchangeRequests[_txId].path.length-1],\\n                remainedInputAmount,\\n                amounts[amounts.length-1],\\n                ccExchangeRequests[_txId].speed,\\n                msg.sender, // Teleporter address\\n                ccExchangeRequests[_txId].fee\\n            );\\n        } else {\\n            // Revokes allowance\\n            ITeleBTC(teleBTC).approve(\\n                _exchangeConnector,\\n                0\\n            );\\n            \\n            // Sends teleBTC to recipient if exchange was unsuccessful\\n            ITeleBTC(teleBTC).transfer(\\n                ccExchangeRequests[_txId].recipientAddress,\\n                remainedInputAmount\\n            );\\n\\n            emit FailedCCExchange(\\n                ccExchangeRequests[_txId].recipientAddress,\\n                remainedInputAmount\\n            );\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @notice                        Executes an instant cross-chain exchange request\\n    /// @dev                           Mints teleBTC for instant router to pay back loan\\n    /// @param _lockerScriptHash       Locker's script hash\\n    /// @param _txId                   Id of the transaction containing the user request\\n    /// @return                        True if paying back loan is successful\\n    function _payBackInstantLoan(address _lockerScriptHash, bytes32 _txId) private returns (bool) {\\n        // Gets remained amount after reducing fees\\n        uint remainedAmount = _mintAndReduceFees(_lockerScriptHash, _txId);\\n\\n        // Gives allowance to instant router to transfer minted teleBTC\\n        ITeleBTC(teleBTC).approve(\\n            instantRouter,\\n            remainedAmount\\n        );\\n\\n        // Pays back instant loan\\n        IInstantRouter(instantRouter).payBackLoan(\\n            ccExchangeRequests[_txId].recipientAddress,\\n            remainedAmount\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @notice                             Parses and saves the request\\n    /// @dev                                Checks that user has sent BTC to a valid locker\\n    /// @param _lockerScriptHash            Locker's script hash\\n    /// @param _vout                        The outputs of the tx\\n    /// @param _txId                        The txID of the request\\n    function _saveCCExchangeRequest(\\n        address _lockerScriptHash,\\n        bytes memory _vout,\\n        bytes32 _txId\\n    ) private {\\n\\n        // Checks that given script hash is locker\\n        require(\\n            ILockers(lockers).isLocker(_lockerScriptHash),\\n            \\\"CCExchangeRouter: no locker with give script hash exists\\\"\\n        );\\n\\n        // Extracts value and opreturn data from request\\n        ccExchangeRequest memory request; // Defines it to save gas\\n        bytes memory arbitraryData;\\n        (request.inputAmount, arbitraryData) = TxHelper.parseValueAndData(_vout, _lockerScriptHash);\\n\\n        // Checks that input amount is not zero\\n        require(request.inputAmount > 0, \\\"CCExchangeRouter: input amount is zero\\\");\\n\\n        // Checks that the request belongs to this chain\\n        require(chainId == TxHelper.parseChainId(arbitraryData), \\\"CCExchangeRouter: chain id is not correct\\\");\\n        request.appId = TxHelper.parseAppId(arbitraryData);\\n        \\n        address exchangeToken = TxHelper.parseExchangeToken(arbitraryData);\\n        require(\\n            exchangeToken != address(0), \\n            \\\"CCExchangeRouter: no exchange token\\\"\\n        );\\n        request.outputAmount = TxHelper.parseExchangeOutputAmount(arbitraryData);\\n\\n        if (TxHelper.parseIsFixedToken(arbitraryData) == 0) {\\n            request.isFixedToken = false ;\\n        } else {\\n            request.isFixedToken = true ;\\n        }\\n\\n        request.recipientAddress = TxHelper.parseRecipientAddress(arbitraryData);\\n\\n        // note: we assume that the path length is two\\n        address[] memory thePath = new address[](2);\\n        thePath[0] = teleBTC;\\n        thePath[1] = exchangeToken;\\n        request.path = thePath;\\n\\n        request.deadline = TxHelper.parseDeadline(arbitraryData);\\n\\n        // Calculates fee\\n        uint percentageFee = TxHelper.parsePercentageFee(arbitraryData);\\n        require(percentageFee < 10000, \\\"CCExchangeRouter: percentage fee is not correct\\\");\\n        request.fee = percentageFee*request.inputAmount/10000;\\n\\n        request.speed = TxHelper.parseSpeed(arbitraryData);\\n        require(request.speed == 0 || request.speed == 1, \\\"CCExchangeRouter: speed is not correct\\\");\\n\\n        request.isUsed = true;\\n\\n        // Saves request\\n        ccExchangeRequests[_txId] = request;\\n    }\\n\\n    /// @notice                             Checks if tx has been finalized on source chain\\n    /// @dev                                Pays relay fee using included ETH in the transaction\\n    /// @param _txId                        The request tx\\n    /// @param _blockNumber                 The block number of the tx\\n    /// @param _intermediateNodes           Merkle proof for tx\\n    /// @param _index                       Index of tx in the block\\n    /// @return                             True if the tx is finalized on the source chain\\n    function _isConfirmed(\\n        bytes32 _txId,\\n        uint256 _blockNumber,\\n        bytes memory _intermediateNodes,\\n        uint _index\\n    ) private returns (bool) {\\n        // Finds fee amount\\n        uint feeAmount = IBitcoinRelay(relay).getBlockHeaderFee(_blockNumber, 0);\\n        require(msg.value >= feeAmount, \\\"CCExchangeRouter: relay fee is not sufficient\\\");\\n\\n        // Calls relay contract\\n        bytes memory data = Address.functionCallWithValue(\\n            relay,\\n            abi.encodeWithSignature(\\n                \\\"checkTxProof(bytes32,uint256,bytes,uint256)\\\",\\n                _txId,\\n                _blockNumber,\\n                _intermediateNodes,\\n                _index\\n            ),\\n            feeAmount\\n        );\\n\\n        // Sends extra ETH back to msg.sender\\n        Address.sendValue(payable(msg.sender), msg.value - feeAmount);\\n\\n        return abi.decode(data, (bool));\\n    }\\n\\n    /// @notice                       Mints teleBTC by calling lockers contract\\n    /// @param _lockerScriptHash      Locker's script hash\\n    /// @param _txId                  The transaction ID of the request\\n    /// @return _remainedAmount       Amount of teleBTC that user receives after reducing all fees (protocol, locker, teleporter)\\n    function _mintAndReduceFees(\\n        address _lockerScriptHash,\\n        bytes32 _txId\\n    ) private returns (uint _remainedAmount) {\\n\\n        // Mints teleBTC for cc exchange router\\n        uint mintedAmount = ILockers(lockers).mint(\\n            _lockerScriptHash,\\n            address(this),\\n            ccExchangeRequests[_txId].inputAmount\\n        );\\n\\n        // Calculates fees\\n        uint protocolFee = ccExchangeRequests[_txId].inputAmount*protocolPercentageFee/10000;\\n        uint teleporterFee = ccExchangeRequests[_txId].fee;\\n\\n        // Pays Teleporter fee\\n        if (teleporterFee > 0) {\\n            ITeleBTC(teleBTC).transfer(msg.sender, teleporterFee);\\n        }\\n\\n        // Pays protocol fee\\n        if (protocolFee > 0) {\\n            ITeleBTC(teleBTC).transfer(treasury, protocolFee);\\n        }\\n\\n        _remainedAmount = mintedAmount - protocolFee - teleporterFee;\\n    }\\n}\\n\"\n    },\n    \"contracts/routers/interfaces/ICCExchangeRouter.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICCExchangeRouter {\\n    // Structures\\n\\n    /// @notice                    Structure for recording cross-chain exchange requests\\n    /// @param appId               Application id that user wants to use (defines the exchange that user wants to use)\\n    /// @param inputAmount         Amount of locked BTC on source chain\\n    /// @param outputAmount        Amount of output token\\n    /// @param isFixedToken        True if amount of input token is fixed\\n    /// @param recipientAddress    Address of exchange recipient\\n    /// @param fee                 Amount of fee that is paid to Teleporter (tx, relayer and teleporter fees)\\n    /// @param isUsed              Whether the tx is used or not\\n    /// @param path                Path from input token to output token\\n    /// @param deadline            Deadline of exchanging tokens\\n    /// @param speed               Speed of the request (normal or instant)\\n    struct ccExchangeRequest {\\n        uint appId;\\n        uint inputAmount;\\n        uint outputAmount;\\n        bool isFixedToken;\\n        address recipientAddress;\\n        uint fee;\\n        bool isUsed;\\n        address[] path;\\n        uint deadline;\\n        uint speed;\\n    }\\n\\n    // Events\\n\\n    /// @notice                     Emits when a cc exchange request gets done\\n    /// @param user                 Exchange recipient address\\n    /// @param inputToken           Input token (teleBTC)\\n    /// @param outputToken          Output token\\n    /// @param inputAmount          Amount of locked tokens on the source chain\\n    /// @param outputAmount         Amount of exchange token that user received\\n    /// @param speed                Speed of the request (normal or instant)\\n    /// @param teleporter          Address of teleporter who submitted the request\\n    /// @param teleporterFee        Amount of fee that is paid to Teleporter (tx, relayer and teleporter fees)\\n    event CCExchange(\\n        address indexed user,\\n        address inputToken,\\n        address indexed outputToken,\\n        uint inputAmount,\\n        uint outputAmount,\\n        uint indexed speed,\\n        address teleporter,\\n        uint teleporterFee\\n    );\\n\\n    /// @notice                     Emits when a cc exchange request fails\\n    /// @dev                        In this case, instead of excahnging tokens,\\n    ///                             we mint teleBTC and send it to the user\\n    /// @param recipientAddress     Exchange recipient address\\n    /// @param remainedInputAmount  Amount of teleBTC that transferred to the user\\n    event FailedCCExchange(\\n        address recipientAddress,\\n        uint remainedInputAmount\\n    );\\n\\n    /// @notice                      Emits when appId for an exchange connector is set\\n    /// @param appId                 Assigned application id to exchange\\n    /// @param exchangeConnector     Address of exchange connector contract\\n    event SetExchangeConnector(\\n        uint appId,\\n        address exchangeConnector\\n    );\\n\\n    // Read-only functions\\n    \\n    function startingBlockNumber() external view returns (uint);\\n\\n    function protocolPercentageFee() external view returns (uint);\\n    \\n    function chainId() external view returns (uint);\\n\\n    function relay() external view returns (address);\\n\\n    function instantRouter() external view returns (address);\\n\\n    function lockers() external view returns (address);\\n\\n    function teleBTC() external view returns (address);\\n\\n    function isRequestUsed(bytes32 _txId) external view returns (bool);\\n\\n    function exchangeConnector(uint appId) external view returns (address);\\n\\n    function treasury() external view returns (address);\\n\\n    // State-changing functions\\n\\n    function setRelay(address _relay) external;\\n\\n    function setInstantRouter(address _instantRouter) external;\\n\\n    function setLockers(address _lockers) external;\\n\\n    function setTeleBTC(address _teleBTC) external;\\n\\n    function setExchangeConnector(uint _appId, address _exchangeConnector) external;\\n\\n\\tfunction setTreasury(address _treasury) external;\\n\\n\\tfunction setProtocolPercentageFee(uint _protocolPercentageFee) external;\\n\\n    function ccExchange(\\n        // Bitcoin tx\\n        bytes4 version,\\n        bytes memory vin,\\n        bytes calldata vout,\\n        bytes4 locktime,\\n        // Bitcoin block number\\n        uint256 blockNumber,\\n        // Merkle proof\\n        bytes calldata intermediateNodes,\\n        uint index,\\n        address lockerBitcoinDecodedAddress\\n    ) external payable returns(bool);\\n}\"\n    },\n    \"contracts/routers/CCBurnRouter.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../libraries/TxHelper.sol\\\";\\nimport \\\"./interfaces/ICCBurnRouter.sol\\\";\\nimport \\\"../erc20/interfaces/ITeleBTC.sol\\\";\\nimport \\\"../relay/interfaces/IBitcoinRelay.sol\\\";\\nimport \\\"../lockers/interfaces/ILockers.sol\\\";\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract CCBurnRouter is ICCBurnRouter, Ownable, ReentrancyGuard {\\n    address public override relay;\\n    address public override lockers;\\n    address public override teleBTC;\\n    address public override treasury;\\n    mapping(address => burnRequest[]) public burnRequests;\\n    mapping(bytes32 => bool) private isPaid;\\n    uint public override transferDeadline;\\n    uint public override protocolPercentageFee; // min amount is %0.01\\n    uint public override slasherPercentageReward; // min amount is %1\\n    uint public override bitcoinFee;\\n\\n    /// @notice                             Handles cross-chain burn requests\\n    /// @dev                                Lockers use this contract for coordinating of burning wrapped tokens\\n    /// @param _relay                       Address of relay contract\\n    /// @param _lockers                     Address of lockers contract\\n    /// @param _treasury                    Address of the treasury of the protocol\\n    /// @param _transferDeadline            Dealine of sending BTC to user\\n    /// @param _protocolPercentageFee       Percentage of tokens that user pays to protocol for burning\\n    /// @param _bitcoinFee                  Transaction fee on Bitcoin that lockers pay\\n    constructor(\\n        address _relay,\\n        address _lockers,\\n        address _treasury,\\n        uint _transferDeadline,\\n        uint _protocolPercentageFee,\\n        uint _slasherPercentageReward,\\n        uint _bitcoinFee\\n    ) {\\n        relay = _relay;\\n        lockers = _lockers;\\n        treasury = _treasury;\\n        transferDeadline = _transferDeadline;\\n        protocolPercentageFee = _protocolPercentageFee;\\n        slasherPercentageReward = _slasherPercentageReward;\\n        bitcoinFee = _bitcoinFee;\\n    }\\n\\n    /// @notice                         Shows if a burn request has been done or not\\n    /// @param _lockerTargetAddress\\t\\tLocker's address on the target chain\\n    /// @param _index                   The index number of the request for the locker\\n    function isTransferred(address _lockerTargetAddress, uint _index) external view override returns (bool) {\\n        return burnRequests[_lockerTargetAddress][_index].isTransferred;\\n    }\\n\\n    /// @notice               Changes relay contract address\\n    /// @dev                  Only owner can call this\\n    /// @param _relay         The new relay contract address\\n    function setRelay(address _relay) external override onlyOwner {\\n        relay = _relay;\\n    }\\n\\n    /// @notice               Changes lockers contract address\\n    /// @dev                  Only owner can call this\\n    /// @param _lockers       The new lockers contract address\\n    function setLockers(address _lockers) external override onlyOwner {\\n        lockers = _lockers;\\n    }\\n\\n    /// @notice                 Changes wrapped token contract address\\n    /// @dev                    Only owner can call this\\n    /// @param _teleBTC         The new wrapped token contract address\\n    function setTeleBTC(address _teleBTC) external override onlyOwner {\\n        teleBTC = _teleBTC;\\n    }\\n\\n    /// @notice                     Changes protocol treasury address\\n    /// @dev                        Only owner can call this\\n    /// @param _treasury            The new treasury address\\n    function setTreasury(address _treasury) external override onlyOwner {\\n        treasury = _treasury;\\n    }\\n\\n    /// @notice                             Changes deadline for sending tokens\\n    /// @dev                                Only owner can call this\\n    /// @param _transferDeadline            The new transfer deadline\\n    function setTransferDeadline(uint _transferDeadline) external override onlyOwner {\\n        transferDeadline = _transferDeadline;\\n    }\\n\\n    /// @notice                             Changes protocol percentage fee for burning tokens\\n    /// @dev                                Only owner can call this\\n    /// @param _protocolPercentageFee       The new protocol percentage fee\\n    function setProtocolPercentageFee(uint _protocolPercentageFee) external override onlyOwner {\\n        protocolPercentageFee = _protocolPercentageFee;\\n    }\\n\\n    /// @notice                            Changes slasher percentage reward for disputing lockers\\n    /// @dev                               Only owner can call this\\n    /// @param _slasherPercentageReward    The new slasher percentage reward\\n    function setSlasherPercentageReward(uint _slasherPercentageReward) external override onlyOwner {\\n        slasherPercentageReward = _slasherPercentageReward;\\n    }\\n\\n    /// @notice                       Changes Bitcoin transaction fee\\n    /// @dev                          Only owner can call this\\n    /// @param _bitcoinFee            The new Bitcoin transaction fee\\n    function setBitcoinFee(uint _bitcoinFee) external override onlyOwner {\\n        bitcoinFee = _bitcoinFee;\\n    }\\n\\n    /// @notice                             Burns wrapped tokens and records the burn request\\n    /// @dev                                After submitting the burn request, lockers have a limited time to send BTC\\n    /// @param _amount                      Amount of wrapped tokens that user wants to burn\\n    /// @param _userPubKeyHash   Address of user on Bitcoin\\n    /// @param _isScriptHash   \\t\\t        Whether the user's Bitcoin address is script hash or pubKey hash\\n    /// @param _isSegwit\\t\\t\\t   \\t    Whether the user's Bitcoin address is Segwit or nonSegwit\\n    /// @param _lockerScriptHash\\tLocker's address on Bitcoin\\n    /// @return                             True if request is recorded successfully\\n    function ccBurn(\\n        uint _amount,\\n        address _userPubKeyHash,\\n        bool _isScriptHash,\\n        bool _isSegwit,\\n        address _lockerScriptHash\\n    ) external nonReentrant override returns (bool) {\\n        // Checks if the locker address is valid\\n        require(\\n            ILockers(lockers).isLocker(_lockerScriptHash),\\n            \\\"CCBurnRouter: locker address is not valid\\\"\\n        );\\n\\n        // Transfers users's teleBTC\\n        ITeleBTC(teleBTC).transferFrom(msg.sender, address(this), _amount);\\n\\n        uint remainedAmount = _getFee(\\n            _amount,\\n            ILockers(lockers).getLockerTargetAddress(_lockerScriptHash)\\n        );\\n\\n        // Burns remained wrapped tokens\\n        ITeleBTC(teleBTC).approve(lockers, remainedAmount);\\n        uint burntAmount = ILockers(lockers).burn(_lockerScriptHash, remainedAmount);\\n\\n        // Get the target address of the locker from its Bitcoin address\\n        address _lockerTargetAddress = ILockers(lockers)\\n        .getLockerTargetAddress(_lockerScriptHash);\\n\\n        _saveBurnRequest(\\n            _amount,\\n            burntAmount,\\n            _userPubKeyHash,\\n            _isScriptHash,\\n            _isSegwit,\\n            IBitcoinRelay(relay).lastSubmittedHeight(),\\n            _lockerTargetAddress\\n        );\\n\\n        emit CCBurn(\\n            msg.sender,\\n            _userPubKeyHash,\\n            _isScriptHash,\\n            _isSegwit,\\n            _amount,\\n            burntAmount,\\n            _lockerTargetAddress,\\n            burnRequests[_lockerTargetAddress].length - 1, // index\\n            burnRequests[_lockerTargetAddress][burnRequests[_lockerTargetAddress].length - 1].deadline\\n        );\\n        return true;\\n    }\\n\\n    /// @notice                             Checks the correctness of burn proof\\n    /// @dev                                Makes isTransferred flag true for the paid requests\\n    /// @param _version                     Version of the transaction containing the burn transaction\\n    /// @param _vin                         Inputs of the transaction containing the burn transaction\\n    /// @param _vout                        Outputs of the transaction containing the burn transaction\\n    /// @param _locktime                    Lock time of the transaction containing the burn transaction\\n    /// @param _blockNumber                 Height of the block containing the burn transaction\\n    /// @param _intermediateNodes           Merkle inclusion proof for transaction containing the burn transaction\\n    /// @param _index                       Index of transaction containing the burn transaction in the block\\n    /// @param _lockerScriptHash Locker's address on Bitcoin that this burn request belongs to\\n    /// @param _startIndex                  Index to start searching for unpaid burn requests in the list\\n    /// @param _endIndex                    Index to finish searching for unpaid burn requests in the list\\n    /// @return\\n    function burnProof(\\n        bytes4 _version,\\n        bytes memory _vin,\\n        bytes calldata _vout,\\n        bytes4 _locktime,\\n        uint256 _blockNumber,\\n        bytes calldata _intermediateNodes,\\n        uint _index,\\n        address _lockerScriptHash,\\n        uint _startIndex,\\n        uint _endIndex\\n    ) external payable nonReentrant override returns (bool) {\\n        // Get the target address of the locker from its script hash\\n        address _lockerTargetAddress = ILockers(lockers)\\n        .getLockerTargetAddress(_lockerScriptHash);\\n\\n        // Checks the correctness of input indices\\n        require(\\n            _endIndex < burnRequests[_lockerTargetAddress].length &&\\n            _startIndex<= _endIndex,\\n            'CCBurnRouter: burnProof wrong index input'\\n        );\\n\\n        // Checks if the locker address is valid\\n        require(\\n            ILockers(lockers).isLocker(_lockerScriptHash),\\n            \\\"CCBurnRouter: locker address is not valid\\\"\\n        );\\n\\n        // Checks inclusion of transaction\\n        bytes32 txId = _calculateTxId(_version, _vin, _vout, _locktime);\\n        require(\\n            _isConfirmed(\\n                txId,\\n                _blockNumber,\\n                _intermediateNodes,\\n                _index\\n            ),\\n            \\\"CCBurnRouter: transaction has not finalized yet\\\"\\n        );\\n\\n        // Checks the paid burn requests\\n        uint paidOutputCounter = _checkPaidBurnRequests(\\n            _lockerTargetAddress,\\n            _vout,\\n            _startIndex,\\n            _endIndex\\n        );\\n\\n        // Checks if there is an output that goes back to the locker\\n        _updateIsPaid(paidOutputCounter, _vout, _lockerScriptHash, txId);\\n\\n        return true;\\n    }\\n\\n    /// @notice                             Slashes lockers if they did not paid burn request before its deadline\\n    /// @dev\\n    /// @param _lockerScriptHash locker's Bitcoin address that the unpaid request belongs to\\n    /// @param _indices                     Array of indices of the requests for that locker\\n    /// @return                             True if dispute is successfull\\n    function disputeBurn(address _lockerScriptHash, uint[] memory _indices) external nonReentrant override returns (bool) {\\n        // Checks if the locker address is valid\\n        require(ILockers(lockers).isLocker(_lockerScriptHash),\\n            \\\"CCBurnRouter: locker address is not valid\\\");\\n        // Get the target address of the locker from its Bitcoin address\\n        address _lockerTargetAddress = ILockers(lockers)\\n        .getLockerTargetAddress(_lockerScriptHash);\\n        // Goes through provided indexes of burn requests to see if locker should be slashed\\n        for (uint i = 0; i < _indices.length; i++) {\\n            require(\\n                !burnRequests[_lockerTargetAddress][_indices[i]].isTransferred,\\n                \\\"CCBurnRouter: request has been paid before\\\"\\n            );\\n            require(\\n                burnRequests[_lockerTargetAddress][_indices[i]].deadline < IBitcoinRelay(relay).lastSubmittedHeight(),\\n                \\\"CCBurnRouter: payback deadline has not passed yet\\\"\\n            );\\n\\n            // Slashes locker and sends the slashed amount to the user\\n            ILockers(lockers).slashLocker(\\n                _lockerTargetAddress,\\n                burnRequests[_lockerTargetAddress][_indices[i]].amount*slasherPercentageReward/100, // Slasher reward\\n                msg.sender, // Slasher address\\n                burnRequests[_lockerTargetAddress][_indices[i]].amount,\\n                burnRequests[_lockerTargetAddress][_indices[i]].sender\\n            );\\n        }\\n        return true;\\n    }\\n\\n    /// @notice                                 Slashes a locker if they issue a tx that doesn't match any burn request\\n    /// @dev\\n    /// @param _lockerScriptHash                Suspicious locker's script hash\\n    /// @param _inputIndex                      Index of the input in vin that is from the locker\\n    /// @param _version                         Version of the malicious transaction\\n    /// @param _vin                             Inputs of the malicious transaction\\n    /// @param _vout                            Outputs of the malicious transaction\\n    /// @param _locktime                        Lock time of the malicious transaction\\n    /// @param _blockNumber                     The block number in which the malicious tx has happened\\n    /// @param _intermediateNodes               Merkle inclusion proof for the malicious transaction\\n    /// @param _index                           Index of transaction containing the malicious tx\\n    /// @return                                 True if dispute is successfull\\n    function disputeLocker(\\n        address _lockerScriptHash,\\n        uint _inputIndex,\\n        bytes4 _version,\\n        bytes memory _vin,\\n        bytes calldata _vout,\\n        bytes4 _locktime,\\n        uint256 _blockNumber,\\n        bytes calldata _intermediateNodes,\\n        uint _index\\n    ) external payable nonReentrant override returns (bool) {\\n        // Checks if the locker address is valid\\n        require(\\n            ILockers(lockers).isLocker(_lockerScriptHash),\\n            \\\"CCBurnRouter: locker address is not valid\\\"\\n        );\\n\\n        // Checks if the provided transaction is valid:\\n        // 1. Checks inclusion of transaction\\n        bytes32 txId = _calculateTxId(_version, _vin, _vout, _locktime);\\n        require(\\n            _isConfirmed(\\n                txId,\\n                _blockNumber,\\n                _intermediateNodes,\\n                _index\\n            ),\\n            \\\"CCBurnRouter: transaction is not finalized\\\"\\n        );\\n\\n        // 2. Check if the transaction belongs to the locker\\n        // First get the target address of the locker from its Bitcoin address\\n        address _lockerTargetAddress = ILockers(lockers)\\n        .getLockerTargetAddress(_lockerScriptHash);\\n        bytes memory lockerRedeemScript = ILockers(lockers)\\n        .getLockerRedeemScript(_lockerTargetAddress);\\n        require(\\n            _isTxFromLocker(_vin, _inputIndex, lockerRedeemScript),\\n            \\\"CCBurnRouter: transaction doesn't belong to locker\\\"\\n        );\\n\\n        // 3. Check if transaction is not for any burn request\\n        // note: if the deadline for the transaction has passed and no proof has been provided\\n        // for it so that isPaid is still false for it, we assume the transaction was malicious\\n        require(\\n            !isPaid[txId],\\n            \\\"CCBurnRouter: transaction has been paid before\\\"\\n        );\\n        require(\\n            IBitcoinRelay(relay).lastSubmittedHeight() > (transferDeadline + _blockNumber),\\n            \\\"CCBurnRouter: payback deadline has not passed yet\\\"\\n        );\\n\\n        // Finds total outputs value\\n        uint totalValue = TxHelper.parseTotalValue(_vout);\\n\\n        // Slashes locker\\n        ILockers(lockers).slashLocker(\\n            _lockerTargetAddress,\\n            totalValue*slasherPercentageReward/100, // Slasher reward\\n            msg.sender, // Slasher address\\n            totalValue,\\n            lockers\\n        );\\n\\n        // Emit the event\\n        emit LockerDispute(\\n            _lockerTargetAddress,\\n            _blockNumber,\\n            txId\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @notice                             Checks the burn requests that get paid by this transaction\\n    /// @dev                                Counts the number of outputs that are paying a burn request\\n    /// @param _lockerTargetAddress         Address of the locker on the target chain\\n    /// @param _vout                        Outputs of a transaction\\n    /// @param _startIndex                  Index to start searching for unpaid burn requests in the list\\n    /// @param _endIndex                    Index to finish searching for unpaid burn requests in the list\\n    /// @return                             paidOutputCounter that is the number of the outputs that paid a burn request\\n    function _checkPaidBurnRequests(\\n        address _lockerTargetAddress,\\n        bytes memory _vout,\\n        uint _startIndex,\\n        uint _endIndex\\n    ) internal returns (uint paidOutputCounter) {\\n        uint parsedAmount;\\n        // Below variable is for checking that every output in vout is related to a burn request\\n        // so that we can set isPaid = true for the whole txId\\n        paidOutputCounter = 0;\\n        for (uint i = _startIndex; i <= _endIndex; i++) {\\n            // Checks that the request has not been paid and its deadline has not passed\\n            if (\\n                !burnRequests[_lockerTargetAddress][i].isTransferred &&\\n            burnRequests[_lockerTargetAddress][i].deadline >= block.number\\n            ) {\\n                (parsedAmount,) = TxHelper.parseValueAndData(\\n                    _vout,\\n                    burnRequests[_lockerTargetAddress][i].userPubKeyHash\\n                );\\n\\n                if (burnRequests[_lockerTargetAddress][i].remainedAmount == parsedAmount) {\\n                    burnRequests[_lockerTargetAddress][i].isTransferred = true;\\n                    paidOutputCounter = paidOutputCounter + 1;\\n                    emit PaidCCBurn(\\n                        burnRequests[_lockerTargetAddress][i].sender,\\n                        burnRequests[_lockerTargetAddress][i].userPubKeyHash,\\n                        parsedAmount,\\n                        _lockerTargetAddress,\\n                        i\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice                                 Checks if all outputs of the transaction paid a burn request\\n    /// @dev                                    One output might return the remaining value to the locker\\n    /// @param _paidOutputCounter               Number of the outputs that pay a burn request\\n    /// @param _vout                            Outputs of a transaction\\n    /// @param _lockerScriptHash                Address of the locker on Bitcoin\\n    /// @param _txId                            Transaction Id of the transaction\\n    function _updateIsPaid(\\n        uint _paidOutputCounter,\\n        bytes memory _vout,\\n        address _lockerScriptHash,\\n        bytes32 _txId\\n    ) internal {\\n        uint parsedAmount;\\n        (parsedAmount,) = TxHelper.parseValueAndData(_vout, _lockerScriptHash);\\n        if (parsedAmount != 0 &&\\n            _paidOutputCounter + 1 == TxHelper.numberOfOutputs(_vout)) {\\n            isPaid[_txId] = true;\\n        } else if (parsedAmount == 0 &&\\n            _paidOutputCounter == TxHelper.numberOfOutputs(_vout)) {\\n            isPaid[_txId] = true;\\n        }\\n    }\\n\\n    /// @notice                      Checks if the locker is among transaction senders\\n    /// @param _vin                  Inputs of the transaction\\n    /// @param _inputIndex           Index of the input that is from the locker\\n    /// @param _lockerRedeemScript   Address of the locker on Bitcoin\\n    /// @return                      True if the transaction sender is the locker\\n    function _isTxFromLocker(\\n        bytes memory _vin,\\n        uint _inputIndex,\\n        bytes memory _lockerRedeemScript\\n    ) internal view returns (bool) {\\n        bytes memory scriptSig;\\n        bytes memory txInputAddress;\\n        scriptSig = TxHelper.parseInputScriptSig(_vin, _inputIndex);\\n        txInputAddress = TxHelper.sliceBytes(\\n            scriptSig,\\n            scriptSig.length - _lockerRedeemScript.length,\\n            scriptSig.length - 1\\n        );\\n        return txInputAddress.length == _lockerRedeemScript.length &&\\n        keccak256(txInputAddress) == keccak256(_lockerRedeemScript);\\n    }\\n\\n    /// @notice                           Records burn request of user\\n    /// @param _amount                    Amount of wrapped token that user wants to burn\\n    /// @param _remainedAmount            Amount of wrapped token that actually gets burnt after deducting fees from the original value (_amount)\\n    /// @param _userPubKeyHash User's Bitcoin address\\n    /// @param _isScriptHash              Whether user's Bitcoin address is script hash or not\\n    /// @param _isSegwit                  Whether user's Bitcoin address is segwit or nonSegwit\\n    /// @param _lastSubmittedHeight       Last block header height submitted on the relay contract\\n    /// @param _lockerTargetAddress       Locker's target chain address that the request belongs to\\n    function _saveBurnRequest(\\n        uint _amount,\\n        uint _remainedAmount,\\n        address _userPubKeyHash,\\n        bool _isScriptHash,\\n        bool _isSegwit,\\n        uint _lastSubmittedHeight,\\n        address _lockerTargetAddress\\n    ) internal {\\n        burnRequest memory request;\\n        request.amount = _amount;\\n        request.remainedAmount = _remainedAmount;\\n        request.sender = msg.sender;\\n        request.userPubKeyHash = _userPubKeyHash;\\n        request.isScriptHash = _isScriptHash;\\n        request.isSegwit = _isSegwit;\\n        request.deadline = _lastSubmittedHeight + transferDeadline;\\n        request.isTransferred = false;\\n        burnRequests[_lockerTargetAddress].push(request);\\n    }\\n\\n    /// @notice                         Checks inclusion of the transaction in the specified block\\n    /// @dev                            Calls the relay contract to check Merkle inclusion proof\\n    /// @param _txId                    Id of the transaction\\n    /// @param _blockNumber             Height of the block containing the transaction\\n    /// @param _intermediateNodes       Merkle inclusion proof for the transaction\\n    /// @param _index                   Index of transaction in the block\\n    /// @return                         True if the transaction was included in the block\\n    function _isConfirmed(\\n        bytes32 _txId,\\n        uint256 _blockNumber,\\n        bytes memory _intermediateNodes,\\n        uint _index\\n    ) private returns (bool) {\\n        // Finds fee amount\\n        uint feeAmount = IBitcoinRelay(relay).getBlockHeaderFee(_blockNumber, 0);\\n        require(msg.value >= feeAmount, \\\"CCBurnRouter: relay fee is not sufficient\\\");\\n\\n        // Calls relay contract\\n        bytes memory data = Address.functionCallWithValue(\\n            relay,\\n            abi.encodeWithSignature(\\n                \\\"checkTxProof(bytes32,uint256,bytes,uint256)\\\",\\n                _txId,\\n                _blockNumber,\\n                _intermediateNodes,\\n                _index\\n            ),\\n            msg.value\\n        );\\n\\n        // Sends extra ETH back to msg.sender\\n        Address.sendValue(payable(msg.sender), msg.value - feeAmount);\\n\\n        return abi.decode(data, (bool));\\n    }\\n\\n    /// @notice                      Checks inclusion of the transaction in the specified block\\n    /// @dev                         Calls the relay contract to check Merkle inclusion proof\\n    /// @param _amount               Id of the transaction\\n    /// @param _lockerTargetAddress  Id of the transaction\\n    /// @return                      Remained amount after reducing fees\\n    function _getFee(\\n        uint _amount,\\n        address _lockerTargetAddress\\n    ) internal returns (uint) {\\n        // Calculates protocol fee\\n        uint protocolFee = _amount*protocolPercentageFee/10000;\\n\\n        uint remainedAmount = _amount - protocolFee - bitcoinFee;\\n        require(remainedAmount > 0, \\\"CCBurnRouter: amount is too low\\\");\\n\\n        // Transfers protocol fee\\n        ITeleBTC(teleBTC).transfer(treasury, protocolFee);\\n\\n        // Transfers bitcoin fee to locker\\n        ITeleBTC(teleBTC).transfer(_lockerTargetAddress, bitcoinFee);\\n\\n        return remainedAmount;\\n    }\\n\\n    /// @notice                      Calculates the required transaction Id from the transaction details\\n    /// @dev                         Calculates the hash of transaction details two consecutive times\\n    /// @param _version              Version of the transaction\\n    /// @param _vin                  Inputs of the transaction\\n    /// @param _vout                 Outputs of the transaction\\n    /// @param _locktime             Lock time of the transaction\\n    /// @return                      Transaction Id of the required transaction\\n    function _calculateTxId(\\n        bytes4 _version,\\n        bytes memory _vin,\\n        bytes calldata _vout,\\n        bytes4 _locktime\\n    ) internal pure returns (bytes32) {\\n        bytes32 inputHash1 = sha256(abi.encodePacked(_version, _vin, _vout, _locktime));\\n        bytes32 inputHash2 = sha256(abi.encodePacked(inputHash1));\\n        return _revertBytes32(inputHash2);\\n    }\\n\\n    /// @notice                      Reverts a Bytes32 input\\n    /// @param _input                Bytes32 input that we want to revert\\n    /// @return                      Reverted bytes32\\n    function _revertBytes32(bytes32 _input) internal pure returns (bytes32) {\\n        bytes memory temp;\\n        bytes32 result;\\n        for (uint i = 0; i < 32; i++) {\\n            temp = abi.encodePacked(temp, _input[31-i]);\\n        }\\n        assembly {\\n            result := mload(add(temp, 32))\\n        }\\n        return result;\\n    }\\n\\n}\"\n    },\n    \"contracts/routers/interfaces/ICCBurnRouter.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICCBurnRouter {\\n\\n\\t// Structures\\n\\n    /// @notice                 \\tStructure for recording burn requests\\n    /// @param amount         \\t\\tAmount of burnt tokens\\n    /// @param remainedAmount   \\tAmount that user gets (after paying fees)\\n    /// @param sender       \\t\\tAddress of user who requests burning\\n    /// @param userPubKeyHash   Public key hash of the user on Bitcoin\\n    /// @param isScriptHash   \\t\\tWhether the user's Bitcoin address is script hash or pubKey hash\\n    /// @param isSegwit\\t\\t\\t   \\tWhether the user's Bitcoin address is Segwit or nonSegwit\\n    /// @param deadline         \\tDeadline of lockers for executing the request\\n    /// @param isTransferred    \\tTrue if the request has been executed\\n    /// @param locker\\t\\t    \\tThe locker assigned to this burn request who should execute it\\n\\tstruct burnRequest {\\n\\t\\tuint amount;\\n\\t\\tuint remainedAmount;\\n\\t\\taddress sender;\\n\\t\\taddress userPubKeyHash;\\n\\t\\tbool isScriptHash;\\n\\t\\tbool isSegwit;\\n\\t\\tuint deadline;\\n\\t\\tbool isTransferred;\\n  \\t}\\n\\n  \\t// Events\\n\\n\\t/// @notice                 \\t\\tEmits when a burn request gets submitted\\n    /// @param userTargetAddress        Target address of the user\\n    /// @param userPubKeyHash       Public key hash of the user on Bitcoin\\n\\t/// @param isScriptHash   \\t\\t\\tWhether the user's Bitcoin address is script hash or pubKey hash\\n    /// @param isSegwit\\t\\t\\t   \\t\\tWhether the user's Bitcoin address is Segwit or nonSegwit\\n    /// @param amount         \\t\\t\\tAmount of burnt tokens\\n    /// @param remainedAmount   \\t\\tAmount that user gets (after paying fees)\\n\\t/// @param lockerTargetAddress\\t\\tLocker's address on the target chain\\n    /// @param index       \\t\\t\\t\\tThe index of a request for a locker\\n    /// @param deadline         \\t\\tDeadline of lockers for executing the request\\n  \\tevent CCBurn(\\n\\t\\taddress indexed userTargetAddress,\\n\\t\\taddress userPubKeyHash,\\n\\t\\tbool isScriptHash,\\n    \\tbool isSegwit,\\n\\t\\tuint amount, \\n\\t\\tuint remainedAmount, \\n\\t\\taddress indexed lockerTargetAddress,\\n\\t\\tuint index, \\n\\t\\tuint indexed deadline\\n\\t);\\n\\n\\t/// @notice                 \\t\\tEmits when a burn request gets executed\\n    /// @param userTargetAddress        Target address of the user\\n    /// @param userPubKeyHash       Public key hash of the user on Bitcoin\\n    /// @param remainedAmount   \\t\\tAmount that user gets (after paying fees)\\n\\t/// @param lockerTargetAddress\\t\\tLocker's address on the target chain\\n    /// @param index       \\t\\t\\t\\tThe index of a request for a locker\\n\\tevent PaidCCBurn(\\n\\t\\taddress indexed userTargetAddress, \\n\\t\\taddress userPubKeyHash, \\n\\t\\tuint remainedAmount, \\n\\t\\taddress indexed lockerTargetAddress, \\n\\t\\tuint index\\n\\t);\\n\\n\\t/// @notice                 \\t\\tEmits when a locker gets slashed for withdrawing BTC\\n\\t/// @param _lockerTargetAddress\\t\\tLocker's address on the target chain\\n\\t/// @param _blockNumber\\t\\t\\t\\tBlock number of the malicious tx\\n\\t/// @param txId\\t\\t\\t\\t\\t\\tTransaction ID of the malicious tx\\n\\tevent LockerDispute(\\n        address _lockerTargetAddress,\\n    \\tuint _blockNumber,\\n        bytes32 txId\\n    );\\n\\n\\t// Read-only functions\\n\\n\\tfunction relay() external view returns (address);\\n\\n\\tfunction lockers() external view returns (address);\\n\\n\\tfunction teleBTC() external view returns (address);\\n\\n\\tfunction treasury() external view returns (address);\\n\\n\\tfunction transferDeadline() external view returns (uint);\\n\\n\\tfunction protocolPercentageFee() external view returns (uint);\\n\\n\\tfunction slasherPercentageReward() external view returns (uint);\\n\\n\\tfunction bitcoinFee() external view returns (uint); // Bitcoin transaction fee\\n\\n\\tfunction isTransferred(address _lockerTargetAddress, uint _index) external view returns (bool);\\n\\n\\t// State-changing functions\\n\\n\\tfunction setRelay(address _relay) external;\\n\\n\\tfunction setLockers(address _lockers) external;\\n\\n\\tfunction setTeleBTC(address _teleBTC) external;\\n\\n\\tfunction setTreasury(address _treasury) external;\\n\\n\\tfunction setTransferDeadline(uint _transferDeadline) external;\\n\\n\\tfunction setProtocolPercentageFee(uint _protocolPercentageFee) external;\\n\\n\\tfunction setSlasherPercentageReward(uint _slasherPercentageReward) external;\\n\\n\\tfunction setBitcoinFee(uint _bitcoinFee) external;\\n\\n\\tfunction ccBurn(\\n\\t\\tuint _amount, \\n\\t\\taddress _userPubKeyHash,\\n\\t\\tbool _isScriptHash,\\n    \\tbool _isSegwit,\\n\\t\\taddress _lockerTargetAddress\\n\\t) external returns (bool);\\n\\n\\tfunction burnProof(\\n\\t\\tbytes4 _version,\\n\\t\\tbytes memory _vin,\\n\\t\\tbytes calldata _vout,\\n\\t\\tbytes4 _locktime,\\n\\t\\tuint256 _blockNumber,\\n\\t\\tbytes calldata _intermediateNodes,\\n\\t\\tuint _index,\\n\\t\\taddress _lockerTargetAddress,\\n\\t\\tuint _startIndex,\\n\\t\\tuint _endIndex\\n\\t) external payable returns (bool);\\n\\n\\tfunction disputeBurn(\\n\\t\\taddress _lockerTargetAddress, \\n\\t\\tuint[] memory _indices\\n\\t) external returns (bool);\\n\\n\\tfunction disputeLocker(\\n\\t\\taddress _lockerTargetAddress,\\n        uint _inputIndex,\\n\\t\\tbytes4 _version,\\n\\t\\tbytes memory _vin,\\n\\t\\tbytes calldata _vout,\\n\\t\\tbytes4 _locktime,\\n\\t\\tuint256 _blockNumber,\\n\\t\\tbytes calldata _intermediateNodes,\\n\\t\\tuint _index\\n\\t) external payable returns (bool);\\n}\"\n    },\n    \"contracts/lockers/LockersLogic.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./LockersStorageStructure.sol\\\";\\nimport \\\"./interfaces/ILockers.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract LockersLogic is LockersStorageStructure, ILockers {\\n\\n    modifier nonZeroAddress(address _address) {\\n        require(_address != address(0), \\\"Lockers: address is zero\\\");\\n        _;\\n    }\\n\\n    modifier nonZeroValue(uint _value) {\\n        require(_value > 0, \\\"Lockers: value is zero\\\");\\n        _;\\n    }\\n\\n    modifier onlyMinter() {\\n        require(_isMinter(_msgSender()), \\\"Lockers: only minters can mint\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Give an account access to mint.\\n     */\\n    function addMinter(address _account) external override nonZeroAddress(_account) onlyOwner {\\n        require(!_isMinter(_account), \\\"Lockers: account already has role\\\");\\n        minters[_account] = true;\\n    }\\n\\n    /**\\n     * @dev Remove an account's access to mint.\\n     */\\n    function removeMinter(address _account) external override nonZeroAddress(_account) onlyOwner {\\n        require(_isMinter(_account), \\\"Lockers: account does not have role\\\");\\n        minters[_account] = false;\\n    }\\n\\n    modifier onlyBurner() {\\n        require(_isBurner(_msgSender()), \\\"Lockers: only burners can burn\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Give an account access to burn.\\n     */\\n    function addBurner(address _account) external override nonZeroAddress(_account) onlyOwner {\\n        require(!_isBurner(_account), \\\"Lockers: account already has role\\\");\\n        burners[_account] = true;\\n    }\\n\\n    /**\\n     * @dev Remove an account's access to burn.\\n     */\\n    function removeBurner(address _account) external override nonZeroAddress(_account) onlyOwner {\\n        require(_isBurner(_account), \\\"Lockers: account does not have role\\\");\\n        burners[_account] = false;\\n    }\\n\\n    /// @notice                 Pause the locker, so only the functions can be called which are whenPaused\\n    /// @dev\\n    /// @param\\n    function pauseLocker() external override onlyOwner {\\n        _pause();\\n    }\\n\\n    /// @notice                 Un-pause the locker, so only the functions can be called which are whenNotPaused\\n    /// @dev\\n    /// @param\\n    function unPauseLocker() external override onlyOwner {\\n        _unpause();\\n    }\\n\\n    function getLockerTargetAddress(address  _lockerScriptHash) external view override returns (address) {\\n        return lockerTargetAddress[_lockerScriptHash];\\n    }\\n\\n    /// @notice                           Checks whether an address is locker\\n    /// @dev\\n    /// @param _lockerTargetAddress       Address of locker on the target chain\\n    /// @return                           True if user is locker\\n    function isLocker(address _lockerScriptHash) external override view nonZeroAddress(_lockerScriptHash) returns(bool) {\\n        return lockersMapping[lockerTargetAddress[_lockerScriptHash]].isLocker;\\n    }\\n\\n    /// @notice                           Give number of lockers\\n    /// @dev\\n    /// @return                           Number of lockers\\n    function getNumberOfLockers() external override view returns (uint) {\\n        return totalNumberOfLockers;\\n    }\\n\\n    /// @notice                             Give Bitcoin public key of locker\\n    /// @dev\\n    /// @param _lockerTargetAddress         Address of locker on the target chain\\n    /// @return                             Bitcoin public key of locker\\n    function getLockerRedeemScript(\\n        address _lockerTargetAddress\\n    ) external override view nonZeroAddress(_lockerTargetAddress) returns (bytes memory) {\\n        return lockersMapping[_lockerTargetAddress].lockerRedeemScript;\\n    }\\n\\n    /// @notice                             Tells if a locker is active or not\\n    /// @dev                                An active locker is not in the process of being removed and has enough\\n    /// capacity to mint more tokens (minted - burnt << their collateral)\\n    /// @param _lockerTargetAddress         Address of locker on the target chain\\n    /// @return                             True if the locker is active and accepts mint requests\\n    function isActive(\\n        address _lockerTargetAddress\\n    ) external override view nonZeroAddress(_lockerTargetAddress) returns (bool) {\\n        return lockersMapping[_lockerTargetAddress].isActive;\\n    }\\n\\n    /// @notice                             Get how much net this locker has minted\\n    /// @dev                                Net minted amount is total minted minus total burnt for the locker\\n    /// @param _lockerTargetAddress         Address of locker on the target chain\\n    /// @return                             The net minted of the locker\\n    function getLockerCapacity(\\n        address _lockerTargetAddress\\n    ) public override view nonZeroAddress(_lockerTargetAddress) returns (uint) {\\n        return (_lockerCollateralInTeleBTC(_lockerTargetAddress)*10000/collateralRatio) - lockersMapping[_lockerTargetAddress].netMinted;\\n    }\\n\\n    /// @notice         Changes the required bond amount to become locker\\n    /// @dev            Only current owner can call this\\n    /// @param _minRequiredTDTLockedAmount   The new required bond amount\\n    function setMinRequiredTDTLockedAmount(uint _minRequiredTDTLockedAmount) external override onlyOwner {\\n        minRequiredTDTLockedAmount = _minRequiredTDTLockedAmount;\\n    }\\n\\n    /// @notice         Changes the required bond amount to become locker\\n    /// @dev            Only current owner can call this\\n    /// @param _minRequiredTNTLockedAmount   The new required bond amount\\n    function setMinRequiredTNTLockedAmount(uint _minRequiredTNTLockedAmount) external override onlyOwner {\\n        minRequiredTNTLockedAmount = _minRequiredTNTLockedAmount;\\n    }\\n\\n    /// @notice                 Changes the price oracle\\n    /// @dev                    Only current owner can call this\\n    /// @param _priceOracle     The new price oracle\\n    function setPriceOracle(address _priceOracle) external override nonZeroAddress(_priceOracle) onlyOwner {\\n        priceOracle = _priceOracle;\\n    }\\n\\n    /// @notice                Changes cc burn router contract\\n    /// @dev                   Only current owner can call this\\n    /// @param _ccBurnRouter   The new cc burn router contract address\\n    function setCCBurnRouter(address _ccBurnRouter) external override nonZeroAddress(_ccBurnRouter) onlyOwner {\\n        ccBurnRouter = _ccBurnRouter;\\n    }\\n\\n    /// @notice                 Changes exchange router contract address and updates wrapped avax addresses\\n    /// @dev                    Only owner can call this\\n    /// @param _exchangeConnector  The new exchange router contract address\\n    function setExchangeConnector(address _exchangeConnector) external override nonZeroAddress(_exchangeConnector) onlyOwner {\\n        exchangeConnector = _exchangeConnector;\\n    }\\n\\n    /// @notice                 Changes wrapped token contract address\\n    /// @dev                    Only owner can call this\\n    /// @param _teleBTC         The new wrapped token contract address\\n    function setTeleBTC(address _teleBTC) external override nonZeroAddress(_teleBTC) onlyOwner {\\n        teleBTC = _teleBTC;\\n    }\\n\\n    /// @notice                     Changes collateral ratio\\n    /// @dev                        Only owner can call this\\n    /// @param _collateralRatio     The new collateral ratio\\n    function setCollateralRatio(uint _collateralRatio) external override onlyOwner {\\n        collateralRatio = _collateralRatio;\\n    }\\n\\n    /// @notice                                 Adds user to candidates list\\n    /// @dev\\n    /// @param _candidateRedeemScript         Bitcoin address of the candidate\\n    /// @param _lockedTDTAmount                 Bond amount of locker in TDT\\n    /// @param _lockedNativeTokenAmount         Bond amount of locker in native token of the target chain\\n    /// @return                                 True if candidate is added successfully\\n    function requestToBecomeLocker(\\n        bytes memory _candidateRedeemScript,\\n        address _candidateScriptHash,\\n        uint _lockedTDTAmount,\\n        uint _lockedNativeTokenAmount\\n    ) external override payable nonZeroAddress(_candidateScriptHash) nonReentrant returns (bool) {\\n\\n        require(\\n            _doubleHash(_candidateRedeemScript) == _candidateScriptHash,\\n            \\\"Lockers: redeem script hash doesn't match with redeem script\\\"\\n        );\\n\\n        require(\\n            !lockersMapping[msg.sender].isCandidate,\\n            \\\"Lockers: user is already a candidate\\\"\\n        );\\n\\n        require(\\n            !lockersMapping[msg.sender].isLocker,\\n            \\\"Lockers: user is already a locker\\\"\\n        );\\n\\n        require(\\n            _lockedTDTAmount >= minRequiredTDTLockedAmount,\\n            \\\"Lockers: low locking TDT amount\\\"\\n        );\\n\\n        require(\\n            _lockedNativeTokenAmount >= minRequiredTNTLockedAmount && msg.value == _lockedNativeTokenAmount,\\n            \\\"Lockers: low locking TNT amount\\\"\\n        );\\n\\n        require(\\n            lockerTargetAddress[_candidateScriptHash] == address(0),\\n            \\\"Lockers: redeem script hash is used before\\\"\\n        );\\n\\n        require(IERC20(TeleportDAOToken).transferFrom(msg.sender, address(this), _lockedTDTAmount));\\n        locker memory locker_;\\n        locker_.lockerRedeemScript = _candidateRedeemScript;\\n        locker_.lockerScriptHash = _candidateScriptHash;\\n        locker_.TDTLockedAmount = _lockedTDTAmount;\\n        locker_.nativeTokenLockedAmount = _lockedNativeTokenAmount;\\n        locker_.isCandidate = true;\\n\\n        lockersMapping[msg.sender] = locker_;\\n\\n        totalNumberOfCandidates = totalNumberOfCandidates + 1;\\n\\n        emit RequestAddLocker(\\n            msg.sender,\\n            _candidateRedeemScript,\\n            _lockedTDTAmount,\\n            0,\\n            false\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @notice                       Removes a candidate from candidates list\\n    /// @return                       True if candidate is removed successfully\\n    function revokeRequest() external override nonReentrant returns (bool) {\\n\\n        require(\\n            lockersMapping[_msgSender()].isCandidate,\\n            \\\"Lockers: request doesn't exist or already accepted\\\"\\n        );\\n\\n        // Loads locker's information\\n        locker memory lockerRequest = lockersMapping[_msgSender()];\\n\\n        // Removes candidate from lockersMapping\\n        _removeCandidateFromLockersMapping(_msgSender());\\n        totalNumberOfCandidates = totalNumberOfCandidates -1;\\n\\n        // Sends back TDT and TNT collateral\\n        IERC20(TeleportDAOToken).transfer(_msgSender(), lockerRequest.TDTLockedAmount);\\n        Address.sendValue(payable(_msgSender()), lockerRequest.nativeTokenLockedAmount);\\n\\n        return true;\\n    }\\n\\n    /// @notice                               Approves a candidate request to become locker\\n    /// @dev                                  Only owner can call this\\n    /// @param _lockerTargetAddress           Locker's target chain address\\n    /// @return                               True if candidate is added successfully\\n    function addLocker(\\n        address _lockerTargetAddress\\n    ) external override nonZeroAddress(_lockerTargetAddress) nonReentrant onlyOwner returns (bool) {\\n\\n        require(\\n            lockersMapping[_lockerTargetAddress].isCandidate,\\n            \\\"Lockers: no request with this address\\\"\\n        );\\n\\n        // Updates locker's status\\n        lockersMapping[_lockerTargetAddress].isCandidate = false;\\n        lockersMapping[_lockerTargetAddress].isLocker = true;\\n        lockersMapping[_lockerTargetAddress].isActive = true;\\n\\n        // Updates number of candidates and lockers\\n        totalNumberOfCandidates = totalNumberOfCandidates -1;\\n        totalNumberOfLockers = totalNumberOfLockers + 1;\\n\\n        lockerTargetAddress[lockersMapping[_lockerTargetAddress].lockerScriptHash] = _lockerTargetAddress;\\n\\n        emit LockerAdded(\\n            _lockerTargetAddress,\\n            lockersMapping[_lockerTargetAddress].lockerRedeemScript,\\n            lockersMapping[_lockerTargetAddress].TDTLockedAmount,\\n            lockersMapping[_lockerTargetAddress].nativeTokenLockedAmount,\\n            lockersMapping[_lockerTargetAddress].isScriptHash\\n        );\\n        return true;\\n    }\\n\\n    /// @notice                             Requests to remove a locker from lockers list\\n    /// @dev                                Deactivates the status of the locker so that no\\n    /// one is allowed to send mint requests to this locker. It gives time to the locker to burn the required amount\\n    /// of teleBTC to make itself eligible to be removed.\\n    /// @return                             True if deactivated successfully\\n    function requestToRemoveLocker() external override nonReentrant returns (bool) {\\n        require(\\n            lockersMapping[_msgSender()].isLocker,\\n            \\\"Lockers: Msg sender is not locker\\\"\\n        );\\n\\n        lockersMapping[_msgSender()].isActive = false;\\n\\n        lockerLeavingRequests[_msgSender()] = true;\\n\\n        emit RequestRemoveLocker(\\n            msg.sender,\\n            lockersMapping[_msgSender()].lockerRedeemScript,\\n            lockersMapping[_msgSender()].TDTLockedAmount,\\n            lockersMapping[_msgSender()].nativeTokenLockedAmount,\\n            lockersMapping[_msgSender()].netMinted\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @notice                           Removes a locker from lockers pool\\n    /// @return                           True if locker is removed successfully\\n    function removeLocker(\\n        address _lockerTargetAddress\\n    ) external override nonZeroAddress(_lockerTargetAddress) nonReentrant onlyOwner returns (bool) {\\n\\n        require(\\n            lockersMapping[_lockerTargetAddress].isLocker,\\n            \\\"Lockers: no locker with this address\\\"\\n        );\\n\\n        require(\\n            lockerLeavingRequests[_lockerTargetAddress],\\n            \\\"Lockers: locker didn't request to be removed\\\"\\n        );\\n\\n        require(\\n            lockersMapping[_lockerTargetAddress].netMinted == 0,\\n            \\\"Lockers: net minted is not zero\\\"\\n        );\\n\\n        locker memory _removingLokcer = lockersMapping[_lockerTargetAddress];\\n\\n        IERC20(TeleportDAOToken).transfer(_lockerTargetAddress, _removingLokcer.TDTLockedAmount);\\n\\n        Address.sendValue(payable(_lockerTargetAddress), _removingLokcer.nativeTokenLockedAmount);\\n\\n        _removeLockerFromLockersMapping(_lockerTargetAddress);\\n\\n        totalNumberOfLockers = totalNumberOfLockers - 1;\\n\\n        emit LockerRemoved(\\n            _lockerTargetAddress,\\n            _removingLokcer.lockerRedeemScript,\\n            _removingLokcer.TDTLockedAmount,\\n            _removingLokcer.nativeTokenLockedAmount\\n        );\\n\\n        return true;\\n    }\\n\\n\\n    /// @notice                           Removes a locker from lockers pool\\n    /// @return                           True if locker is removed successfully\\n    function selfRemoveLocker() external override nonReentrant whenNotPaused returns (bool) {\\n\\n        require(\\n            lockersMapping[_msgSender()].isLocker,\\n            \\\"Lockers: no locker with this address\\\"\\n        );\\n\\n        require(\\n            lockerLeavingRequests[_msgSender()],\\n            \\\"Lockers: locker didn't request to be removed\\\"\\n        );\\n\\n        require(\\n            lockersMapping[_msgSender()].netMinted == 0,\\n            \\\"Lockers: net minted is not zero\\\"\\n        );\\n\\n        locker memory _removingLokcer = lockersMapping[_msgSender()];\\n\\n        // Removes locker from lockersMapping\\n        _removeLockerFromLockersMapping(_msgSender());\\n        totalNumberOfLockers = totalNumberOfLockers - 1;\\n\\n        // Sends back TDT and TNT collateral\\n        IERC20(TeleportDAOToken).transfer(_msgSender(), _removingLokcer.TDTLockedAmount);\\n        Address.sendValue(payable(_msgSender()), _removingLokcer.nativeTokenLockedAmount);\\n\\n        emit LockerRemoved(\\n            _msgSender(),\\n            _removingLokcer.lockerRedeemScript,\\n            _removingLokcer.TDTLockedAmount,\\n            _removingLokcer.nativeTokenLockedAmount\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @notice                           Slashes lockers\\n    /// @dev                              Only cc burn router can call this\\n    /// @param _lockerTargetAddress       Locker's target chain address\\n    /// @param _amount                    Amount of teleBTC that is slashed from lockers\\n    /// @param _recipient                 Address of user who receives the slashed amount\\n    /// @return                           True if lockers are slashed successfully\\n    function slashLocker(\\n        address _lockerTargetAddress,\\n        uint _rewardAmount,\\n        address _rewardRecipient,\\n        uint _amount,\\n        address _recipient\\n    ) external nonReentrant whenNotPaused override returns (bool) {\\n        require(\\n            msg.sender == ccBurnRouter,\\n            \\\"Lockers: Caller can't slash\\\"\\n        );\\n\\n        require(\\n            lockersMapping[_lockerTargetAddress].isLocker,\\n            \\\"Lockers: target address is not locker\\\"\\n        );\\n\\n        uint equivalentNativeToken = IPriceOracle(priceOracle).equivalentOutputAmount(\\n            _rewardAmount + _amount,\\n            8, // Decimal of teleBTC\\n            18, // Decimal of TNT\\n            teleBTC,\\n            NATIVE_TOKEN\\n        );\\n\\n        require(\\n            lockersMapping[_lockerTargetAddress].nativeTokenLockedAmount >= equivalentNativeToken,\\n            \\\"Lockers: insufficient native token collateral\\\"\\n        );\\n\\n        lockersMapping[_lockerTargetAddress].nativeTokenLockedAmount\\n        = lockersMapping[_lockerTargetAddress].nativeTokenLockedAmount - equivalentNativeToken;\\n\\n        // Transfers slashed collateral to user\\n        if (_recipient != address(this)) {\\n            // Transfers TNT to user\\n            payable(_recipient).transfer(equivalentNativeToken*_amount/(_amount + _rewardAmount));\\n            // Transfers TNT to slasher\\n            payable(_rewardRecipient).transfer(equivalentNativeToken*_rewardAmount/(_amount + _rewardAmount));\\n        } else {\\n            // Slasher can't be address(this)\\n            payable(_rewardRecipient).transfer(equivalentNativeToken*_rewardAmount/(_amount + _rewardAmount));\\n        }\\n\\n        emit LockerSlashed(_lockerTargetAddress, equivalentNativeToken);\\n\\n        return true;\\n    }\\n\\n    function liquidateLocker(\\n        address _lockerTargetAddress,\\n        uint _btcAmount\\n    ) external override nonZeroAddress(_lockerTargetAddress) nonZeroValue(_btcAmount)\\n    nonReentrant whenNotPaused returns (bool result) {\\n\\n        require(\\n            lockersMapping[_lockerTargetAddress].isLocker,\\n            \\\"Lockers: target address is not locker\\\"\\n        );\\n\\n        locker memory theLiquidatingLocker = lockersMapping[_lockerTargetAddress];\\n        uint theLockerCollateralBTCequivalent = _lockerCollateralInTeleBTC(_lockerTargetAddress);\\n\\n        require(\\n            (theLiquidatingLocker.netMinted*liquidationRatio/10000) > theLockerCollateralBTCequivalent,\\n            \\\"Lockers: this locker is above luquidation ratio\\\"\\n        );\\n\\n        /*\\n            Maximum buyable amount of collateral comes from:\\n            (BtcWorthOfCollateral - x)/(netMinted -x) = collateralRatio/10000\\n        */\\n\\n        uint maxBuyable =\\n        ((theLiquidatingLocker.netMinted*collateralRatio/10000) -\\n        theLockerCollateralBTCequivalent)/((collateralRatio-10000)/10000);\\n\\n        if (maxBuyable > theLiquidatingLocker.netMinted) {\\n            maxBuyable = theLiquidatingLocker.netMinted;\\n        }\\n\\n        require(\\n            _btcAmount <= maxBuyable,\\n            \\\"Lockers: above the locker's luquidation penalty\\\"\\n        );\\n\\n        IERC20(teleBTC).transferFrom(_msgSender(), address(this), _btcAmount);\\n\\n        uint equivalentNativeToken = IPriceOracle(priceOracle).equivalentOutputAmount(\\n            _btcAmount,\\n        // TODO: get decimals from token contracts\\n            8,\\n            18,\\n            teleBTC,\\n            NATIVE_TOKEN\\n        );\\n\\n        lockersMapping[_lockerTargetAddress].netMinted = lockersMapping[_lockerTargetAddress].netMinted - _btcAmount;\\n\\n        Address.sendValue(payable(_msgSender()), equivalentNativeToken);\\n\\n        result = true;\\n\\n    }\\n\\n    function mint(\\n        address _lockerScriptHash,\\n        address _receiver,\\n        uint _amount\\n    ) external override nonZeroAddress(_lockerScriptHash) nonZeroAddress(_receiver)\\n    nonZeroValue(_amount) nonReentrant whenNotPaused onlyMinter returns (uint) {\\n\\n        address _lockerTargetAddress = lockerTargetAddress[_lockerScriptHash];\\n\\n        uint theLockerCapacity = getLockerCapacity(_lockerTargetAddress);\\n\\n        require(\\n            theLockerCapacity >= _amount,\\n            \\\"Lockers: this locker hasn't sufficient capacity\\\"\\n        );\\n\\n        lockersMapping[_lockerTargetAddress].netMinted =\\n        lockersMapping[_lockerTargetAddress].netMinted + _amount;\\n\\n        // Mints locker fee\\n        uint lockerFee = _amount*lockerPercentageFee/10000;\\n        if (lockerFee > 0) {\\n            ITeleBTC(teleBTC).mint(_lockerTargetAddress, lockerFee);\\n        }\\n\\n        // Mints tokens for receiver\\n        ITeleBTC(teleBTC).mint(_receiver, _amount - lockerFee);\\n\\n        return _amount - lockerFee;\\n    }\\n\\n    function burn(\\n        address _lockerScriptHash,\\n        uint _amount\\n    ) external override nonZeroAddress(_lockerScriptHash) nonZeroValue(_amount)\\n    nonReentrant whenNotPaused onlyBurner returns (uint) {\\n\\n        address _lockerTargetAddress = lockerTargetAddress[_lockerScriptHash];\\n\\n        // Transfers teleBTC from user\\n        ITeleBTC(teleBTC).transferFrom(_msgSender(), address(this), _amount);\\n\\n        uint lockerFee = _amount*lockerPercentageFee/10000;\\n        uint remainedAmount = _amount - lockerFee;\\n        uint netMinted = lockersMapping[_lockerTargetAddress].netMinted;\\n\\n        require(\\n            netMinted >= remainedAmount,\\n            \\\"Lockers: locker doesn't have sufficient funds\\\"\\n        );\\n\\n        lockersMapping[_lockerTargetAddress].netMinted = netMinted - remainedAmount;\\n\\n        // Burns teleBTC and sends rest of it to locker\\n        ITeleBTC(teleBTC).burn(remainedAmount);\\n        ITeleBTC(teleBTC).transfer(_lockerTargetAddress, lockerFee);\\n\\n        return remainedAmount;\\n    }\\n\\n    // bitcoin double hash function\\n    function _doubleHash(bytes memory input) internal pure returns(address) {\\n        bytes32 inputHash1 = sha256(input);\\n        bytes20 inputHash2 = ripemd160(abi.encodePacked(inputHash1));\\n        return address(inputHash2);\\n    }\\n\\n    /**\\n     * @dev Check if an account is minter.\\n     * @return bool\\n     */\\n    function _isMinter(address account) internal view nonZeroAddress(account) returns (bool) {\\n        return minters[account];\\n    }\\n\\n    /**\\n     * @dev Check if an account is burner.\\n     * @return bool\\n     */\\n    function _isBurner(address account) internal view nonZeroAddress(account) returns (bool) {\\n        return burners[account];\\n    }\\n\\n    /// @notice                      Removes an element of lockers list\\n    /// @dev                         Deletes and shifts the array\\n    /// @param _lockerAddress      Index of the element that will be deleted\\n    function _removeLockerFromLockersMapping(address _lockerAddress) internal {\\n        require(\\n            lockersMapping[_lockerAddress].isLocker,\\n            \\\"Lockers: locker doesn't exist\\\"\\n        );\\n        delete lockersMapping[_lockerAddress];\\n    }\\n\\n    /// @notice                      Removes an element of lockers list\\n    /// @dev                         Deletes and shifts the array\\n    /// @param _candidateAddress     Index of the element that will be deleted\\n    function _removeCandidateFromLockersMapping(address _candidateAddress) internal {\\n        require(\\n            lockersMapping[_candidateAddress].isCandidate,\\n            \\\"Lockers: candidate doesn't exist\\\"\\n        );\\n        delete lockersMapping[_candidateAddress];\\n    }\\n\\n    /// @notice                             Get the locker collateral in terms of TeleBTC\\n    /// @dev\\n    /// @param _lockerTargetAddress         Address of locker on the target chain\\n    /// @return                             The locker collateral in TeleBTC\\n    function _lockerCollateralInTeleBTC(address _lockerTargetAddress) internal view returns (uint) {\\n\\n        return IPriceOracle(priceOracle).equivalentOutputAmount(\\n            lockersMapping[_lockerTargetAddress].nativeTokenLockedAmount,\\n        // TODO: get decimals from token contracts\\n            18,\\n            8,\\n            NATIVE_TOKEN,\\n            teleBTC\\n        );\\n        // return lockersMapping[_lockerTargetAddress].TDTLockedAmount;\\n    }\\n}\\n\"\n    },\n    \"contracts/lockers/LockersStorageStructure.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../oracle/interfaces/IPriceOracle.sol\\\";\\nimport \\\"../connectors/interfaces/IExchangeConnector.sol\\\";\\nimport \\\"../erc20/interfaces/IERC20.sol\\\";\\nimport \\\"../erc20/interfaces/ITeleBTC.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract LockersStorageStructure is OwnableUpgradeable, ReentrancyGuardUpgradeable, PausableUpgradeable {\\n\\n    // Structures\\n\\n    /// @notice                             Structure for registering lockers\\n    /// @dev\\n    /// @param lockerRedeemScript           Locker redeem script\\n    /// @param TDTLockedAmount              Bond amount of locker in TDT\\n    /// @param nativeTokenLockedAmount      Bond amount of locker in native token of the target chain\\n    /// @param netMinted                    Total minted - total burnt\\n    /// @param isScriptHash                 Determines if the lockerScriptHash is pub key hash or redeem script hash\\n    /// @param isActive                     Shows if a locker is active (has not requested for removal and\\n    ///                                     has enough collateral to accept more minting requests)\\n    struct locker {\\n        bytes lockerRedeemScript;\\n        address lockerScriptHash;\\n        uint TDTLockedAmount;\\n        uint nativeTokenLockedAmount;\\n        uint netMinted;\\n        bool isLocker;\\n        bool isCandidate;\\n        bool isScriptHash;\\n        bool isActive;\\n    }\\n\\n    // Public variables\\n    address public lockersLogic;\\n\\n    uint public lockerPercentageFee;\\n    address public TeleportDAOToken;\\n    address public teleBTC;\\n    address public ccBurnRouter;\\n    address public exchangeConnector;\\n    uint public minRequiredTDTLockedAmount;\\n    uint public minRequiredTNTLockedAmount;\\n    address public NATIVE_TOKEN = address(1);\\n\\n    // 10000 means 100%\\n    uint public collateralRatio;\\n    uint public liquidationRatio;\\n    // ^ this is because of price volitility and making minted coins for some collateral secure\\n    address public priceOracle;\\n\\n    mapping(address => locker) public lockersMapping; // lockerTargetAddress -> locker structure\\n\\n    uint public totalNumberOfCandidates;\\n    uint public totalNumberOfLockers;\\n    \\n    mapping(address => bool) public lockerLeavingRequests;\\n    mapping(address => bool) public lockerLeavingAcceptance;\\n\\n    mapping(address => address) public lockerTargetAddress;\\n\\n    mapping(address => bool) minters;\\n    mapping(address => bool) burners;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts. Equivalent to `reinitializer(1)`.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * `initializer` is equivalent to `reinitializer(1)`, so a reinitializer may be used after the original\\n     * initialization step. This is essential to configure modules that are added through upgrades and that require\\n     * initialization.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/lockers/LockersProxy.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./LockersStorageStructure.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract LockersProxy is LockersStorageStructure {\\n\\n    constructor(\\n        address _lockersLogic\\n    ) {\\n        lockersLogic = _lockersLogic;\\n    }\\n\\n    function updateLogic(address _newLogic) external onlyOwner {\\n        lockersLogic = _newLogic;\\n    }\\n\\n    function initialize(\\n        address _TeleportDAOToken,\\n        address _exchangeConnector,\\n        address _priceOracle,\\n        uint _minRequiredTDTLockedAmount,\\n        uint _minRequiredTNTLockedAmount,\\n        uint _collateralRatio,\\n        uint _liquidationRatio,\\n        uint _lockerPercentageFee\\n    ) public initializer {\\n\\n        OwnableUpgradeable.__Ownable_init();\\n        ReentrancyGuardUpgradeable.__ReentrancyGuard_init();\\n        PausableUpgradeable.__Pausable_init();\\n\\n        TeleportDAOToken = _TeleportDAOToken;\\n        exchangeConnector = _exchangeConnector;\\n        priceOracle = _priceOracle;\\n        minRequiredTDTLockedAmount = _minRequiredTDTLockedAmount;\\n        minRequiredTNTLockedAmount = _minRequiredTNTLockedAmount;\\n        collateralRatio = _collateralRatio;\\n        liquidationRatio = _liquidationRatio;\\n        lockerPercentageFee = _lockerPercentageFee;\\n    }\\n\\n    fallback() external payable {\\n        address opr = lockersLogic;\\n        require(opr != address(0));\\n        assembly {\\n            calldatacopy(0, 0, calldatasize())\\n            let result := delegatecall(gas(), opr, 0, calldatasize(), 0, 0)\\n            returndatacopy(0, 0, returndatasize())\\n            switch result\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    receive() external payable {}\\n}\\n\"\n    },\n    \"contracts/erc20/TeleBTC.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/ITeleBTC.sol\\\";\\nimport \\\"../libraries/SafeMath.sol\\\";\\nimport \\\"../erc20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"hardhat/console.sol\\\"; // Just for test\\n\\ncontract TeleBTC is ITeleBTC, ERC20, Ownable, ReentrancyGuard {\\n\\n    using SafeMath for uint;\\n    mapping(address => bool) public minters;\\n    mapping(address => bool) public burners;\\n\\n    modifier onlyMinter() {\\n        require(isMinter(_msgSender()), \\\"TeleBTC: only minters can mint\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Give an account access to mint.\\n     */\\n    function addMinter(address account) external override onlyOwner {\\n        require(!isMinter(account), \\\"TeleBTC: account already has role\\\");\\n        minters[account] = true;\\n    }\\n\\n    /**\\n     * @dev Remove an account's access to mint.\\n     */\\n    function removeMinter(address account) external override onlyOwner {\\n        require(isMinter(account), \\\"TeleBTC: account does not have role\\\");\\n        minters[account] = false;\\n    }\\n\\n    /**\\n     * @dev Check if an account is minter.\\n     * @return bool\\n     */\\n    function isMinter(address account) internal view returns (bool) {\\n        require(account != address(0), \\\"TeleBTC: account is the zero address\\\");\\n        return minters[account];\\n    }\\n\\n    modifier onlyBurner() {\\n        require(isBurner(_msgSender()), \\\"TeleBTC: only burners can burn\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Give an account access to burn.\\n     */\\n    function addBurner(address account) external override onlyOwner {\\n        require(!isBurner(account), \\\"TeleBTC: account already has role\\\");\\n        burners[account] = true;\\n    }\\n\\n    /**\\n     * @dev Remove an account's access to burn.\\n     */\\n    function removeBurner(address account) external override onlyOwner {\\n        require(isBurner(account), \\\"TeleBTC: account does not have role\\\");\\n        burners[account] = false;\\n    }\\n\\n    /**\\n     * @dev Check if an account is burner.\\n     * @return bool\\n     */\\n    function isBurner(address account) internal view returns (bool) {\\n        require(account != address(0), \\\"TeleBTC: account is the zero address\\\");\\n        return burners[account];\\n    }\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol\\n    ) ERC20(_name, _symbol, 0) {\\n\\n    }\\n\\n    // TODO: remove it (just for test)\\n    function mintTestToken () external override {\\n        _mint(msg.sender, 10000000000); // mint 100 teleBTC\\n    }\\n\\n    function burn(uint amount) external nonReentrant onlyBurner override returns (bool) {\\n        _burn(msg.sender, amount);\\n        emit Burn(msg.sender, amount);\\n        return true;\\n    }\\n\\n    function mint(address receiver, uint amount) external nonReentrant onlyMinter override returns (bool) {\\n        _mint(receiver, amount);\\n        emit Mint(receiver, amount);\\n        return true;\\n    }\\n}\\n\"\n    },\n    \"contracts/erc20/ERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IERC20.sol\\\";\\n//import \\\"./Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport '../libraries/SafeMath.sol';\\nimport \\\"hardhat/console.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20 {\\n    using SafeMath for uint;\\n    mapping (address => uint256) private _balances;\\n\\n    mapping (address => mapping (address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor (string memory name_, string memory symbol_, uint initialMintedAmount) {\\n        _name = name_;\\n        _symbol = symbol_;\\n        if (initialMintedAmount > 0) {\\n            _mint(msg.sender, initialMintedAmount);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n\\n        _transfer(sender, recipient, amount);\\n        _approve(sender, _msgSender(), currentAllowance - amount);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\\n     *\\n     * This is internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        _balances[sender] = senderBalance - amount;\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        // FIXME: un-comment next line\\n        // require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        _balances[account] = accountBalance - amount;\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be to transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\\n}\\n\"\n    },\n    \"contracts/pools/InstantPool.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0; \\n\\nimport './interfaces/IInstantPool.sol'; \\nimport '../libraries/SafeMath.sol'; \\nimport '../erc20/ERC20.sol'; \\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\n\\ncontract InstantPool is IInstantPool, ERC20, Ownable, ReentrancyGuard {\\n\\n    using SafeMath for uint256; \\n    address public override teleBTC; \\n    uint public override instantPercentageFee; // a number between 0-10000 to show %0.01\\n    uint public override totalAddedTeleBTC;\\n    address public override instantRouter;\\n\\n    constructor(\\n        address _teleBTC, \\n        address _instantRouter,\\n        uint _instantPercentageFee, \\n        string memory _name, \\n        string memory _symbol\\n    ) ERC20(_name, _symbol, 0) { \\n        teleBTC = _teleBTC; \\n        instantRouter = _instantRouter;\\n        instantPercentageFee = _instantPercentageFee; \\n    }\\n\\n    /// @notice                               Gives available teleBTC amount                                 \\n    /// @return                               Available amount of teleBTC that can be borrowed    \\n    function availableTeleBTC() override public view returns (uint) { \\n        return IERC20(teleBTC).balanceOf(address(this)); \\n    }\\n\\n    /// @notice                               Gives the unpaid loans amount\\n    /// @return                               Amount of teleBTC that has been borrowed but has not been paid back\\n    function totalUnpaidLoan() override external view returns (uint) { \\n        uint _availableTeleBTC = availableTeleBTC();\\n        return totalAddedTeleBTC >= _availableTeleBTC ? totalAddedTeleBTC - _availableTeleBTC : 0; \\n    }  \\n\\n    /// @notice                 Changes instant router contract address\\n    /// @dev                    Only owner can call this\\n    /// @param _instantRouter   The new instant router contract address\\n    function setInstantRouter(address _instantRouter) external override onlyOwner {\\n        instantRouter = _instantRouter;\\n    }\\n    \\n    /// @notice                        Changes instant loan fee\\n    /// @dev                           Only current owner can call this\\n    /// @param _instantPercentageFee   The new percentage fee    \\n    function setInstantPercentageFee(uint _instantPercentageFee) external override onlyOwner { \\n        instantPercentageFee = _instantPercentageFee; \\n    } \\n\\n    /// @notice                 Changes teleBTC contract address\\n    /// @dev                    Only owner can call this\\n    /// @param _teleBTC         The new teleBTC contract address\\n    function setTeleBTC(address _teleBTC) external override onlyOwner {\\n        teleBTC = _teleBTC;\\n    } \\n\\n    /// @notice               Adds liquidity to instant pool\\n    /// @dev                           \\n    /// @param _user          Address of user who receives instant pool token        \\n    /// @param _amount        Amount of liquidity that user wants to add   \\n    /// @return               Amount of instant pool token that user receives\\n    function addLiquidity(address _user, uint _amount) external nonReentrant override returns (uint) {\\n        require(_amount > 0, \\\"InstantPool: input amount is zero\\\"); \\n        uint instantPoolTokenAmount; \\n        // Transfers teleBTC from user \\n        IERC20(teleBTC).transferFrom(msg.sender, address(this), _amount); \\n        if (totalAddedTeleBTC == 0 || totalSupply() == 0) { \\n            instantPoolTokenAmount = _amount; \\n        } else { \\n            instantPoolTokenAmount = _amount*totalSupply()/totalAddedTeleBTC; \\n        }\\n        totalAddedTeleBTC = totalAddedTeleBTC + _amount; \\n        // Mints instant pool token for user \\n        _mint(_user, instantPoolTokenAmount); \\n        emit AddLiquidity(_user, _amount, instantPoolTokenAmount); \\n        return instantPoolTokenAmount; \\n    }\\n\\n    /// @notice               Adds liquidity to instant pool without minting instant pool tokens\\n    /// @dev                  Updates totalAddedTeleBTC (transferring teleBTC directly does not update it)\\n    /// @param _amount        Amount of liquidity that user wants to add   \\n    /// @return               True if liquidity is added successfully\\n    function addLiquidityWithoutMint(uint _amount) external nonReentrant override returns (bool) {\\n        require(_amount > 0, \\\"InstantPool: input amount is zero\\\"); \\n        // Transfers teleBTC from user \\n        IERC20(teleBTC).transferFrom(msg.sender, address(this), _amount); \\n        totalAddedTeleBTC = totalAddedTeleBTC + _amount; \\n        emit AddLiquidity(msg.sender, _amount, 0); \\n        return true; \\n    }  \\n    \\n    /// @notice                               Removes liquidity from instant pool\\n    /// @dev                           \\n    /// @param _user                          Address of user who receives teleBTC       \\n    /// @param _instantPoolTokenAmount        Amount of instant pool token that is burnt  \\n    /// @return                               Amount of teleBTC that user receives\\n    function removeLiquidity(address _user, uint _instantPoolTokenAmount) external nonReentrant override returns (uint) {\\n        require(_instantPoolTokenAmount > 0, \\\"InstantPool: input amount is zero\\\");\\n        require(balanceOf(msg.sender) >= _instantPoolTokenAmount, \\\"InstantPool: balance is not sufficient\\\"); \\n        uint teleBTCAmount = _instantPoolTokenAmount*totalAddedTeleBTC/totalSupply();\\n        totalAddedTeleBTC = totalAddedTeleBTC - teleBTCAmount; \\n        IERC20(teleBTC).transfer(_user, teleBTCAmount); \\n        _burn(msg.sender, _instantPoolTokenAmount); \\n        emit RemoveLiquidity(msg.sender, teleBTCAmount, _instantPoolTokenAmount); \\n        return teleBTCAmount; \\n    } \\n\\n    /// @notice                               Gives loan to user\\n    /// @dev                                  Only instant router contract can call this\\n    /// @param _user                          Address of user who wants loan \\n    /// @param _amount                        Amount of requested loan\\n    /// @return                               Amount of given loan after reducing the fee \\n    function getLoan(address _user, uint _amount) nonReentrant override external returns (bool) { \\n        require(msg.sender == instantRouter, \\\"InstantPool: sender is not allowed\\\");\\n        require(availableTeleBTC() >= _amount, \\\"InstantPool: liquidity is not sufficient\\\"); \\n        // Instant fee increases the total teleBTC amount\\n        uint instantFee = _amount*instantPercentageFee/10000;\\n        // totalAddedTeleBTC = totalAddedTeleBTC + instantFee; \\n        IERC20(teleBTC).transfer(_user, _amount); \\n        emit InstantLoan(_user, _amount, instantFee); \\n        return true; \\n    } \\n\\n}\"\n    },\n    \"contracts/relay/BitcoinRelay.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../libraries/SafeMath.sol\\\";\\nimport \\\"../libraries/TypedMemView.sol\\\";\\nimport \\\"../libraries/ViewBTC.sol\\\";\\nimport \\\"../libraries/ViewSPV.sol\\\";\\nimport \\\"./interfaces/IBitcoinRelay.sol\\\";\\nimport \\\"../erc20/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract BitcoinRelay is IBitcoinRelay, Ownable, ReentrancyGuard, Pausable {\\n    using SafeMath for uint256;\\n    using TypedMemView for bytes;\\n    using TypedMemView for bytes29;\\n    using ViewBTC for bytes29;\\n    using ViewSPV for bytes29;\\n\\n    /* using BytesLib for bytes;\\n    using BTCUtils for bytes;\\n    using ValidateSPV for bytes; */\\n\\n    uint public override initialHeight;\\n    uint public override lastSubmittedHeight;\\n    uint public override finalizationParameter;\\n\\n    bytes32 public override relayGenesisHash;\\n    mapping(bytes32 => bytes32) internal previousBlock;\\n    mapping(bytes32 => uint256) internal blockHeight;\\n    mapping(uint => blockHeader[]) private chain;\\n\\n    uint256 internal currentEpochDiff;\\n    uint256 internal prevEpochDiff;\\n\\n    // Reward parameters\\n    uint public override rewardAmountInTDT;\\n    address public override TeleportDAOToken;\\n    uint public override relayerPercentageFee; // Multiplied by 100 - greater than 100\\n    uint public override submissionGasUsed;\\n    uint public override epochLength;\\n    uint public override lastEpochQueries;\\n    uint public override currentEpochQueries;\\n    uint public override baseQueries;\\n    mapping (uint => uint) private numberOfQueries;\\n\\n\\n\\n    /// @notice                   Gives a starting point for the relay\\n    /// @param  _genesisHeader    The starting header\\n    /// @param  _height           The starting height\\n    /// @param  _periodStart      The hash of the first header in the genesis epoch\\n    constructor(\\n        bytes memory _genesisHeader,\\n        uint256 _height,\\n        bytes32 _periodStart,\\n        address _TeleportDAOToken\\n    ) {\\n        bytes29 _genesisView = _genesisHeader.ref(0).tryAsHeader();\\n        require(_genesisView.notNull(), \\\"BitcoinRelay: stop being dumb\\\");\\n        bytes32 _genesisHash = _genesisView.hash256();\\n        // Add the initial block header to the chain\\n        blockHeader memory newBlockHeader;\\n        newBlockHeader.selfHash = _genesisHash;\\n        newBlockHeader.merkleRoot = _genesisView.merkleRoot();\\n        newBlockHeader.relayer = msg.sender;\\n        newBlockHeader.gasPrice = tx.gasprice;\\n        chain[_height].push(newBlockHeader);\\n\\n        // require(\\n        //     _periodStart & bytes32(0x0000000000000000000000000000000000000000000000000000000000ffffff) == bytes32(0),\\n        //     \\\"Period start hash does not have work. Hint: wrong byte order?\\\");\\n        relayGenesisHash = _genesisHash;\\n        blockHeight[_genesisHash] = _height;\\n        blockHeight[_periodStart] = _height - (_height % 2016);\\n        // Added parameters\\n        finalizationParameter = 1;\\n        lastSubmittedHeight = _height;\\n        initialHeight = _height;\\n        // Reward parameters\\n        TeleportDAOToken = _TeleportDAOToken;\\n        relayerPercentageFee = 0;\\n        epochLength = 5;\\n        baseQueries = epochLength;\\n        lastEpochQueries = baseQueries;\\n        currentEpochQueries = 0;\\n        submissionGasUsed = 100000;\\n    }\\n\\n    /// @notice                 Pause the relay, so only the functions can be called which are whenPaused\\n    /// @dev\\n    /// @param\\n    function pauseRelay() external override onlyOwner {\\n        _pause();\\n    }\\n\\n    /// @notice                 Un-pause the relay, so only the functions can be called which are whenNotPaused\\n    /// @dev\\n    /// @param\\n    function unPauseRelay() external override onlyOwner {\\n        _unpause();\\n    }\\n\\n    /// @notice             Getter for an specific block header's hash in the stored chain\\n    /// @param  _height     The height of the desired block header\\n    /// @param  _index      The index of the desired block header in that height\\n    /// @return             Block header's hash\\n    function getBlockHeaderHash (uint _height, uint _index) external view override returns(bytes32) {\\n        return _revertBytes32(chain[_height][_index].selfHash);\\n    }\\n\\n    /// @notice             Getter for an specific block header's fee price for a query\\n    /// @param  _height     The height of the desired block header\\n    /// @param  _index      The index of the desired block header in that height\\n    /// @return             Block header's fee price for a query\\n    function getBlockHeaderFee (uint _height, uint _index) external view override returns(uint) {\\n        return (submissionGasUsed * chain[_height][_index].gasPrice * (1 + relayerPercentageFee) * (epochLength)) / (100 * lastEpochQueries);\\n    }\\n\\n    /// @notice             Getter for the number of block headers in the same height\\n    /// @dev                This shows the number of temporary forks in that specific height\\n    /// @param  _height     The desired height of the blockchain\\n    /// @return             Number of block headers stored in the same height\\n    function getNumberOfSubmittedHeaders (uint _height) external view override returns (uint) {\\n        return chain[_height].length;\\n    }\\n\\n    /// @notice     Getter for currentEpochDiff\\n    /// @dev        This is updated when a new heavist header has a new diff\\n    /// @return     The difficulty of the bestKnownDigest\\n    function getCurrentEpochDifficulty() external view override returns (uint256) {\\n        return currentEpochDiff;\\n    }\\n    /// @notice     Getter for prevEpochDiff\\n    /// @dev        This is updated when a difficulty change is accepted\\n    /// @return     The difficulty of the previous epoch\\n    function getPrevEpochDifficulty() external view override returns (uint256) {\\n        return prevEpochDiff;\\n    }\\n\\n    /// @notice             Getter for available TDT in treasury\\n    /// @return             Amount of TDT available in Relay treasury\\n    function availableTDT() external view override returns(uint) {\\n        return IERC20(TeleportDAOToken).balanceOf(address(this));\\n    }\\n\\n    /// @notice             Getter for available target native token in treasury\\n    /// @return             Amount of target blockchain native token available in Relay treasury\\n    function availableTNT() external view override returns(uint) {\\n        return address(this).balance;\\n    }\\n\\n    /// @notice         Finds the height of a header by its hash\\n    /// @dev            Will fail if the header is unknown\\n    /// @param _hash  The header hash to search for\\n    /// @return         The height of the header, or error if unknown\\n    function findHeight(bytes32 _hash) external view override returns (uint256) {\\n        return _findHeight(_hash);\\n    }\\n\\n    /// @notice         Finds an ancestor for a block by its hash\\n    /// @dev            Will fail if the header is unknown\\n    /// @param _hash  The header hash to search for\\n    /// @return         The height of the header, or error if unknown\\n    function findAncestor(bytes32 _hash, uint256 _offset) external view override returns (bytes32) {\\n        return _findAncestor(_hash, _offset);\\n    }\\n\\n    /// @notice             Checks if a hash is an ancestor of the current one\\n    /// @dev                Limit the amount of lookups (and thus gas usage) with _limit\\n    /// @param _ancestor    The prospective ancestor\\n    /// @param _descendant  The descendant to check\\n    /// @param _limit       The maximum number of blocks to check\\n    /// @return             true if ancestor is at most limit blocks lower than descendant, otherwise false\\n    function isAncestor(bytes32 _ancestor, bytes32 _descendant, uint256 _limit) external view override returns (bool) {\\n        return _isAncestor(_ancestor, _descendant, _limit);\\n    }\\n\\n    /// @notice                             Setter for rewardAmountInTDT\\n    /// @dev                                This award is for the relayer who has a finalized block header\\n    /// @param _rewardAmountInTDT           The reward amount in TDT\\n    function setRewardAmountInTDT(uint _rewardAmountInTDT) external override onlyOwner {\\n        rewardAmountInTDT = _rewardAmountInTDT;\\n    }\\n\\n    /// @notice                             Setter for finalizationParameter\\n    /// @dev                                This might change if finalization rule of the source chain gets updated\\n    /// @param _finalizationParameter       The finalization parameter of the source chain\\n    function setFinalizationParameter(uint _finalizationParameter) external override onlyOwner {\\n        finalizationParameter = _finalizationParameter;\\n    }\\n\\n    /// @notice                             Setter for relayerPercentageFee\\n    /// @dev                                This is updated when we want to change the Relayer reward\\n    /// @param _relayerPercentageFee               Ratio > 1 that determines percentage of reward to the Relayer\\n    function setRelayerPercentageFee(uint _relayerPercentageFee) external override onlyOwner {\\n        relayerPercentageFee = _relayerPercentageFee;\\n    }\\n\\n    /// @notice                             Setter for epochLength\\n    /// @param _epochLength                 The length of epochs for estimating the user queries hence their fees\\n    function setEpochLength(uint _epochLength) external override onlyOwner {\\n        epochLength = _epochLength;\\n    }\\n\\n    /// @notice                             Setter for baseQueries\\n    /// @param _baseQueries                 The base amount of queries we assume in each epoch\\n    ///                                     (This is for preventing user fees to grow significantly)\\n    function setBaseQueries(uint _baseQueries) external override onlyOwner {\\n        baseQueries = _baseQueries;\\n    }\\n\\n    /// @notice                             Setter for submissionGasUsed\\n    /// @dev                                This is updated when the smart contract changes the way of getting block headers\\n    /// @param _submissionGasUsed           The gas used for submitting one block header\\n    function setSubmissionGasUsed(uint _submissionGasUsed) external override onlyOwner {\\n        submissionGasUsed = _submissionGasUsed;\\n    }\\n\\n    /// @notice                         Checks if a tx is included and finalized on the source blockchain\\n    /// @dev                            Checks if the block is finalized, and Merkle proof is correct\\n    /// @param  _txid                   Desired transaction's tx Id\\n    /// @param  _blockHeight            Block height of the desired tx\\n    /// @param  _intermediateNodes      Part of the Merkle proof for the desired tx\\n    /// @param  _index                  Part of the Merkle proof for the desired tx\\n    /// @return                         True if the provided tx is confirmed on the source blockchain, False otherwise\\n    function checkTxProof (\\n        bytes32 _txid, // In BE form\\n        uint _blockHeight,\\n        bytes calldata _intermediateNodes, // In LE form\\n        uint _index\\n    ) external payable nonReentrant whenNotPaused override returns (bool) {\\n        // Check for block confirmation\\n        // TODO: change 6 with something different\\n        if (_blockHeight + 6 < lastSubmittedHeight + 1) {\\n            for (uint256 i = 0; i < chain[_blockHeight].length; i++) {\\n                bytes32 _merkleRoot = _revertBytes32(chain[_blockHeight][i].merkleRoot);\\n                bytes29 intermediateNodes = _intermediateNodes.ref(0).tryAsMerkleArray(); // Check for errors if any\\n                bytes32 txIdLE = _revertBytes32(_txid);\\n                if (ViewSPV.prove(txIdLE, _merkleRoot, intermediateNodes, _index)) {\\n                    require(_getFee(chain[_blockHeight][i].gasPrice), \\\"BitcoinRelay: getting fee was not successful\\\");\\n                    currentEpochQueries += 1;\\n                    return true;\\n                }\\n            }\\n            require(false, \\\"BitcoinRelay: tx has not been included\\\");\\n            return false;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /// @notice             Adds headers to storage after validating\\n    /// @dev                We check integrity and consistency of the header chain\\n    /// @param  _anchor     The header immediately preceeding the new chain\\n    /// @param  _headers    A tightly-packed list of 80-byte Bitcoin headers\\n    /// @return             True if successfully written, error otherwise\\n    function addHeaders(bytes calldata _anchor, bytes calldata _headers) external nonReentrant whenNotPaused override returns (bool) {\\n        bytes29 _headersView = _headers.ref(0).tryAsHeaderArray();\\n        bytes29 _anchorView = _anchor.ref(0).tryAsHeader();\\n\\n        require(_headersView.notNull(), \\\"BitcoinRelay: header array length must be divisible by 80\\\");\\n        require(_anchorView.notNull(), \\\"BitcoinRelay: anchor must be 80 bytes\\\");\\n\\n        return _addHeaders(_anchorView, _headersView, false);\\n    }\\n\\n    /// @notice                       Adds headers to storage, performs additional validation of retarget\\n    /// @dev                          Checks the retarget, the heights, and the linkage\\n    /// @param  _oldPeriodStartHeader The first header in the difficulty period being closed\\n    /// @param  _oldPeriodEndHeader   The last header in the difficulty period being closed (anchor of new headers)\\n    /// @param  _headers              A tightly-packed list of 80-byte Bitcoin headers\\n    /// @return                       True if successfully written, error otherwise\\n    function addHeadersWithRetarget(\\n        bytes calldata _oldPeriodStartHeader,\\n        bytes calldata _oldPeriodEndHeader,\\n        bytes calldata _headers\\n    ) external nonReentrant whenNotPaused override returns (bool) {\\n        bytes29 _oldStart = _oldPeriodStartHeader.ref(0).tryAsHeader();\\n        bytes29 _oldEnd = _oldPeriodEndHeader.ref(0).tryAsHeader();\\n        bytes29 _headersView = _headers.ref(0).tryAsHeaderArray();\\n\\n        require(\\n            _oldStart.notNull() && _oldEnd.notNull() && _headersView.notNull(),\\n            \\\"BitcoinRelay: bad args. Check header and array byte lengths.\\\"\\n        );\\n\\n        return _addHeadersWithRetarget(_oldStart, _oldEnd, _headersView);\\n    }\\n\\n    /// @notice         Finds the height of a header by its hash\\n    /// @dev            Will fail if the header is unknown\\n    /// @param _hash  The header hash to search for\\n    /// @return         The height of the header\\n    function _findHeight(bytes32 _hash) internal view returns (uint256) {\\n        if (blockHeight[_hash] == 0) {\\n            revert(\\\"Unknown block\\\");\\n        }\\n        else {\\n            return blockHeight[_hash];\\n        }\\n    }\\n\\n    /// @notice         Finds an ancestor for a block by its hash\\n    /// @dev            Will fail if the header is unknown\\n    /// @param _hash  The header hash to search for\\n    /// @return         The height of the header, or error if unknown\\n    function _findAncestor(bytes32 _hash, uint256 _offset) internal view returns (bytes32) {\\n        bytes32 _current = _hash;\\n        for (uint256 i = 0; i < _offset; i++) {\\n            _current = previousBlock[_current];\\n        }\\n        require(_current != bytes32(0), \\\"BitcoinRelay: unknown ancestor\\\");\\n        return _current;\\n    }\\n\\n    /// @notice             Checks if a hash is an ancestor of the current one\\n    /// @dev                Limit the amount of lookups (and thus gas usage) with _limit\\n    /// @param _ancestor    The prospective ancestor\\n    /// @param _descendant  The descendant to check\\n    /// @param _limit       The maximum number of blocks to check\\n    /// @return             true if ancestor is at most limit blocks lower than descendant, otherwise false\\n    function _isAncestor(bytes32 _ancestor, bytes32 _descendant, uint256 _limit) internal view returns (bool) {\\n        bytes32 _current = _descendant;\\n        /* NB: 200 gas/read, so gas is capped at ~200 * limit */\\n        for (uint256 i = 0; i < _limit; i++) {\\n            if (_current == _ancestor) {\\n                return true;\\n            }\\n            _current = previousBlock[_current];\\n        }\\n        return false;\\n    }\\n\\n    function _revertBytes32(bytes32 _input) internal pure returns(bytes32) {\\n        bytes memory temp;\\n        bytes32 result;\\n        for (uint256 i = 0; i < 32; i++) {\\n            temp = abi.encodePacked(temp, _input[31-i]);\\n        }\\n        assembly {\\n            result := mload(add(temp, 32))\\n        }\\n        return result;\\n    }\\n\\n    /// @notice                 Gets fee from the user\\n    /// @dev                    Fee is paid in target blockchain native token\\n    /// @return                 True if the fee payment was successful\\n    function _getFee(uint gasPrice) internal returns (bool){\\n        uint feeAmount;\\n        feeAmount = (submissionGasUsed * gasPrice * (1 + relayerPercentageFee) * (epochLength)) / (100 * lastEpochQueries);\\n        require(msg.value >= feeAmount, \\\"BitcoinRelay: fee is not enough\\\");\\n        // (sentFee, dataFee) = payable(msg.sender).call{value: (msg.value - feeAmount)}(\\\"\\\");\\n        Address.sendValue(payable(msg.sender), msg.value - feeAmount);\\n        return true;\\n    }\\n\\n\\n    /// @notice             Adds headers to storage after validating\\n    /// @dev                We check integrity and consistency of the header chain\\n    /// @param  _anchor     The header immediately preceeding the new chain\\n    /// @param  _headers    A tightly-packed list of new 80-byte Bitcoin headers to record\\n    /// @param  _internal   True if called internally from addHeadersWithRetarget, false otherwise\\n    /// @return             True if successfully written, error otherwise\\n    function _addHeaders(bytes29 _anchor, bytes29 _headers, bool _internal) internal returns (bool) {\\n        // Extract basic info\\n        bytes32 _previousHash = _anchor.hash256();\\n        uint256 _anchorHeight = _findHeight(_previousHash);  /* NB: errors if unknown */\\n        uint256 _target = _headers.indexHeaderArray(0).target();\\n\\n        require(\\n            _internal || _anchor.target() == _target,\\n            \\\"BitcoinRelay: unexpected retarget on external call\\\"\\n        );\\n\\n        /*\\n        NB:\\n        1. check that the header has sufficient work\\n        2. check that headers are in a coherent chain (no retargets, hash links good)\\n        3. Store the block connection\\n        4. Store the height\\n        */\\n        uint256 _height;\\n        bytes32 _currentHash;\\n        for (uint256 i = 0; i < _headers.len() / 80; i++) {\\n            bytes29 _header = _headers.indexHeaderArray(i);\\n            _height = _anchorHeight + i + 1;\\n            _currentHash = _header.hash256();\\n\\n            // This requires submitting multiplies of 2016 with retarget and avoids accepting\\n            // a new epoch with no retarget\\n            require(_internal || _height % 2016 != 0,\\n                \\\"BitcoinRelay: headers should be submitted by calling addHeadersWithRetarget\\\");\\n\\n            /* NB: we do still need to make chain level checks tho */\\n            require(_header.target() == _target, \\\"BitcoinRelay: target changed unexpectedly\\\");\\n            require(_header.checkParent(_previousHash), \\\"BitcoinRelay: headers do not form a consistent chain\\\");\\n\\n            require(_height + finalizationParameter > lastSubmittedHeight, \\\"BitcoinRelay: block header is too old\\\");\\n            /*\\n            NB:\\n            if the block is already authenticated, we don't need to a work check\\n            Or write anything to state. This saves gas\\n            */\\n            // The below check prevents adding a replicated block header\\n            if (previousBlock[_currentHash] == bytes32(0)) {\\n                require(\\n                    TypedMemView.reverseUint256(uint256(_currentHash)) <= _target,\\n                    \\\"BitcoinRelay: header work is insufficient\\\"\\n                );\\n\\n                previousBlock[_currentHash] = _previousHash;\\n                blockHeight[_currentHash] = _height;\\n                _addToChain(_header, _height);\\n                emit BlockAdded(_height, _currentHash, _previousHash, msg.sender);\\n            }\\n            _previousHash = _currentHash;\\n        }\\n        return true;\\n    }\\n\\n    /// @notice                     Sends reward and compensation to the relayer\\n    /// @dev                        We pay the block submission cost in TNT and the extra reward in TDT\\n    /// @param  _relayer            The relayer address\\n    /// @return                     True if the amount is paid and False if treasury is empty\\n    function _sendReward(address _relayer) internal returns (uint, uint) {\\n\\n        // Reward in TNT\\n        uint rewardAmountInTNT = submissionGasUsed * tx.gasprice * (1 + relayerPercentageFee) / 100;\\n\\n        // Reward in TDT\\n        uint contractTDTBalance;\\n        if (TeleportDAOToken != address(0)) {\\n            contractTDTBalance = IERC20(TeleportDAOToken).balanceOf(address(this));\\n        } else {\\n            contractTDTBalance = 0;\\n        }\\n\\n        // Send reward in TDT\\n        bool sentTDT;\\n        if (rewardAmountInTDT <= contractTDTBalance && rewardAmountInTDT > 0) {\\n            // Call ERC20 token contract to transfer reward tokens to the relayer\\n            sentTDT = IERC20(TeleportDAOToken).transfer(_relayer, rewardAmountInTDT);\\n        }\\n\\n        // Send reward in TNT\\n        bool sentTNT;\\n        if (address(this).balance > rewardAmountInTNT && rewardAmountInTNT > 0) {\\n            // note: no need to revert if failed\\n            (sentTNT,) = payable(_relayer).call{value: rewardAmountInTNT}(\\\"\\\");\\n        }\\n\\n        if (sentTNT) {\\n            if (sentTDT) {\\n                return (rewardAmountInTNT, rewardAmountInTDT);\\n            } else {\\n                return (rewardAmountInTNT, 0);\\n            }\\n        } else {\\n            if (sentTDT) {\\n                return (0, rewardAmountInTDT);\\n            } else {\\n                return (0, 0);\\n            }\\n        }\\n    }\\n\\n    /// @notice                     Adds a header to the chain\\n    /// @dev                        We prune the chain if the new header causes other block headers to get finalized\\n    /// @param  _header             The new block header\\n    /// @param  _height             The height of the new block header\\n    function _addToChain(bytes29 _header, uint _height) internal {\\n        // Prevent relayers to submit too old block headers\\n        require(_height + finalizationParameter > lastSubmittedHeight, \\\"BitcoinRelay: block header is too old\\\");\\n        blockHeader memory newBlockHeader;\\n        newBlockHeader.selfHash = _header.hash256();\\n        newBlockHeader.parentHash = _header.parent();\\n        newBlockHeader.merkleRoot = _header.merkleRoot();\\n        newBlockHeader.relayer = msg.sender;\\n        newBlockHeader.gasPrice = tx.gasprice;\\n        chain[_height].push(newBlockHeader);\\n        if(_height > lastSubmittedHeight){\\n            lastSubmittedHeight += 1;\\n            _pruneChain();\\n            _updateFee();\\n        }\\n    }\\n\\n    /// @notice                     Reset the number of users in an epoch when a new epoch starts\\n    /// @dev                        This parameter is used when calculating the fee that relay gets from a user in the next epoch\\n    function _updateFee() internal {\\n        if (lastSubmittedHeight % epochLength == 0) {\\n            lastEpochQueries = (currentEpochQueries < baseQueries) ? baseQueries : currentEpochQueries;\\n            currentEpochQueries = 0;\\n        }\\n    }\\n\\n    /// @notice                     Finalizes a block header and removes all the other headers in the same height\\n    /// @dev\\n    function _pruneChain() internal {\\n        // Make sure that we have at least finalizationParameter blocks on relay\\n        if ((lastSubmittedHeight - initialHeight) >= finalizationParameter){\\n            uint idx = finalizationParameter;\\n            uint currentHeight = lastSubmittedHeight;\\n            uint stableIdx = 0;\\n            while (idx > 0) {\\n                // bytes29 header = chain[currentHeight][stableIdx];\\n                bytes32 parentHeaderHash = chain[currentHeight][stableIdx].parentHash;\\n                stableIdx = _findIndex(parentHeaderHash, currentHeight-1);\\n                idx--;\\n                currentHeight--;\\n            }\\n            // Keep the finalized block header and delete rest of headers\\n            chain[currentHeight][0] = chain[currentHeight][stableIdx];\\n            if(chain[currentHeight].length > 1){\\n                _pruneHeight(currentHeight);\\n                // A new block has been finalized, we send its relayer's reward\\n                uint rewardAmountTNT;\\n                uint rewardAmountTDT;\\n                (rewardAmountTNT, rewardAmountTDT) = _sendReward(chain[currentHeight][0].relayer);\\n\\n                emit BlockFinalized(\\n                    currentHeight,\\n                    chain[currentHeight][0].selfHash,\\n                    chain[currentHeight][0].parentHash,\\n                    chain[currentHeight][0].relayer,\\n                    rewardAmountTNT,\\n                    rewardAmountTDT\\n                );\\n            }\\n        }\\n    }\\n\\n    /// @notice                     Finds the index of a block header in a specific height\\n    /// @dev\\n    /// @param  _headerHash         The block header hash\\n    /// @param  _height             The height of the block header\\n    /// @return                     Index of the block header\\n    function _findIndex(bytes32 _headerHash, uint _height) internal view returns(uint) {\\n        for(uint256 index = 0; index < chain[_height].length; index++) {\\n            if(_headerHash == chain[_height][index].selfHash) {\\n                return index;\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    /// @notice                     Deletes all the block header in the same height except the first header\\n    /// @dev                        The first header is the one that has gotten finalized\\n    /// @param  _height             The height of the new block header\\n    function _pruneHeight(uint _height) internal {\\n        uint idx = 1;\\n        while(idx < chain[_height].length){\\n            delete chain[_height][idx]; // check if it should be backwards?\\n            idx += 1;\\n        }\\n    }\\n\\n    /// @notice                       Adds headers to storage, performs additional validation of retarget\\n    /// @dev                          Checks the retarget, the heights, and the linkage\\n    /// @param  _oldStart             The first header in the difficulty period being closed\\n    /// @param  _oldEnd               The last header in the difficulty period being closed\\n    /// @param  _headers              A tightly-packed list of 80-byte Bitcoin headers\\n    /// @return                       True if successfully written, error otherwise\\n    function _addHeadersWithRetarget(\\n        bytes29 _oldStart,\\n        bytes29 _oldEnd,\\n        bytes29 _headers\\n    ) internal returns (bool) {\\n\\n        /* NB: requires that both blocks are known */\\n        uint256 _startHeight = _findHeight(_oldStart.hash256());\\n        uint256 _endHeight = _findHeight(_oldEnd.hash256());\\n\\n        /* NB: retargets should happen at 2016 block intervals */\\n        require(\\n            _endHeight % 2016 == 2015,\\n            \\\"BitcoinRelay: must provide the last header of the closing difficulty period\\\");\\n        require(\\n            _endHeight == _startHeight + 2015,\\n            \\\"BitcoinRelay: must provide exactly 1 difficulty period\\\");\\n        require(\\n            _oldStart.diff() == _oldEnd.diff(),\\n            \\\"BitcoinRelay: period header difficulties do not match\\\");\\n\\n        /* NB: This comparison looks weird because header nBits encoding truncates targets */\\n        bytes29 _newStart = _headers.indexHeaderArray(0);\\n        uint256 _actualTarget = _newStart.target();\\n        uint256 _expectedTarget = ViewBTC.retargetAlgorithm(\\n            _oldStart.target(),\\n            _oldStart.time(),\\n            _oldEnd.time()\\n        );\\n        require(\\n            (_actualTarget & _expectedTarget) == _actualTarget, // shouldn't it be == _expected??\\n            \\\"BitcoinRelay: invalid retarget provided\\\");\\n\\n        // Pass all but the first through to be added\\n        return _addHeaders(_oldEnd, _headers, true);\\n    }\\n}\\n\"\n    },\n    \"contracts/libraries/ViewSPV.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./TypedMemView.sol\\\";\\nimport \\\"./ViewBTC.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\n\\nlibrary ViewSPV {\\n    using TypedMemView for bytes;\\n    using TypedMemView for bytes29;\\n    using ViewBTC for bytes29;\\n    using SafeMath for uint256;\\n\\n    uint256 constant ERR_BAD_LENGTH = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n    uint256 constant ERR_INVALID_CHAIN = 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe;\\n    uint256 constant ERR_LOW_WORK = 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd;\\n\\n    function getErrBadLength() public pure returns (uint256) {\\n        return ERR_BAD_LENGTH;\\n    }\\n\\n    function getErrInvalidChain() public pure returns (uint256) {\\n        return ERR_INVALID_CHAIN;\\n    }\\n\\n    function getErrLowWork() public pure returns (uint256) {\\n        return ERR_LOW_WORK;\\n    }\\n\\n    // @notice             requires `memView` to be of a specified type\\n    // @param memView      a 29-byte view with a 5-byte type\\n    // @param t            the expected type (e.g. BTCTypes.Outpoint, BTCTypes.TxIn, etc)\\n    // @return             passes if it is the correct type, errors if not\\n    modifier typeAssert(bytes29 memView, ViewBTC.BTCTypes t) {\\n        memView.assertType(uint40(t));\\n        _;\\n    }\\n\\n    // @notice                     Validates a tx inclusion in the block\\n    // @dev                        `index` is not a reliable indicator of location within a block\\n    // @param _txid                The txid (LE)\\n    // @param _merkleRoot          The merkle root (as in the block header)\\n    // @param _intermediateNodes   The proof's intermediate nodes (digests between leaf and root)\\n    // @param _index               The leaf's index in the tree (0-indexed)\\n    // @return                     true if fully valid, false otherwise\\n    // function prove(\\n    //     bytes32 _txid,\\n    //     bytes32 _merkleRoot,\\n    //     bytes29 _intermediateNodes,\\n    //     uint _index\\n    // ) internal view typeAssert(_intermediateNodes, ViewBTC.BTCTypes.MerkleArray) returns (bool) {\\n    //     // Shortcut the empty-block case\\n    //     if (_txid == _merkleRoot && _index == 0 && _intermediateNodes.len() == 0) {\\n    //         return true;\\n    //     }\\n\\n    //     return ViewBTC.checkMerkle(_txid, _intermediateNodes, _merkleRoot, _index);\\n    // }\\n    function prove(\\n        bytes32 _txid,\\n        bytes32 _merkleRoot,\\n        bytes29 _intermediateNodes,\\n        uint _index\\n    ) public view returns (bool) {\\n        // Shortcut the empty-block case\\n        if (revertBytes32(_txid) == _merkleRoot && _index == 0 && _intermediateNodes.len() == 0) {\\n            return true;\\n        }\\n\\n        return ViewBTC.checkMerkle(_txid, _intermediateNodes, _merkleRoot, _index);\\n    }\\n\\n    function revertBytes32(bytes32 input) public pure returns(bytes32) {\\n        bytes memory temp;\\n        bytes32 result;\\n        for (uint i = 0; i < 32; i++) {\\n            temp = abi.encodePacked(temp, input[31-i]);\\n        }\\n        assembly {\\n            result := mload(add(temp, 32))\\n        }\\n        return result;\\n    }\\n\\n    // @notice             Hashes transaction to get txid\\n    // @dev                Supports Legacy and Witness\\n    // @param _version     4-bytes version\\n    // @param _vin         Raw bytes length-prefixed input vector\\n    // @param _vout        Raw bytes length-prefixed output vector\\n    // @param _locktime    4-byte tx locktime\\n    // @return             32-byte transaction id, little endian\\n    function calculateTxId(\\n        bytes4 _version,\\n        bytes29 _vin,\\n        bytes29 _vout,\\n        bytes4 _locktime\\n    ) public view typeAssert(_vin, ViewBTC.BTCTypes.Vin) typeAssert(_vout, ViewBTC.BTCTypes.Vout) returns (bytes32) {\\n        // TODO: write in assembly\\n        return abi.encodePacked(_version, _vin.clone(), _vout.clone(), _locktime).ref(0).hash256();\\n    }\\n\\n    // TODO: add test for checkWork\\n    // @notice             Checks validity of header work\\n    // @param _header      Header view\\n    // @param _target      The target threshold\\n    // @return             true if header work is valid, false otherwise\\n    function checkWork(bytes29 _header, uint256 _target) public view typeAssert(_header, ViewBTC.BTCTypes.Header) returns (bool) {\\n        return _header.work() < _target;\\n    }\\n\\n\\n    // @notice                     Checks validity of header chain\\n    // @dev                        Compares current header parent to previous header's digest\\n    // @param _header              The raw bytes header\\n    // @param _prevHeaderDigest    The previous header's digest\\n    // @return                     true if the connect is valid, false otherwise\\n    function checkParent(bytes29 _header, bytes32 _prevHeaderDigest) public pure typeAssert(_header, ViewBTC.BTCTypes.Header) returns (bool) {\\n        return _header.parent() == _prevHeaderDigest;\\n    }\\n\\n    // @notice             Checks validity of header chain\\n    // @notice             Compares the hash of each header to the prevHash in the next header\\n    // @param _headers     Raw byte array of header chain\\n    // @return             The total accumulated difficulty of the header chain, or an error code\\n    function checkChain(bytes29 _headers) public view typeAssert(_headers, ViewBTC.BTCTypes.HeaderArray) returns (uint256 _totalDifficulty) {\\n        bytes32 _digest;\\n        uint256 _headerCount = _headers.len() / 80;\\n        for (uint256 i = 0; i < _headerCount; i += 1) {\\n            bytes29 _header = _headers.indexHeaderArray(i);\\n            if (i != 0) {\\n                if (!checkParent(_header, _digest)) {return ERR_INVALID_CHAIN;}\\n            }\\n            _digest = _header.workHash();\\n            uint256 _work = TypedMemView.reverseUint256(uint256(_digest));\\n            uint256 _target = _header.target();\\n\\n            if (_work > _target) {return ERR_LOW_WORK;}\\n\\n            _totalDifficulty += ViewBTC.toDiff(_target);\\n        }\\n    }\\n}\"\n    },\n    \"@openzeppelin/contracts/security/Pausable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\"\n    },\n    \"contracts/pools/CollateralPoolFactory.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport './interfaces/ICollateralPoolFactory.sol';\\nimport '../erc20/interfaces/IERC20.sol';\\nimport './CollateralPool.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\n\\ncontract CollateralPoolFactory is ICollateralPoolFactory, Ownable, ReentrancyGuard {\\n\\n    mapping(address => address) public override getCollateralPoolByToken; // collateral token => collateral pool\\n    address[] public override allCollateralPools;\\n    address public override instantRouter;\\n\\n    constructor(address _instantRouter) {\\n        instantRouter = _instantRouter;\\n    }\\n\\n    /// @return         Total number of collateral pools\\n    function allCollateralPoolsLength() public override view returns (uint) {\\n        return allCollateralPools.length;\\n    }\\n\\n    /// @notice                   Checks that whether the token is accepted as collateral or not\\n    /// @param _collateralToken   Address of collateral token\\n    /// @return                   True if the corresponding collateral pool exists\\n    function isCollateral(address _collateralToken) external override view returns (bool) {\\n        return getCollateralPoolByToken[_collateralToken] == address(0) ? false : true;\\n    }\\n\\n    /// @notice                 Changes instant router contract address\\n    /// @dev                    Only owner can call this\\n    /// @param _instantRouter   The new instant router contract address\\n    function setInstantRouter(address _instantRouter) external override onlyOwner {\\n        instantRouter = _instantRouter;\\n    }\\n\\n    /// @notice                          Creates a new collateral pool\\n    /// @dev                             Only owner can call this\\n    /// @param _collateralToken          Address of underlying collateral token\\n    /// @param _collateralizationRatio   The ratio of over collateralization\\n    /// @return                          Address of newly created collateral pool\\n    function createCollateralPool(\\n        address _collateralToken, \\n        uint _collateralizationRatio\\n    ) external nonReentrant onlyOwner override returns (address) {\\n        require(_collateralToken != address(0), 'CollateralPoolFactory: Collateral token address is not valid');\\n        require(_collateralizationRatio != 0, 'CollateralPoolFactory: Collateralization ratio cannot be zero');\\n        require(\\n            getCollateralPoolByToken[_collateralToken] == address(0), \\n            'CollateralPoolFactory: Collateral pool already exists'\\n        );\\n        CollateralPool pool;\\n        string memory name;\\n        string memory symbol;\\n        name = string(abi.encodePacked(IERC20(_collateralToken).name(), \\\"-\\\", \\\"Collateral-Pool\\\"));\\n        symbol = string(abi.encodePacked(IERC20(_collateralToken).symbol(), \\\"CP\\\"));\\n        pool = new CollateralPool(name, symbol, _collateralToken, _collateralizationRatio);\\n        getCollateralPoolByToken[_collateralToken] = address(pool);\\n        allCollateralPools.push(address(pool));\\n        emit CreateCollateralPool(name, _collateralToken, _collateralizationRatio, address(pool));\\n        return address(pool);\\n    }\\n\\n    /// @notice                          Removes an existing collateral pool\\n    /// @dev                             Only owner can call this\\n    /// @param _collateralToken          Address of underlying collateral token\\n    /// @param _index                    Index of collateral pool in allCollateralPools\\n    /// @return                          True if collateral pool is removed successfully\\n    function removeCollateralPool(\\n        address _collateralToken, \\n        uint _index\\n    ) external nonReentrant onlyOwner override returns (bool) {\\n        address collateralPool = getCollateralPoolByToken[_collateralToken];\\n        require(collateralPool != address(0), 'CollateralPoolFactory: Collateral pool does not exist');\\n        require(_index < allCollateralPoolsLength(), 'CollateralPoolFactory: Index is out of range');\\n        require(collateralPool == allCollateralPools[_index], 'CollateralPoolFactory: Index is not correct');\\n        getCollateralPoolByToken[_collateralToken] = address(0);\\n        _removeElement(_index);\\n        emit RemoveCollateralPool(_collateralToken, collateralPool);\\n        return true;\\n    }\\n\\n    /// @notice             Removes an element of allCollateralPools\\n    /// @dev                Deletes and shifts the array  \\n    /// @param _index       Index of the element that is deleted\\n    function _removeElement(uint _index) internal {\\n        require(_index < allCollateralPoolsLength(), \\\"CollateralPoolFactory: Index is out of range\\\");\\n        for (uint i = _index; i < allCollateralPoolsLength() - 1; i++) {\\n            allCollateralPools[i] = allCollateralPools[i+1];\\n        }\\n        allCollateralPools.pop();\\n    }\\n}\"\n    },\n    \"contracts/pools/CollateralPool.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport '../libraries/SafeMath.sol';\\nimport './interfaces/ICollateralPool.sol';\\nimport '../erc20/interfaces/IERC20.sol';\\nimport '../erc20/ERC20.sol';\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/security/ReentrancyGuard.sol';\\nimport 'hardhat/console.sol'; // Just for test\\n\\ncontract CollateralPool is ICollateralPool, ERC20, Ownable, ReentrancyGuard {\\n    \\n    using SafeMath for uint;\\n    address public override collateralToken;\\n    uint public override collateralizationRatio; // Multiplied by 100\\n    \\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        address _collateralToken,\\n        uint _collateralizationRatio\\n    ) ERC20(_name, _symbol, 0) {\\n        collateralToken = _collateralToken;\\n        collateralizationRatio = _collateralizationRatio;\\n    }\\n\\n\\n    /// @return                 Amount of total added collateral\\n    function totalAddedCollateral() public view override returns (uint) {\\n        return IERC20(collateralToken).balanceOf(address(this));\\n    }\\n\\n    /// @notice                          Changes the collateralization ratio\\n    /// @dev                             Only owner can call this\\n    /// @param _collateralizationRatio   The new collateralization ratio\\n    function setCollateralizationRatio(uint _collateralizationRatio) external override onlyOwner {\\n        collateralizationRatio = _collateralizationRatio;\\n    }\\n\\n    /// @notice                             Converts collateral pool token to collateral token \\n    /// @param _collateralPoolTokenAmount   Amount of collateral pool token\\n    /// @return                             Amount of collateral token\\n    function equivalentCollateralToken(uint _collateralPoolTokenAmount) external view override returns (uint) {\\n        require(totalSupply() > 0, \\\"CollateralPool: collateral pool is empty\\\");\\n        require(totalSupply() >= _collateralPoolTokenAmount, \\\"CollateralPool: liquidity is not sufficient\\\");\\n        return _collateralPoolTokenAmount*totalAddedCollateral()/totalSupply();\\n    }\\n\\n    /// @notice                         Converts collateral token to collateral pool token \\n    /// @param _collateralTokenAmount   Amount of collateral token\\n    /// @return                         Amount of collateral pool token\\n    function equivalentCollateralPoolToken(uint _collateralTokenAmount) external view override returns (uint) {\\n        require(totalAddedCollateral() > 0, \\\"CollateralPool: collateral pool is empty\\\");\\n        require(totalAddedCollateral() >= _collateralTokenAmount, \\\"CollateralPool: liquidity is not sufficient\\\");\\n        return _collateralTokenAmount*totalSupply()/totalAddedCollateral();\\n    }\\n\\n    /// @notice                 Adds collateral to collateral pool \\n    /// @dev                    Mints collateral pool token for user\\n    /// @param _user            Address of user whose collateral balance is increased\\n    /// @param _amount          Amount of added collateral\\n    /// @return                 True if collateral is added successfully\\n    function addCollateral(address _user, uint _amount) external nonReentrant override returns (bool) {\\n        // Checks basic requirements\\n        require(_user != address(0), \\\"CollateralPool: User address is zero\\\");\\n        require(_amount != 0, \\\"CollateralPool: Amount is zero\\\");\\n\\n        // Calculates collateral pool token amount\\n        uint collateralPoolTokenAmount;\\n        if (totalSupply() == 0) {\\n            collateralPoolTokenAmount = _amount;\\n        } else {\\n            collateralPoolTokenAmount = _amount*totalSupply()/totalAddedCollateral();\\n        }\\n\\n        // Transfers collateral tokens from message sender to contract\\n        IERC20(collateralToken).transferFrom(msg.sender, address(this), _amount);\\n\\n        // Mints collateral pool token for _user\\n        _mint(_user, collateralPoolTokenAmount);\\n        emit AddCollateral(_user, _amount, collateralPoolTokenAmount);\\n\\n        return true;\\n    }\\n\\n    /// @notice                               Removes collateral from collateral pool\\n    /// @dev                                  Burns collateral pool token of message sender\\n    /// @param _collateralPoolTokenAmount     Amount of burnt collateral pool token\\n    /// @return                               True if collateral is removed successfully\\n    function removeCollateral(uint _collateralPoolTokenAmount) external nonReentrant override returns (bool) {\\n        // Checks basic requirements\\n        require(_collateralPoolTokenAmount != 0, \\\"CollateralPool: Amount is zero\\\");\\n        require(balanceOf(msg.sender) >= _collateralPoolTokenAmount, \\\"CollateralPool: balance is not enough\\\");\\n\\n        // Finds equivalent collateral token amount\\n        uint collateralTokenAmount = _collateralPoolTokenAmount*totalAddedCollateral()/totalSupply();\\n\\n        // Burn collateral pool token of user\\n        _burn(msg.sender, _collateralPoolTokenAmount);\\n\\n        // Sends collateral token to user\\n        IERC20(collateralToken).transfer(msg.sender, collateralTokenAmount);\\n        emit RemoveCollateral(msg.sender, collateralTokenAmount, _collateralPoolTokenAmount);\\n        return true;\\n    }\\n\\n}\"\n    },\n    \"contracts/erc20/interfaces/IWrappedToken.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport './IERC20.sol';\\n\\ninterface IWrappedToken is IERC20 {\\n  // events\\n  event Mint(address indexed to, uint value);\\n  event Burn(address indexed to, uint value);\\n  // read-only functions\\n  function CCTransferRouter() external view returns(address);\\n  // state-changing functions\\n  function mint(address receiver, uint amount) external returns(bool);\\n  function burn(uint256 amount) external;\\n  function mintTestToken() external;\\n\\n}\"\n    },\n    \"contracts/erc20/interfaces/IWETH.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport './IERC20.sol';\\n\\ninterface IWETH is IERC20 {\\n    function deposit() external payable;\\n    // function transfer(address to, uint value) external returns (bool);\\n    function withdraw(uint) external;\\n}\"\n    },\n    \"contracts/erc20/WETH.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/IWETH.sol\\\";\\nimport \\\"../libraries/SafeMath.sol\\\";\\nimport \\\"./ERC20.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract WETH is ERC20 {\\n    // using SafeMath for uint;\\n\\n    constructor(string memory _name, string memory _symbol)\\n    ERC20(_name, _symbol, 0) {}\\n\\n    function deposit() external payable {\\n        require(msg.value > 0);\\n        _mint(_msgSender(), msg.value);\\n    }\\n\\n    function withdraw(uint value) external {\\n        require(balanceOf(_msgSender()) >= value, \\\"Balance is not sufficient\\\");\\n        _burn(_msgSender(), value);\\n        address payable recipient = payable(_msgSender());\\n        recipient.transfer(value);\\n    }\\n}\"\n    },\n    \"contracts/erc20/ERC20AsLink.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC20.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20AsLink is ERC20 {\\n    constructor (\\n        string memory name_,\\n        string memory symbol_,\\n        uint initialMintedAmount\\n    ) ERC20(name_, symbol_, initialMintedAmount) {}\\n}\\n\"\n    },\n    \"contracts/erc20/ERC20AsDot.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ERC20.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20AsDot is ERC20 {\\n    constructor (\\n        string memory name_,\\n        string memory symbol_,\\n        uint initialMintedAmount\\n    ) ERC20(name_, symbol_, initialMintedAmount) {}\\n}\\n\"\n    },\n    \"contracts/oracle/PriceOracle.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport './interfaces/IPriceOracle.sol';\\nimport '../connectors/interfaces/IExchangeConnector.sol';\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport \\\"hardhat/console.sol\\\"; // Just for test\\n\\ncontract PriceOracle is IPriceOracle, Ownable {\\n\\n    mapping(address => mapping (address => address)) public override ChainlinkPriceProxy;\\n    mapping(address => address) public override exchangeConnector;\\n    address[] public override exchangeRoutersList;\\n    uint public override acceptableDelay;\\n    address public constant NATIVE_TOKEN = address(1);\\n\\n    constructor(uint _acceptableDelay) {\\n        acceptableDelay = _acceptableDelay;\\n    }\\n\\n    /// @notice                 Getter for the length of exchange router list\\n    function getExchangeRoutersListLength() public view override returns (uint) {\\n        return exchangeRoutersList.length;\\n    }\\n\\n    /// @notice                         Finds amount of output token that has equal value to the input amount of the input token\\n    /// @param _inputAmount             Amount of the input token\\n    /// @param _inputDecimals           Number of input token decimals\\n    /// @param _outputDecimals          Number of output token decimals\\n    /// @param _inputToken              Address of the input token\\n    /// @param _outputToken             Address of output token\\n    /// @return                         Amount of the output token\\n    function equivalentOutputAmount(\\n        uint _inputAmount,\\n        uint _inputDecimals,\\n        uint _outputDecimals,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view override returns (uint) {\\n        // Gets output amount from oracle\\n        (bool result, uint outputAmount, uint timestamp) = _equivalentOutputAmountFromOracle(\\n            _inputAmount,\\n            _inputDecimals,\\n            _outputDecimals,\\n            _inputToken,\\n            _outputToken\\n        );\\n\\n        // Checks timestamp of the oracle result\\n        if (result == true && _abs(int(timestamp) - int(block.timestamp)) < acceptableDelay) {\\n            return outputAmount;\\n        } else {\\n            bool _result;\\n            uint _outputAmount;\\n            uint _totalAmount;\\n            uint _totalNumber;\\n\\n            if (result == true) {\\n                _totalAmount = outputAmount;\\n                _totalNumber = 1;\\n            }\\n\\n            // Gets output amounts from exchange routers\\n            for (uint i = 0; i < getExchangeRoutersListLength(); i++) {\\n                (_result, _outputAmount) = _equivalentOutputAmountFromExchange(\\n                    exchangeRoutersList[i],\\n                    _inputAmount,\\n                    _inputToken,\\n                    _outputToken\\n                );\\n\\n                if (_result == true) {\\n                    _totalNumber = _totalNumber + 1;\\n                    _totalAmount = _totalAmount + _outputAmount;\\n                }\\n            }\\n\\n            // Returns average of results from different sources\\n            return _totalNumber > 0 ? _totalAmount/_totalNumber : 0;\\n\\n        }\\n    }\\n\\n    /// @notice                         Finds amount of output token that is equal to the input amount of the input token\\n    /// @dev                            The oracle is ChainLink\\n    /// @param _inputAmount             Amount of the input token\\n    /// @param _inputDecimals           Number of input token decimals\\n    /// @param _outputDecimals          Number of output token decimals\\n    /// @param _inputToken              Address of the input token\\n    /// @param _outputToken             Address of output token\\n    /// @return _outputAmount           Amount of the output token\\n    function equivalentOutputAmountFromOracle(\\n        uint _inputAmount,\\n        uint _inputDecimals,\\n        uint _outputDecimals,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view override returns (uint _outputAmount) {\\n        bool result;\\n        (result, _outputAmount, /*timestamp*/) = _equivalentOutputAmountFromOracle(\\n            _inputAmount,\\n            _inputDecimals,\\n            _outputDecimals,\\n            _inputToken,\\n            _outputToken\\n        );\\n        require(result == true, \\\"PriceOracle: Price proxy does not exist\\\");\\n    }\\n\\n    /// @notice                         Finds amount of output token that is equal to the input amount of the input token\\n    /// @param _exchangeRouter          Address of the exchange we are reading the price from\\n    /// @param _inputAmount             Amount of the input token\\n    /// @param _inputToken              Address of the input token\\n    /// @param _outputToken             Address of output token\\n    /// @return                         Amount of the output token\\n    function equivalentOutputAmountFromExchange(\\n        address _exchangeRouter,\\n        uint _inputAmount,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view override returns (uint) {\\n        (bool result, uint outputAmount) = _equivalentOutputAmountFromExchange(\\n            _exchangeRouter,\\n            _inputAmount,\\n            _inputToken,\\n            _outputToken\\n        );\\n        require(result == true, \\\"PriceOracle: Pair does not exist on exchange\\\");\\n        return outputAmount;\\n    }\\n\\n    /// @notice                    Adds an exchange connector\\n    /// @dev                       Only owner can call this\\n    /// @param _exchangeRouter     Exchange router contract address\\n    /// @param _exchangeConnector  New exchange connector contract address\\n    function addExchangeConnector(address _exchangeRouter, address _exchangeConnector) external override onlyOwner {\\n        exchangeRoutersList.push(_exchangeRouter);\\n        exchangeConnector[_exchangeRouter] = _exchangeConnector;\\n        emit ExchangeConnectorAdded(_exchangeRouter, _exchangeConnector);\\n    }\\n\\n    /// @notice                       Removes an exchange connector\\n    /// @dev                          Only owner can call this\\n    /// @param _exchangeRouterIndex   The exchange router index in the list\\n    function removeExchangeConnector(uint _exchangeRouterIndex) external override onlyOwner {\\n        address exchangeRouterAddress = exchangeRoutersList[_exchangeRouterIndex];\\n        _removeElementFromExchangeRoutersList(_exchangeRouterIndex);\\n        exchangeConnector[exchangeRouterAddress] = address(0);\\n        emit ExchangeConnectorRemoved(exchangeRouterAddress);\\n    }\\n\\n    /// @notice                     Sets a price proxy for a pair of tokens\\n    /// @dev                        Only owner can call this\\n    /// @param _firstToken          Address of the first token\\n    /// @param _secondToken         Address of the second token\\n    /// @param _priceProxyAddress   The address of the proxy price\\n    function setPriceProxy(address _firstToken, address _secondToken, address _priceProxyAddress) external override onlyOwner {\\n        ChainlinkPriceProxy[_firstToken][_secondToken] = _priceProxyAddress;\\n        emit SetPriceProxy(_firstToken, _secondToken, _priceProxyAddress);\\n    }\\n\\n    /// @notice                     Sets acceptable delay for oracle responses\\n    /// @dev                        If oracle data has not been updated for a while, we will get data from exchange routers\\n    /// @param _acceptableDelay     Maximum acceptable delay (in seconds)\\n    function setAcceptableDelay(uint _acceptableDelay) external override onlyOwner {\\n        acceptableDelay = _acceptableDelay;\\n    }\\n\\n    /// @notice                         Finds amount of output token that is equal to the input amount of the input token\\n    /// @dev                            The exchange should be Uniswap like. And have getReserves() and getAmountOut()\\n    /// @param _exchangeRouter         Address of the exchange we are reading the price from\\n    /// @param _inputAmount             Amount of the input token\\n    /// @param _inputToken              Address of the input token\\n    /// @param _outputToken             Address of output token\\n    /// @return _result                 True if getting amount was successful\\n    /// @return _outputAmount           Amount of the output token\\n    function _equivalentOutputAmountFromExchange(\\n        address _exchangeRouter,\\n        uint _inputAmount,\\n        address _inputToken,\\n        address _outputToken\\n    ) internal view returns (bool _result, uint _outputAmount) {\\n        if (_inputToken == NATIVE_TOKEN) {\\n            address wrappedNativeToken = IExchangeConnector(exchangeConnector[_exchangeRouter]).wrappedNativeToken();\\n            (_result, _outputAmount) = IExchangeConnector(exchangeConnector[_exchangeRouter]).getOutputAmount(\\n                _inputAmount,\\n                wrappedNativeToken,\\n                _outputToken\\n            );\\n        } else if (_outputToken == NATIVE_TOKEN) {\\n            address wrappedNativeToken = IExchangeConnector(exchangeConnector[_exchangeRouter]).wrappedNativeToken();\\n            (_result, _outputAmount) = IExchangeConnector(exchangeConnector[_exchangeRouter]).getOutputAmount(\\n                _inputAmount,\\n                _inputToken,\\n                wrappedNativeToken\\n            );\\n        } else {\\n            (_result, _outputAmount) = IExchangeConnector(exchangeConnector[_exchangeRouter]).getOutputAmount(\\n                _inputAmount,\\n                _inputToken,\\n                _outputToken\\n            );\\n        }\\n\\n    }\\n\\n    /// @notice                         Finds amount of output token that is equal to the input amount of the input token\\n    /// @dev                            The oracle is ChainLink\\n    /// @param _inputAmount             Amount of the input token\\n    /// @param _inputDecimals           Number of input token decimals\\n    /// @param _outputDecimals          Number of output token decimals\\n    /// @param _inputToken              Address of the input token\\n    /// @param _outputToken             Address of output token\\n    /// @return _result                 True if getting amount was successful\\n    /// @return _outputAmount           Amount of the output token\\n    /// @return _timestamp              Timestamp of the result\\n    function _equivalentOutputAmountFromOracle(\\n        uint _inputAmount,\\n        uint _inputDecimals,\\n        uint _outputDecimals,\\n        address _inputToken,\\n        address _outputToken\\n    ) internal view returns (bool _result, uint _outputAmount, uint _timestamp) {\\n        uint decimals;\\n        int price;\\n\\n        if (ChainlinkPriceProxy[_inputToken][_outputToken] != address(0)) {\\n            // Gets price of _inputToken/_outputToken\\n            (\\n            /*uint80 roundID*/,\\n            price,\\n            /*uint startedAt*/,\\n            _timestamp,\\n            /*uint80 answeredInRound*/\\n            ) = AggregatorV3Interface(ChainlinkPriceProxy[_inputToken][_outputToken]).latestRoundData();\\n\\n            // Gets number of decimals\\n            decimals = AggregatorV3Interface(ChainlinkPriceProxy[_inputToken][_outputToken]).decimals();\\n\\n            // TODO: check the logic again\\n            _outputAmount = uint(price)*_inputAmount*(10**(_outputDecimals + 1))/(10**(decimals + _inputDecimals + 1));\\n            _result = true;\\n        } else if (ChainlinkPriceProxy[_outputToken][_inputToken] != address(0)) {\\n            // Gets price of _outputToken/_inputToken\\n            (\\n            /*uint80 roundID*/,\\n            price,\\n            /*uint startedAt*/,\\n            _timestamp,\\n            /*uint80 answeredInRound*/\\n            ) = AggregatorV3Interface(ChainlinkPriceProxy[_outputToken][_inputToken]).latestRoundData();\\n\\n            // Gets number of decimals\\n            decimals = AggregatorV3Interface(ChainlinkPriceProxy[_outputToken][_inputToken]).decimals();\\n\\n            _outputAmount = (10**(decimals + 1))*_inputAmount*(10**(_outputDecimals + 1))/10/(10**(_inputDecimals + 1))/uint(price);\\n            _result = true;\\n        } else {\\n            return (false, 0, 0);\\n        }\\n\\n    }\\n\\n    /// @notice             Removes an element of excahngeRouterList\\n    /// @dev                Deletes and shifts the array\\n    /// @param _index       Index of the element that will be deleted\\n    function _removeElementFromExchangeRoutersList(uint _index) internal {\\n        require(_index < exchangeRoutersList.length, \\\"PriceOracle: Index is out of bound\\\");\\n        for (uint i = _index; i < exchangeRoutersList.length - 1; i++) {\\n            exchangeRoutersList[i] = exchangeRoutersList[i+1];\\n        }\\n        exchangeRoutersList.pop();\\n    }\\n\\n    function _abs(int x) internal pure returns (uint) {\\n        return x >= 0 ? uint(x) : uint(-x);\\n    }\\n\\n}\"\n    },\n    \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\"\n    },\n    \"contracts/uniswap/v2-core/interfaces/IUniswapV2Callee.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Callee {\\n    function uniswapV2Call(address sender, uint amount0, uint amount1, bytes calldata data) external;\\n}\\n\"\n    },\n    \"contracts/uniswap/v2-core/interfaces/IERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\\n\"\n    },\n    \"contracts/uniswap/v2-core/interfaces/IUniswapV2ERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2ERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\"\n    },\n    \"contracts/uniswap/v2-periphery/interfaces/V1/IUniswapV1Exchange.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV1Exchange {\\n    function balanceOf(address owner) external view returns (uint);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n    function removeLiquidity(uint, uint, uint, uint) external returns (uint, uint);\\n    function tokenToEthSwapInput(uint, uint, uint) external returns (uint);\\n    function ethToTokenSwapInput(uint, uint) external payable returns (uint);\\n}\\n\"\n    },\n    \"contracts/uniswap/v2-periphery/interfaces/V1/IUniswapV1Factory.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV1Factory {\\n    function getExchange(address) external view returns (address);\\n}\\n\"\n    },\n    \"contracts/uniswap/v2-periphery/interfaces/IUniswapV2Migrator.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Migrator {\\n    function migrate(address token, uint amountTokenMin, uint amountETHMin, address to, uint deadline) external;\\n}\\n\"\n    },\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\": {\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\"\n    },\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\n    }\n  },\n  \"settings\": {\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 200\n    },\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    }\n  }\n}",
      "solcInputHash": "9bccde1a4f7e4627724163f00e6fb00c",
      "transactionHash": "0x1a2d81af92f0797538aa83f9ed38dcc785a27d920d47ac742c112eabebfa08ee",
      "args": [
        "0x00c092305c16faeca982ae57b7af2eacb7db97d1615adfc8a4cbf2f69e0000000000000079cd8b911f3c4ac9c435dde01522bfe18cc43be992274dda6df3ef64827767527ec7fb62cbe7001a0badf2b4",
        2341284,
        "0x00000000000000516d942d591ecdff4d9bd2c3dc64d3556ee2289119b8b4226b",
        "0xba7D91095980608A34eB4ae66A478E3D0D5a7436"
      ]
    },
    "decoded": {
      "from": "0x5364E3557572bd5D5903C0e9C21BE359F2Eac1dA",
      "gasPrice": "200000000000",
      "gasLimit": "3873694",
      "to": null,
      "value": "0",
      "nonce": 277,
      "data": "0x60806040523480156200001157600080fd5b50604051620044cd380380620044cd83398101604081905262000034916200057d565b6200003f33620004a8565b600180556002805460ff191690556040516334fcca5360e11b815260009073a7e24f80e66bb09819d813e9c4b1b176e22c2d44906369f994a6906200008b908890859060040162000659565b60206040518083038186803b158015620000a457600080fd5b505af4158015620000b9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000df91906200053e565b6040516309dafd2160e31b815262ffffff199091166004820152733b377e98b51867e03ce140b709baa02ffbb31a5190634ed7e9089060240160206040518083038186803b1580156200013157600080fd5b505af415801562000146573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200016c91906200053e565b604051632c9c3b9f60e11b815262ffffff198216600482015290915073a7e24f80e66bb09819d813e9c4b1b176e22c2d4490635938773e9060240160206040518083038186803b158015620001c057600080fd5b505af4158015620001d5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001fb919062000515565b6200024c5760405162461bcd60e51b815260206004820152601d60248201527f426974636f696e52656c61793a2073746f70206265696e672064756d62000000604482015260640160405180910390fd5b6040516307f6f12360e21b815262ffffff198216600482015260009073a7e24f80e66bb09819d813e9c4b1b176e22c2d4490631fdbc48c9060240160206040518083038186803b158015620002a057600080fd5b505af4158015620002b5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002db919062000564565b6040805160a0810182526000602082018190528183018190526060820181905260808201528281529051634edfc3d560e11b815262ffffff198516600482015291925090733b377e98b51867e03ce140b709baa02ffbb31a5190639dbf87aa9060240160206040518083038186803b1580156200035757600080fd5b505af41580156200036c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000392919062000564565b604082810191825233606084019081523a6080850190815260008a815260096020908152848220805460018082018355918452828420895160059092020190815582890151918101919091559551600287015592516003860180546001600160a01b0319166001600160a01b0390921691909117905590516004909401939093556006859055848352600890529020869055620004326107e087620006f4565b6200043e90876200069d565b600095865260086020526040862055505060016005908155600485905560039490945550600d80546001600160a01b0319166001600160a01b0392909216919091179055600e8190556010829055601382905560119190915560125550620186a0600f556200072b565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b03811681146200051057600080fd5b919050565b60006020828403121562000527578081fd5b8151801515811462000537578182fd5b9392505050565b60006020828403121562000550578081fd5b815162ffffff198116811462000537578182fd5b60006020828403121562000576578081fd5b5051919050565b6000806000806080858703121562000593578283fd5b84516001600160401b0380821115620005aa578485fd5b818701915087601f830112620005be578485fd5b815181811115620005d357620005d362000715565b604051601f8201601f19908116603f01168101908382118183101715620005fe57620005fe62000715565b816040528281528a602084870101111562000617578788fd5b6200062a836020830160208801620006c1565b809850505050505060208501519250604085015191506200064e60608601620004f8565b905092959194509250565b60006040825283518060408401526200067a816060850160208801620006c1565b64ffffffffff93909316602083015250601f91909101601f191601606001919050565b600082821015620006bc57634e487b7160e01b81526011600452602481fd5b500390565b60005b83811015620006de578181015183820152602001620006c4565b83811115620006ee576000848401525b50505050565b6000826200071057634e487b7160e01b81526012600452602481fd5b500690565b634e487b7160e01b600052604160045260246000fd5b613d92806200073b6000396000f3fe60806040526004361061021a5760003560e01c8063882a5ee011610123578063b9bbd9bd116100ab578063e2761af01161006f578063e2761af0146105b9578063efbc7be4146105cf578063f2fde38b146105e5578063fa041af514610605578063fd9c6e851461061b5761021a565b8063b9bbd9bd1461052e578063b9e88ac11461054e578063c20dc6641461056e578063c781452914610584578063d0a89739146105995761021a565b80639f156414116100f25780639f156414146104a2578063a072bc50146104b8578063a3db54eb146104ce578063b36161bd146104ee578063b985621a1461050e5761021a565b8063882a5ee0146104225780638da5cb5b14610437578063901186bb14610455578063926d44e2146104755761021a565b80635b732892116101a65780636594168311610175578063659416831461039757806365da41b9146103b7578063665b634f146103d7578063715018a6146103ed5780637fa637fc146104025761021a565b80635b732892146103365780635b88a0e51461034c5780635c975abb1461035f57806360b5c390146103775761021a565b806330017b3b116101ed57806330017b3b146102a65780634354da25146102c6578063465e7559146102e957806354eea7961461030057806357d775f8146103205761021a565b8063108f438d1461021f578063113764be1461025c5780632b97be241461027b5780632f796d9014610290575b600080fd5b34801561022b57600080fd5b50600d5461023f906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561026857600080fd5b50600a545b604051908152602001610253565b34801561028757600080fd5b50600b5461026d565b34801561029c57600080fd5b5061026d60045481565b3480156102b257600080fd5b5061026d6102c13660046138fb565b610631565b6102d96102d436600461391c565b610646565b6040519015158152602001610253565b3480156102f557600080fd5b506102fe610a71565b005b34801561030c57600080fd5b506102fe61031b3660046138a0565b610aa5565b34801561032c57600080fd5b5061026d60105481565b34801561034257600080fd5b5061026d60125481565b34801561035857600080fd5b504761026d565b34801561036b57600080fd5b5060025460ff166102d9565b34801561038357600080fd5b5061026d6103923660046138a0565b610ad4565b3480156103a357600080fd5b506102fe6103b23660046138a0565b610ae7565b3480156103c357600080fd5b506102d96103d2366004613975565b610b16565b3480156103e357600080fd5b5061026d600e5481565b3480156103f957600080fd5b506102fe611001565b34801561040e57600080fd5b506102d961041d3660046139de565b611035565b34801561042e57600080fd5b5061026d6116ae565b34801561044357600080fd5b506000546001600160a01b031661023f565b34801561046157600080fd5b506102fe6104703660046138a0565b61172f565b34801561048157600080fd5b5061026d6104903660046138a0565b60009081526009602052604090205490565b3480156104ae57600080fd5b5061026d60115481565b3480156104c457600080fd5b5061026d60055481565b3480156104da57600080fd5b506102fe6104e93660046138a0565b61175e565b3480156104fa57600080fd5b506102fe6105093660046138a0565b61178d565b34801561051a57600080fd5b506102d96105293660046138d0565b6117bc565b34801561053a57600080fd5b5061026d6105493660046138fb565b6117d3565b34801561055a57600080fd5b506102fe6105693660046138a0565b61181d565b34801561057a57600080fd5b5061026d600f5481565b34801561059057600080fd5b506102fe61184c565b3480156105a557600080fd5b5061026d6105b43660046138fb565b61187e565b3480156105c557600080fd5b5061026d60035481565b3480156105db57600080fd5b5061026d60065481565b3480156105f157600080fd5b506102fe610600366004613835565b61190b565b34801561061157600080fd5b5061026d60135481565b34801561062757600080fd5b5061026d600c5481565b600061063d83836119a6565b90505b92915050565b6000600260015414156106745760405162461bcd60e51b815260040161066b90613bfb565b60405180910390fd5b600260015561068560025460ff1690565b156106a25760405162461bcd60e51b815260040161066b90613b9c565b6004546106b0906001613c32565b6106bb866006613c32565b1015610a605760005b600086815260096020526040902054811015610a08576000868152600960205260408120805461072491908490811061070d57634e487b7160e01b600052603260045260246000fd5b906000526020600020906005020160020154611a24565b9050600086868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052506040516334fcca5360e11b815273a7e24f80e66bb09819d813e9c4b1b176e22c2d44956369f994a6955061079394509250600401613b15565b60206040518083038186803b1580156107ab57600080fd5b505af41580156107bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e3919061387c565b6040516322a24af360e11b8152733b377e98b51867e03ce140b709baa02ffbb31a519163454495e69161081f9162ffffff191690600401613aee565b60206040518083038186803b15801561083757600080fd5b505af415801561084b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086f919061387c565b9050600061087c8a611a24565b60405163aa65716d60e01b8152600481018290526024810185905262ffffff19841660448201526064810188905290915073d5bf663a5862333282b45636c2d76050f27eeeef9063aa65716d9060840160206040518083038186803b1580156108e457600080fd5b505af41580156108f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091c919061385c565b156109f2576000898152600960205260409020805461096b91908690811061095457634e487b7160e01b600052603260045260246000fd5b906000526020600020906005020160040154611aa4565b6109cc5760405162461bcd60e51b815260206004820152602c60248201527f426974636f696e52656c61793a2067657474696e672066656520776173206e6f60448201526b1d081cdd58d8d95cdcd99d5b60a21b606482015260840161066b565b6001601260008282546109df9190613c32565b9091555060019550610a64945050505050565b5050508080610a0090613d01565b9150506106c4565b5060405162461bcd60e51b815260206004820152602660248201527f426974636f696e52656c61793a20747820686173206e6f74206265656e20696e60448201526518db1d59195960d21b606482015260840161066b565b5060005b6001805595945050505050565b6000546001600160a01b03163314610a9b5760405162461bcd60e51b815260040161066b90613bc6565b610aa3611b61565b565b6000546001600160a01b03163314610acf5760405162461bcd60e51b815260040161066b90613bc6565b601055565b6000610adf82611bd6565b90505b919050565b6000546001600160a01b03163314610b115760405162461bcd60e51b815260040161066b90613bc6565b601355565b600060026001541415610b3b5760405162461bcd60e51b815260040161066b90613bfb565b6002600155610b4c60025460ff1690565b15610b695760405162461bcd60e51b815260040161066b90613b9c565b600083838080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052506040516334fcca5360e11b815273a7e24f80e66bb09819d813e9c4b1b176e22c2d44956369f994a69550610bd694509250600401613b15565b60206040518083038186803b158015610bee57600080fd5b505af4158015610c02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c26919061387c565b604051632953639960e21b8152733b377e98b51867e03ce140b709baa02ffbb31a519163a54d8e6491610c629162ffffff191690600401613aee565b60206040518083038186803b158015610c7a57600080fd5b505af4158015610c8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb2919061387c565b9050600086868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052506040516334fcca5360e11b815273a7e24f80e66bb09819d813e9c4b1b176e22c2d44956369f994a69550610d2194509250600401613b15565b60206040518083038186803b158015610d3957600080fd5b505af4158015610d4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d71919061387c565b6040516309dafd2160e31b8152733b377e98b51867e03ce140b709baa02ffbb31a5191634ed7e90891610dad9162ffffff191690600401613aee565b60206040518083038186803b158015610dc557600080fd5b505af4158015610dd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dfd919061387c565b604051632c9c3b9f60e11b815290915073a7e24f80e66bb09819d813e9c4b1b176e22c2d4490635938773e90610e3d9062ffffff19861690600401613aee565b60206040518083038186803b158015610e5557600080fd5b505af4158015610e69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e8d919061385c565b610eff5760405162461bcd60e51b815260206004820152603960248201527f426974636f696e52656c61793a20686561646572206172726179206c656e677460448201527f68206d75737420626520646976697369626c6520627920383000000000000000606482015260840161066b565b604051632c9c3b9f60e11b815273a7e24f80e66bb09819d813e9c4b1b176e22c2d4490635938773e90610f3c9062ffffff19851690600401613aee565b60206040518083038186803b158015610f5457600080fd5b505af4158015610f68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8c919061385c565b610fe65760405162461bcd60e51b815260206004820152602560248201527f426974636f696e52656c61793a20616e63686f72206d75737420626520383020604482015264627974657360d81b606482015260840161066b565b610ff281836000611c36565b60018055979650505050505050565b6000546001600160a01b0316331461102b5760405162461bcd60e51b815260040161066b90613bc6565b610aa36000612521565b60006002600154141561105a5760405162461bcd60e51b815260040161066b90613bfb565b600260015561106b60025460ff1690565b156110885760405162461bcd60e51b815260040161066b90613b9c565b600087878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052506040516334fcca5360e11b815273a7e24f80e66bb09819d813e9c4b1b176e22c2d44956369f994a695506110f594509250600401613b15565b60206040518083038186803b15801561110d57600080fd5b505af4158015611121573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611145919061387c565b6040516309dafd2160e31b8152733b377e98b51867e03ce140b709baa02ffbb31a5191634ed7e908916111819162ffffff191690600401613aee565b60206040518083038186803b15801561119957600080fd5b505af41580156111ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d1919061387c565b9050600086868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052506040516334fcca5360e11b815273a7e24f80e66bb09819d813e9c4b1b176e22c2d44956369f994a6955061124094509250600401613b15565b60206040518083038186803b15801561125857600080fd5b505af415801561126c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611290919061387c565b6040516309dafd2160e31b8152733b377e98b51867e03ce140b709baa02ffbb31a5191634ed7e908916112cc9162ffffff191690600401613aee565b60206040518083038186803b1580156112e457600080fd5b505af41580156112f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131c919061387c565b9050600085858080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052506040516334fcca5360e11b815273a7e24f80e66bb09819d813e9c4b1b176e22c2d44956369f994a6955061138b94509250600401613b15565b60206040518083038186803b1580156113a357600080fd5b505af41580156113b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113db919061387c565b604051632953639960e21b8152733b377e98b51867e03ce140b709baa02ffbb31a519163a54d8e64916114179162ffffff191690600401613aee565b60206040518083038186803b15801561142f57600080fd5b505af4158015611443573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611467919061387c565b604051632c9c3b9f60e11b815290915073a7e24f80e66bb09819d813e9c4b1b176e22c2d4490635938773e906114a79062ffffff19871690600401613aee565b60206040518083038186803b1580156114bf57600080fd5b505af41580156114d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114f7919061385c565b801561158b5750604051632c9c3b9f60e11b815273a7e24f80e66bb09819d813e9c4b1b176e22c2d4490635938773e9061153b9062ffffff19861690600401613aee565b60206040518083038186803b15801561155357600080fd5b505af4158015611567573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061158b919061385c565b801561161f5750604051632c9c3b9f60e11b815273a7e24f80e66bb09819d813e9c4b1b176e22c2d4490635938773e906115cf9062ffffff19851690600401613aee565b60206040518083038186803b1580156115e757600080fd5b505af41580156115fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161f919061385c565b6116915760405162461bcd60e51b815260206004820152603c60248201527f426974636f696e52656c61793a2062616420617267732e20436865636b20686560448201527f6164657220616e642061727261792062797465206c656e677468732e00000000606482015260840161066b565b61169c838383612571565b600180559a9950505050505050505050565b600d546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156116f257600080fd5b505afa158015611706573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061172a91906138b8565b905090565b6000546001600160a01b031633146117595760405162461bcd60e51b815260040161066b90613bc6565b600e55565b6000546001600160a01b031633146117885760405162461bcd60e51b815260040161066b90613bc6565b600f55565b6000546001600160a01b031633146117b75760405162461bcd60e51b815260040161066b90613bc6565b600555565b60006117c9848484612cc5565b90505b9392505050565b6000828152600960205260408120805461063d91908490811061180657634e487b7160e01b600052603260045260246000fd5b906000526020600020906005020160000154611a24565b6000546001600160a01b031633146118475760405162461bcd60e51b815260040161066b90613bc6565b600c55565b6000546001600160a01b031633146118765760405162461bcd60e51b815260040161066b90613bc6565b610aa3612d14565b6000601154606461188f9190613c84565b601054600e546118a0906001613c32565b60008681526009602052604090208054869081106118ce57634e487b7160e01b600052603260045260246000fd5b906000526020600020906005020160040154600f546118ed9190613c84565b6118f79190613c84565b6119019190613c84565b61063d9190613c4a565b6000546001600160a01b031633146119355760405162461bcd60e51b815260040161066b90613bc6565b6001600160a01b03811661199a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161066b565b6119a381612521565b50565b600082815b838110156119d6576000918252600760205260409091205490806119ce81613d01565b9150506119ab565b508061063d5760405162461bcd60e51b815260206004820152601e60248201527f426974636f696e52656c61793a20756e6b6e6f776e20616e636573746f720000604482015260640161066b565b6000606081805b6020811015611a98578285611a4183601f613ca3565b60208110611a5f57634e487b7160e01b600052603260045260246000fd5b1a60f81b604051602001611a74929190613abf565b60405160208183030381529060405292508080611a9090613d01565b915050611a2b565b50506020015192915050565b6000806011546064611ab69190613c84565b601054600e54611ac7906001613c32565b85600f54611ad59190613c84565b611adf9190613c84565b611ae99190613c84565b611af39190613c4a565b905080341015611b455760405162461bcd60e51b815260206004820152601f60248201527f426974636f696e52656c61793a20666565206973206e6f7420656e6f75676800604482015260640161066b565b611b5833611b538334613ca3565b612d8e565b50600192915050565b60025460ff1615611b845760405162461bcd60e51b815260040161066b90613b9c565b6002805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611bb93390565b6040516001600160a01b03909116815260200160405180910390a1565b600081815260086020526040812054611c215760405162461bcd60e51b815260206004820152600d60248201526c556e6b6e6f776e20626c6f636b60981b604482015260640161066b565b50600081815260086020526040902054610ae2565b6040516307f6f12360e21b8152600090819073a7e24f80e66bb09819d813e9c4b1b176e22c2d4490631fdbc48c90611c789062ffffff19891690600401613aee565b60206040518083038186803b158015611c9057600080fd5b505af4158015611ca4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cc891906138b8565b90506000611cd582611bd6565b60405163df90556160e01b8152909150600090733b377e98b51867e03ce140b709baa02ffbb31a519063df90556190611d1a9062ffffff198a16908590600401613aff565b60206040518083038186803b158015611d3257600080fd5b505af4158015611d46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d6a919061387c565b6040516362ef7dad60e01b8152733b377e98b51867e03ce140b709baa02ffbb31a51916362ef7dad91611da69162ffffff191690600401613aee565b60206040518083038186803b158015611dbe57600080fd5b505af4158015611dd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611df691906138b8565b90508480611e9057506040516362ef7dad60e01b81528190733b377e98b51867e03ce140b709baa02ffbb31a51906362ef7dad90611e3e9062ffffff198c1690600401613aee565b60206040518083038186803b158015611e5657600080fd5b505af4158015611e6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e8e91906138b8565b145b611ef75760405162461bcd60e51b815260206004820152603260248201527f426974636f696e52656c61793a20756e657870656374656420726574617267656044820152711d081bdb88195e1d195c9b985b0818d85b1b60721b606482015260840161066b565b60008060005b604051639cb855cb60e01b815260509073a7e24f80e66bb09819d813e9c4b1b176e22c2d4490639cb855cb90611f3d9062ffffff198e1690600401613aee565b60206040518083038186803b158015611f5557600080fd5b505af4158015611f69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f8d9190613a98565b611f979190613c5e565b6001600160601b03168110156125115760405163df90556160e01b8152600090733b377e98b51867e03ce140b709baa02ffbb31a519063df90556190611fe99062ffffff198e16908690600401613aff565b60206040518083038186803b15801561200157600080fd5b505af4158015612015573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612039919061387c565b90506120458287613c32565b612050906001613c32565b6040516307f6f12360e21b815290945073a7e24f80e66bb09819d813e9c4b1b176e22c2d4490631fdbc48c906120909062ffffff19851690600401613aee565b60206040518083038186803b1580156120a857600080fd5b505af41580156120bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120e091906138b8565b925088806120f857506120f56107e085613d1c565b15155b61217e5760405162461bcd60e51b815260206004820152604b60248201527f426974636f696e52656c61793a20686561646572732073686f756c642062652060448201527f7375626d69747465642062792063616c6c696e6720616464486561646572735760648201526a1a5d1a14995d185c99d95d60aa1b608482015260a40161066b565b6040516362ef7dad60e01b81528590733b377e98b51867e03ce140b709baa02ffbb31a51906362ef7dad906121bd9062ffffff19861690600401613aee565b60206040518083038186803b1580156121d557600080fd5b505af41580156121e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061220d91906138b8565b1461226c5760405162461bcd60e51b815260206004820152602960248201527f426974636f696e52656c61793a20746172676574206368616e67656420756e65604482015268787065637465646c7960b81b606482015260840161066b565b6040516001620c742360e01b0319815273d5bf663a5862333282b45636c2d76050f27eeeef9063fff38bdd906122ae9062ffffff198516908b90600401613aff565b60206040518083038186803b1580156122c657600080fd5b505af41580156122da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122fe919061385c565b6123675760405162461bcd60e51b815260206004820152603460248201527f426974636f696e52656c61793a206865616465727320646f206e6f7420666f726044820152733690309031b7b739b4b9ba32b73a1031b430b4b760611b606482015260840161066b565b6004546005546123779086613c32565b116123945760405162461bcd60e51b815260040161066b90613b57565b6000838152600760205260409020546124fa576040516340bec88f60e01b815260048101849052859073a7e24f80e66bb09819d813e9c4b1b176e22c2d44906340bec88f9060240160206040518083038186803b1580156123f457600080fd5b505af4158015612408573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061242c91906138b8565b111561248c5760405162461bcd60e51b815260206004820152602960248201527f426974636f696e52656c61793a2068656164657220776f726b20697320696e736044820152681d59999a58da595b9d60ba1b606482015260840161066b565b60008381526007602090815260408083208a9055600890915290208490556124b48185612eac565b336001600160a01b031687857ffb8fff3e2daa665d496373ced291b62aba4162f24632a1597e286621016e9a1f866040516124f191815260200190565b60405180910390a45b82965050808061250990613d01565b915050611efd565b5060019998505050505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516307f6f12360e21b8152600090819061260c9073a7e24f80e66bb09819d813e9c4b1b176e22c2d4490631fdbc48c906125b79062ffffff198a1690600401613aee565b60206040518083038186803b1580156125cf57600080fd5b505af41580156125e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061260791906138b8565b611bd6565b6040516307f6f12360e21b81529091506000906126539073a7e24f80e66bb09819d813e9c4b1b176e22c2d4490631fdbc48c906125b79062ffffff198a1690600401613aee565b90506126616107e082613d1c565b6107df146126eb5760405162461bcd60e51b815260206004820152604b60248201527f426974636f696e52656c61793a206d7573742070726f7669646520746865206c60448201527f61737420686561646572206f662074686520636c6f73696e672064696666696360648201526a1d5b1d1e481c195c9a5bd960aa1b608482015260a40161066b565b6126f7826107df613c32565b81146127645760405162461bcd60e51b815260206004820152603660248201527f426974636f696e52656c61793a206d7573742070726f766964652065786163746044820152751b1e480c48191a59999a58dd5b1d1e481c195c9a5bd960521b606482015260840161066b565b60405163cddb450760e01b8152733b377e98b51867e03ce140b709baa02ffbb31a519063cddb4507906127a19062ffffff19891690600401613aee565b60206040518083038186803b1580156127b957600080fd5b505af41580156127cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127f191906138b8565b60405163cddb450760e01b8152733b377e98b51867e03ce140b709baa02ffbb31a519063cddb45079061282e9062ffffff198b1690600401613aee565b60206040518083038186803b15801561284657600080fd5b505af415801561285a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061287e91906138b8565b146128e95760405162461bcd60e51b815260206004820152603560248201527f426974636f696e52656c61793a20706572696f642068656164657220646966666044820152740d2c6ead8e8d2cae640c8de40dcdee840dac2e8c6d605b1b606482015260840161066b565b60405163df90556160e01b8152600090733b377e98b51867e03ce140b709baa02ffbb31a519063df9055619061292b9062ffffff198916908590600401613aff565b60206040518083038186803b15801561294357600080fd5b505af4158015612957573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061297b919061387c565b6040516362ef7dad60e01b8152909150600090733b377e98b51867e03ce140b709baa02ffbb31a51906362ef7dad906129be9062ffffff19861690600401613aee565b60206040518083038186803b1580156129d657600080fd5b505af41580156129ea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a0e91906138b8565b6040516362ef7dad60e01b8152909150600090733b377e98b51867e03ce140b709baa02ffbb31a519063b25912329082906362ef7dad90612a599062ffffff198f1690600401613aee565b60206040518083038186803b158015612a7157600080fd5b505af4158015612a85573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612aa991906138b8565b8b62ffffff1916733b377e98b51867e03ce140b709baa02ffbb31a5163f172b06090916040518263ffffffff1660e01b8152600401612ae89190613aee565b60206040518083038186803b158015612b0057600080fd5b505af4158015612b14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b389190613a74565b8b62ffffff1916733b377e98b51867e03ce140b709baa02ffbb31a5163f172b06090916040518263ffffffff1660e01b8152600401612b779190613aee565b60206040518083038186803b158015612b8f57600080fd5b505af4158015612ba3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bc79190613a74565b6040516001600160e01b031960e086901b168152600481019390935263ffffffff918216602484015216604482015260640160206040518083038186803b158015612c1157600080fd5b505af4158015612c25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c4991906138b8565b90508181831614612cac5760405162461bcd60e51b815260206004820152602760248201527f426974636f696e52656c61793a20696e76616c696420726574617267657420706044820152661c9bdd9a59195960ca1b606482015260840161066b565b612cb888886001611c36565b9998505050505050505050565b600082815b83811015612d085785821415612ce5576001925050506117cc565b600091825260076020526040909120549080612d0081613d01565b915050612cca565b50600095945050505050565b60025460ff16612d5d5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161066b565b6002805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa33611bb9565b80471015612dde5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161066b565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612e2b576040519150601f19603f3d011682016040523d82523d6000602084013e612e30565b606091505b5050905080612ea75760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161066b565b505050565b600454600554612ebc9083613c32565b11612ed95760405162461bcd60e51b815260040161066b90613b57565b6040805160a08101825260008082526020820181905281830181905260608201819052608082015290516307f6f12360e21b815273a7e24f80e66bb09819d813e9c4b1b176e22c2d4490631fdbc48c90612f3d9062ffffff19871690600401613aee565b60206040518083038186803b158015612f5557600080fd5b505af4158015612f69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f8d91906138b8565b815260405163383ef31360e11b8152733b377e98b51867e03ce140b709baa02ffbb31a519063707de62690612fcc9062ffffff19871690600401613aee565b60206040518083038186803b158015612fe457600080fd5b505af4158015612ff8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061301c91906138b8565b6020820152604051634edfc3d560e11b8152733b377e98b51867e03ce140b709baa02ffbb31a5190639dbf87aa9061305e9062ffffff19871690600401613aee565b60206040518083038186803b15801561307657600080fd5b505af415801561308a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130ae91906138b8565b604082810191825233606084019081523a60808501908152600086815260096020908152938120805460018082018355918352918590208751600590930201918255938601519381019390935592516002830155516003820180546001600160a01b0319166001600160a01b03909216919091179055905160049182015554821115612ea7576001600460008282546131479190613c32565b90915550613155905061315d565b612ea7613461565b6005546003546004546131709190613ca3565b10610aa35760055460045460005b82156131ff5760008281526009602052604081208054839081106131b257634e487b7160e01b600052603260045260246000fd5b90600052602060002090600502016001015490506131dc816001856131d79190613ca3565b613496565b9150836131e881613cea565b94505082806131f690613cea565b9350505061317e565b600082815260096020526040902080548290811061322d57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600502016009600084815260200190815260200160002060008154811061326e57634e487b7160e01b600052603260045260246000fd5b600091825260208083208454600590930201918255600180850154818401556002808601549084015560038086015490840180546001600160a01b0319166001600160a01b039092169190911790556004948501549490920193909355848252600990925260409020541115612ea7576132e78261351a565b60008281526009602052604081208054829161333b91839061331957634e487b7160e01b600052603260045260246000fd5b60009182526020909120600360059092020101546001600160a01b03166135b2565b60008681526009602052604081208054939550919350909161336d57634e487b7160e01b600052603260045260246000fd5b600091825260208083206003600590930201919091015486835260099091526040822080546001600160a01b039092169287927f4fec6ffa2052e80db9daadc2384a8f634057472e28ea7f1bd3eebfc92b5b0f8e9291906133de57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060050201600001546009600089815260200190815260200160002060008154811061342357634e487b7160e01b600052603260045260246000fd5b600091825260209182902060016005909202010154604080519384529183015281018690526060810185905260800160405180910390a35050505050565b6010546004546134719190613d1c565b610aa357601354601254106134885760125461348c565b6013545b6011556000601255565b6000805b6000838152600960205260409020548110156135105760008381526009602052604090208054829081106134de57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060050201600001548414156134fe579050610640565b8061350881613d01565b91505061349a565b5060009392505050565b60015b6000828152600960205260409020548110156135ae57600082815260096020526040902080548290811061356157634e487b7160e01b600052603260045260246000fd5b6000918252602082206005909102018181556001808201839055600282018390556003820180546001600160a01b03191690556004909101919091556135a79082613c32565b905061351d565b5050565b60008060006064600e5460016135c89190613c32565b3a600f546135d69190613c84565b6135e09190613c84565b6135ea9190613c4a565b600d549091506000906001600160a01b03161561368357600d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561364457600080fd5b505afa158015613658573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061367c91906138b8565b9050613687565b5060005b600081600c541115801561369d57506000600c54115b1561372e57600d54600c5460405163a9059cbb60e01b81526001600160a01b038981166004830152602482019290925291169063a9059cbb90604401602060405180830381600087803b1580156136f357600080fd5b505af1158015613707573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061372b919061385c565b90505b6000834711801561373f5750600084115b15613798576040516001600160a01b038816908590600081818185875af1925050503d806000811461378d576040519150601f19603f3d011682016040523d82523d6000602084013e613792565b606091505b50909150505b80156137c55781156137b55783600c5495509550505050506137e9565b83600095509550505050506137e9565b81156137dd576000600c5495509550505050506137e9565b60008095509550505050505b915091565b60008083601f8401126137ff578182fd5b50813567ffffffffffffffff811115613816578182fd5b60208301915083602082850101111561382e57600080fd5b9250929050565b600060208284031215613846578081fd5b81356001600160a01b038116811461063d578182fd5b60006020828403121561386d578081fd5b8151801515811461063d578182fd5b60006020828403121561388d578081fd5b815162ffffff198116811461063d578182fd5b6000602082840312156138b1578081fd5b5035919050565b6000602082840312156138c9578081fd5b5051919050565b6000806000606084860312156138e4578182fd5b505081359360208301359350604090920135919050565b6000806040838503121561390d578182fd5b50508035926020909101359150565b600080600080600060808688031215613933578081fd5b8535945060208601359350604086013567ffffffffffffffff811115613957578182fd5b613963888289016137ee565b96999598509660600135949350505050565b6000806000806040858703121561398a578384fd5b843567ffffffffffffffff808211156139a1578586fd5b6139ad888389016137ee565b909650945060208701359150808211156139c5578384fd5b506139d2878288016137ee565b95989497509550505050565b600080600080600080606087890312156139f6578081fd5b863567ffffffffffffffff80821115613a0d578283fd5b613a198a838b016137ee565b90985096506020890135915080821115613a31578283fd5b613a3d8a838b016137ee565b90965094506040890135915080821115613a55578283fd5b50613a6289828a016137ee565b979a9699509497509295939492505050565b600060208284031215613a85578081fd5b815163ffffffff8116811461063d578182fd5b600060208284031215613aa9578081fd5b81516001600160601b038116811461063d578182fd5b60008351613ad1818460208801613cba565b6001600160f81b0319939093169190920190815260010192915050565b62ffffff1991909116815260200190565b62ffffff19929092168252602082015260400190565b6000604082528351806040840152613b34816060850160208801613cba565b64ffffffffff93909316602083015250601f91909101601f191601606001919050565b60208082526025908201527f426974636f696e52656c61793a20626c6f636b2068656164657220697320746f6040820152641bc81bdb1960da1b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b60008219821115613c4557613c45613d30565b500190565b600082613c5957613c59613d46565b500490565b60006001600160601b0380841680613c7857613c78613d46565b92169190910492915050565b6000816000190483118215151615613c9e57613c9e613d30565b500290565b600082821015613cb557613cb5613d30565b500390565b60005b83811015613cd5578181015183820152602001613cbd565b83811115613ce4576000848401525b50505050565b600081613cf957613cf9613d30565b506000190190565b6000600019821415613d1557613d15613d30565b5060010190565b600082613d2b57613d2b613d46565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fdfea26469706673582212205214e838c0e48b3011b6449efa8803368586838da4bfe4cf214227dab163508564736f6c634300080200330000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000023b9a400000000000000516d942d591ecdff4d9bd2c3dc64d3556ee2289119b8b4226b000000000000000000000000ba7d91095980608a34eb4ae66a478e3d0d5a7436000000000000000000000000000000000000000000000000000000000000005000c092305c16faeca982ae57b7af2eacb7db97d1615adfc8a4cbf2f69e0000000000000079cd8b911f3c4ac9c435dde01522bfe18cc43be992274dda6df3ef64827767527ec7fb62cbe7001a0badf2b400000000000000000000000000000000",
      "r": "0x8c141989177b9f2e1053f7a971aaf0e14760dfac32ac9a2bceeb65df55471dd5",
      "s": "0x7a2cbcbb0e5bd6e890c5847d7b2e806d3a293e7c48e11f88b83daccce537f179",
      "v": 41,
      "chainId": 3
    }
  }
}