{
  "address": "0x710bFb9AF7A8775b1f594b5D08b74D2fc7a93725",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_genesisHeader",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_height",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_periodStart",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_TeleportDAOToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "height",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "selfHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "parentHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        }
      ],
      "name": "BlockAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "height",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "selfHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "parentHash",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "relayer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardAmountTNT",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardAmountTDT",
          "type": "uint256"
        }
      ],
      "name": "BlockFinalized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "TeleportDAOToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_anchor",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_headers",
          "type": "bytes"
        }
      ],
      "name": "addHeaders",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_oldPeriodStartHeader",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_oldPeriodEndHeader",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_headers",
          "type": "bytes"
        }
      ],
      "name": "addHeadersWithRetarget",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "availableTDT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "availableTNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseQueries",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_txid",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_blockHeight",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_intermediateNodes",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "checkTxProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentEpochQueries",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "epochLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "finalizationParameter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_offset",
          "type": "uint256"
        }
      ],
      "name": "findAncestor",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_hash",
          "type": "bytes32"
        }
      ],
      "name": "findHeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_height",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getBlockHeaderFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_height",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getBlockHeaderHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentEpochDifficulty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_height",
          "type": "uint256"
        }
      ],
      "name": "getNumberOfSubmittedHeaders",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPrevEpochDifficulty",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialHeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_ancestor",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_descendant",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_limit",
          "type": "uint256"
        }
      ],
      "name": "isAncestor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastEpochQueries",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastSubmittedHeight",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseRelay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relayGenesisHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relayerPercentageFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardAmountInTDT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_baseQueries",
          "type": "uint256"
        }
      ],
      "name": "setBaseQueries",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_epochLength",
          "type": "uint256"
        }
      ],
      "name": "setEpochLength",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_finalizationParameter",
          "type": "uint256"
        }
      ],
      "name": "setFinalizationParameter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_relayerPercentageFee",
          "type": "uint256"
        }
      ],
      "name": "setRelayerPercentageFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rewardAmountInTDT",
          "type": "uint256"
        }
      ],
      "name": "setRewardAmountInTDT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_submissionGasUsed",
          "type": "uint256"
        }
      ],
      "name": "setSubmissionGasUsed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "submissionGasUsed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unPauseRelay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x79435df1335edd4c7434c2f33189f91179e7e912a9d82ba5f46391dc353e7799",
  "receipt": {
    "to": null,
    "from": "0x5364E3557572bd5D5903C0e9C21BE359F2Eac1dA",
    "contractAddress": "0x710bFb9AF7A8775b1f594b5D08b74D2fc7a93725",
    "transactionIndex": 0,
    "gasUsed": "3693511",
    "logsBloom": "0x
    "blockHash": "0xd7f11d5c90c9df4744664eaf8f1a9c1c5c663eda4f1575dd91117347e9166ef8",
    "transactionHash": "0x79435df1335edd4c7434c2f33189f91179e7e912a9d82ba5f46391dc353e7799",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 12821059,
        "transactionHash": "0x79435df1335edd4c7434c2f33189f91179e7e912a9d82ba5f46391dc353e7799",
        "address": "0x710bFb9AF7A8775b1f594b5D08b74D2fc7a93725",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000005364e3557572bd5d5903c0e9c21be359f2eac1da"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xd7f11d5c90c9df4744664eaf8f1a9c1c5c663eda4f1575dd91117347e9166ef8"
      }
    ],
    "blockNumber": 12821059,
    "cumulativeGasUsed": "3693511",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0000202079f4f23db28305a70c6be2bddc5a5f6c2d7219e0bae80d5616000000000000001292d21819139a09f12152e4b5f7eaabe5e8581b73b573f73e10ad6bf3b9e6901f77ff62c0f239190ad4deb3",
    2342772,
    "0x0000000000000020b5419d53b4bbc0c83ad4eb8b53c8f0ae1b5a6260eecc1c02",
    "0xd7F0E220EC7Ab0FF89EfA2dAcaC68A43264904EF"
  ],
  "numDeployments": 1,
  "solcInputHash": "6f3e3be3e786d78529510e6414d29cbe",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_genesisHeader\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_height\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_periodStart\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_TeleportDAOToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"selfHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"parentHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"}],\"name\":\"BlockAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"height\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"selfHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"parentHash\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmountTNT\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmountTDT\",\"type\":\"uint256\"}],\"name\":\"BlockFinalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TeleportDAOToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_anchor\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_headers\",\"type\":\"bytes\"}],\"name\":\"addHeaders\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_oldPeriodStartHeader\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_oldPeriodEndHeader\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_headers\",\"type\":\"bytes\"}],\"name\":\"addHeadersWithRetarget\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableTDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableTNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseQueries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_txid\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_blockHeight\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_intermediateNodes\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"checkTxProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentEpochQueries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"epochLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"finalizationParameter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_offset\",\"type\":\"uint256\"}],\"name\":\"findAncestor\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hash\",\"type\":\"bytes32\"}],\"name\":\"findHeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_height\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getBlockHeaderFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_height\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getBlockHeaderHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentEpochDifficulty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_height\",\"type\":\"uint256\"}],\"name\":\"getNumberOfSubmittedHeaders\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrevEpochDifficulty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialHeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_ancestor\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_descendant\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_limit\",\"type\":\"uint256\"}],\"name\":\"isAncestor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastEpochQueries\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastSubmittedHeight\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseRelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relayGenesisHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relayerPercentageFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardAmountInTDT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseQueries\",\"type\":\"uint256\"}],\"name\":\"setBaseQueries\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_epochLength\",\"type\":\"uint256\"}],\"name\":\"setEpochLength\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_finalizationParameter\",\"type\":\"uint256\"}],\"name\":\"setFinalizationParameter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_relayerPercentageFee\",\"type\":\"uint256\"}],\"name\":\"setRelayerPercentageFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardAmountInTDT\",\"type\":\"uint256\"}],\"name\":\"setRewardAmountInTDT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_submissionGasUsed\",\"type\":\"uint256\"}],\"name\":\"setSubmissionGasUsed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"submissionGasUsed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unPauseRelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addHeaders(bytes,bytes)\":{\"details\":\"We check integrity and consistency of the header chain\",\"params\":{\"_anchor\":\"The header immediately preceeding the new chain\",\"_headers\":\"A tightly-packed list of 80-byte Bitcoin headers\"},\"returns\":{\"_0\":\"True if successfully written, error otherwise\"}},\"addHeadersWithRetarget(bytes,bytes,bytes)\":{\"details\":\"Checks the retarget, the heights, and the linkage\",\"params\":{\"_headers\":\"A tightly-packed list of 80-byte Bitcoin headers\",\"_oldPeriodEndHeader\":\"The last header in the difficulty period being closed (anchor of new headers)\",\"_oldPeriodStartHeader\":\"The first header in the difficulty period being closed\"},\"returns\":{\"_0\":\"True if successfully written, error otherwise\"}},\"availableTDT()\":{\"returns\":{\"_0\":\"Amount of TDT available in Relay treasury\"}},\"availableTNT()\":{\"returns\":{\"_0\":\"Amount of target blockchain native token available in Relay treasury\"}},\"checkTxProof(bytes32,uint256,bytes,uint256)\":{\"details\":\"Checks if the block is finalized, and Merkle proof is correct\",\"params\":{\"_blockHeight\":\"Block height of the desired tx\",\"_index\":\"Part of the Merkle proof for the desired tx\",\"_intermediateNodes\":\"Part of the Merkle proof for the desired tx\",\"_txid\":\"Desired transaction's tx Id\"},\"returns\":{\"_0\":\"True if the provided tx is confirmed on the source blockchain, False otherwise\"}},\"constructor\":{\"params\":{\"_genesisHeader\":\"The starting header\",\"_height\":\"The starting height\",\"_periodStart\":\"The hash of the first header in the genesis epoch\"}},\"findAncestor(bytes32,uint256)\":{\"details\":\"Will fail if the header is unknown\",\"params\":{\"_hash\":\"The header hash to search for\"},\"returns\":{\"_0\":\"The height of the header, or error if unknown\"}},\"findHeight(bytes32)\":{\"details\":\"Will fail if the header is unknown\",\"params\":{\"_hash\":\"The header hash to search for\"},\"returns\":{\"_0\":\"The height of the header, or error if unknown\"}},\"getBlockHeaderFee(uint256,uint256)\":{\"params\":{\"_height\":\"The height of the desired block header\",\"_index\":\"The index of the desired block header in that height\"},\"returns\":{\"_0\":\"Block header's fee price for a query\"}},\"getBlockHeaderHash(uint256,uint256)\":{\"params\":{\"_height\":\"The height of the desired block header\",\"_index\":\"The index of the desired block header in that height\"},\"returns\":{\"_0\":\"Block header's hash\"}},\"getCurrentEpochDifficulty()\":{\"details\":\"This is updated when a new heavist header has a new diff\",\"returns\":{\"_0\":\"The difficulty of the bestKnownDigest\"}},\"getNumberOfSubmittedHeaders(uint256)\":{\"details\":\"This shows the number of temporary forks in that specific height\",\"params\":{\"_height\":\"The desired height of the blockchain\"},\"returns\":{\"_0\":\"Number of block headers stored in the same height\"}},\"getPrevEpochDifficulty()\":{\"details\":\"This is updated when a difficulty change is accepted\",\"returns\":{\"_0\":\"The difficulty of the previous epoch\"}},\"isAncestor(bytes32,bytes32,uint256)\":{\"details\":\"Limit the amount of lookups (and thus gas usage) with _limit\",\"params\":{\"_ancestor\":\"The prospective ancestor\",\"_descendant\":\"The descendant to check\",\"_limit\":\"The maximum number of blocks to check\"},\"returns\":{\"_0\":\"true if ancestor is at most limit blocks lower than descendant, otherwise false\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pauseRelay()\":{\"details\":\"Only functions with whenPaused modifier can be called\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setBaseQueries(uint256)\":{\"params\":{\"_baseQueries\":\"The base amount of queries we assume in each epoch                                     (This is for preventing user fees to grow significantly)\"}},\"setEpochLength(uint256)\":{\"params\":{\"_epochLength\":\"The length of epochs for estimating the user queries hence their fees\"}},\"setFinalizationParameter(uint256)\":{\"details\":\"This might change if finalization rule of the source chain gets updated\",\"params\":{\"_finalizationParameter\":\"The finalization parameter of the source chain\"}},\"setRelayerPercentageFee(uint256)\":{\"details\":\"This is updated when we want to change the Relayer reward\",\"params\":{\"_relayerPercentageFee\":\"Ratio > 1 that determines percentage of reward to the Relayer\"}},\"setRewardAmountInTDT(uint256)\":{\"details\":\"This award is for the relayer who has a finalized block header\",\"params\":{\"_rewardAmountInTDT\":\"The reward amount in TDT\"}},\"setSubmissionGasUsed(uint256)\":{\"details\":\"This is updated when the smart contract changes the way of getting block headers\",\"params\":{\"_submissionGasUsed\":\"The gas used for submitting one block header\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"unPauseRelay()\":{\"details\":\"Only functions with whenNotPaused modifier can be called\"}},\"version\":1},\"userdoc\":{\"events\":{\"BlockAdded(uint256,bytes32,bytes32,address)\":{\"notice\":\"Emits when a block header is added\"},\"BlockFinalized(uint256,bytes32,bytes32,address,uint256,uint256)\":{\"notice\":\"Emits when a block header gets finalized\"}},\"kind\":\"user\",\"methods\":{\"addHeaders(bytes,bytes)\":{\"notice\":\"Adds headers to storage after validating\"},\"addHeadersWithRetarget(bytes,bytes,bytes)\":{\"notice\":\"Adds headers to storage, performs additional validation of retarget\"},\"availableTDT()\":{\"notice\":\"Getter for available TDT in treasury\"},\"availableTNT()\":{\"notice\":\"Getter for available target native token in treasury\"},\"checkTxProof(bytes32,uint256,bytes,uint256)\":{\"notice\":\"Checks if a tx is included and finalized on the source blockchain\"},\"constructor\":{\"notice\":\"Gives a starting point for the relay\"},\"findAncestor(bytes32,uint256)\":{\"notice\":\"Finds an ancestor for a block by its hash\"},\"findHeight(bytes32)\":{\"notice\":\"Finds the height of a header by its hash\"},\"getBlockHeaderFee(uint256,uint256)\":{\"notice\":\"Getter for an specific block header's fee price for a query\"},\"getBlockHeaderHash(uint256,uint256)\":{\"notice\":\"Getter for an specific block header's hash in the stored chain\"},\"getCurrentEpochDifficulty()\":{\"notice\":\"Getter for currentEpochDiff\"},\"getNumberOfSubmittedHeaders(uint256)\":{\"notice\":\"Getter for the number of block headers in the same height\"},\"getPrevEpochDifficulty()\":{\"notice\":\"Getter for prevEpochDiff\"},\"isAncestor(bytes32,bytes32,uint256)\":{\"notice\":\"Checks if a hash is an ancestor of the current one\"},\"pauseRelay()\":{\"notice\":\"Pause the relay\"},\"setBaseQueries(uint256)\":{\"notice\":\"Setter for baseQueries\"},\"setEpochLength(uint256)\":{\"notice\":\"Setter for epochLength\"},\"setFinalizationParameter(uint256)\":{\"notice\":\"Setter for finalizationParameter\"},\"setRelayerPercentageFee(uint256)\":{\"notice\":\"Setter for relayerPercentageFee\"},\"setRewardAmountInTDT(uint256)\":{\"notice\":\"Setter for rewardAmountInTDT\"},\"setSubmissionGasUsed(uint256)\":{\"notice\":\"Setter for submissionGasUsed\"},\"unPauseRelay()\":{\"notice\":\"Unpause the relay\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/relay/BitcoinRelay.sol\":\"BitcoinRelay\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0xa35b1f2a670cd2a701a52c398032c9fed72df1909fe394d77ceacbf074e8937b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/erc20/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    // events\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    // read-only functions\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    // state-changing functions\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9210fa056ea67b530890ea968948270e0d22a15bd428a2edd4915ef25c4eb918\",\"license\":\"MIT\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMath {\\n    function add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x, 'ds-math-add-overflow');\\n    }\\n\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\\n    }\\n\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\\n    }\\n    \\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b; //TODO: edit it\\n    }\\n}\",\"keccak256\":\"0x0e9e1f6ce97bc6b4de34121b05b78ef753eb8399f1087e8daf8cb5ac0e33954c\",\"license\":\"MIT\"},\"contracts/libraries/TypedMemView.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./SafeMath.sol\\\";\\n\\nlibrary TypedMemView {\\n    using SafeMath for uint256;\\n\\n    // Why does this exist?\\n    // the solidity `bytes memory` type has a few weaknesses.\\n    // 1. You can't index ranges effectively\\n    // 2. You can't slice without copying\\n    // 3. The underlying data may represent any type\\n    // 4. Solidity never deallocates memory, and memory costs grow\\n    //    superlinearly\\n\\n    // By using a memory view instead of a `bytes memory` we get the following\\n    // advantages:\\n    // 1. Slices are done on the stack, by manipulating the pointer\\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\\n    // 3. We can insert type info into the pointer, and typecheck at runtime\\n\\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\\n    // algorithms.\\n\\n    // Why bytes29?\\n    // We want to avoid confusion between views, digests, and other common\\n    // types so we chose a large and uncommonly used odd number of bytes\\n    //\\n    // Note that while bytes are left-aligned in a word, integers and addresses\\n    // are right-aligned. This means when working in assembly we have to\\n    // account for the 3 unused bytes on the righthand side\\n    //\\n    // First 5 bytes are a type flag.\\n    // - ff_ffff_fffe is reserved for unknown type.\\n    // - ff_ffff_ffff is reserved for invalid types/errors.\\n    // next 12 are memory address\\n    // next 12 are len\\n    // bottom 3 bytes are empty\\n\\n    // Assumptions:\\n    // - non-modification of memory.\\n    // - No Solidity updates\\n    // - - wrt free mem point\\n    // - - wrt bytes representation in memory\\n    // - - wrt memory addressing in general\\n\\n    // Usage:\\n    // - create type constants\\n    // - use `assertType` for runtime type assertions\\n    // - - unfortunately we can't do this at compile time yet :(\\n    // - recommended: implement modifiers that perform type checking\\n    // - - e.g.\\n    // - - `uint40 constant MY_TYPE = 3;`\\n    // - - ` modifer onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\\n    // - instantiate a typed view from a bytearray using `ref`\\n    // - use `index` to inspect the contents of the view\\n    // - use `slice` to create smaller views into the same memory\\n    // - - `slice` can increase the offset\\n    // - - `slice can decrease the length`\\n    // - - must specify the output type of `slice`\\n    // - - `slice` will return a null view if you try to overrun\\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\\n    // - use `equal` for typed comparisons.\\n\\n\\n    // The null view\\n    bytes29 internal constant NULL = hex\\\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\\";\\n    uint256 constant LOW_12_MASK = 0xffffffffffffffffffffffff;\\n    uint8 constant TWELVE_BYTES = 96;\\n\\n    /**\\n     * @notice      Returns the encoded hex character that represents the lower 4 bits of the argument.\\n     * @param _b    The byte\\n     * @return      char - The encoded hex character\\n     */\\n    function nibbleHex(uint8 _b) internal pure returns (uint8 char) {\\n        // This can probably be done more efficiently, but it's only in error\\n        // paths, so we don't really care :)\\n        uint8 _nibble = _b | 0xf0; // set top 4, keep bottom 4\\n        if (_nibble == 0xf0) {return 0x30;} // 0\\n        if (_nibble == 0xf1) {return 0x31;} // 1\\n        if (_nibble == 0xf2) {return 0x32;} // 2\\n        if (_nibble == 0xf3) {return 0x33;} // 3\\n        if (_nibble == 0xf4) {return 0x34;} // 4\\n        if (_nibble == 0xf5) {return 0x35;} // 5\\n        if (_nibble == 0xf6) {return 0x36;} // 6\\n        if (_nibble == 0xf7) {return 0x37;} // 7\\n        if (_nibble == 0xf8) {return 0x38;} // 8\\n        if (_nibble == 0xf9) {return 0x39;} // 9\\n        if (_nibble == 0xfa) {return 0x61;} // a\\n        if (_nibble == 0xfb) {return 0x62;} // b\\n        if (_nibble == 0xfc) {return 0x63;} // c\\n        if (_nibble == 0xfd) {return 0x64;} // d\\n        if (_nibble == 0xfe) {return 0x65;} // e\\n        if (_nibble == 0xff) {return 0x66;} // f\\n    }\\n\\n    /**\\n     * @notice      Returns a uint16 containing the hex-encoded byte.\\n     *              `the first 8 bits of encoded is the nibbleHex of top 4 bits of _b`\\n     *              `the second 8 bits of encoded is the nibbleHex of lower 4 bits of _b`\\n     * @param _b    The byte\\n     * @return      encoded - The hex-encoded byte\\n     */\\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\\n        encoded |= nibbleHex(_b >> 4); // top 4 bits\\n        encoded <<= 8;\\n        encoded |= nibbleHex(_b); // lower 4 bits\\n    }\\n\\n    /**\\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\\n     *              `second` contains the encoded lower 16 bytes.\\n     *\\n     * @param _b    The 32 bytes as uint256\\n     * @return      first - The top 16 bytes\\n     * @return      second - The bottom 16 bytes\\n     */\\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\\n        for (uint8 i = 31; i > 15; i -= 1) {\\n            uint8 _byte = uint8(_b >> (i * 8));\\n            first |= byteHex(_byte);\\n            if (i != 16) {\\n                first <<= 16;\\n            }\\n        }\\n\\n        // abusing underflow here =_=\\n        for (uint8 i = 15; i < 255 ; i -= 1) {\\n            uint8 _byte = uint8(_b >> (i * 8));\\n            second |= byteHex(_byte);\\n            if (i != 0) {\\n                second <<= 16;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice          Changes the endianness of a uint256.\\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\\n     * @param _b        The unsigned integer to reverse\\n     * @return          v - The reversed value\\n     */\\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\\n        v = _b;\\n\\n        // swap bytes\\n        v = ((v >> 8) & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\\n        ((v & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) << 8);\\n        // swap 2-byte long pairs\\n        v = ((v >> 16) & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\\n        ((v & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) << 16);\\n        // swap 4-byte long pairs\\n        v = ((v >> 32) & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\\n        ((v & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) << 32);\\n        // swap 8-byte long pairs\\n        v = ((v >> 64) & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\\n        ((v & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) << 64);\\n        // swap 16-byte long pairs\\n        v = (v >> 128) | (v << 128);\\n    }\\n\\n    /**\\n     * @notice      Create a mask with the highest `_len` bits set.\\n     * @param _len  The length\\n     * @return      mask - The mask\\n     */\\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\\n        // ugly. redo without assembly?\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            mask := sar(\\n            sub(_len, 1),\\n            0x8000000000000000000000000000000000000000000000000000000000000000\\n            )\\n        }\\n    }\\n\\n    /**\\n     * @notice      Return the null view.\\n     * @return      bytes29 - The null view\\n     */\\n    function nullView() internal pure returns (bytes29) {\\n        return NULL;\\n    }\\n\\n    /**\\n     * @notice      Check if the view is null.\\n     * @return      bool - True if the view is null\\n     */\\n    function isNull(bytes29 memView) internal pure returns (bool) {\\n        return memView == NULL;\\n    }\\n\\n    /**\\n     * @notice      Check if the view is not null.\\n     * @return      bool - True if the view is not null\\n     */\\n    function notNull(bytes29 memView) internal pure returns (bool) {\\n        return !isNull(memView);\\n    }\\n\\n    /**\\n     * @notice          Check if the view is of a valid type and points to a valid location\\n     *                  in memory.\\n     * @dev             We perform this check by examining solidity's unallocated memory\\n     *                  pointer and ensuring that the view's upper bound is less than that.\\n     * @param memView   The view\\n     * @return          ret - True if the view is valid\\n     */\\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\\n        if (typeOf(memView) == 0xffffffffff) {return false;}\\n        uint256 _end = end(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ret := not(gt(_end, mload(0x40)))\\n        }\\n    }\\n\\n    /**\\n     * @notice          Require that a typed memory view be valid.\\n     * @dev             Returns the view for easy chaining.\\n     * @param memView   The view\\n     * @return          bytes29 - The validated view\\n     */\\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\\n        require(isValid(memView), \\\"Validity assertion failed\\\");\\n        return memView;\\n    }\\n\\n    /**\\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\\n     * @param memView   The view\\n     * @param _expected The expected type\\n     * @return          bool - True if the memview is of the expected type\\n     */\\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\\n        return typeOf(memView) == _expected;\\n    }\\n\\n    /**\\n     * @notice          Require that a typed memory view has a specific type.\\n     * @dev             Returns the view for easy chaining.\\n     * @param memView   The view\\n     * @param _expected The expected type\\n     * @return          bytes29 - The view with validated type\\n     */\\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\\n        if (!isType(memView, _expected)) {\\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\\n            (, uint256 e) = encodeHex(uint256(_expected));\\n            string memory err = string(\\n                abi.encodePacked(\\n                    \\\"Type assertion failed. Got 0x\\\",\\n                    uint80(g),\\n                    \\\". Expected 0x\\\",\\n                    uint80(e)\\n                )\\n            );\\n            revert(err);\\n        }\\n        return memView;\\n    }\\n\\n    /**\\n     * @notice          Return an identical view with a different type.\\n     * @param memView   The view\\n     * @param _newType  The new type\\n     * @return          newView - The new view with the specified type\\n     */\\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\\n        // then | in the new type\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n        // shift off the top 5 bytes\\n            newView := or(newView, shr(40, shl(40, memView)))\\n            newView := or(newView, shl(216, _newType))\\n        }\\n    }\\n\\n    /**\\n     * @notice          Unsafe raw pointer construction. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @dev             Unsafe raw pointer construction. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @param _type     The type\\n     * @param _loc      The memory address\\n     * @param _len      The length\\n     * @return          newView - The new view with the specified type, location and length\\n     */\\n    function unsafeBuildUnchecked(uint256 _type, uint256 _loc, uint256 _len) private pure returns (bytes29 newView) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            newView := shl(96, or(newView, _type)) // insert type\\n            newView := shl(96, or(newView, _loc))  // insert loc\\n            newView := shl(24, or(newView, _len))  // empty bottom 3 bytes\\n        }\\n    }\\n\\n    /**\\n     * @notice          Instantiate a new memory view. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @dev             Instantiate a new memory view. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @param _type     The type\\n     * @param _loc      The memory address\\n     * @param _len      The length\\n     * @return          newView - The new view with the specified type, location and length\\n     */\\n    function build(uint256 _type, uint256 _loc, uint256 _len) internal pure returns (bytes29 newView) {\\n        uint256 _end = _loc.add(_len);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            if gt(_end, mload(0x40)) {\\n                _end := 0\\n            }\\n        }\\n        if (_end == 0) {\\n            return NULL;\\n        }\\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\\n    }\\n\\n    /**\\n     * @notice          Instantiate a memory view from a byte array.\\n     * @dev             Note that due to Solidity memory representation, it is not possible to\\n     *                  implement a deref, as the `bytes` type stores its len in memory.\\n     * @param arr       The byte array\\n     * @param newType   The type\\n     * @return          bytes29 - The memory view\\n     */\\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\\n        uint256 _len = arr.length;\\n\\n        uint256 _loc;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            _loc := add(arr, 0x20)  // our view is of the data, not the struct\\n        }\\n\\n        return build(newType, _loc, _len);\\n    }\\n\\n    /**\\n     * @notice          Return the associated type information.\\n     * @param memView   The memory view\\n     * @return          _type - The type associated with the view\\n     */\\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n        // 216 == 256 - 40\\n            _type := shr(216, memView) // shift out lower 24 bytes\\n        }\\n    }\\n\\n    /**\\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the 5-byte type flag is equal\\n     */\\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        // XOR the inputs to check their difference\\n        return (left ^ right) >> (2 * TWELVE_BYTES) == 0;\\n    }\\n\\n    /**\\n     * @notice          Return the memory address of the underlying bytes.\\n     * @param memView   The view\\n     * @return          _loc - The memory address\\n     */\\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\\n        uint256 _mask = LOW_12_MASK;  // assembly can't use globals\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n        // 120 bits = 12 bytes (the encoded loc) + 3 bytes (empty low space)\\n            _loc := and(shr(120, memView), _mask)\\n        }\\n    }\\n\\n    /**\\n     * @notice          The number of memory words this memory view occupies, rounded up.\\n     * @param memView   The view\\n     * @return          uint256 - The number of memory words\\n     */\\n    function words(bytes29 memView) internal pure returns (uint256) {\\n        return uint256(len(memView)).add(32) / 32;\\n    }\\n\\n    /**\\n     * @notice          The in-memory footprint of a fresh copy of the view.\\n     * @param memView   The view\\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\\n     */\\n    function footprint(bytes29 memView) internal pure returns (uint256) {\\n        return words(memView) * 32;\\n    }\\n\\n    /**\\n     * @notice          The number of bytes of the view.\\n     * @param memView   The view\\n     * @return          _len - The length of the view\\n     */\\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\\n        uint256 _mask = LOW_12_MASK;  // assembly can't use globals\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            _len := and(shr(24, memView), _mask)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Returns the endpoint of `memView`.\\n     * @param memView   The view\\n     * @return          uint256 - The endpoint of `memView`\\n     */\\n    function end(bytes29 memView) internal pure returns (uint256) {\\n        return loc(memView) + len(memView);\\n    }\\n\\n    /**\\n     * @notice          Safe slicing without memory modification.\\n     * @param memView   The view\\n     * @param _index    The start index\\n     * @param _len      The length\\n     * @param newType   The new type\\n     * @return          bytes29 - The new view\\n     */\\n    function slice(bytes29 memView, uint256 _index, uint256 _len, uint40 newType) internal pure returns (bytes29) {\\n        uint256 _loc = loc(memView);\\n\\n        // Ensure it doesn't overrun the view\\n        if (_loc.add(_index).add(_len) > end(memView)) {\\n            return NULL;\\n        }\\n\\n        _loc = _loc.add(_index);\\n        return build(newType, _loc, _len);\\n    }\\n\\n    /**\\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\\n     * @param memView   The view\\n     * @param _len      The length\\n     * @param newType   The new type\\n     * @return          bytes29 - The new view\\n     */\\n    function prefix(bytes29 memView, uint256 _len, uint40 newType) internal pure returns (bytes29) {\\n        return slice(memView, 0, _len, newType);\\n    }\\n\\n    /**\\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\\n     * @param memView   The view\\n     * @param _len      The length\\n     * @param newType   The new type\\n     * @return          bytes29 - The new view\\n     */\\n    function postfix(bytes29 memView, uint256 _len, uint40 newType) internal pure returns (bytes29) {\\n        return slice(memView, uint256(len(memView)).sub(_len), _len, newType);\\n    }\\n\\n    /**\\n     * @notice          Construct an error message for an indexing overrun.\\n     * @param _loc      The memory address\\n     * @param _len      The length\\n     * @param _index    The index\\n     * @param _slice    The slice where the overrun occurred\\n     * @return          err - The err\\n     */\\n    function indexErrOverrun(\\n        uint256 _loc,\\n        uint256 _len,\\n        uint256 _index,\\n        uint256 _slice\\n    ) internal pure returns (string memory err) {\\n        (, uint256 a) = encodeHex(_loc);\\n        (, uint256 b) = encodeHex(_len);\\n        (, uint256 c) = encodeHex(_index);\\n        (, uint256 d) = encodeHex(_slice);\\n        err = string(\\n            abi.encodePacked(\\n                \\\"TypedMemView/index - Overran the view. Slice is at 0x\\\",\\n                uint48(a),\\n                \\\" with length 0x\\\",\\n                uint48(b),\\n                \\\". Attempted to index at offset 0x\\\",\\n                uint48(c),\\n                \\\" with length 0x\\\",\\n                uint48(d),\\n                \\\".\\\"\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice          Load up to 32 bytes from the view onto the stack.\\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\\n     *                  This can be immediately cast to a smaller fixed-length byte array.\\n     *                  To automatically cast to an integer, use `indexUint`.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @param _bytes    The bytes\\n     * @return          result - The 32 byte result\\n     */\\n    function index(bytes29 memView, uint256 _index, uint8 _bytes) internal pure returns (bytes32 result) {\\n        if (_bytes == 0) {return bytes32(0);}\\n        if (_index.add(_bytes) > len(memView)) {\\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\\n        }\\n        require(_bytes <= 32, \\\"TypedMemView/index - Attempted to index more than 32 bytes\\\");\\n\\n        // FIXME: why the following lines need `unchecked`\\n        unchecked {\\n            uint8 bitLength = _bytes * 8;\\n            uint256 _loc = loc(memView);\\n            uint256 _mask = leftMask(bitLength);\\n            assembly {\\n                // solium-disable-previous-line security/no-inline-assembly\\n                result := and(mload(add(_loc, _index)), _mask)\\n            }   \\n        }\\n\\n    }\\n\\n    /**\\n     * @notice          Parse an unsigned integer from the view at `_index`.\\n     * @dev             Requires that the view have >= `_bytes` bytes following that index.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @param _bytes    The bytes\\n     * @return          result - The unsigned integer\\n     */\\n    function indexUint(bytes29 memView, uint256 _index, uint8 _bytes) internal pure returns (uint256 result) {\\n        return uint256(index(memView, _index, _bytes)) >> ((32 - _bytes) * 8);\\n    }\\n\\n    /**\\n     * @notice          Parse an unsigned integer from LE bytes.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @param _bytes    The bytes\\n     * @return          result - The unsigned integer\\n     */\\n    function indexLEUint(bytes29 memView, uint256 _index, uint8 _bytes) internal pure returns (uint256 result) {\\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\\n    }\\n\\n    /**\\n     * @notice          Parse an address from the view at `_index`. Requires that the view have >= 20 bytes\\n     *                  following that index.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @return          address - The address\\n     */\\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\\n        return address(uint160(indexUint(memView, _index, 20)));\\n    }\\n\\n    /**\\n     * @notice          Return the keccak256 hash of the underlying memory\\n     * @param memView   The view\\n     * @return          digest - The keccak256 hash of the underlying memory\\n     */\\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            digest := keccak256(_loc, _len)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Return the sha2 digest of the underlying memory.\\n     * @dev             We explicitly deallocate memory afterwards.\\n     * @param memView   The view\\n     * @return          digest - The sha2 hash of the underlying memory\\n     */\\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\\n            digest := mload(ptr)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\\n     * @param memView   The pre-image\\n     * @return          digest - the Digest\\n     */\\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2\\n            pop(staticcall(gas(), 3, ptr, 0x20, ptr, 0x20)) // rmd160\\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\\n        }\\n    }\\n\\n    /**\\n     * @notice          Implements bitcoin's hash256 (double sha2)\\n     * @param memView   A view of the preimage\\n     * @return          digest - the Digest\\n     */\\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\\n            pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha2 #2\\n            digest := mload(ptr)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Return true if the underlying memory is equal. Else false.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the underlying memory is equal\\n     */\\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        return (loc(left) == loc(right) && len(left) == len(right)) || keccak(left) == keccak(right);\\n    }\\n\\n    /**\\n     * @notice          Return false if the underlying memory is equal. Else true.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - False if the underlying memory is equal\\n     */\\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        return !untypedEqual(left, right);\\n    }\\n\\n    /**\\n     * @notice          Compares type equality.\\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the types are the same\\n     */\\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        return left == right || (typeOf(left) == typeOf(right) && keccak(left) == keccak(right));\\n    }\\n\\n    /**\\n     * @notice          Compares type inequality.\\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the types are not the same\\n     */\\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        return !equal(left, right);\\n    }\\n\\n    /**\\n     * @notice          Copy the view to a location, return an unsafe memory reference\\n     * @dev             Super Dangerous direct memory access.\\n     *\\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\\n     *                  As such it MUST be consumed IMMEDIATELY.\\n     *                  This function is private to prevent unsafe usage by callers.\\n     * @param memView   The view\\n     * @param _newLoc   The new location\\n     * @return          written - the unsafe memory reference\\n     */\\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\\n        require(notNull(memView), \\\"TypedMemView/copyTo - Null pointer deref\\\");\\n        require(isValid(memView), \\\"TypedMemView/copyTo - Invalid pointer deref\\\");\\n        uint256 _len = len(memView);\\n        uint256 _oldLoc = loc(memView);\\n\\n        uint256 ptr;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40)\\n        // revert if we're writing in occupied memory\\n            if gt(ptr, _newLoc) {\\n                revert(0x60, 0x20) // empty revert message\\n            }\\n\\n        // use the identity precompile to copy\\n        // guaranteed not to fail, so pop the success\\n            pop(staticcall(gas(), 4, _oldLoc, _len, _newLoc, _len))\\n        }\\n\\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\\n    }\\n\\n    /**\\n     * @notice          Copies the referenced memory to a new loc in memory, returning a `bytes` pointing to\\n     *                  the new memory\\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n     * @param memView   The view\\n     * @return          ret - The view pointing to the new memory\\n     */\\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\\n        uint256 ptr;\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n            ret := ptr\\n        }\\n        unsafeCopyTo(memView, ptr + 0x20);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\\n            mstore(ptr, _len) // write len of new array (in bytes)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\\n     * @dev             Super Dangerous direct memory access.\\n     *\\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\\n     *                  As such it MUST be consumed IMMEDIATELY.\\n     *                  This function is private to prevent unsafe usage by callers.\\n     * @param memViews  The views\\n     * @return          unsafeView - The conjoined view pointing to the new memory\\n     */\\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location) private view returns (bytes29 unsafeView) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n        // revert if we're writing in occupied memory\\n            if gt(ptr, _location) {\\n                revert(0x60, 0x20) // empty revert message\\n            }\\n        }\\n\\n        uint256 _offset = 0;\\n        for (uint256 i = 0; i < memViews.length; i ++) {\\n            bytes29 memView = memViews[i];\\n            unsafeCopyTo(memView, _location + _offset);\\n            _offset += len(memView);\\n        }\\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\\n    }\\n\\n    /**\\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\\n     * @param memViews  The views\\n     * @return          bytes32 - The keccak256 digest\\n     */\\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\\n        uint256 ptr;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n        }\\n        return keccak(unsafeJoin(memViews, ptr));\\n    }\\n\\n    /**\\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\\n     * @param memViews  The views\\n     * @return          bytes32 - The sha256 digest\\n     */\\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\\n        uint256 ptr;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n        }\\n        return sha2(unsafeJoin(memViews, ptr));\\n    }\\n\\n    /**\\n     * @notice          copies all views, joins them into a new bytearray.\\n     * @param memViews  The views\\n     * @return          ret - The new byte array\\n     */\\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\\n        uint256 ptr;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n        }\\n\\n        bytes29 _newView = unsafeJoin(memViews, ptr + 0x20);\\n        uint256 _written = len(_newView);\\n        uint256 _footprint = footprint(_newView);\\n\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n        // store the legnth\\n            mstore(ptr, _written)\\n        // new pointer is old + 0x20 + the footprint of the body\\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\\n            ret := ptr\\n        }\\n    }\\n}\",\"keccak256\":\"0x07b6228f8fd945c89660e826ec237a12c2fb2fbb2401b29899e4cd72e97875b2\",\"license\":\"MIT\"},\"contracts/libraries/ViewBTC.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./TypedMemView.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\nlibrary ViewBTC {\\n    using TypedMemView for bytes29;\\n    using SafeMath for uint256;\\n\\n    // The target at minimum Difficulty. Also the target of the genesis block\\n    uint256 internal constant DIFF1_TARGET = 0xffff0000000000000000000000000000000000000000000000000000;\\n\\n    uint256 internal constant RETARGET_PERIOD = 2 * 7 * 24 * 60 * 60;  // 2 weeks in seconds\\n    uint256 internal constant RETARGET_PERIOD_BLOCKS = 2016;  // 2 weeks in blocks\\n\\n    enum BTCTypes {\\n        Unknown,            // 0x0\\n        CompactInt,         // 0x1\\n        ScriptSig,          // 0x2 - with length prefix\\n        Outpoint,           // 0x3\\n        TxIn,               // 0x4\\n        IntermediateTxIns,  // 0x5 - used in vin parsing\\n        Vin,                // 0x6\\n        ScriptPubkey,       // 0x7 - with length prefix\\n        PKH,                // 0x8 - the 20-byte payload digest\\n        WPKH,               // 0x9 - the 20-byte payload digest\\n        WSH,                // 0xa - the 32-byte payload digest\\n        SH,                 // 0xb - the 20-byte payload digest\\n        OpReturnPayload,    // 0xc\\n        TxOut,              // 0xd\\n        IntermediateTxOuts, // 0xe - used in vout parsing\\n        Vout,               // 0xf\\n        Header,             // 0x10\\n        HeaderArray,        // 0x11\\n        MerkleNode,         // 0x12\\n        MerkleStep,         // 0x13\\n        MerkleArray         // 0x14\\n    }\\n\\n    // TODO: any way to bubble up more info?\\n    // @notice             requires `memView` to be of a specified type\\n    // @param memView      a 29-byte view with a 5-byte type\\n    // @param t            the expected type (e.g. BTCTypes.Outpoint, BTCTypes.TxIn, etc)\\n    // @return             passes if it is the correct type, errors if not\\n    modifier typeAssert(bytes29 memView, BTCTypes t) {\\n        memView.assertType(uint40(t));\\n        _;\\n    }\\n\\n    // Revert with an error message re: non-minimal VarInts\\n    function revertNonMinimal(bytes29 ref) private pure returns (string memory) {\\n        (, uint256 g) = TypedMemView.encodeHex(ref.indexUint(0, uint8(ref.len())));\\n        string memory err = string(\\n            abi.encodePacked(\\n                \\\"Non-minimal var int. Got 0x\\\",\\n                uint144(g)\\n            )\\n        );\\n        revert(err);\\n    }\\n\\n    // @notice             reads a compact int from the view at the specified index\\n    // @param memView      a 29-byte view with a 5-byte type\\n    // @param _index       the index\\n    // @return             the compact int at the specified index\\n    function indexCompactInt(bytes29 memView, uint256 _index) internal pure returns (uint64 number) {\\n        uint256 flag = memView.indexUint(_index, 1);\\n        if (flag <= 0xfc) {\\n            return uint64(flag);\\n        } else if (flag == 0xfd) {\\n            number = uint64(memView.indexLEUint(_index + 1, 2));\\n            if (compactIntLength(number) != 3) {revertNonMinimal(memView.slice(_index, 3, 0));}\\n        } else if (flag == 0xfe) {\\n            number = uint64(memView.indexLEUint(_index + 1, 4));\\n            if (compactIntLength(number) != 5) {revertNonMinimal(memView.slice(_index, 5, 0));}\\n        } else if (flag == 0xff) {\\n            number = uint64(memView.indexLEUint(_index + 1, 8));\\n            if (compactIntLength(number) != 9) {revertNonMinimal(memView.slice(_index, 9, 0));}\\n        }\\n    }\\n\\n    // @notice         gives the total length (in bytes) of a CompactInt-encoded number\\n    // @param number   the number as uint64\\n    // @return         the compact integer as uint8\\n    function compactIntLength(uint64 number) internal pure returns (uint8) {\\n        if (number <= 0xfc) {\\n            return 1;\\n        } else if (number <= 0xffff) {\\n            return 3;\\n        } else if (number <= 0xffffffff) {\\n            return 5;\\n        } else {\\n            return 9;\\n        }\\n    }\\n\\n    // @notice             extracts the LE txid from an outpoint\\n    // @param _outpoint    the outpoint\\n    // @return             the LE txid\\n    function txidLE(bytes29 _outpoint) internal pure typeAssert(_outpoint, BTCTypes.Outpoint) returns (bytes32) {\\n        return _outpoint.index(0, 32);\\n    }\\n\\n    // @notice             extracts the index as an integer from the outpoint\\n    // @param _outpoint    the outpoint\\n    // @return             the index\\n    function outpointIdx(bytes29 _outpoint) internal pure typeAssert(_outpoint, BTCTypes.Outpoint) returns (uint32) {\\n        return uint32(_outpoint.indexLEUint(32, 4));\\n    }\\n\\n    // @notice          extracts the outpoint from an input\\n    // @param _input    the input\\n    // @return          the outpoint as a typed memory\\n    function outpoint(bytes29 _input) internal pure typeAssert(_input, BTCTypes.TxIn) returns (bytes29) {\\n        return _input.slice(0, 36, uint40(BTCTypes.Outpoint));\\n    }\\n\\n    // @notice           extracts the script sig from an input\\n    // @param _input     the input\\n    // @return           the script sig as a typed memory\\n    function scriptSig(bytes29 _input) internal pure typeAssert(_input, BTCTypes.TxIn) returns (bytes29) {\\n        uint64 scriptLength = indexCompactInt(_input, 36);\\n        return _input.slice(36, compactIntLength(scriptLength) + scriptLength, uint40(BTCTypes.ScriptSig));\\n    }\\n\\n    // @notice         extracts the sequence from an input\\n    // @param _input   the input\\n    // @return         the sequence\\n    function sequence(bytes29 _input) internal pure typeAssert(_input, BTCTypes.TxIn) returns (uint32) {\\n        uint64 scriptLength = indexCompactInt(_input, 36);\\n        uint256 scriptEnd = 36 + compactIntLength(scriptLength) + scriptLength;\\n        return uint32(_input.indexLEUint(scriptEnd, 4));\\n    }\\n\\n    // @notice         determines the length of the first input in an array of inputs\\n    // @param _inputs  the vin without its length prefix\\n    // @return         the input length\\n    function inputLength(bytes29 _inputs) internal pure typeAssert(_inputs, BTCTypes.IntermediateTxIns) returns (uint256) {\\n        uint64 scriptLength = indexCompactInt(_inputs, 36);\\n        return uint256(compactIntLength(scriptLength)) + uint256(scriptLength) + 36 + 4;\\n    }\\n\\n    // @notice         extracts the input at a specified index\\n    // @param _vin     the vin\\n    // @param _index   the index of the desired input\\n    // @return         the desired input\\n    function indexVin(bytes29 _vin, uint256 _index) internal pure typeAssert(_vin, BTCTypes.Vin) returns (bytes29) {\\n        uint256 _nIns = uint256(indexCompactInt(_vin, 0));\\n        uint256 _viewLen = _vin.len();\\n        require(_index < _nIns, \\\"Vin read overrun\\\");\\n\\n        uint256 _offset = uint256(compactIntLength(uint64(_nIns)));\\n        bytes29 _remaining;\\n        for (uint256 _i = 0; _i < _index; _i += 1) {\\n            _remaining = _vin.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxIns));\\n            _offset += inputLength(_remaining);\\n        }\\n\\n        _remaining = _vin.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxIns));\\n        uint256 _len = inputLength(_remaining);\\n        return _vin.slice(_offset, _len, uint40(BTCTypes.TxIn));\\n    }\\n\\n    // @notice         extracts the raw LE bytes of the output value\\n    // @param _output  the output\\n    // @return         the raw LE bytes of the output value\\n    function valueBytes(bytes29 _output) internal pure typeAssert(_output, BTCTypes.TxOut) returns (bytes8) {\\n        return bytes8(_output.index(0, 8));\\n    }\\n\\n    // @notice         extracts the value from an output\\n    // @param _output  the output\\n    // @return         the value\\n    // function value(bytes29 _output) internal pure typeAssert(_output, BTCTypes.TxOut) returns (uint64) {\\n    //     return uint64(_output.indexLEUint(0, 8));\\n    // }\\n    function value(bytes29 _output) internal pure returns (uint64) {\\n        return uint64(_output.indexLEUint(0, 8));\\n    }\\n\\n    // @notice             extracts the scriptPubkey from an output\\n    // @param _output      the output\\n    // @return             the scriptPubkey\\n    function scriptPubkey(bytes29 _output) internal pure typeAssert(_output, BTCTypes.TxOut) returns (bytes29) {\\n        uint64 scriptLength = indexCompactInt(_output, 8);\\n        return _output.slice(8 + compactIntLength(scriptLength), scriptLength, uint40(BTCTypes.ScriptPubkey));\\n    }\\n\\n    // @notice             extracts the scriptPubkey from an output\\n    // @param _output      the output\\n    // @return             the scriptPubkey\\n    function scriptPubkeyWithLength(bytes29 _output) internal pure typeAssert(_output, BTCTypes.TxOut) returns (bytes29) {\\n        uint64 scriptLength = indexCompactInt(_output, 8);\\n        return _output.slice(8, compactIntLength(scriptLength) + scriptLength, uint40(BTCTypes.ScriptPubkey));\\n    }\\n\\n    // @notice             determines the length of the first output in an array of outputs\\n    // @param _outputs     the vout without its length prefix\\n    // @return             the output length\\n    function outputLength(bytes29 _outputs) internal pure typeAssert(_outputs, BTCTypes.IntermediateTxOuts) returns (uint256) {\\n        uint64 scriptLength = indexCompactInt(_outputs, 8);\\n        return uint256(compactIntLength(scriptLength)) + uint256(scriptLength) + 8;\\n    }\\n\\n    // @notice         extracts the output at a specified index\\n    // @param _vout    the vout\\n    // @param _index   the index of the desired output\\n    // @return         the desired output\\n    // function indexVout(bytes29 _vout, uint256 _index) internal pure typeAssert(_vout, BTCTypes.Vout) returns (bytes29) {\\n    //     uint256 _nOuts = uint256(indexCompactInt(_vout, 0));\\n    //     uint256 _viewLen = _vout.len();\\n    //     require(_index < _nOuts, \\\"Vout read overrun\\\");\\n\\n    //     uint256 _offset = uint256(compactIntLength(uint64(_nOuts)));\\n    //     bytes29 _remaining;\\n    //     for (uint256 _i = 0; _i < _index; _i += 1) {\\n    //         _remaining = _vout.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxOuts));\\n    //         _offset += outputLength(_remaining);\\n    //     }\\n\\n    //     _remaining = _vout.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxOuts));\\n    //     uint256 _len = outputLength(_remaining);\\n    //     return _vout.slice(_offset, _len, uint40(BTCTypes.TxOut));\\n    // }\\n    function indexVout(bytes29 _vout, uint256 _index) internal pure returns (bytes29) {\\n        uint256 _nOuts = uint256(indexCompactInt(_vout, 0));\\n        uint256 _viewLen = _vout.len();\\n        require(_index < _nOuts, \\\"Vout read overrun\\\");\\n\\n        uint256 _offset = uint256(compactIntLength(uint64(_nOuts)));\\n        bytes29 _remaining;\\n        for (uint256 _i = 0; _i < _index; _i += 1) {\\n            _remaining = _vout.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxOuts));\\n            _offset += outputLength(_remaining);\\n        }\\n\\n        _remaining = _vout.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxOuts));\\n        uint256 _len = outputLength(_remaining);\\n        return _vout.slice(_offset, _len, uint40(BTCTypes.TxOut));\\n    }\\n\\n    // @notice         extracts the Op Return Payload\\n    // @param _spk     the scriptPubkey\\n    // @return         the Op Return Payload (or null if not a valid Op Return output)\\n    function opReturnPayload(bytes29 _spk) internal pure typeAssert(_spk, BTCTypes.ScriptPubkey) returns (bytes29) {\\n        uint64 _bodyLength = indexCompactInt(_spk, 0);\\n        uint64 _payloadLen = uint64(_spk.indexUint(3, 1));\\n\\n        // TODO: the max length of op return (with the prefixes) is 83, please check it for other consequences\\n        // Also the _spk.indexUint(3, 1) != _bodyLength - 3 has changed from _spk.indexUint(2, 1) != _bodyLength - 2\\n        if (_bodyLength > 83 || _bodyLength < 4 || _spk.indexUint(1, 1) != 0x6a || _spk.indexUint(3, 1) != _bodyLength - 3) {\\n            return TypedMemView.nullView();\\n        }\\n        // TODO: check, the previous starting index of slice was 3\\n        return _spk.slice(4, _payloadLen, uint40(BTCTypes.OpReturnPayload));\\n    }\\n\\n    // @notice         extracts the payload from a scriptPubkey\\n    // @param _spk     the scriptPubkey\\n    // @return         the payload (or null if not a valid PKH, SH, WPKH, or WSH output)\\n    function payload(bytes29 _spk) internal pure typeAssert(_spk, BTCTypes.ScriptPubkey) returns (bytes29) {\\n        uint256 _spkLength = _spk.len();\\n        uint256 _bodyLength = indexCompactInt(_spk, 0);\\n        if (_bodyLength > 0x22 || _bodyLength < 0x16 || _bodyLength + 1 != _spkLength) {\\n            return TypedMemView.nullView();\\n        }\\n\\n        // Legacy\\n        if (_bodyLength == 0x19 && _spk.indexUint(0, 4) == 0x1976a914 && _spk.indexUint(_spkLength - 2, 2) == 0x88ac) {\\n            return _spk.slice(4, 20, uint40(BTCTypes.PKH));\\n        } else if (_bodyLength == 0x17 && _spk.indexUint(0, 3) == 0x17a914 && _spk.indexUint(_spkLength - 1, 1) == 0x87) {\\n            return _spk.slice(3, 20, uint40(BTCTypes.SH));\\n        }\\n\\n        // Witness v0\\n        if (_spk.indexUint(1, 1) == 0) {\\n            uint256 _payloadLen = _spk.indexUint(2, 1);\\n            if (_bodyLength != 0x22 && _bodyLength != 0x16 || _payloadLen != _bodyLength - 2) {\\n                return TypedMemView.nullView();\\n            }\\n            uint40 newType = uint40(_payloadLen == 0x20 ? BTCTypes.WSH : BTCTypes.WPKH);\\n            return _spk.slice(3, _payloadLen, newType);\\n        }\\n\\n        return TypedMemView.nullView();\\n    }\\n\\n    // @notice     (loosely) verifies an spk and converts to a typed memory\\n    // @dev        will return null in error cases. Will not check for disabled opcodes.\\n    // @param _spk the spk\\n    // @return     the typed spk (or null if error)\\n    function tryAsSPK(bytes29 _spk) internal pure typeAssert(_spk, BTCTypes.Unknown) returns (bytes29) {\\n        if (_spk.len() == 0) {\\n            return TypedMemView.nullView();\\n        }\\n        uint64 _len = indexCompactInt(_spk, 0);\\n        if (_spk.len() == compactIntLength(_len) + _len) {\\n            return _spk.castTo(uint40(BTCTypes.ScriptPubkey));\\n        } else {\\n            return TypedMemView.nullView();\\n        }\\n    }\\n\\n    // @notice     verifies the vin and converts to a typed memory\\n    // @dev        will return null in error cases\\n    // @param _vin the vin\\n    // @return     the typed vin (or null if error)\\n    function tryAsVin(bytes29 _vin) internal pure typeAssert(_vin, BTCTypes.Unknown) returns (bytes29) {\\n        if (_vin.len() == 0) {\\n            return TypedMemView.nullView();\\n        }\\n        uint64 _nIns = indexCompactInt(_vin, 0);\\n        uint256 _viewLen = _vin.len();\\n        if (_nIns == 0) {\\n            return TypedMemView.nullView();\\n        }\\n\\n        uint256 _offset = uint256(compactIntLength(_nIns));\\n        for (uint256 i = 0; i < _nIns; i++) {\\n            if (_offset >= _viewLen) {\\n                // We've reached the end, but are still trying to read more\\n                return TypedMemView.nullView();\\n            }\\n            bytes29 _remaining = _vin.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxIns));\\n            _offset += inputLength(_remaining);\\n        }\\n        if (_offset != _viewLen) {\\n            return TypedMemView.nullView();\\n        }\\n        return _vin.castTo(uint40(BTCTypes.Vin));\\n    }\\n\\n    // @notice         verifies the vout and converts to a typed memory\\n    // @dev            will return null in error cases\\n    // @param _vout    the vout\\n    // @return         the typed vout (or null if error)\\n    function tryAsVout(bytes29 _vout) internal pure typeAssert(_vout, BTCTypes.Unknown) returns (bytes29) {\\n        if (_vout.len() == 0) {\\n            return TypedMemView.nullView();\\n        }\\n        uint64 _nOuts = indexCompactInt(_vout, 0);\\n\\n        uint256 _viewLen = _vout.len();\\n        if (_nOuts == 0) {\\n            return TypedMemView.nullView();\\n        }\\n\\n        uint256 _offset = uint256(compactIntLength(_nOuts));\\n        for (uint256 i = 0; i < _nOuts; i++) {\\n            if (_offset >= _viewLen) {\\n                // We've reached the end, but are still trying to read more\\n                return TypedMemView.nullView();\\n            }\\n            bytes29 _remaining = _vout.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxOuts));\\n            _offset += outputLength(_remaining);\\n        }\\n        if (_offset != _viewLen) {\\n            return TypedMemView.nullView();\\n        }\\n        return _vout.castTo(uint40(BTCTypes.Vout));\\n    }\\n\\n    // @notice         verifies the header and converts to a typed memory\\n    // @dev            will return null in error cases\\n    // @param _header  the header\\n    // @return         the typed header (or null if error)\\n    function tryAsHeader(bytes29 _header) internal pure typeAssert(_header, BTCTypes.Unknown) returns (bytes29) {\\n        if (_header.len() != 80) {\\n            return TypedMemView.nullView();\\n        }\\n        return _header.castTo(uint40(BTCTypes.Header));\\n    }\\n\\n\\n    // @notice         Index a header array.\\n    // @dev            Errors on overruns\\n    // @param _arr     The header array\\n    // @param index    The 0-indexed location of the header to get\\n    // @return         the typed header at `index`\\n    function indexHeaderArray(bytes29 _arr, uint256 index) internal pure typeAssert(_arr, BTCTypes.HeaderArray) returns (bytes29) {\\n        uint256 _start = index * (80);\\n        return _arr.slice(_start, 80, uint40(BTCTypes.Header));\\n    }\\n\\n\\n    // @notice     verifies the header array and converts to a typed memory\\n    // @dev        will return null in error cases\\n    // @param _arr the header array\\n    // @return     the typed header array (or null if error)\\n    function tryAsHeaderArray(bytes29 _arr) internal pure typeAssert(_arr, BTCTypes.Unknown) returns (bytes29) {\\n        if (_arr.len() % 80 != 0) {\\n            return TypedMemView.nullView();\\n        }\\n        return _arr.castTo(uint40(BTCTypes.HeaderArray));\\n    }\\n\\n    // @notice     verifies the merkle array and converts to a typed memory\\n    // @dev        will return null in error cases\\n    // @param _arr the merkle array\\n    // @return     the typed merkle array (or null if error)\\n    function tryAsMerkleArray(bytes29 _arr) internal pure typeAssert(_arr, BTCTypes.Unknown) returns (bytes29) {\\n        if (_arr.len() % 32 != 0) {\\n            return TypedMemView.nullView();\\n        }\\n        return _arr.castTo(uint40(BTCTypes.MerkleArray));\\n    }\\n\\n    // @notice         extracts the merkle root from the header\\n    // @param _header  the header\\n    // @return         the merkle root\\n    // function merkleRoot(bytes29 _header) internal pure typeAssert(_header, BTCTypes.Header) returns (bytes32) {\\n    //     return _header.index(36, 32);\\n    // }\\n\\n    function merkleRoot(bytes29 _header) internal pure returns (bytes32) {\\n        return _header.index(36, 32);\\n    }\\n\\n    // @notice         extracts the target from the header\\n    // @param _header  the header\\n    // @return         the target\\n    function target(bytes29  _header) internal pure typeAssert(_header, BTCTypes.Header) returns (uint256) {\\n        uint256 _mantissa = _header.indexLEUint(72, 3);\\n        require(_header.indexUint(75, 1) > 2, \\\"ViewBTC: invalid target difficulty\\\");\\n        uint256 _exponent = _header.indexUint(75, 1) - 3;\\n        return _mantissa * (256 ** _exponent);\\n    }\\n\\n    // @notice         calculates the difficulty from a target\\n    // @param _target  the target\\n    // @return         the difficulty\\n    function toDiff(uint256  _target) internal pure returns (uint256) {\\n        return DIFF1_TARGET / (_target);\\n    }\\n\\n    // @notice         extracts the difficulty from the header\\n    // @param _header  the header\\n    // @return         the difficulty\\n    function diff(bytes29  _header) internal pure typeAssert(_header, BTCTypes.Header) returns (uint256) {\\n        return toDiff(target(_header));\\n    }\\n\\n    // @notice         extracts the timestamp from the header\\n    // @param _header  the header\\n    // @return         the timestamp\\n    function time(bytes29  _header) internal pure typeAssert(_header, BTCTypes.Header) returns (uint32) {\\n        return uint32(_header.indexLEUint(68, 4));\\n    }\\n\\n    // @notice         extracts the parent hash from the header\\n    // @param _header  the header\\n    // @return         the parent hash\\n    function parent(bytes29 _header) internal pure typeAssert(_header, BTCTypes.Header) returns (bytes32) {\\n        return _header.index(4, 32);\\n    }\\n\\n    // @notice         calculates the Proof of Work hash of the header\\n    // @param _header  the header\\n    // @return         the Proof of Work hash\\n    function workHash(bytes29 _header) internal view typeAssert(_header, BTCTypes.Header) returns (bytes32) {\\n        return _header.hash256();\\n    }\\n\\n    // @notice         calculates the Proof of Work hash of the header, and converts to an integer\\n    // @param _header  the header\\n    // @return         the Proof of Work hash as an integer\\n    function work(bytes29 _header) internal view typeAssert(_header, BTCTypes.Header) returns (uint256) {\\n        return TypedMemView.reverseUint256(uint256(workHash(_header)));\\n    }\\n\\n    // @notice          Concatenates and hashes two inputs for merkle proving\\n    // @dev             Not recommended to call directly.\\n    // @param _a        The first hash\\n    // @param _b        The second hash\\n    // @return          The double-sha256 of the concatenated hashes\\n    function _merkleStep(bytes32 _a, bytes32 _b) internal view returns (bytes32 digest) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            mstore(ptr, _a)\\n            mstore(add(ptr, 0x20), _b)\\n            pop(staticcall(gas(), 2, ptr, 0x40, ptr, 0x20)) // sha2 #1\\n            pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha2 #2\\n            digest := mload(ptr)\\n        }\\n    }\\n\\n    // @notice         verifies a merkle proof\\n    // @param _leaf    the leaf in LE format\\n    // @param _proof   the proof nodes in LE format\\n    // @param _root    the merkle root in BE format (same as the merkle root that is stored in the block header)\\n    // @param _index   the index\\n    // @return         true if valid, false if otherwise\\n    function checkMerkle(\\n        bytes32 _leaf,\\n        bytes29 _proof,\\n        bytes32 _root,\\n        uint256 _index\\n    ) internal view returns (bool) {\\n        uint256 nodes = _proof.len() / 32;\\n        if (nodes == 0) {\\n            return _leaf == _root;\\n        }\\n\\n        uint256 _idx = _index;\\n        bytes32 _current = _leaf;\\n\\n        for (uint i = 0; i < nodes; i++) {\\n            bytes32 _next = _proof.index(i * 32, 32);\\n            if (_idx % 2 == 1) {\\n                _current = _merkleStep(_next, _current);\\n            } else {\\n                _current = _merkleStep(_current, _next);\\n            }\\n            _idx >>= 1;\\n        }\\n\\n        return revertBytes32(_current) == _root;\\n    }\\n\\n    function revertBytes32(bytes32 input) internal pure returns(bytes32) {\\n        bytes memory temp;\\n        bytes32 result;\\n        for (uint i = 0; i < 32; i++) {\\n            temp = abi.encodePacked(temp, input[31-i]);\\n        }\\n        assembly {\\n            result := mload(add(temp, 32))\\n        }\\n        return result;\\n    }\\n    // @notice                 performs the bitcoin difficulty retarget\\n    // @dev                    implements the Bitcoin algorithm precisely\\n    // @param _previousTarget  the target of the previous period\\n    // @param _firstTimestamp  the timestamp of the first block in the difficulty period\\n    // @param _secondTimestamp the timestamp of the last block in the difficulty period\\n    // @return                 the new period's target threshold\\n    function retargetAlgorithm(\\n        uint256 _previousTarget,\\n        uint256 _firstTimestamp,\\n        uint256 _secondTimestamp\\n    ) internal pure returns (uint256) {\\n        uint256 _elapsedTime = _secondTimestamp - _firstTimestamp;\\n\\n        // Normalize ratio to factor of 4 if very long or very short\\n        if (_elapsedTime < RETARGET_PERIOD / (4)) {\\n            _elapsedTime = RETARGET_PERIOD / (4);\\n        }\\n        if (_elapsedTime > RETARGET_PERIOD * (4)) {\\n            _elapsedTime = RETARGET_PERIOD * (4);\\n        }\\n\\n        /*\\n            NB: high targets e.g. ffff0020 can cause overflows here\\n                so we divide it by 256**2, then multiply by 256**2 later\\n                we know the target is evenly divisible by 256**2, so this isn't an issue\\n        */\\n        uint256 _adjusted = _previousTarget / (65536) * (_elapsedTime);\\n        return _adjusted.div(RETARGET_PERIOD) * (65536);\\n    }\\n}\",\"keccak256\":\"0x5b89c0034299947b1f7df3f1ef71fa1b4bf2b805922234e1012411aab45b76d8\",\"license\":\"MIT\"},\"contracts/libraries/ViewSPV.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./TypedMemView.sol\\\";\\nimport \\\"./ViewBTC.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\n\\n\\nlibrary ViewSPV {\\n    using TypedMemView for bytes;\\n    using TypedMemView for bytes29;\\n    using ViewBTC for bytes29;\\n    using SafeMath for uint256;\\n\\n    uint256 constant ERR_BAD_LENGTH = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n    uint256 constant ERR_INVALID_CHAIN = 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe;\\n    uint256 constant ERR_LOW_WORK = 0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffd;\\n\\n    function getErrBadLength() internal pure returns (uint256) {\\n        return ERR_BAD_LENGTH;\\n    }\\n\\n    function getErrInvalidChain() internal pure returns (uint256) {\\n        return ERR_INVALID_CHAIN;\\n    }\\n\\n    function getErrLowWork() internal pure returns (uint256) {\\n        return ERR_LOW_WORK;\\n    }\\n\\n    // @notice             requires `memView` to be of a specified type\\n    // @param memView      a 29-byte view with a 5-byte type\\n    // @param t            the expected type (e.g. BTCTypes.Outpoint, BTCTypes.TxIn, etc)\\n    // @return             passes if it is the correct type, errors if not\\n    modifier typeAssert(bytes29 memView, ViewBTC.BTCTypes t) {\\n        memView.assertType(uint40(t));\\n        _;\\n    }\\n\\n    // @notice                     Validates a tx inclusion in the block\\n    // @dev                        `index` is not a reliable indicator of location within a block\\n    // @param _txid                The txid (LE)\\n    // @param _merkleRoot          The merkle root (as in the block header)\\n    // @param _intermediateNodes   The proof's intermediate nodes (digests between leaf and root)\\n    // @param _index               The leaf's index in the tree (0-indexed)\\n    // @return                     true if fully valid, false otherwise\\n    // function prove(\\n    //     bytes32 _txid,\\n    //     bytes32 _merkleRoot,\\n    //     bytes29 _intermediateNodes,\\n    //     uint _index\\n    // ) internal view typeAssert(_intermediateNodes, ViewBTC.BTCTypes.MerkleArray) returns (bool) {\\n    //     // Shortcut the empty-block case\\n    //     if (_txid == _merkleRoot && _index == 0 && _intermediateNodes.len() == 0) {\\n    //         return true;\\n    //     }\\n\\n    //     return ViewBTC.checkMerkle(_txid, _intermediateNodes, _merkleRoot, _index);\\n    // }\\n    function prove(\\n        bytes32 _txid,\\n        bytes32 _merkleRoot,\\n        bytes29 _intermediateNodes,\\n        uint _index\\n    ) internal view returns (bool) {\\n        // Shortcut the empty-block case\\n        if (revertBytes32(_txid) == _merkleRoot && _index == 0 && _intermediateNodes.len() == 0) {\\n            return true;\\n        }\\n\\n        return ViewBTC.checkMerkle(_txid, _intermediateNodes, _merkleRoot, _index);\\n    }\\n\\n    function revertBytes32(bytes32 input) internal pure returns(bytes32) {\\n        bytes memory temp;\\n        bytes32 result;\\n        for (uint i = 0; i < 32; i++) {\\n            temp = abi.encodePacked(temp, input[31-i]);\\n        }\\n        assembly {\\n            result := mload(add(temp, 32))\\n        }\\n        return result;\\n    }\\n\\n    // @notice             Hashes transaction to get txid\\n    // @dev                Supports Legacy and Witness\\n    // @param _version     4-bytes version\\n    // @param _vin         Raw bytes length-prefixed input vector\\n    // @param _vout        Raw bytes length-prefixed output vector\\n    // @param _locktime    4-byte tx locktime\\n    // @return             32-byte transaction id, little endian\\n    function calculateTxId(\\n        bytes4 _version,\\n        bytes29 _vin,\\n        bytes29 _vout,\\n        bytes4 _locktime\\n    ) internal view typeAssert(_vin, ViewBTC.BTCTypes.Vin) typeAssert(_vout, ViewBTC.BTCTypes.Vout) returns (bytes32) {\\n        // TODO: write in assembly\\n        return abi.encodePacked(_version, _vin.clone(), _vout.clone(), _locktime).ref(0).hash256();\\n    }\\n\\n    // TODO: add test for checkWork\\n    // @notice             Checks validity of header work\\n    // @param _header      Header view\\n    // @param _target      The target threshold\\n    // @return             true if header work is valid, false otherwise\\n    function checkWork(bytes29 _header, uint256 _target) internal view typeAssert(_header, ViewBTC.BTCTypes.Header) returns (bool) {\\n        return _header.work() < _target;\\n    }\\n\\n\\n    // @notice                     Checks validity of header chain\\n    // @dev                        Compares current header parent to previous header's digest\\n    // @param _header              The raw bytes header\\n    // @param _prevHeaderDigest    The previous header's digest\\n    // @return                     true if the connect is valid, false otherwise\\n    function checkParent(bytes29 _header, bytes32 _prevHeaderDigest) internal pure typeAssert(_header, ViewBTC.BTCTypes.Header) returns (bool) {\\n        return _header.parent() == _prevHeaderDigest;\\n    }\\n\\n    // @notice             Checks validity of header chain\\n    // @notice             Compares the hash of each header to the prevHash in the next header\\n    // @param _headers     Raw byte array of header chain\\n    // @return             The total accumulated difficulty of the header chain, or an error code\\n    function checkChain(bytes29 _headers) internal view typeAssert(_headers, ViewBTC.BTCTypes.HeaderArray) returns (uint256 _totalDifficulty) {\\n        bytes32 _digest;\\n        uint256 _headerCount = _headers.len() / 80;\\n        for (uint256 i = 0; i < _headerCount; i += 1) {\\n            bytes29 _header = _headers.indexHeaderArray(i);\\n            if (i != 0) {\\n                if (!checkParent(_header, _digest)) {return ERR_INVALID_CHAIN;}\\n            }\\n            _digest = _header.workHash();\\n            uint256 _work = TypedMemView.reverseUint256(uint256(_digest));\\n            uint256 _target = _header.target();\\n\\n            if (_work > _target) {return ERR_LOW_WORK;}\\n\\n            _totalDifficulty += ViewBTC.toDiff(_target);\\n        }\\n    }\\n}\",\"keccak256\":\"0x5d4af945803e08a700e77be19232cc5db7282609bfc5de1a57d614ad29df4e2d\",\"license\":\"MIT\"},\"contracts/relay/BitcoinRelay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../libraries/TypedMemView.sol\\\";\\nimport \\\"../libraries/ViewBTC.sol\\\";\\nimport \\\"../libraries/ViewSPV.sol\\\";\\nimport \\\"./interfaces/IBitcoinRelay.sol\\\";\\nimport \\\"../erc20/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract BitcoinRelay is IBitcoinRelay, Ownable, ReentrancyGuard, Pausable {\\n\\n    /*  using BytesLib for bytes;\\n        using BTCUtils for bytes;\\n        using ValidateSPV for bytes; \\n    */\\n    using TypedMemView for bytes;\\n    using TypedMemView for bytes29;\\n    using ViewBTC for bytes29;\\n    using ViewSPV for bytes29;\\n\\n    // Public variables\\n    uint public override initialHeight;\\n    uint public override lastSubmittedHeight;\\n    uint public override finalizationParameter;\\n    uint public override rewardAmountInTDT;\\n    uint public override relayerPercentageFee; // A number between [0, 100)\\n    uint public override submissionGasUsed; // Gas used for submitting a block header\\n    uint public override epochLength;\\n    uint public override baseQueries;\\n    uint public override currentEpochQueries;\\n    uint public override lastEpochQueries;\\n    address public override TeleportDAOToken;\\n    bytes32 public override relayGenesisHash; // Initial block header of relay\\n    mapping(bytes32 => bytes32) internal previousBlock; // block header hash => parnet header hash\\n    mapping(bytes32 => uint256) internal blockHeight; // block header hash => block height\\n\\n    // Private variables\\n    uint256 internal currentEpochDiff;\\n    uint256 internal prevEpochDiff;\\n    mapping(uint => blockHeader[]) private chain; // height => list of block headers\\n\\n    /// @notice                   Gives a starting point for the relay\\n    /// @param  _genesisHeader    The starting header\\n    /// @param  _height           The starting height\\n    /// @param  _periodStart      The hash of the first header in the genesis epoch\\n    constructor(\\n        bytes memory _genesisHeader,\\n        uint256 _height,\\n        bytes32 _periodStart,\\n        address _TeleportDAOToken\\n    ) {\\n        // Adds the initial block header to the chain\\n        bytes29 _genesisView = _genesisHeader.ref(0).tryAsHeader();\\n        require(_genesisView.notNull(), \\\"BitcoinRelay: stop being dumb\\\");\\n        bytes32 _genesisHash = _genesisView.hash256();\\n        relayGenesisHash = _genesisHash;\\n        blockHeader memory newBlockHeader;\\n        newBlockHeader.selfHash = _genesisHash;\\n        newBlockHeader.parentHash = _genesisView.parent();\\n        newBlockHeader.merkleRoot = _genesisView.merkleRoot();\\n        newBlockHeader.relayer = msg.sender;\\n        newBlockHeader.gasPrice = 0;\\n        chain[_height].push(newBlockHeader);\\n        blockHeight[_genesisHash] = _height;\\n        blockHeight[_periodStart] = _height - (_height % 2016);\\n\\n        // Relay parameters\\n        finalizationParameter = 1;\\n        initialHeight = _height;\\n        lastSubmittedHeight = _height;\\n        TeleportDAOToken = _TeleportDAOToken;\\n        relayerPercentageFee = 0;\\n        epochLength = 5;\\n        baseQueries = epochLength;\\n        lastEpochQueries = baseQueries;\\n        currentEpochQueries = 0;\\n        submissionGasUsed = 100000;\\n    }\\n\\n    /// @notice        Pause the relay\\n    /// @dev           Only functions with whenPaused modifier can be called\\n    function pauseRelay() external override onlyOwner {\\n        _pause();\\n    }\\n\\n    /// @notice        Unpause the relay\\n    /// @dev           Only functions with whenNotPaused modifier can be called\\n    function unPauseRelay() external override onlyOwner {\\n        _unpause();\\n    }\\n\\n    /// @notice             Getter for an specific block header's hash in the stored chain\\n    /// @param  _height     The height of the desired block header\\n    /// @param  _index      The index of the desired block header in that height\\n    /// @return             Block header's hash\\n    function getBlockHeaderHash (uint _height, uint _index) external view override returns(bytes32) {\\n        return _revertBytes32(chain[_height][_index].selfHash);\\n    }\\n\\n    /// @notice             Getter for an specific block header's fee price for a query\\n    /// @param  _height     The height of the desired block header\\n    /// @param  _index      The index of the desired block header in that height\\n    /// @return             Block header's fee price for a query\\n    function getBlockHeaderFee (uint _height, uint _index) external view override returns(uint) {\\n        return (submissionGasUsed * chain[_height][_index].gasPrice * (1 + relayerPercentageFee) * (epochLength)) / (100 * lastEpochQueries);\\n    }\\n\\n    /// @notice             Getter for the number of block headers in the same height\\n    /// @dev                This shows the number of temporary forks in that specific height\\n    /// @param  _height     The desired height of the blockchain\\n    /// @return             Number of block headers stored in the same height\\n    function getNumberOfSubmittedHeaders (uint _height) external view override returns (uint) {\\n        return chain[_height].length;\\n    }\\n\\n    /// @notice     Getter for currentEpochDiff\\n    /// @dev        This is updated when a new heavist header has a new diff\\n    /// @return     The difficulty of the bestKnownDigest\\n    function getCurrentEpochDifficulty() external view override returns (uint256) {\\n        return currentEpochDiff;\\n    }\\n    /// @notice     Getter for prevEpochDiff\\n    /// @dev        This is updated when a difficulty change is accepted\\n    /// @return     The difficulty of the previous epoch\\n    function getPrevEpochDifficulty() external view override returns (uint256) {\\n        return prevEpochDiff;\\n    }\\n\\n    /// @notice             Getter for available TDT in treasury\\n    /// @return             Amount of TDT available in Relay treasury\\n    function availableTDT() external view override returns(uint) {\\n        return IERC20(TeleportDAOToken).balanceOf(address(this));\\n    }\\n\\n    /// @notice             Getter for available target native token in treasury\\n    /// @return             Amount of target blockchain native token available in Relay treasury\\n    function availableTNT() external view override returns(uint) {\\n        return address(this).balance;\\n    }\\n\\n    /// @notice         Finds the height of a header by its hash\\n    /// @dev            Will fail if the header is unknown\\n    /// @param _hash  The header hash to search for\\n    /// @return         The height of the header, or error if unknown\\n    function findHeight(bytes32 _hash) external view override returns (uint256) {\\n        return _findHeight(_hash);\\n    }\\n\\n    /// @notice         Finds an ancestor for a block by its hash\\n    /// @dev            Will fail if the header is unknown\\n    /// @param _hash  The header hash to search for\\n    /// @return         The height of the header, or error if unknown\\n    function findAncestor(bytes32 _hash, uint256 _offset) external view override returns (bytes32) {\\n        return _findAncestor(_hash, _offset);\\n    }\\n\\n    /// @notice             Checks if a hash is an ancestor of the current one\\n    /// @dev                Limit the amount of lookups (and thus gas usage) with _limit\\n    /// @param _ancestor    The prospective ancestor\\n    /// @param _descendant  The descendant to check\\n    /// @param _limit       The maximum number of blocks to check\\n    /// @return             true if ancestor is at most limit blocks lower than descendant, otherwise false\\n    function isAncestor(bytes32 _ancestor, bytes32 _descendant, uint256 _limit) external view override returns (bool) {\\n        return _isAncestor(_ancestor, _descendant, _limit);\\n    }\\n\\n    /// @notice                             Setter for rewardAmountInTDT\\n    /// @dev                                This award is for the relayer who has a finalized block header\\n    /// @param _rewardAmountInTDT           The reward amount in TDT\\n    function setRewardAmountInTDT(uint _rewardAmountInTDT) external override onlyOwner {\\n        rewardAmountInTDT = _rewardAmountInTDT;\\n    }\\n\\n    /// @notice                             Setter for finalizationParameter\\n    /// @dev                                This might change if finalization rule of the source chain gets updated\\n    /// @param _finalizationParameter       The finalization parameter of the source chain\\n    function setFinalizationParameter(uint _finalizationParameter) external override onlyOwner {\\n        finalizationParameter = _finalizationParameter;\\n    }\\n\\n    /// @notice                             Setter for relayerPercentageFee\\n    /// @dev                                This is updated when we want to change the Relayer reward\\n    /// @param _relayerPercentageFee               Ratio > 1 that determines percentage of reward to the Relayer\\n    function setRelayerPercentageFee(uint _relayerPercentageFee) external override onlyOwner {\\n        relayerPercentageFee = _relayerPercentageFee;\\n    }\\n\\n    /// @notice                             Setter for epochLength\\n    /// @param _epochLength                 The length of epochs for estimating the user queries hence their fees\\n    function setEpochLength(uint _epochLength) external override onlyOwner {\\n        epochLength = _epochLength;\\n    }\\n\\n    /// @notice                             Setter for baseQueries\\n    /// @param _baseQueries                 The base amount of queries we assume in each epoch\\n    ///                                     (This is for preventing user fees to grow significantly)\\n    function setBaseQueries(uint _baseQueries) external override onlyOwner {\\n        baseQueries = _baseQueries;\\n    }\\n\\n    /// @notice                             Setter for submissionGasUsed\\n    /// @dev                                This is updated when the smart contract changes the way of getting block headers\\n    /// @param _submissionGasUsed           The gas used for submitting one block header\\n    function setSubmissionGasUsed(uint _submissionGasUsed) external override onlyOwner {\\n        submissionGasUsed = _submissionGasUsed;\\n    }\\n\\n    /// @notice                         Checks if a tx is included and finalized on the source blockchain\\n    /// @dev                            Checks if the block is finalized, and Merkle proof is correct\\n    /// @param  _txid                   Desired transaction's tx Id\\n    /// @param  _blockHeight            Block height of the desired tx\\n    /// @param  _intermediateNodes      Part of the Merkle proof for the desired tx\\n    /// @param  _index                  Part of the Merkle proof for the desired tx\\n    /// @return                         True if the provided tx is confirmed on the source blockchain, False otherwise\\n    function checkTxProof (\\n        bytes32 _txid, // In BE form\\n        uint _blockHeight,\\n        bytes calldata _intermediateNodes, // In LE form\\n        uint _index\\n    ) external payable nonReentrant whenNotPaused override returns (bool) {\\n        // Check for block confirmation\\n        // TODO: change 6 with something different\\n        if (_blockHeight + 6 < lastSubmittedHeight + 1) {\\n            for (uint256 i = 0; i < chain[_blockHeight].length; i++) {\\n                bytes32 _merkleRoot = _revertBytes32(chain[_blockHeight][i].merkleRoot);\\n                bytes29 intermediateNodes = _intermediateNodes.ref(0).tryAsMerkleArray(); // Check for errors if any\\n                bytes32 txIdLE = _revertBytes32(_txid);\\n                if (ViewSPV.prove(txIdLE, _merkleRoot, intermediateNodes, _index)) {\\n                    require(_getFee(chain[_blockHeight][i].gasPrice), \\\"BitcoinRelay: getting fee was not successful\\\");\\n                    currentEpochQueries += 1;\\n                    return true;\\n                }\\n            }\\n            require(false, \\\"BitcoinRelay: tx has not been included\\\");\\n            return false;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /// @notice             Adds headers to storage after validating\\n    /// @dev                We check integrity and consistency of the header chain\\n    /// @param  _anchor     The header immediately preceeding the new chain\\n    /// @param  _headers    A tightly-packed list of 80-byte Bitcoin headers\\n    /// @return             True if successfully written, error otherwise\\n    function addHeaders(bytes calldata _anchor, bytes calldata _headers) external nonReentrant whenNotPaused override returns (bool) {\\n        bytes29 _headersView = _headers.ref(0).tryAsHeaderArray();\\n        bytes29 _anchorView = _anchor.ref(0).tryAsHeader();\\n\\n        require(_headersView.notNull(), \\\"BitcoinRelay: header array length must be divisible by 80\\\");\\n        require(_anchorView.notNull(), \\\"BitcoinRelay: anchor must be 80 bytes\\\");\\n\\n        return _addHeaders(_anchorView, _headersView, false);\\n    }\\n\\n    /// @notice                       Adds headers to storage, performs additional validation of retarget\\n    /// @dev                          Checks the retarget, the heights, and the linkage\\n    /// @param  _oldPeriodStartHeader The first header in the difficulty period being closed\\n    /// @param  _oldPeriodEndHeader   The last header in the difficulty period being closed (anchor of new headers)\\n    /// @param  _headers              A tightly-packed list of 80-byte Bitcoin headers\\n    /// @return                       True if successfully written, error otherwise\\n    function addHeadersWithRetarget(\\n        bytes calldata _oldPeriodStartHeader,\\n        bytes calldata _oldPeriodEndHeader,\\n        bytes calldata _headers\\n    ) external nonReentrant whenNotPaused override returns (bool) {\\n        bytes29 _oldStart = _oldPeriodStartHeader.ref(0).tryAsHeader();\\n        bytes29 _oldEnd = _oldPeriodEndHeader.ref(0).tryAsHeader();\\n        bytes29 _headersView = _headers.ref(0).tryAsHeaderArray();\\n\\n        require(\\n            _oldStart.notNull() && _oldEnd.notNull() && _headersView.notNull(),\\n            \\\"BitcoinRelay: bad args. Check header and array byte lengths.\\\"\\n        );\\n\\n        return _addHeadersWithRetarget(_oldStart, _oldEnd, _headersView);\\n    }\\n\\n    /// @notice         Finds the height of a header by its hash\\n    /// @dev            Will fail if the header is unknown\\n    /// @param _hash    The header hash to search for\\n    /// @return         The height of the header\\n    function _findHeight(bytes32 _hash) internal view returns (uint256) {\\n        if (blockHeight[_hash] == 0) {\\n            revert(\\\"Unknown block\\\");\\n        }\\n        else {\\n            return blockHeight[_hash];\\n        }\\n    }\\n\\n    /// @notice         Finds an ancestor for a block by its hash\\n    /// @dev            Will fail if the header is unknown\\n    /// @param _hash  The header hash to search for\\n    /// @return         The height of the header, or error if unknown\\n    function _findAncestor(bytes32 _hash, uint256 _offset) internal view returns (bytes32) {\\n        bytes32 _current = _hash;\\n        for (uint256 i = 0; i < _offset; i++) {\\n            _current = previousBlock[_current];\\n        }\\n        require(_current != bytes32(0), \\\"BitcoinRelay: unknown ancestor\\\");\\n        return _current;\\n    }\\n\\n    /// @notice             Checks if a hash is an ancestor of the current one\\n    /// @dev                Limit the amount of lookups (and thus gas usage) with _limit\\n    /// @param _ancestor    The prospective ancestor\\n    /// @param _descendant  The descendant to check\\n    /// @param _limit       The maximum number of blocks to check\\n    /// @return             true if ancestor is at most limit blocks lower than descendant, otherwise false\\n    function _isAncestor(bytes32 _ancestor, bytes32 _descendant, uint256 _limit) internal view returns (bool) {\\n        bytes32 _current = _descendant;\\n        /* NB: 200 gas/read, so gas is capped at ~200 * limit */\\n        for (uint256 i = 0; i < _limit; i++) {\\n            if (_current == _ancestor) {\\n                return true;\\n            }\\n            _current = previousBlock[_current];\\n        }\\n        return false;\\n    }\\n\\n    function _revertBytes32(bytes32 _input) internal pure returns(bytes32) {\\n        bytes memory temp;\\n        bytes32 result;\\n        for (uint256 i = 0; i < 32; i++) {\\n            temp = abi.encodePacked(temp, _input[31-i]);\\n        }\\n        assembly {\\n            result := mload(add(temp, 32))\\n        }\\n        return result;\\n    }\\n\\n    /// @notice                 Gets fee from the user\\n    /// @dev                    Fee is paid in target blockchain native token\\n    /// @return                 True if the fee payment was successful\\n    function _getFee(uint gasPrice) internal returns (bool){\\n        uint feeAmount;\\n        feeAmount = (submissionGasUsed * gasPrice * (1 + relayerPercentageFee) * (epochLength)) / (100 * lastEpochQueries);\\n        require(msg.value >= feeAmount, \\\"BitcoinRelay: fee is not enough\\\");\\n        // (sentFee, dataFee) = payable(msg.sender).call{value: (msg.value - feeAmount)}(\\\"\\\");\\n        Address.sendValue(payable(msg.sender), msg.value - feeAmount);\\n        return true;\\n    }\\n\\n\\n    /// @notice             Adds headers to storage after validating\\n    /// @dev                We check integrity and consistency of the header chain\\n    /// @param  _anchor     The header immediately preceeding the new chain\\n    /// @param  _headers    A tightly-packed list of new 80-byte Bitcoin headers to record\\n    /// @param  _internal   True if called internally from addHeadersWithRetarget, false otherwise\\n    /// @return             True if successfully written, error otherwise\\n    function _addHeaders(bytes29 _anchor, bytes29 _headers, bool _internal) internal returns (bool) {\\n        // Extract basic info\\n        bytes32 _previousHash = _anchor.hash256();\\n        uint256 _anchorHeight = _findHeight(_previousHash);  /* NB: errors if unknown */\\n        uint256 _target = _headers.indexHeaderArray(0).target();\\n\\n        require(\\n            _internal || _anchor.target() == _target,\\n            \\\"BitcoinRelay: unexpected retarget on external call\\\"\\n        );\\n\\n        /*\\n        NB:\\n        1. check that the header has sufficient work\\n        2. check that headers are in a coherent chain (no retargets, hash links good)\\n        3. Store the block connection\\n        4. Store the height\\n        */\\n        uint256 _height;\\n        bytes32 _currentHash;\\n        for (uint256 i = 0; i < _headers.len() / 80; i++) {\\n            bytes29 _header = _headers.indexHeaderArray(i);\\n            _height = _anchorHeight + i + 1;\\n            _currentHash = _header.hash256();\\n\\n            // This requires submitting multiplies of 2016 with retarget and avoids accepting\\n            // a new epoch with no retarget\\n            require(_internal || _height % 2016 != 0,\\n                \\\"BitcoinRelay: headers should be submitted by calling addHeadersWithRetarget\\\");\\n\\n            /* NB: we do still need to make chain level checks tho */\\n            require(_header.target() == _target, \\\"BitcoinRelay: target changed unexpectedly\\\");\\n            require(_header.checkParent(_previousHash), \\\"BitcoinRelay: headers do not form a consistent chain\\\");\\n\\n            require(_height + finalizationParameter > lastSubmittedHeight, \\\"BitcoinRelay: block header is too old\\\");\\n            /*\\n            NB:\\n            if the block is already authenticated, we don't need to a work check\\n            Or write anything to state. This saves gas\\n            */\\n            // The below check prevents adding a replicated block header\\n            if (previousBlock[_currentHash] == bytes32(0)) {\\n                require(\\n                    TypedMemView.reverseUint256(uint256(_currentHash)) <= _target,\\n                    \\\"BitcoinRelay: header work is insufficient\\\"\\n                );\\n\\n                previousBlock[_currentHash] = _previousHash;\\n                blockHeight[_currentHash] = _height;\\n                _addToChain(_header, _height);\\n                emit BlockAdded(_height, _currentHash, _previousHash, msg.sender);\\n            }\\n            _previousHash = _currentHash;\\n        }\\n        return true;\\n    }\\n\\n    /// @notice                     Sends reward and compensation to the relayer\\n    /// @dev                        We pay the block submission cost in TNT and the extra reward in TDT\\n    /// @param  _relayer            The relayer address\\n    /// @return                     True if the amount is paid and False if treasury is empty\\n    function _sendReward(address _relayer) internal returns (uint, uint) {\\n\\n        // Reward in TNT\\n        uint rewardAmountInTNT = submissionGasUsed * tx.gasprice * (1 + relayerPercentageFee) / 100;\\n\\n        // Reward in TDT\\n        uint contractTDTBalance;\\n        if (TeleportDAOToken != address(0)) {\\n            contractTDTBalance = IERC20(TeleportDAOToken).balanceOf(address(this));\\n        } else {\\n            contractTDTBalance = 0;\\n        }\\n\\n        // Send reward in TDT\\n        bool sentTDT;\\n        if (rewardAmountInTDT <= contractTDTBalance && rewardAmountInTDT > 0) {\\n            // Call ERC20 token contract to transfer reward tokens to the relayer\\n            sentTDT = IERC20(TeleportDAOToken).transfer(_relayer, rewardAmountInTDT);\\n        }\\n\\n        // Send reward in TNT\\n        bool sentTNT;\\n        if (address(this).balance > rewardAmountInTNT && rewardAmountInTNT > 0) {\\n            // note: no need to revert if failed\\n            (sentTNT,) = payable(_relayer).call{value: rewardAmountInTNT}(\\\"\\\");\\n        }\\n\\n        if (sentTNT) {\\n            if (sentTDT) {\\n                return (rewardAmountInTNT, rewardAmountInTDT);\\n            } else {\\n                return (rewardAmountInTNT, 0);\\n            }\\n        } else {\\n            if (sentTDT) {\\n                return (0, rewardAmountInTDT);\\n            } else {\\n                return (0, 0);\\n            }\\n        }\\n    }\\n\\n    /// @notice                     Adds a header to the chain\\n    /// @dev                        We prune the chain if the new header causes other block headers to get finalized\\n    /// @param  _header             The new block header\\n    /// @param  _height             The height of the new block header\\n    function _addToChain(bytes29 _header, uint _height) internal {\\n        // Prevent relayers to submit too old block headers\\n        require(_height + finalizationParameter > lastSubmittedHeight, \\\"BitcoinRelay: block header is too old\\\");\\n        blockHeader memory newBlockHeader;\\n        newBlockHeader.selfHash = _header.hash256();\\n        newBlockHeader.parentHash = _header.parent();\\n        newBlockHeader.merkleRoot = _header.merkleRoot();\\n        newBlockHeader.relayer = msg.sender;\\n        newBlockHeader.gasPrice = tx.gasprice;\\n        chain[_height].push(newBlockHeader);\\n        if(_height > lastSubmittedHeight){\\n            lastSubmittedHeight += 1;\\n            _pruneChain();\\n            _updateFee();\\n        }\\n    }\\n\\n    /// @notice                     Reset the number of users in an epoch when a new epoch starts\\n    /// @dev                        This parameter is used when calculating the fee that relay gets from a user in the next epoch\\n    function _updateFee() internal {\\n        if (lastSubmittedHeight % epochLength == 0) {\\n            lastEpochQueries = (currentEpochQueries < baseQueries) ? baseQueries : currentEpochQueries;\\n            currentEpochQueries = 0;\\n        }\\n    }\\n\\n    /// @notice                     Finalizes a block header and removes all the other headers in the same height\\n    /// @dev\\n    function _pruneChain() internal {\\n        // Make sure that we have at least finalizationParameter blocks on relay\\n        if ((lastSubmittedHeight - initialHeight) >= finalizationParameter){\\n            uint idx = finalizationParameter;\\n            uint currentHeight = lastSubmittedHeight;\\n            uint stableIdx = 0;\\n            while (idx > 0) {\\n                // bytes29 header = chain[currentHeight][stableIdx];\\n                bytes32 parentHeaderHash = chain[currentHeight][stableIdx].parentHash;\\n                stableIdx = _findIndex(parentHeaderHash, currentHeight-1);\\n                idx--;\\n                currentHeight--;\\n            }\\n            // Keep the finalized block header and delete rest of headers\\n            chain[currentHeight][0] = chain[currentHeight][stableIdx];\\n            if(chain[currentHeight].length > 1){\\n                _pruneHeight(currentHeight);\\n                // A new block has been finalized, we send its relayer's reward\\n                uint rewardAmountTNT;\\n                uint rewardAmountTDT;\\n                (rewardAmountTNT, rewardAmountTDT) = _sendReward(chain[currentHeight][0].relayer);\\n\\n                emit BlockFinalized(\\n                    currentHeight,\\n                    chain[currentHeight][0].selfHash,\\n                    chain[currentHeight][0].parentHash,\\n                    chain[currentHeight][0].relayer,\\n                    rewardAmountTNT,\\n                    rewardAmountTDT\\n                );\\n            }\\n        }\\n    }\\n\\n    /// @notice                     Finds the index of a block header in a specific height\\n    /// @dev\\n    /// @param  _headerHash         The block header hash\\n    /// @param  _height             The height of the block header\\n    /// @return                     Index of the block header\\n    function _findIndex(bytes32 _headerHash, uint _height) internal view returns(uint) {\\n        for(uint256 index = 0; index < chain[_height].length; index++) {\\n            if(_headerHash == chain[_height][index].selfHash) {\\n                return index;\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    /// @notice                     Deletes all the block header in the same height except the first header\\n    /// @dev                        The first header is the one that has gotten finalized\\n    /// @param  _height             The height of the new block header\\n    function _pruneHeight(uint _height) internal {\\n        uint idx = 1;\\n        while(idx < chain[_height].length){\\n            delete chain[_height][idx]; // check if it should be backwards?\\n            idx += 1;\\n        }\\n    }\\n\\n    /// @notice                       Adds headers to storage, performs additional validation of retarget\\n    /// @dev                          Checks the retarget, the heights, and the linkage\\n    /// @param  _oldStart             The first header in the difficulty period being closed\\n    /// @param  _oldEnd               The last header in the difficulty period being closed\\n    /// @param  _headers              A tightly-packed list of 80-byte Bitcoin headers\\n    /// @return                       True if successfully written, error otherwise\\n    function _addHeadersWithRetarget(\\n        bytes29 _oldStart,\\n        bytes29 _oldEnd,\\n        bytes29 _headers\\n    ) internal returns (bool) {\\n\\n        /* NB: requires that both blocks are known */\\n        uint256 _startHeight = _findHeight(_oldStart.hash256());\\n        uint256 _endHeight = _findHeight(_oldEnd.hash256());\\n\\n        /* NB: retargets should happen at 2016 block intervals */\\n        require(\\n            _endHeight % 2016 == 2015,\\n            \\\"BitcoinRelay: must provide the last header of the closing difficulty period\\\");\\n        require(\\n            _endHeight == _startHeight + 2015,\\n            \\\"BitcoinRelay: must provide exactly 1 difficulty period\\\");\\n        require(\\n            _oldStart.diff() == _oldEnd.diff(),\\n            \\\"BitcoinRelay: period header difficulties do not match\\\");\\n\\n        /* NB: This comparison looks weird because header nBits encoding truncates targets */\\n        bytes29 _newStart = _headers.indexHeaderArray(0);\\n        uint256 _actualTarget = _newStart.target();\\n        uint256 _expectedTarget = ViewBTC.retargetAlgorithm(\\n            _oldStart.target(),\\n            _oldStart.time(),\\n            _oldEnd.time()\\n        );\\n        require(\\n            (_actualTarget & _expectedTarget) == _actualTarget, // shouldn't it be == _expected??\\n            \\\"BitcoinRelay: invalid retarget provided\\\");\\n\\n        // Pass all but the first through to be added\\n        return _addHeaders(_oldEnd, _headers, true);\\n    }\\n}\\n\",\"keccak256\":\"0x8d9c400b383cd0b47978c910bab7c0d3fc0bdc2855d74c89b6a20c8970322b6b\",\"license\":\"MIT\"},\"contracts/relay/interfaces/IBitcoinRelay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IBitcoinRelay {\\n    // Structures\\n\\n    /// @notice                 \\tStructure for recording block header\\n    /// @param selfHash             Hash of block header\\n    /// @param parentHash          \\tHash of parent block header\\n    /// @param merkleRoot       \\tMerkle root of transactions in the block\\n    /// @param relayer              Address of relayer who submitted the block header\\n    struct blockHeader {\\n        bytes32 selfHash;\\n        bytes32 parentHash;\\n        bytes32 merkleRoot;\\n        address relayer;\\n        uint gasPrice;\\n    }\\n\\n    // Events\\n\\n    /// @notice                     Emits when a block header is added\\n    /// @param height               Height of submitted header\\n    /// @param selfHash             Hash of submitted header\\n    /// @param parentHash           Parent hash of submitted header\\n    /// @param relayer              Address of relayer who submitted the block header\\n    event BlockAdded(\\n        uint indexed height,\\n        bytes32 selfHash,\\n        bytes32 indexed parentHash,\\n        address indexed relayer\\n    );\\n\\n    /// @notice                     Emits when a block header gets finalized\\n    /// @param height               Height of the header\\n    /// @param selfHash             Hash of the header\\n    /// @param parentHash           Parent hash of the header\\n    /// @param relayer              Address of relayer who submitted the block header\\n    /// @param rewardAmountTNT      Amount of reward that the relayer receives in target native token\\n    /// @param rewardAmountTDT      Amount of reward that the relayer receives in TDT\\n    event BlockFinalized(\\n        uint indexed height,\\n        bytes32 selfHash,\\n        bytes32 parentHash,\\n        address indexed relayer,\\n        uint rewardAmountTNT,\\n        uint rewardAmountTDT\\n    );\\n\\n    // Read-only functions\\n\\n    function relayGenesisHash() external view returns (bytes32);\\n\\n    function initialHeight() external view returns(uint);\\n\\n    function lastSubmittedHeight() external view returns(uint);\\n\\n    function finalizationParameter() external view returns(uint);\\n\\n    function TeleportDAOToken() external view returns(address);\\n\\n    function relayerPercentageFee() external view returns(uint);\\n\\n    function epochLength() external view returns(uint);\\n\\n    function lastEpochQueries() external view returns(uint);\\n\\n    function currentEpochQueries() external view returns(uint);\\n\\n    function baseQueries() external view returns(uint);\\n\\n    function submissionGasUsed() external view returns(uint);\\n\\n    function getBlockHeaderHash(uint height, uint index) external view returns(bytes32);\\n\\n    function getBlockHeaderFee (uint _height, uint _index) external view returns(uint);\\n\\n    function getNumberOfSubmittedHeaders(uint height) external view returns (uint);\\n\\n    function getCurrentEpochDifficulty() external view returns (uint256);\\n\\n    function getPrevEpochDifficulty() external view returns (uint256);\\n\\n    function availableTDT() external view returns(uint);\\n\\n    function availableTNT() external view returns(uint);\\n\\n    function findHeight(bytes32 _hash) external view returns (uint256);\\n\\n    function findAncestor(bytes32 _hash, uint256 _offset) external view returns (bytes32); // see if it's needed\\n\\n    function isAncestor(bytes32 _ancestor, bytes32 _descendant, uint256 _limit) external view returns (bool); // see if it's needed\\n\\n    function rewardAmountInTDT() external view returns (uint);\\n\\n    // State-changing functions\\n\\n    function pauseRelay() external;\\n\\n    function unPauseRelay() external;\\n\\n    function setRewardAmountInTDT(uint _rewardAmountInTDT) external;\\n\\n    function setFinalizationParameter(uint _finalizationParameter) external;\\n\\n    function setRelayerPercentageFee(uint _relayerPercentageFee) external;\\n\\n    function setEpochLength(uint _epochLength) external;\\n\\n    function setBaseQueries(uint _baseQueries) external;\\n\\n    function setSubmissionGasUsed(uint _submissionGasUsed) external;\\n\\n    function checkTxProof(\\n        bytes32 txid,\\n        uint blockHeight,\\n        bytes calldata intermediateNodes,\\n        uint index\\n    ) external payable returns (bool);\\n\\n    function addHeaders(bytes calldata _anchor, bytes calldata _headers) external returns (bool);\\n\\n    function addHeadersWithRetarget(\\n        bytes calldata _oldPeriodStartHeader,\\n        bytes calldata _oldPeriodEndHeader,\\n        bytes calldata _headers\\n    ) external returns (bool);\\n\\n}\",\"keccak256\":\"0x457fb0f8a6082c881c9da37003c8690061f911ada2a7bda96a7917f20a6877a9\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200474038038062004740833981016040819052620000349162000bb1565b6200003f3362000291565b600180556002805460ff191690556000620000826200006b8683620002e1602090811b620010bd17901c565b62ffffff19166200030960201b620010e11760201c565b9050620000a08162ffffff1916620003a460201b620011391760201c565b620000f25760405162461bcd60e51b815260206004820152601d60248201527f426974636f696e52656c61793a2073746f70206265696e672064756d6200000060448201526064015b60405180910390fd5b6000620001108262ffffff1916620003b460201b620011461760201c565b600e8190556040805160a081018252600060208083018290529282018190526060820181905260808201528281529192506200015d9062ffffff19851690620011a862000418821b17901c565b816020018181525050620001828362ffffff19166200044760201b620011ca1760201c565b604082810191825233606084019081526000608085018181528a825260136020908152848320805460018082018355918552828520895160059092020190815582890151918101919091559551600287015592516003860180546001600160a01b0319166001600160a01b03909216919091179055516004909401939093558483526010905290208690556200021b6107e08762000d7c565b62000227908762000d09565b600095865260106020526040862055505060016005908155600385905560049490945550600d80546001600160a01b0319166001600160a01b039290921691909117905560078190556009829055600a829055600c91909155600b5550620186a060085562000dc9565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b815160009060208401620002fe64ffffffffff8516828462000467565b925050505b92915050565b600081816200032e815b8362ffffff1916620004c160201b620011df1790919060201c565b506200034b8462ffffff1916620005a560201b620012b81760201c565b6001600160601b0316605014620003795762000371620005b460201b620012c71760201c565b92506200039d565b6200039a60108562ffffff1916620005bc60201b620012cf1790919060201c565b92505b5050919050565b62ffffff1981811614155b919050565b600080620003cb8360781c6001600160601b031690565b6001600160601b031690506000620003ec8460181c6001600160601b031690565b6001600160601b03169050604051602081838560025afa5060208160208360025afa5051949350505050565b6000816010620004288162000313565b506200039a62ffffff19851660046020620012e1620005ce821b17811c565b60006200030362ffffff19831660246020620012e1620005ce821b17811c565b6000806200048483856200074460201b6200143a1790919060201c565b905060405181111562000495575060005b80620004a95762ffffff19915050620004ba565b5050606083811b8317901b811760181b5b9392505050565b6000620004cf8383620007a6565b6200059e576000620004f2620004e58560d81c90565b64ffffffffff16620007ca565b9150600090506200050a64ffffffffff8516620007ca565b6040517f5479706520617373657274696f6e206661696c65642e20476f7420307800000060208201526001600160b01b031960b086811b8216603d8401526c05c408af0e0cac6e8cac84060f609b1b604784015283901b16605482015290925060009150605e0160405160208183030381529060405290508060405162461bcd60e51b8152600401620000e9919062000c8d565b5090919050565b60181c6001600160601b031690565b62ffffff1990565b60d81b6001600160d81b039091161790565b600060ff8216620005e257506000620004ba565b620005f68460181c6001600160601b031690565b6001600160601b03166200061c8360ff16856200074460201b6200143a1790919060201c565b111562000687576200066c6200063b8560781c6001600160601b031690565b6001600160601b0316620006588660181c6001600160601b031690565b6001600160601b03168560ff86166200089c565b60405162461bcd60e51b8152600401620000e9919062000c8d565b60208260ff161115620007035760405162461bcd60e51b815260206004820152603a60248201527f54797065644d656d566965772f696e646578202d20417474656d70746564207460448201527f6f20696e646578206d6f7265207468616e2033322062797465730000000000006064820152608401620000e9565b6008820260006200071d8660781c6001600160601b031690565b6001600160601b031690506000600160ff1b60001984011d91909501511695945050505050565b60008262000753838262000cc2565b9150811015620003035760405162461bcd60e51b815260206004820152601460248201527f64732d6d6174682d6164642d6f766572666c6f770000000000000000000000006044820152606401620000e9565b600064ffffffffff8216620007bb8460d81c90565b64ffffffffff16149392505050565b600080601f5b600f8160ff16111562000831576000620007ec82600862000cdd565b60ff1685901c9050620007ff81620009d9565b61ffff16841793508160ff166010146200081b57601084901b93505b506200082960018262000d23565b9050620007d0565b50600f5b60ff8160ff161015620008965760006200085182600862000cdd565b60ff1685901c90506200086481620009d9565b61ffff16831792508160ff166000146200088057601083901b92505b506200088e60018262000d23565b905062000835565b50915091565b60606000620008ab86620007ca565b915060009050620008bc86620007ca565b915060009050620008cd86620007ca565b915060009050620008de86620007ca565b604080517f54797065644d656d566965772f696e646578202d204f76657272616e2074686560208201527f20766965772e20536c6963652069732061742030780000000000000000000000818301526001600160d01b031960d098891b811660558301526e040eed2e8d040d8cadccee8d04060f608b1b605b830181905297891b8116606a8301527f2e20417474656d7074656420746f20696e646578206174206f666673657420306070830152600f60fb1b609083015295881b861660918201526097810196909652951b90921660a68401525050601760f91b60ac8201528151808203608d01815260ad90910190915295945050505050565b6000620009ed600f600484901c1662000a0d565b60ff161760081b62ffff001662000a048262000a0d565b60ff1617919050565b600060f08083179060ff8216141562000a2b576030915050620003af565b8060ff1660f1141562000a43576031915050620003af565b8060ff1660f2141562000a5b576032915050620003af565b8060ff1660f3141562000a73576033915050620003af565b8060ff1660f4141562000a8b576034915050620003af565b8060ff1660f5141562000aa3576035915050620003af565b8060ff1660f6141562000abb576036915050620003af565b8060ff1660f7141562000ad3576037915050620003af565b8060ff1660f8141562000aeb576038915050620003af565b8060ff1660f9141562000b03576039915050620003af565b8060ff1660fa141562000b1b576061915050620003af565b8060ff1660fb141562000b33576062915050620003af565b8060ff1660fc141562000b4b576063915050620003af565b8060ff1660fd141562000b63576064915050620003af565b8060ff1660fe141562000b7b576065915050620003af565b8060ff1660ff141562000b93576066915050620003af565b50919050565b80516001600160a01b0381168114620003af57600080fd5b6000806000806080858703121562000bc7578384fd5b84516001600160401b038082111562000bde578586fd5b818701915087601f83011262000bf2578586fd5b81518181111562000c075762000c0762000db3565b604051601f8201601f19908116603f0116810190838211818310171562000c325762000c3262000db3565b816040528281528a602084870101111562000c4b578889fd5b62000c5e83602083016020880162000d49565b8098505050505050602085015192506040850151915062000c826060860162000b99565b905092959194509250565b600060208252825180602084015262000cae81604085016020870162000d49565b601f01601f19169190910160400192915050565b6000821982111562000cd85762000cd862000d9d565b500190565b600060ff821660ff84168160ff048111821515161562000d015762000d0162000d9d565b029392505050565b60008282101562000d1e5762000d1e62000d9d565b500390565b600060ff821660ff84168082101562000d405762000d4062000d9d565b90039392505050565b60005b8381101562000d6657818101518382015260200162000d4c565b8381111562000d76576000848401525b50505050565b60008262000d9857634e487b7160e01b81526012600452602481fd5b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6139678062000dd96000396000f3fe60806040526004361061021a5760003560e01c8063882a5ee011610123578063b9bbd9bd116100ab578063e2761af01161006f578063e2761af0146105b9578063efbc7be4146105cf578063f2fde38b146105e5578063fa041af514610605578063fd9c6e851461061b5761021a565b8063b9bbd9bd1461052e578063b9e88ac11461054e578063c20dc6641461056e578063c781452914610584578063d0a89739146105995761021a565b80639f156414116100f25780639f156414146104a2578063a072bc50146104b8578063a3db54eb146104ce578063b36161bd146104ee578063b985621a1461050e5761021a565b8063882a5ee0146104225780638da5cb5b14610437578063901186bb14610455578063926d44e2146104755761021a565b80635b732892116101a65780636594168311610175578063659416831461039757806365da41b9146103b7578063665b634f146103d7578063715018a6146103ed5780637fa637fc146104025761021a565b80635b732892146103365780635b88a0e51461034c5780635c975abb1461035f57806360b5c390146103775761021a565b806330017b3b116101ed57806330017b3b146102a65780634354da25146102c6578063465e7559146102e957806354eea7961461030057806357d775f8146103205761021a565b8063108f438d1461021f578063113764be1461025c5780632b97be241461027b5780632f796d9014610290575b600080fd5b34801561022b57600080fd5b50600d5461023f906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561026857600080fd5b506011545b604051908152602001610253565b34801561028757600080fd5b5060125461026d565b34801561029c57600080fd5b5061026d60045481565b3480156102b257600080fd5b5061026d6102c1366004613388565b610631565b6102d96102d43660046133a9565b610646565b6040519015158152602001610253565b3480156102f557600080fd5b506102fe6108ea565b005b34801561030c57600080fd5b506102fe61031b366004613345565b61091e565b34801561032c57600080fd5b5061026d60095481565b34801561034257600080fd5b5061026d600b5481565b34801561035857600080fd5b504761026d565b34801561036b57600080fd5b5060025460ff166102d9565b34801561038357600080fd5b5061026d610392366004613345565b61094d565b3480156103a357600080fd5b506102fe6103b2366004613345565b610960565b3480156103c357600080fd5b506102d96103d2366004613402565b61098f565b3480156103e357600080fd5b5061026d60075481565b3480156103f957600080fd5b506102fe610b93565b34801561040e57600080fd5b506102d961041d36600461346b565b610bc7565b34801561042e57600080fd5b5061026d610dc5565b34801561044357600080fd5b506000546001600160a01b031661023f565b34801561046157600080fd5b506102fe610470366004613345565b610e46565b34801561048157600080fd5b5061026d610490366004613345565b60009081526013602052604090205490565b3480156104ae57600080fd5b5061026d600c5481565b3480156104c457600080fd5b5061026d60055481565b3480156104da57600080fd5b506102fe6104e9366004613345565b610e75565b3480156104fa57600080fd5b506102fe610509366004613345565b610ea4565b34801561051a57600080fd5b506102d961052936600461335d565b610ed3565b34801561053a57600080fd5b5061026d610549366004613388565b610eea565b34801561055a57600080fd5b506102fe610569366004613345565b610f34565b34801561057a57600080fd5b5061026d60085481565b34801561059057600080fd5b506102fe610f63565b3480156105a557600080fd5b5061026d6105b4366004613388565b610f95565b3480156105c557600080fd5b5061026d60035481565b3480156105db57600080fd5b5061026d600e5481565b3480156105f157600080fd5b506102fe6106003660046132fe565b611022565b34801561061157600080fd5b5061026d600a5481565b34801561062757600080fd5b5061026d60065481565b600061063d838361148f565b90505b92915050565b6000600260015414156106745760405162461bcd60e51b815260040161066b9061361f565b60405180910390fd5b600260015561068560025460ff1690565b156106a25760405162461bcd60e51b815260040161066b906135c0565b6004546106b0906001613656565b6106bb866006613656565b10156108d95760005b600086815260136020526040902054811015610881576000868152601360205260408120805461072491908490811061070d57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600502016002015461150d565b9050600061077a61076f600089898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506110bd9050565b62ffffff191661158d565b905060006107878a61150d565b9050610795818484896115d3565b1561086b57600089815260136020526040902080546107e49190869081106107cd57634e487b7160e01b600052603260045260246000fd5b906000526020600020906005020160040154611625565b6108455760405162461bcd60e51b815260206004820152602c60248201527f426974636f696e52656c61793a2067657474696e672066656520776173206e6f60448201526b1d081cdd58d8d95cdcd99d5b60a21b606482015260840161066b565b6001600b60008282546108589190613656565b90915550600195506108dd945050505050565b5050508080610879906138b0565b9150506106c4565b5060405162461bcd60e51b815260206004820152602660248201527f426974636f696e52656c61793a20747820686173206e6f74206265656e20696e60448201526518db1d59195960d21b606482015260840161066b565b5060005b6001805595945050505050565b6000546001600160a01b031633146109145760405162461bcd60e51b815260040161066b906135ea565b61091c6116e2565b565b6000546001600160a01b031633146109485760405162461bcd60e51b815260040161066b906135ea565b600955565b600061095882611757565b90505b919050565b6000546001600160a01b0316331461098a5760405162461bcd60e51b815260040161066b906135ea565b600a55565b6000600260015414156109b45760405162461bcd60e51b815260040161066b9061361f565b60026001556109c560025460ff1690565b156109e25760405162461bcd60e51b815260040161066b906135c0565b6000610a36610a2b600086868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506110bd9050565b62ffffff19166117b7565b90506000610a8c610a81600089898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506110bd9050565b62ffffff19166110e1565b9050610a9d62ffffff198316611139565b610b0f5760405162461bcd60e51b815260206004820152603960248201527f426974636f696e52656c61793a20686561646572206172726179206c656e677460448201527f68206d75737420626520646976697369626c6520627920383000000000000000606482015260840161066b565b610b1e62ffffff198216611139565b610b785760405162461bcd60e51b815260206004820152602560248201527f426974636f696e52656c61793a20616e63686f72206d75737420626520383020604482015264627974657360d81b606482015260840161066b565b610b84818360006117fd565b60018055979650505050505050565b6000546001600160a01b03163314610bbd5760405162461bcd60e51b815260040161066b906135ea565b61091c6000611bed565b600060026001541415610bec5760405162461bcd60e51b815260040161066b9061361f565b6002600155610bfd60025460ff1690565b15610c1a5760405162461bcd60e51b815260040161066b906135c0565b6000610c63610a8160008a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506110bd9050565b90506000610cae610a81600089898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506110bd9050565b90506000610cf9610a2b600088888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506110bd9050565b9050610d0a62ffffff198416611139565b8015610d205750610d2062ffffff198316611139565b8015610d365750610d3662ffffff198216611139565b610da85760405162461bcd60e51b815260206004820152603c60248201527f426974636f696e52656c61793a2062616420617267732e20436865636b20686560448201527f6164657220616e642061727261792062797465206c656e677468732e00000000606482015260840161066b565b610db3838383611c3d565b600180559a9950505050505050505050565b600d546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015610e0957600080fd5b505afa158015610e1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e419190613501565b905090565b6000546001600160a01b03163314610e705760405162461bcd60e51b815260040161066b906135ea565b600755565b6000546001600160a01b03163314610e9f5760405162461bcd60e51b815260040161066b906135ea565b600855565b6000546001600160a01b03163314610ece5760405162461bcd60e51b815260040161066b906135ea565b600555565b6000610ee0848484611eed565b90505b9392505050565b6000828152601360205260408120805461063d919084908110610f1d57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600502016000015461150d565b6000546001600160a01b03163314610f5e5760405162461bcd60e51b815260040161066b906135ea565b600655565b6000546001600160a01b03163314610f8d5760405162461bcd60e51b815260040161066b906135ea565b61091c611f3c565b6000600c546064610fa691906137e7565b600954600754610fb7906001613656565b6000868152601360205260409020805486908110610fe557634e487b7160e01b600052603260045260246000fd5b90600052602060002090600502016004015460085461100491906137e7565b61100e91906137e7565b61101891906137e7565b61063d9190613699565b6000546001600160a01b0316331461104c5760405162461bcd60e51b815260040161066b906135ea565b6001600160a01b0381166110b15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161066b565b6110ba81611bed565b50565b8151600090602084016110d864ffffffffff85168284611fb6565b95945050505050565b600081816110f7815b62ffffff198416906111df565b506050601885901c6001600160601b03161461111c576111156112c7565b9250611132565b61112f60105b62ffffff198616906112cf565b92505b5050919050565b62ffffff19908116141590565b60008061115c8360781c6001600160601b031690565b6001600160601b03169050600061117c8460181c6001600160601b031690565b6001600160601b03169050604051602081838560025afa5060208160208360025afa5051949350505050565b60008160106111b6816110ea565b5061112f62ffffff198516600460206112e1565b600061095862ffffff198316602460206112e1565b60006111eb8383611ffa565b6112b157600061120a6111fe8560d81c90565b64ffffffffff1661201d565b915050600061121f8464ffffffffff1661201d565b6040517f5479706520617373657274696f6e206661696c65642e20476f7420307800000060208201526001600160b01b031960b086811b8216603d8401526c05c408af0e0cac6e8cac84060f609b1b604784015283901b16605482015290925060009150605e0160405160208183030381529060405290508060405162461bcd60e51b815260040161066b9190613548565b5090919050565b60181c6001600160601b031690565b62ffffff1990565b60d81b6001600160d81b039091161790565b600060ff82166112f357506000610ee3565b6113068460181c6001600160601b031690565b6001600160601b031661131c8460ff851661143a565b1115611380576113676113388560781c6001600160601b031690565b6001600160601b03166113548660181c6001600160601b031690565b6001600160601b0316858560ff166120dd565b60405162461bcd60e51b815260040161066b9190613548565b60208260ff1611156113fa5760405162461bcd60e51b815260206004820152603a60248201527f54797065644d656d566965772f696e646578202d20417474656d70746564207460448201527f6f20696e646578206d6f7265207468616e203332206279746573000000000000606482015260840161066b565b6008820260006114138660781c6001600160601b031690565b6001600160601b031690506000600160ff1b60001984011d91909501511695945050505050565b6000826114478382613656565b91508110156106405760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b604482015260640161066b565b600082815b838110156114bf576000918252600f60205260409091205490806114b7816138b0565b915050611494565b508061063d5760405162461bcd60e51b815260206004820152601e60248201527f426974636f696e52656c61793a20756e6b6e6f776e20616e636573746f720000604482015260640161066b565b6000606081805b602081101561158157828561152a83601f61382f565b6020811061154857634e487b7160e01b600052603260045260246000fd5b1a60f81b60405160200161155d929190613519565b60405160208183030381529060405292508080611579906138b0565b915050611514565b50506020015192915050565b6000818161159a816110ea565b506115b36020601886901c6001600160601b03166138df565b6001600160601b0316156115c9576111156112c7565b61112f6014611122565b6000836115df86612207565b1480156115ea575081155b80156116015750601883901c6001600160601b0316155b1561160e5750600161161d565b61161a8584868561227b565b90505b949350505050565b600080600c54606461163791906137e7565b600954600754611648906001613656565b8560085461165691906137e7565b61166091906137e7565b61166a91906137e7565b6116749190613699565b9050803410156116c65760405162461bcd60e51b815260206004820152601f60248201527f426974636f696e52656c61793a20666565206973206e6f7420656e6f75676800604482015260640161066b565b6116d9336116d4833461382f565b612341565b50600192915050565b60025460ff16156117055760405162461bcd60e51b815260040161066b906135c0565b6002805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861173a3390565b6040516001600160a01b03909116815260200160405180910390a1565b6000818152601060205260408120546117a25760405162461bcd60e51b815260206004820152600d60248201526c556e6b6e6f776e20626c6f636b60981b604482015260640161066b565b5060008181526010602052604090205461095b565b600081816117c4816110ea565b506117dd6050601886901c6001600160601b03166138df565b6001600160601b0316156117f3576111156112c7565b61112f6011611122565b60008061180f62ffffff198616611146565b9050600061181c82611757565b9050600061183e61183362ffffff1988168361245f565b62ffffff191661249b565b9050848061185957508061185762ffffff19891661249b565b145b6118c05760405162461bcd60e51b815260206004820152603260248201527f426974636f696e52656c61793a20756e657870656374656420726574617267656044820152711d081bdb88195e1d195c9b985b0818d85b1b60721b606482015260840161066b565b60008060005b6118de605060188b901c6001600160601b03166136ad565b6001600160601b0316811015611bdd57600061190062ffffff198b168361245f565b905061190c8287613656565b611917906001613656565b935061192862ffffff198216611146565b92508880611940575061193d6107e0856138cb565b15155b6119c65760405162461bcd60e51b815260206004820152604b60248201527f426974636f696e52656c61793a20686561646572732073686f756c642062652060448201527f7375626d69747465642062792063616c6c696e6720616464486561646572735760648201526a1a5d1a14995d185c99d95d60aa1b608482015260a40161066b565b846119d662ffffff19831661249b565b14611a355760405162461bcd60e51b815260206004820152602960248201527f426974636f696e52656c61793a20746172676574206368616e67656420756e65604482015268787065637465646c7960b81b606482015260840161066b565b611a4562ffffff19821688612567565b611aae5760405162461bcd60e51b815260206004820152603460248201527f426974636f696e52656c61793a206865616465727320646f206e6f7420666f726044820152733690309031b7b739b4b9ba32b73a1031b430b4b760611b606482015260840161066b565b600454600554611abe9086613656565b11611adb5760405162461bcd60e51b815260040161066b9061357b565b6000838152600f6020526040902054611bc65784611af884612590565b1115611b585760405162461bcd60e51b815260206004820152602960248201527f426974636f696e52656c61793a2068656164657220776f726b20697320696e736044820152681d59999a58da595b9d60ba1b606482015260840161066b565b6000838152600f602090815260408083208a905560109091529020849055611b8081856126ca565b336001600160a01b031687857ffb8fff3e2daa665d496373ced291b62aba4162f24632a1597e286621016e9a1f86604051611bbd91815260200190565b60405180910390a45b829650508080611bd5906138b0565b9150506118c6565b5060019998505050505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080611c57611c5262ffffff198716611146565b611757565b90506000611c6d611c5262ffffff198716611146565b9050611c7b6107e0826138cb565b6107df14611d055760405162461bcd60e51b815260206004820152604b60248201527f426974636f696e52656c61793a206d7573742070726f7669646520746865206c60448201527f61737420686561646572206f662074686520636c6f73696e672064696666696360648201526a1d5b1d1e481c195c9a5bd960aa1b608482015260a40161066b565b611d11826107df613656565b8114611d7e5760405162461bcd60e51b815260206004820152603660248201527f426974636f696e52656c61793a206d7573742070726f766964652065786163746044820152751b1e480c48191a59999a58dd5b1d1e481c195c9a5bd960521b606482015260840161066b565b611d8d62ffffff198616612805565b611d9c62ffffff198816612805565b14611e075760405162461bcd60e51b815260206004820152603560248201527f426974636f696e52656c61793a20706572696f642068656164657220646966666044820152740d2c6ead8e8d2cae640c8de40dcdee840dac2e8c6d605b1b606482015260840161066b565b6000611e1962ffffff1986168261245f565b90506000611e2c62ffffff19831661249b565b90506000611e71611e4262ffffff198b1661249b565b611e5162ffffff198c16612825565b63ffffffff16611e6662ffffff198c16612825565b63ffffffff16612847565b90508181831614611ed45760405162461bcd60e51b815260206004820152602760248201527f426974636f696e52656c61793a20696e76616c696420726574617267657420706044820152661c9bdd9a59195960ca1b606482015260840161066b565b611ee0888860016117fd565b9998505050505050505050565b600082815b83811015611f305785821415611f0d57600192505050610ee3565b6000918252600f6020526040909120549080611f28816138b0565b915050611ef2565b50600095945050505050565b60025460ff16611f855760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161066b565b6002805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa3361173a565b600080611fc3848461143a565b9050604051811115611fd3575060005b80611fe55762ffffff19915050610ee3565b5050606092831b9190911790911b1760181b90565b60008164ffffffffff1661200e8460d81c90565b64ffffffffff16149392505050565b600080601f5b600f8160ff16111561207b57600061203c826008613806565b60ff1685901c905061204d816128d8565b61ffff16841793508160ff1660101461206857601084901b93505b50612074600182613846565b9050612023565b50600f5b60ff8160ff1610156120d7576000612098826008613806565b60ff1685901c90506120a9816128d8565b61ffff16831792508160ff166000146120c457601083901b92505b506120d0600182613846565b905061207f565b50915091565b606060006120ea8661201d565b91505060006120f88661201d565b91505060006121068661201d565b91505060006121148661201d565b604080517f54797065644d656d566965772f696e646578202d204f76657272616e20746865602082015274040ecd2caee5c40a6d8d2c6ca40d2e640c2e84060f605b1b818301526001600160d01b031960d098891b811660558301526e040eed2e8d040d8cadccee8d04060f608b1b605b830181905297891b8116606a8301527f2e20417474656d7074656420746f20696e646578206174206f666673657420306070830152600f60fb1b609083015295881b861660918201526097810196909652951b90921660a68401525050601760f91b60ac8201528151808203608d01815260ad90910190915295945050505050565b6000606081805b602081101561158157828561222483601f61382f565b6020811061224257634e487b7160e01b600052603260045260246000fd5b1a60f81b604051602001612257929190613519565b60405160208183030381529060405292508080612273906138b0565b91505061220e565b6000806122966020601887901c6001600160601b03166136ad565b6001600160601b03169050806122b057505083821461161d565b828660005b838110156123295760006122dc6122cd8360206137e7565b62ffffff198b169060206112e1565b90506122e96002856138cb565b60011415612302576122fb8184612908565b925061230f565b61230c8382612908565b92505b5060019290921c9180612321816138b0565b9150506122b5565b508561233482612934565b1498975050505050505050565b804710156123915760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161066b565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146123de576040519150601f19603f3d011682016040523d82523d6000602084013e6123e3565b606091505b505090508061245a5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161066b565b505050565b600082601161246d816110ea565b50600061247b8560506137e7565b905061249162ffffff19871682605060106129a8565b9695505050505050565b60008160106124a9816110ea565b5060006124bf62ffffff19861660486003612a17565b905060026124d662ffffff198716604b6001612a2c565b1161252e5760405162461bcd60e51b815260206004820152602260248201527f566965774254433a20696e76616c69642074617267657420646966666963756c604482015261747960f01b606482015260840161066b565b6000600361254562ffffff198816604b6001612a2c565b61254f919061382f565b905061255d81610100613719565b61249190836137e7565b6000826010612575816110ea565b508361258662ffffff1987166111a8565b1495945050505050565b600881811c7eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff167fff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff009290911b9190911617601081811c7dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff167fffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff00009290911b9190911617602081811c7bffffffff00000000ffffffff00000000ffffffff00000000ffffffff167fffffffff00000000ffffffff00000000ffffffff00000000ffffffff000000009290911b9190911617604081811c77ffffffffffffffff0000000000000000ffffffffffffffff1677ffffffffffffffff0000000000000000ffffffffffffffff199290911b9190911617608081811c91901b1790565b6004546005546126da9083613656565b116126f75760405162461bcd60e51b815260040161066b9061357b565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915261273162ffffff198416611146565b815261274262ffffff1984166111a8565b602082015261275662ffffff1984166111ca565b604082810191825233606084019081523a60808501908152600086815260136020908152938120805460018082018355918352918590208751600590930201918255938601519381019390935592516002830155516003820180546001600160a01b0319166001600160a01b0390921691909117905590516004918201555482111561245a576001600460008282546127ef9190613656565b909155506127fd9050612a5c565b61245a612d60565b6000816010612813816110ea565b5061112f6128208561249b565b612d95565b6000816010612833816110ea565b5061112f62ffffff19851660446004612a17565b600080612854848461382f565b9050612864600462127500613699565b81101561287c57612879600462127500613699565b90505b61288a6212750060046137e7565b8111156128a25761289f6212750060046137e7565b90505b6000816128b26201000088613699565b6128bc91906137e7565b90506128cb8162127500612da6565b61249190620100006137e7565b60006128ea60048360ff16901c612db2565b60ff161760081b62ffff00166128ff82612db2565b60ff1617919050565b600060405183815282602082015260208160408360025afa5060208160208360025afa50519392505050565b6000606081805b602081101561158157828561295183601f61382f565b6020811061296f57634e487b7160e01b600052603260045260246000fd5b1a60f81b604051602001612984929190613519565b604051602081830303815290604052925080806129a0906138b0565b91505061293b565b6000806129be8660781c6001600160601b031690565b6001600160601b031690506129d286612f1e565b6129e6856129e0848961143a565b9061143a565b11156129f95762ffffff1991505061161d565b612a03818661143a565b90506124918364ffffffffff168286611fb6565b6000610ee0612a278585856112e1565b612590565b6000612a39826020613846565b612a44906008613806565b60ff16612a528585856112e1565b901c949350505050565b600554600354600454612a6f919061382f565b1061091c5760055460045460005b8215612afe576000828152601360205260408120805483908110612ab157634e487b7160e01b600052603260045260246000fd5b9060005260206000209060050201600101549050612adb81600185612ad6919061382f565b612f5f565b915083612ae781613899565b9450508280612af590613899565b93505050612a7d565b6000828152601360205260409020805482908110612b2c57634e487b7160e01b600052603260045260246000fd5b906000526020600020906005020160136000848152602001908152602001600020600081548110612b6d57634e487b7160e01b600052603260045260246000fd5b600091825260208083208454600590930201918255600180850154818401556002808601549084015560038086015490840180546001600160a01b0319166001600160a01b03909216919091179055600494850154949092019390935584825260139092526040902054111561245a57612be682612fe3565b600082815260136020526040812080548291612c3a918390612c1857634e487b7160e01b600052603260045260246000fd5b60009182526020909120600360059092020101546001600160a01b031661307b565b600086815260136020526040812080549395509193509091612c6c57634e487b7160e01b600052603260045260246000fd5b600091825260208083206003600590930201919091015486835260139091526040822080546001600160a01b039092169287927f4fec6ffa2052e80db9daadc2384a8f634057472e28ea7f1bd3eebfc92b5b0f8e929190612cdd57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600502016000015460136000898152602001908152602001600020600081548110612d2257634e487b7160e01b600052603260045260246000fd5b600091825260209182902060016005909202010154604080519384529183015281018690526060810185905260800160405180910390a35050505050565b600954600454612d7091906138cb565b61091c57600a54600b5410612d8757600b54612d8b565b600a545b600c556000600b55565b60006109588261ffff60d01b613699565b600061063d8284613699565b600060f08083179060ff82161415612dce57603091505061095b565b8060ff1660f11415612de457603191505061095b565b8060ff1660f21415612dfa57603291505061095b565b8060ff1660f31415612e1057603391505061095b565b8060ff1660f41415612e2657603491505061095b565b8060ff1660f51415612e3c57603591505061095b565b8060ff1660f61415612e5257603691505061095b565b8060ff1660f71415612e6857603791505061095b565b8060ff1660f81415612e7e57603891505061095b565b8060ff1660f91415612e9457603991505061095b565b8060ff1660fa1415612eaa57606191505061095b565b8060ff1660fb1415612ec057606291505061095b565b8060ff1660fc1415612ed657606391505061095b565b8060ff1660fd1415612eec57606491505061095b565b8060ff1660fe1415612f0257606591505061095b565b8060ff1660ff1415612f1857606691505061095b565b50919050565b6000612f338260181c6001600160601b031690565b612f468360781c6001600160601b031690565b612f50919061366e565b6001600160601b031692915050565b6000805b600083815260136020526040902054811015612fd9576000838152601360205260409020805482908110612fa757634e487b7160e01b600052603260045260246000fd5b906000526020600020906005020160000154841415612fc7579050610640565b80612fd1816138b0565b915050612f63565b5060009392505050565b60015b60008281526013602052604090205481101561307757600082815260136020526040902080548290811061302a57634e487b7160e01b600052603260045260246000fd5b6000918252602082206005909102018181556001808201839055600282018390556003820180546001600160a01b03191690556004909101919091556130709082613656565b9050612fe6565b5050565b6000806000606460075460016130919190613656565b3a60085461309f91906137e7565b6130a991906137e7565b6130b39190613699565b600d549091506000906001600160a01b03161561314c57600d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561310d57600080fd5b505afa158015613121573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131459190613501565b9050613150565b5060005b6000816006541115801561316657506000600654115b156131f757600d5460065460405163a9059cbb60e01b81526001600160a01b038981166004830152602482019290925291169063a9059cbb90604401602060405180830381600087803b1580156131bc57600080fd5b505af11580156131d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131f49190613325565b90505b600083471180156132085750600084115b15613261576040516001600160a01b038816908590600081818185875af1925050503d8060008114613256576040519150601f19603f3d011682016040523d82523d6000602084013e61325b565b606091505b50909150505b801561328e57811561327e578360065495509550505050506132b2565b83600095509550505050506132b2565b81156132a657600060065495509550505050506132b2565b60008095509550505050505b915091565b60008083601f8401126132c8578182fd5b50813567ffffffffffffffff8111156132df578182fd5b6020830191508360208285010111156132f757600080fd5b9250929050565b60006020828403121561330f578081fd5b81356001600160a01b038116811461063d578182fd5b600060208284031215613336578081fd5b8151801515811461063d578182fd5b600060208284031215613356578081fd5b5035919050565b600080600060608486031215613371578182fd5b505081359360208301359350604090920135919050565b6000806040838503121561339a578182fd5b50508035926020909101359150565b6000806000806000608086880312156133c0578081fd5b8535945060208601359350604086013567ffffffffffffffff8111156133e4578182fd5b6133f0888289016132b7565b96999598509660600135949350505050565b60008060008060408587031215613417578384fd5b843567ffffffffffffffff8082111561342e578586fd5b61343a888389016132b7565b90965094506020870135915080821115613452578384fd5b5061345f878288016132b7565b95989497509550505050565b60008060008060008060608789031215613483578081fd5b863567ffffffffffffffff8082111561349a578283fd5b6134a68a838b016132b7565b909850965060208901359150808211156134be578283fd5b6134ca8a838b016132b7565b909650945060408901359150808211156134e2578283fd5b506134ef89828a016132b7565b979a9699509497509295939492505050565b600060208284031215613512578081fd5b5051919050565b6000835161352b818460208801613869565b6001600160f81b0319939093169190920190815260010192915050565b6000602082528251806020840152613567816040850160208701613869565b601f01601f19169190910160400192915050565b60208082526025908201527f426974636f696e52656c61793a20626c6f636b2068656164657220697320746f6040820152641bc81bdb1960da1b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6000821982111561366957613669613905565b500190565b60006001600160601b0380831681851680830382111561369057613690613905565b01949350505050565b6000826136a8576136a861391b565b500490565b60006001600160601b03808416806136c7576136c761391b565b92169190910492915050565b80825b60018086116136e55750613710565b8187048211156136f7576136f7613905565b8086161561370457918102915b9490941c9380026136d6565b94509492505050565b600061063d600019848460008261373257506001610ee3565b8161373f57506000610ee3565b8160018114613755576002811461375f5761378c565b6001915050610ee3565b60ff84111561377057613770613905565b6001841b91508482111561378657613786613905565b50610ee3565b5060208310610133831016604e8410600b84101617156137bf575081810a838111156137ba576137ba613905565b610ee3565b6137cc84848460016136d3565b8086048211156137de576137de613905565b02949350505050565b600081600019048311821515161561380157613801613905565b500290565b600060ff821660ff84168160ff048111821515161561382757613827613905565b029392505050565b60008282101561384157613841613905565b500390565b600060ff821660ff84168082101561386057613860613905565b90039392505050565b60005b8381101561388457818101518382015260200161386c565b83811115613893576000848401525b50505050565b6000816138a8576138a8613905565b506000190190565b60006000198214156138c4576138c4613905565b5060010190565b6000826138da576138da61391b565b500690565b60006001600160601b03808416806138f9576138f961391b565b92169190910692915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fdfea26469706673582212209f5c5e0c290eb2120557e5297a4462845770862cb64d3836e710f24953c3e4f464736f6c63430008020033",
  "deployedBytecode": "0x60806040526004361061021a5760003560e01c8063882a5ee011610123578063b9bbd9bd116100ab578063e2761af01161006f578063e2761af0146105b9578063efbc7be4146105cf578063f2fde38b146105e5578063fa041af514610605578063fd9c6e851461061b5761021a565b8063b9bbd9bd1461052e578063b9e88ac11461054e578063c20dc6641461056e578063c781452914610584578063d0a89739146105995761021a565b80639f156414116100f25780639f156414146104a2578063a072bc50146104b8578063a3db54eb146104ce578063b36161bd146104ee578063b985621a1461050e5761021a565b8063882a5ee0146104225780638da5cb5b14610437578063901186bb14610455578063926d44e2146104755761021a565b80635b732892116101a65780636594168311610175578063659416831461039757806365da41b9146103b7578063665b634f146103d7578063715018a6146103ed5780637fa637fc146104025761021a565b80635b732892146103365780635b88a0e51461034c5780635c975abb1461035f57806360b5c390146103775761021a565b806330017b3b116101ed57806330017b3b146102a65780634354da25146102c6578063465e7559146102e957806354eea7961461030057806357d775f8146103205761021a565b8063108f438d1461021f578063113764be1461025c5780632b97be241461027b5780632f796d9014610290575b600080fd5b34801561022b57600080fd5b50600d5461023f906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561026857600080fd5b506011545b604051908152602001610253565b34801561028757600080fd5b5060125461026d565b34801561029c57600080fd5b5061026d60045481565b3480156102b257600080fd5b5061026d6102c1366004613388565b610631565b6102d96102d43660046133a9565b610646565b6040519015158152602001610253565b3480156102f557600080fd5b506102fe6108ea565b005b34801561030c57600080fd5b506102fe61031b366004613345565b61091e565b34801561032c57600080fd5b5061026d60095481565b34801561034257600080fd5b5061026d600b5481565b34801561035857600080fd5b504761026d565b34801561036b57600080fd5b5060025460ff166102d9565b34801561038357600080fd5b5061026d610392366004613345565b61094d565b3480156103a357600080fd5b506102fe6103b2366004613345565b610960565b3480156103c357600080fd5b506102d96103d2366004613402565b61098f565b3480156103e357600080fd5b5061026d60075481565b3480156103f957600080fd5b506102fe610b93565b34801561040e57600080fd5b506102d961041d36600461346b565b610bc7565b34801561042e57600080fd5b5061026d610dc5565b34801561044357600080fd5b506000546001600160a01b031661023f565b34801561046157600080fd5b506102fe610470366004613345565b610e46565b34801561048157600080fd5b5061026d610490366004613345565b60009081526013602052604090205490565b3480156104ae57600080fd5b5061026d600c5481565b3480156104c457600080fd5b5061026d60055481565b3480156104da57600080fd5b506102fe6104e9366004613345565b610e75565b3480156104fa57600080fd5b506102fe610509366004613345565b610ea4565b34801561051a57600080fd5b506102d961052936600461335d565b610ed3565b34801561053a57600080fd5b5061026d610549366004613388565b610eea565b34801561055a57600080fd5b506102fe610569366004613345565b610f34565b34801561057a57600080fd5b5061026d60085481565b34801561059057600080fd5b506102fe610f63565b3480156105a557600080fd5b5061026d6105b4366004613388565b610f95565b3480156105c557600080fd5b5061026d60035481565b3480156105db57600080fd5b5061026d600e5481565b3480156105f157600080fd5b506102fe6106003660046132fe565b611022565b34801561061157600080fd5b5061026d600a5481565b34801561062757600080fd5b5061026d60065481565b600061063d838361148f565b90505b92915050565b6000600260015414156106745760405162461bcd60e51b815260040161066b9061361f565b60405180910390fd5b600260015561068560025460ff1690565b156106a25760405162461bcd60e51b815260040161066b906135c0565b6004546106b0906001613656565b6106bb866006613656565b10156108d95760005b600086815260136020526040902054811015610881576000868152601360205260408120805461072491908490811061070d57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600502016002015461150d565b9050600061077a61076f600089898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506110bd9050565b62ffffff191661158d565b905060006107878a61150d565b9050610795818484896115d3565b1561086b57600089815260136020526040902080546107e49190869081106107cd57634e487b7160e01b600052603260045260246000fd5b906000526020600020906005020160040154611625565b6108455760405162461bcd60e51b815260206004820152602c60248201527f426974636f696e52656c61793a2067657474696e672066656520776173206e6f60448201526b1d081cdd58d8d95cdcd99d5b60a21b606482015260840161066b565b6001600b60008282546108589190613656565b90915550600195506108dd945050505050565b5050508080610879906138b0565b9150506106c4565b5060405162461bcd60e51b815260206004820152602660248201527f426974636f696e52656c61793a20747820686173206e6f74206265656e20696e60448201526518db1d59195960d21b606482015260840161066b565b5060005b6001805595945050505050565b6000546001600160a01b031633146109145760405162461bcd60e51b815260040161066b906135ea565b61091c6116e2565b565b6000546001600160a01b031633146109485760405162461bcd60e51b815260040161066b906135ea565b600955565b600061095882611757565b90505b919050565b6000546001600160a01b0316331461098a5760405162461bcd60e51b815260040161066b906135ea565b600a55565b6000600260015414156109b45760405162461bcd60e51b815260040161066b9061361f565b60026001556109c560025460ff1690565b156109e25760405162461bcd60e51b815260040161066b906135c0565b6000610a36610a2b600086868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506110bd9050565b62ffffff19166117b7565b90506000610a8c610a81600089898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506110bd9050565b62ffffff19166110e1565b9050610a9d62ffffff198316611139565b610b0f5760405162461bcd60e51b815260206004820152603960248201527f426974636f696e52656c61793a20686561646572206172726179206c656e677460448201527f68206d75737420626520646976697369626c6520627920383000000000000000606482015260840161066b565b610b1e62ffffff198216611139565b610b785760405162461bcd60e51b815260206004820152602560248201527f426974636f696e52656c61793a20616e63686f72206d75737420626520383020604482015264627974657360d81b606482015260840161066b565b610b84818360006117fd565b60018055979650505050505050565b6000546001600160a01b03163314610bbd5760405162461bcd60e51b815260040161066b906135ea565b61091c6000611bed565b600060026001541415610bec5760405162461bcd60e51b815260040161066b9061361f565b6002600155610bfd60025460ff1690565b15610c1a5760405162461bcd60e51b815260040161066b906135c0565b6000610c63610a8160008a8a8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506110bd9050565b90506000610cae610a81600089898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506110bd9050565b90506000610cf9610a2b600088888080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525092939250506110bd9050565b9050610d0a62ffffff198416611139565b8015610d205750610d2062ffffff198316611139565b8015610d365750610d3662ffffff198216611139565b610da85760405162461bcd60e51b815260206004820152603c60248201527f426974636f696e52656c61793a2062616420617267732e20436865636b20686560448201527f6164657220616e642061727261792062797465206c656e677468732e00000000606482015260840161066b565b610db3838383611c3d565b600180559a9950505050505050505050565b600d546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015610e0957600080fd5b505afa158015610e1d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e419190613501565b905090565b6000546001600160a01b03163314610e705760405162461bcd60e51b815260040161066b906135ea565b600755565b6000546001600160a01b03163314610e9f5760405162461bcd60e51b815260040161066b906135ea565b600855565b6000546001600160a01b03163314610ece5760405162461bcd60e51b815260040161066b906135ea565b600555565b6000610ee0848484611eed565b90505b9392505050565b6000828152601360205260408120805461063d919084908110610f1d57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600502016000015461150d565b6000546001600160a01b03163314610f5e5760405162461bcd60e51b815260040161066b906135ea565b600655565b6000546001600160a01b03163314610f8d5760405162461bcd60e51b815260040161066b906135ea565b61091c611f3c565b6000600c546064610fa691906137e7565b600954600754610fb7906001613656565b6000868152601360205260409020805486908110610fe557634e487b7160e01b600052603260045260246000fd5b90600052602060002090600502016004015460085461100491906137e7565b61100e91906137e7565b61101891906137e7565b61063d9190613699565b6000546001600160a01b0316331461104c5760405162461bcd60e51b815260040161066b906135ea565b6001600160a01b0381166110b15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161066b565b6110ba81611bed565b50565b8151600090602084016110d864ffffffffff85168284611fb6565b95945050505050565b600081816110f7815b62ffffff198416906111df565b506050601885901c6001600160601b03161461111c576111156112c7565b9250611132565b61112f60105b62ffffff198616906112cf565b92505b5050919050565b62ffffff19908116141590565b60008061115c8360781c6001600160601b031690565b6001600160601b03169050600061117c8460181c6001600160601b031690565b6001600160601b03169050604051602081838560025afa5060208160208360025afa5051949350505050565b60008160106111b6816110ea565b5061112f62ffffff198516600460206112e1565b600061095862ffffff198316602460206112e1565b60006111eb8383611ffa565b6112b157600061120a6111fe8560d81c90565b64ffffffffff1661201d565b915050600061121f8464ffffffffff1661201d565b6040517f5479706520617373657274696f6e206661696c65642e20476f7420307800000060208201526001600160b01b031960b086811b8216603d8401526c05c408af0e0cac6e8cac84060f609b1b604784015283901b16605482015290925060009150605e0160405160208183030381529060405290508060405162461bcd60e51b815260040161066b9190613548565b5090919050565b60181c6001600160601b031690565b62ffffff1990565b60d81b6001600160d81b039091161790565b600060ff82166112f357506000610ee3565b6113068460181c6001600160601b031690565b6001600160601b031661131c8460ff851661143a565b1115611380576113676113388560781c6001600160601b031690565b6001600160601b03166113548660181c6001600160601b031690565b6001600160601b0316858560ff166120dd565b60405162461bcd60e51b815260040161066b9190613548565b60208260ff1611156113fa5760405162461bcd60e51b815260206004820152603a60248201527f54797065644d656d566965772f696e646578202d20417474656d70746564207460448201527f6f20696e646578206d6f7265207468616e203332206279746573000000000000606482015260840161066b565b6008820260006114138660781c6001600160601b031690565b6001600160601b031690506000600160ff1b60001984011d91909501511695945050505050565b6000826114478382613656565b91508110156106405760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b604482015260640161066b565b600082815b838110156114bf576000918252600f60205260409091205490806114b7816138b0565b915050611494565b508061063d5760405162461bcd60e51b815260206004820152601e60248201527f426974636f696e52656c61793a20756e6b6e6f776e20616e636573746f720000604482015260640161066b565b6000606081805b602081101561158157828561152a83601f61382f565b6020811061154857634e487b7160e01b600052603260045260246000fd5b1a60f81b60405160200161155d929190613519565b60405160208183030381529060405292508080611579906138b0565b915050611514565b50506020015192915050565b6000818161159a816110ea565b506115b36020601886901c6001600160601b03166138df565b6001600160601b0316156115c9576111156112c7565b61112f6014611122565b6000836115df86612207565b1480156115ea575081155b80156116015750601883901c6001600160601b0316155b1561160e5750600161161d565b61161a8584868561227b565b90505b949350505050565b600080600c54606461163791906137e7565b600954600754611648906001613656565b8560085461165691906137e7565b61166091906137e7565b61166a91906137e7565b6116749190613699565b9050803410156116c65760405162461bcd60e51b815260206004820152601f60248201527f426974636f696e52656c61793a20666565206973206e6f7420656e6f75676800604482015260640161066b565b6116d9336116d4833461382f565b612341565b50600192915050565b60025460ff16156117055760405162461bcd60e51b815260040161066b906135c0565b6002805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861173a3390565b6040516001600160a01b03909116815260200160405180910390a1565b6000818152601060205260408120546117a25760405162461bcd60e51b815260206004820152600d60248201526c556e6b6e6f776e20626c6f636b60981b604482015260640161066b565b5060008181526010602052604090205461095b565b600081816117c4816110ea565b506117dd6050601886901c6001600160601b03166138df565b6001600160601b0316156117f3576111156112c7565b61112f6011611122565b60008061180f62ffffff198616611146565b9050600061181c82611757565b9050600061183e61183362ffffff1988168361245f565b62ffffff191661249b565b9050848061185957508061185762ffffff19891661249b565b145b6118c05760405162461bcd60e51b815260206004820152603260248201527f426974636f696e52656c61793a20756e657870656374656420726574617267656044820152711d081bdb88195e1d195c9b985b0818d85b1b60721b606482015260840161066b565b60008060005b6118de605060188b901c6001600160601b03166136ad565b6001600160601b0316811015611bdd57600061190062ffffff198b168361245f565b905061190c8287613656565b611917906001613656565b935061192862ffffff198216611146565b92508880611940575061193d6107e0856138cb565b15155b6119c65760405162461bcd60e51b815260206004820152604b60248201527f426974636f696e52656c61793a20686561646572732073686f756c642062652060448201527f7375626d69747465642062792063616c6c696e6720616464486561646572735760648201526a1a5d1a14995d185c99d95d60aa1b608482015260a40161066b565b846119d662ffffff19831661249b565b14611a355760405162461bcd60e51b815260206004820152602960248201527f426974636f696e52656c61793a20746172676574206368616e67656420756e65604482015268787065637465646c7960b81b606482015260840161066b565b611a4562ffffff19821688612567565b611aae5760405162461bcd60e51b815260206004820152603460248201527f426974636f696e52656c61793a206865616465727320646f206e6f7420666f726044820152733690309031b7b739b4b9ba32b73a1031b430b4b760611b606482015260840161066b565b600454600554611abe9086613656565b11611adb5760405162461bcd60e51b815260040161066b9061357b565b6000838152600f6020526040902054611bc65784611af884612590565b1115611b585760405162461bcd60e51b815260206004820152602960248201527f426974636f696e52656c61793a2068656164657220776f726b20697320696e736044820152681d59999a58da595b9d60ba1b606482015260840161066b565b6000838152600f602090815260408083208a905560109091529020849055611b8081856126ca565b336001600160a01b031687857ffb8fff3e2daa665d496373ced291b62aba4162f24632a1597e286621016e9a1f86604051611bbd91815260200190565b60405180910390a45b829650508080611bd5906138b0565b9150506118c6565b5060019998505050505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080611c57611c5262ffffff198716611146565b611757565b90506000611c6d611c5262ffffff198716611146565b9050611c7b6107e0826138cb565b6107df14611d055760405162461bcd60e51b815260206004820152604b60248201527f426974636f696e52656c61793a206d7573742070726f7669646520746865206c60448201527f61737420686561646572206f662074686520636c6f73696e672064696666696360648201526a1d5b1d1e481c195c9a5bd960aa1b608482015260a40161066b565b611d11826107df613656565b8114611d7e5760405162461bcd60e51b815260206004820152603660248201527f426974636f696e52656c61793a206d7573742070726f766964652065786163746044820152751b1e480c48191a59999a58dd5b1d1e481c195c9a5bd960521b606482015260840161066b565b611d8d62ffffff198616612805565b611d9c62ffffff198816612805565b14611e075760405162461bcd60e51b815260206004820152603560248201527f426974636f696e52656c61793a20706572696f642068656164657220646966666044820152740d2c6ead8e8d2cae640c8de40dcdee840dac2e8c6d605b1b606482015260840161066b565b6000611e1962ffffff1986168261245f565b90506000611e2c62ffffff19831661249b565b90506000611e71611e4262ffffff198b1661249b565b611e5162ffffff198c16612825565b63ffffffff16611e6662ffffff198c16612825565b63ffffffff16612847565b90508181831614611ed45760405162461bcd60e51b815260206004820152602760248201527f426974636f696e52656c61793a20696e76616c696420726574617267657420706044820152661c9bdd9a59195960ca1b606482015260840161066b565b611ee0888860016117fd565b9998505050505050505050565b600082815b83811015611f305785821415611f0d57600192505050610ee3565b6000918252600f6020526040909120549080611f28816138b0565b915050611ef2565b50600095945050505050565b60025460ff16611f855760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604482015260640161066b565b6002805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa3361173a565b600080611fc3848461143a565b9050604051811115611fd3575060005b80611fe55762ffffff19915050610ee3565b5050606092831b9190911790911b1760181b90565b60008164ffffffffff1661200e8460d81c90565b64ffffffffff16149392505050565b600080601f5b600f8160ff16111561207b57600061203c826008613806565b60ff1685901c905061204d816128d8565b61ffff16841793508160ff1660101461206857601084901b93505b50612074600182613846565b9050612023565b50600f5b60ff8160ff1610156120d7576000612098826008613806565b60ff1685901c90506120a9816128d8565b61ffff16831792508160ff166000146120c457601083901b92505b506120d0600182613846565b905061207f565b50915091565b606060006120ea8661201d565b91505060006120f88661201d565b91505060006121068661201d565b91505060006121148661201d565b604080517f54797065644d656d566965772f696e646578202d204f76657272616e20746865602082015274040ecd2caee5c40a6d8d2c6ca40d2e640c2e84060f605b1b818301526001600160d01b031960d098891b811660558301526e040eed2e8d040d8cadccee8d04060f608b1b605b830181905297891b8116606a8301527f2e20417474656d7074656420746f20696e646578206174206f666673657420306070830152600f60fb1b609083015295881b861660918201526097810196909652951b90921660a68401525050601760f91b60ac8201528151808203608d01815260ad90910190915295945050505050565b6000606081805b602081101561158157828561222483601f61382f565b6020811061224257634e487b7160e01b600052603260045260246000fd5b1a60f81b604051602001612257929190613519565b60405160208183030381529060405292508080612273906138b0565b91505061220e565b6000806122966020601887901c6001600160601b03166136ad565b6001600160601b03169050806122b057505083821461161d565b828660005b838110156123295760006122dc6122cd8360206137e7565b62ffffff198b169060206112e1565b90506122e96002856138cb565b60011415612302576122fb8184612908565b925061230f565b61230c8382612908565b92505b5060019290921c9180612321816138b0565b9150506122b5565b508561233482612934565b1498975050505050505050565b804710156123915760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161066b565b6000826001600160a01b03168260405160006040518083038185875af1925050503d80600081146123de576040519150601f19603f3d011682016040523d82523d6000602084013e6123e3565b606091505b505090508061245a5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161066b565b505050565b600082601161246d816110ea565b50600061247b8560506137e7565b905061249162ffffff19871682605060106129a8565b9695505050505050565b60008160106124a9816110ea565b5060006124bf62ffffff19861660486003612a17565b905060026124d662ffffff198716604b6001612a2c565b1161252e5760405162461bcd60e51b815260206004820152602260248201527f566965774254433a20696e76616c69642074617267657420646966666963756c604482015261747960f01b606482015260840161066b565b6000600361254562ffffff198816604b6001612a2c565b61254f919061382f565b905061255d81610100613719565b61249190836137e7565b6000826010612575816110ea565b508361258662ffffff1987166111a8565b1495945050505050565b600881811c7eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff167fff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff009290911b9190911617601081811c7dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff167fffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff00009290911b9190911617602081811c7bffffffff00000000ffffffff00000000ffffffff00000000ffffffff167fffffffff00000000ffffffff00000000ffffffff00000000ffffffff000000009290911b9190911617604081811c77ffffffffffffffff0000000000000000ffffffffffffffff1677ffffffffffffffff0000000000000000ffffffffffffffff199290911b9190911617608081811c91901b1790565b6004546005546126da9083613656565b116126f75760405162461bcd60e51b815260040161066b9061357b565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915261273162ffffff198416611146565b815261274262ffffff1984166111a8565b602082015261275662ffffff1984166111ca565b604082810191825233606084019081523a60808501908152600086815260136020908152938120805460018082018355918352918590208751600590930201918255938601519381019390935592516002830155516003820180546001600160a01b0319166001600160a01b0390921691909117905590516004918201555482111561245a576001600460008282546127ef9190613656565b909155506127fd9050612a5c565b61245a612d60565b6000816010612813816110ea565b5061112f6128208561249b565b612d95565b6000816010612833816110ea565b5061112f62ffffff19851660446004612a17565b600080612854848461382f565b9050612864600462127500613699565b81101561287c57612879600462127500613699565b90505b61288a6212750060046137e7565b8111156128a25761289f6212750060046137e7565b90505b6000816128b26201000088613699565b6128bc91906137e7565b90506128cb8162127500612da6565b61249190620100006137e7565b60006128ea60048360ff16901c612db2565b60ff161760081b62ffff00166128ff82612db2565b60ff1617919050565b600060405183815282602082015260208160408360025afa5060208160208360025afa50519392505050565b6000606081805b602081101561158157828561295183601f61382f565b6020811061296f57634e487b7160e01b600052603260045260246000fd5b1a60f81b604051602001612984929190613519565b604051602081830303815290604052925080806129a0906138b0565b91505061293b565b6000806129be8660781c6001600160601b031690565b6001600160601b031690506129d286612f1e565b6129e6856129e0848961143a565b9061143a565b11156129f95762ffffff1991505061161d565b612a03818661143a565b90506124918364ffffffffff168286611fb6565b6000610ee0612a278585856112e1565b612590565b6000612a39826020613846565b612a44906008613806565b60ff16612a528585856112e1565b901c949350505050565b600554600354600454612a6f919061382f565b1061091c5760055460045460005b8215612afe576000828152601360205260408120805483908110612ab157634e487b7160e01b600052603260045260246000fd5b9060005260206000209060050201600101549050612adb81600185612ad6919061382f565b612f5f565b915083612ae781613899565b9450508280612af590613899565b93505050612a7d565b6000828152601360205260409020805482908110612b2c57634e487b7160e01b600052603260045260246000fd5b906000526020600020906005020160136000848152602001908152602001600020600081548110612b6d57634e487b7160e01b600052603260045260246000fd5b600091825260208083208454600590930201918255600180850154818401556002808601549084015560038086015490840180546001600160a01b0319166001600160a01b03909216919091179055600494850154949092019390935584825260139092526040902054111561245a57612be682612fe3565b600082815260136020526040812080548291612c3a918390612c1857634e487b7160e01b600052603260045260246000fd5b60009182526020909120600360059092020101546001600160a01b031661307b565b600086815260136020526040812080549395509193509091612c6c57634e487b7160e01b600052603260045260246000fd5b600091825260208083206003600590930201919091015486835260139091526040822080546001600160a01b039092169287927f4fec6ffa2052e80db9daadc2384a8f634057472e28ea7f1bd3eebfc92b5b0f8e929190612cdd57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600502016000015460136000898152602001908152602001600020600081548110612d2257634e487b7160e01b600052603260045260246000fd5b600091825260209182902060016005909202010154604080519384529183015281018690526060810185905260800160405180910390a35050505050565b600954600454612d7091906138cb565b61091c57600a54600b5410612d8757600b54612d8b565b600a545b600c556000600b55565b60006109588261ffff60d01b613699565b600061063d8284613699565b600060f08083179060ff82161415612dce57603091505061095b565b8060ff1660f11415612de457603191505061095b565b8060ff1660f21415612dfa57603291505061095b565b8060ff1660f31415612e1057603391505061095b565b8060ff1660f41415612e2657603491505061095b565b8060ff1660f51415612e3c57603591505061095b565b8060ff1660f61415612e5257603691505061095b565b8060ff1660f71415612e6857603791505061095b565b8060ff1660f81415612e7e57603891505061095b565b8060ff1660f91415612e9457603991505061095b565b8060ff1660fa1415612eaa57606191505061095b565b8060ff1660fb1415612ec057606291505061095b565b8060ff1660fc1415612ed657606391505061095b565b8060ff1660fd1415612eec57606491505061095b565b8060ff1660fe1415612f0257606591505061095b565b8060ff1660ff1415612f1857606691505061095b565b50919050565b6000612f338260181c6001600160601b031690565b612f468360781c6001600160601b031690565b612f50919061366e565b6001600160601b031692915050565b6000805b600083815260136020526040902054811015612fd9576000838152601360205260409020805482908110612fa757634e487b7160e01b600052603260045260246000fd5b906000526020600020906005020160000154841415612fc7579050610640565b80612fd1816138b0565b915050612f63565b5060009392505050565b60015b60008281526013602052604090205481101561307757600082815260136020526040902080548290811061302a57634e487b7160e01b600052603260045260246000fd5b6000918252602082206005909102018181556001808201839055600282018390556003820180546001600160a01b03191690556004909101919091556130709082613656565b9050612fe6565b5050565b6000806000606460075460016130919190613656565b3a60085461309f91906137e7565b6130a991906137e7565b6130b39190613699565b600d549091506000906001600160a01b03161561314c57600d546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b15801561310d57600080fd5b505afa158015613121573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131459190613501565b9050613150565b5060005b6000816006541115801561316657506000600654115b156131f757600d5460065460405163a9059cbb60e01b81526001600160a01b038981166004830152602482019290925291169063a9059cbb90604401602060405180830381600087803b1580156131bc57600080fd5b505af11580156131d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131f49190613325565b90505b600083471180156132085750600084115b15613261576040516001600160a01b038816908590600081818185875af1925050503d8060008114613256576040519150601f19603f3d011682016040523d82523d6000602084013e61325b565b606091505b50909150505b801561328e57811561327e578360065495509550505050506132b2565b83600095509550505050506132b2565b81156132a657600060065495509550505050506132b2565b60008095509550505050505b915091565b60008083601f8401126132c8578182fd5b50813567ffffffffffffffff8111156132df578182fd5b6020830191508360208285010111156132f757600080fd5b9250929050565b60006020828403121561330f578081fd5b81356001600160a01b038116811461063d578182fd5b600060208284031215613336578081fd5b8151801515811461063d578182fd5b600060208284031215613356578081fd5b5035919050565b600080600060608486031215613371578182fd5b505081359360208301359350604090920135919050565b6000806040838503121561339a578182fd5b50508035926020909101359150565b6000806000806000608086880312156133c0578081fd5b8535945060208601359350604086013567ffffffffffffffff8111156133e4578182fd5b6133f0888289016132b7565b96999598509660600135949350505050565b60008060008060408587031215613417578384fd5b843567ffffffffffffffff8082111561342e578586fd5b61343a888389016132b7565b90965094506020870135915080821115613452578384fd5b5061345f878288016132b7565b95989497509550505050565b60008060008060008060608789031215613483578081fd5b863567ffffffffffffffff8082111561349a578283fd5b6134a68a838b016132b7565b909850965060208901359150808211156134be578283fd5b6134ca8a838b016132b7565b909650945060408901359150808211156134e2578283fd5b506134ef89828a016132b7565b979a9699509497509295939492505050565b600060208284031215613512578081fd5b5051919050565b6000835161352b818460208801613869565b6001600160f81b0319939093169190920190815260010192915050565b6000602082528251806020840152613567816040850160208701613869565b601f01601f19169190910160400192915050565b60208082526025908201527f426974636f696e52656c61793a20626c6f636b2068656164657220697320746f6040820152641bc81bdb1960da1b606082015260800190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6000821982111561366957613669613905565b500190565b60006001600160601b0380831681851680830382111561369057613690613905565b01949350505050565b6000826136a8576136a861391b565b500490565b60006001600160601b03808416806136c7576136c761391b565b92169190910492915050565b80825b60018086116136e55750613710565b8187048211156136f7576136f7613905565b8086161561370457918102915b9490941c9380026136d6565b94509492505050565b600061063d600019848460008261373257506001610ee3565b8161373f57506000610ee3565b8160018114613755576002811461375f5761378c565b6001915050610ee3565b60ff84111561377057613770613905565b6001841b91508482111561378657613786613905565b50610ee3565b5060208310610133831016604e8410600b84101617156137bf575081810a838111156137ba576137ba613905565b610ee3565b6137cc84848460016136d3565b8086048211156137de576137de613905565b02949350505050565b600081600019048311821515161561380157613801613905565b500290565b600060ff821660ff84168160ff048111821515161561382757613827613905565b029392505050565b60008282101561384157613841613905565b500390565b600060ff821660ff84168082101561386057613860613905565b90039392505050565b60005b8381101561388457818101518382015260200161386c565b83811115613893576000848401525b50505050565b6000816138a8576138a8613905565b506000190190565b60006000198214156138c4576138c4613905565b5060010190565b6000826138da576138da61391b565b500690565b60006001600160601b03808416806138f9576138f961391b565b92169190910692915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fdfea26469706673582212209f5c5e0c290eb2120557e5297a4462845770862cb64d3836e710f24953c3e4f464736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addHeaders(bytes,bytes)": {
        "details": "We check integrity and consistency of the header chain",
        "params": {
          "_anchor": "The header immediately preceeding the new chain",
          "_headers": "A tightly-packed list of 80-byte Bitcoin headers"
        },
        "returns": {
          "_0": "True if successfully written, error otherwise"
        }
      },
      "addHeadersWithRetarget(bytes,bytes,bytes)": {
        "details": "Checks the retarget, the heights, and the linkage",
        "params": {
          "_headers": "A tightly-packed list of 80-byte Bitcoin headers",
          "_oldPeriodEndHeader": "The last header in the difficulty period being closed (anchor of new headers)",
          "_oldPeriodStartHeader": "The first header in the difficulty period being closed"
        },
        "returns": {
          "_0": "True if successfully written, error otherwise"
        }
      },
      "availableTDT()": {
        "returns": {
          "_0": "Amount of TDT available in Relay treasury"
        }
      },
      "availableTNT()": {
        "returns": {
          "_0": "Amount of target blockchain native token available in Relay treasury"
        }
      },
      "checkTxProof(bytes32,uint256,bytes,uint256)": {
        "details": "Checks if the block is finalized, and Merkle proof is correct",
        "params": {
          "_blockHeight": "Block height of the desired tx",
          "_index": "Part of the Merkle proof for the desired tx",
          "_intermediateNodes": "Part of the Merkle proof for the desired tx",
          "_txid": "Desired transaction's tx Id"
        },
        "returns": {
          "_0": "True if the provided tx is confirmed on the source blockchain, False otherwise"
        }
      },
      "constructor": {
        "params": {
          "_genesisHeader": "The starting header",
          "_height": "The starting height",
          "_periodStart": "The hash of the first header in the genesis epoch"
        }
      },
      "findAncestor(bytes32,uint256)": {
        "details": "Will fail if the header is unknown",
        "params": {
          "_hash": "The header hash to search for"
        },
        "returns": {
          "_0": "The height of the header, or error if unknown"
        }
      },
      "findHeight(bytes32)": {
        "details": "Will fail if the header is unknown",
        "params": {
          "_hash": "The header hash to search for"
        },
        "returns": {
          "_0": "The height of the header, or error if unknown"
        }
      },
      "getBlockHeaderFee(uint256,uint256)": {
        "params": {
          "_height": "The height of the desired block header",
          "_index": "The index of the desired block header in that height"
        },
        "returns": {
          "_0": "Block header's fee price for a query"
        }
      },
      "getBlockHeaderHash(uint256,uint256)": {
        "params": {
          "_height": "The height of the desired block header",
          "_index": "The index of the desired block header in that height"
        },
        "returns": {
          "_0": "Block header's hash"
        }
      },
      "getCurrentEpochDifficulty()": {
        "details": "This is updated when a new heavist header has a new diff",
        "returns": {
          "_0": "The difficulty of the bestKnownDigest"
        }
      },
      "getNumberOfSubmittedHeaders(uint256)": {
        "details": "This shows the number of temporary forks in that specific height",
        "params": {
          "_height": "The desired height of the blockchain"
        },
        "returns": {
          "_0": "Number of block headers stored in the same height"
        }
      },
      "getPrevEpochDifficulty()": {
        "details": "This is updated when a difficulty change is accepted",
        "returns": {
          "_0": "The difficulty of the previous epoch"
        }
      },
      "isAncestor(bytes32,bytes32,uint256)": {
        "details": "Limit the amount of lookups (and thus gas usage) with _limit",
        "params": {
          "_ancestor": "The prospective ancestor",
          "_descendant": "The descendant to check",
          "_limit": "The maximum number of blocks to check"
        },
        "returns": {
          "_0": "true if ancestor is at most limit blocks lower than descendant, otherwise false"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pauseRelay()": {
        "details": "Only functions with whenPaused modifier can be called"
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setBaseQueries(uint256)": {
        "params": {
          "_baseQueries": "The base amount of queries we assume in each epoch                                     (This is for preventing user fees to grow significantly)"
        }
      },
      "setEpochLength(uint256)": {
        "params": {
          "_epochLength": "The length of epochs for estimating the user queries hence their fees"
        }
      },
      "setFinalizationParameter(uint256)": {
        "details": "This might change if finalization rule of the source chain gets updated",
        "params": {
          "_finalizationParameter": "The finalization parameter of the source chain"
        }
      },
      "setRelayerPercentageFee(uint256)": {
        "details": "This is updated when we want to change the Relayer reward",
        "params": {
          "_relayerPercentageFee": "Ratio > 1 that determines percentage of reward to the Relayer"
        }
      },
      "setRewardAmountInTDT(uint256)": {
        "details": "This award is for the relayer who has a finalized block header",
        "params": {
          "_rewardAmountInTDT": "The reward amount in TDT"
        }
      },
      "setSubmissionGasUsed(uint256)": {
        "details": "This is updated when the smart contract changes the way of getting block headers",
        "params": {
          "_submissionGasUsed": "The gas used for submitting one block header"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "unPauseRelay()": {
        "details": "Only functions with whenNotPaused modifier can be called"
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "BlockAdded(uint256,bytes32,bytes32,address)": {
        "notice": "Emits when a block header is added"
      },
      "BlockFinalized(uint256,bytes32,bytes32,address,uint256,uint256)": {
        "notice": "Emits when a block header gets finalized"
      }
    },
    "kind": "user",
    "methods": {
      "addHeaders(bytes,bytes)": {
        "notice": "Adds headers to storage after validating"
      },
      "addHeadersWithRetarget(bytes,bytes,bytes)": {
        "notice": "Adds headers to storage, performs additional validation of retarget"
      },
      "availableTDT()": {
        "notice": "Getter for available TDT in treasury"
      },
      "availableTNT()": {
        "notice": "Getter for available target native token in treasury"
      },
      "checkTxProof(bytes32,uint256,bytes,uint256)": {
        "notice": "Checks if a tx is included and finalized on the source blockchain"
      },
      "constructor": {
        "notice": "Gives a starting point for the relay"
      },
      "findAncestor(bytes32,uint256)": {
        "notice": "Finds an ancestor for a block by its hash"
      },
      "findHeight(bytes32)": {
        "notice": "Finds the height of a header by its hash"
      },
      "getBlockHeaderFee(uint256,uint256)": {
        "notice": "Getter for an specific block header's fee price for a query"
      },
      "getBlockHeaderHash(uint256,uint256)": {
        "notice": "Getter for an specific block header's hash in the stored chain"
      },
      "getCurrentEpochDifficulty()": {
        "notice": "Getter for currentEpochDiff"
      },
      "getNumberOfSubmittedHeaders(uint256)": {
        "notice": "Getter for the number of block headers in the same height"
      },
      "getPrevEpochDifficulty()": {
        "notice": "Getter for prevEpochDiff"
      },
      "isAncestor(bytes32,bytes32,uint256)": {
        "notice": "Checks if a hash is an ancestor of the current one"
      },
      "pauseRelay()": {
        "notice": "Pause the relay"
      },
      "setBaseQueries(uint256)": {
        "notice": "Setter for baseQueries"
      },
      "setEpochLength(uint256)": {
        "notice": "Setter for epochLength"
      },
      "setFinalizationParameter(uint256)": {
        "notice": "Setter for finalizationParameter"
      },
      "setRelayerPercentageFee(uint256)": {
        "notice": "Setter for relayerPercentageFee"
      },
      "setRewardAmountInTDT(uint256)": {
        "notice": "Setter for rewardAmountInTDT"
      },
      "setSubmissionGasUsed(uint256)": {
        "notice": "Setter for submissionGasUsed"
      },
      "unPauseRelay()": {
        "notice": "Unpause the relay"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 807,
        "contract": "contracts/relay/BitcoinRelay.sol:BitcoinRelay",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1006,
        "contract": "contracts/relay/BitcoinRelay.sol:BitcoinRelay",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 921,
        "contract": "contracts/relay/BitcoinRelay.sol:BitcoinRelay",
        "label": "_paused",
        "offset": 0,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 11969,
        "contract": "contracts/relay/BitcoinRelay.sol:BitcoinRelay",
        "label": "initialHeight",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 11972,
        "contract": "contracts/relay/BitcoinRelay.sol:BitcoinRelay",
        "label": "lastSubmittedHeight",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 11975,
        "contract": "contracts/relay/BitcoinRelay.sol:BitcoinRelay",
        "label": "finalizationParameter",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 11978,
        "contract": "contracts/relay/BitcoinRelay.sol:BitcoinRelay",
        "label": "rewardAmountInTDT",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 11981,
        "contract": "contracts/relay/BitcoinRelay.sol:BitcoinRelay",
        "label": "relayerPercentageFee",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 11984,
        "contract": "contracts/relay/BitcoinRelay.sol:BitcoinRelay",
        "label": "submissionGasUsed",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 11987,
        "contract": "contracts/relay/BitcoinRelay.sol:BitcoinRelay",
        "label": "epochLength",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 11990,
        "contract": "contracts/relay/BitcoinRelay.sol:BitcoinRelay",
        "label": "baseQueries",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 11993,
        "contract": "contracts/relay/BitcoinRelay.sol:BitcoinRelay",
        "label": "currentEpochQueries",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 11996,
        "contract": "contracts/relay/BitcoinRelay.sol:BitcoinRelay",
        "label": "lastEpochQueries",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 11999,
        "contract": "contracts/relay/BitcoinRelay.sol:BitcoinRelay",
        "label": "TeleportDAOToken",
        "offset": 0,
        "slot": "13",
        "type": "t_address"
      },
      {
        "astId": 12002,
        "contract": "contracts/relay/BitcoinRelay.sol:BitcoinRelay",
        "label": "relayGenesisHash",
        "offset": 0,
        "slot": "14",
        "type": "t_bytes32"
      },
      {
        "astId": 12006,
        "contract": "contracts/relay/BitcoinRelay.sol:BitcoinRelay",
        "label": "previousBlock",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_bytes32,t_bytes32)"
      },
      {
        "astId": 12010,
        "contract": "contracts/relay/BitcoinRelay.sol:BitcoinRelay",
        "label": "blockHeight",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 12012,
        "contract": "contracts/relay/BitcoinRelay.sol:BitcoinRelay",
        "label": "currentEpochDiff",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 12014,
        "contract": "contracts/relay/BitcoinRelay.sol:BitcoinRelay",
        "label": "prevEpochDiff",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 12020,
        "contract": "contracts/relay/BitcoinRelay.sol:BitcoinRelay",
        "label": "chain",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_uint256,t_array(t_struct(blockHeader)13606_storage)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(blockHeader)13606_storage)dyn_storage": {
        "base": "t_struct(blockHeader)13606_storage",
        "encoding": "dynamic_array",
        "label": "struct IBitcoinRelay.blockHeader[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_array(t_struct(blockHeader)13606_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IBitcoinRelay.blockHeader[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(blockHeader)13606_storage)dyn_storage"
      },
      "t_struct(blockHeader)13606_storage": {
        "encoding": "inplace",
        "label": "struct IBitcoinRelay.blockHeader",
        "members": [
          {
            "astId": 13597,
            "contract": "contracts/relay/BitcoinRelay.sol:BitcoinRelay",
            "label": "selfHash",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 13599,
            "contract": "contracts/relay/BitcoinRelay.sol:BitcoinRelay",
            "label": "parentHash",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 13601,
            "contract": "contracts/relay/BitcoinRelay.sol:BitcoinRelay",
            "label": "merkleRoot",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          },
          {
            "astId": 13603,
            "contract": "contracts/relay/BitcoinRelay.sol:BitcoinRelay",
            "label": "relayer",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          },
          {
            "astId": 13605,
            "contract": "contracts/relay/BitcoinRelay.sol:BitcoinRelay",
            "label": "gasPrice",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}