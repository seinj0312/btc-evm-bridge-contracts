{
  "address": "0x3b377E98B51867e03CE140b709BAA02ffBB31A51",
  "abi": [
    {
      "inputs": [],
      "name": "DIFF1_TARGET",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RETARGET_PERIOD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RETARGET_PERIOD_BLOCKS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_a",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_b",
          "type": "bytes32"
        }
      ],
      "name": "_merkleStep",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "digest",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_leaf",
          "type": "bytes32"
        },
        {
          "internalType": "bytes29",
          "name": "_proof",
          "type": "bytes29"
        },
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "checkMerkle",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "number",
          "type": "uint64"
        }
      ],
      "name": "compactIntLength",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes29",
          "name": "_header",
          "type": "bytes29"
        }
      ],
      "name": "diff",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes29",
          "name": "memView",
          "type": "bytes29"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "indexCompactInt",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "number",
          "type": "uint64"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes29",
          "name": "_arr",
          "type": "bytes29"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "indexHeaderArray",
      "outputs": [
        {
          "internalType": "bytes29",
          "name": "",
          "type": "bytes29"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes29",
          "name": "_vin",
          "type": "bytes29"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "indexVin",
      "outputs": [
        {
          "internalType": "bytes29",
          "name": "",
          "type": "bytes29"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes29",
          "name": "_vout",
          "type": "bytes29"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "indexVout",
      "outputs": [
        {
          "internalType": "bytes29",
          "name": "",
          "type": "bytes29"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes29",
          "name": "_inputs",
          "type": "bytes29"
        }
      ],
      "name": "inputLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes29",
          "name": "_header",
          "type": "bytes29"
        }
      ],
      "name": "merkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes29",
          "name": "_spk",
          "type": "bytes29"
        }
      ],
      "name": "opReturnPayload",
      "outputs": [
        {
          "internalType": "bytes29",
          "name": "",
          "type": "bytes29"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes29",
          "name": "_input",
          "type": "bytes29"
        }
      ],
      "name": "outpoint",
      "outputs": [
        {
          "internalType": "bytes29",
          "name": "",
          "type": "bytes29"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes29",
          "name": "_outpoint",
          "type": "bytes29"
        }
      ],
      "name": "outpointIdx",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes29",
          "name": "_outputs",
          "type": "bytes29"
        }
      ],
      "name": "outputLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes29",
          "name": "_header",
          "type": "bytes29"
        }
      ],
      "name": "parent",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes29",
          "name": "_spk",
          "type": "bytes29"
        }
      ],
      "name": "payload",
      "outputs": [
        {
          "internalType": "bytes29",
          "name": "",
          "type": "bytes29"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_previousTarget",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_firstTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_secondTimestamp",
          "type": "uint256"
        }
      ],
      "name": "retargetAlgorithm",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "input",
          "type": "bytes32"
        }
      ],
      "name": "revertBytes32",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes29",
          "name": "_output",
          "type": "bytes29"
        }
      ],
      "name": "scriptPubkey",
      "outputs": [
        {
          "internalType": "bytes29",
          "name": "",
          "type": "bytes29"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes29",
          "name": "_output",
          "type": "bytes29"
        }
      ],
      "name": "scriptPubkeyBytes",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes29",
          "name": "_input",
          "type": "bytes29"
        }
      ],
      "name": "scriptSig",
      "outputs": [
        {
          "internalType": "bytes29",
          "name": "",
          "type": "bytes29"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes29",
          "name": "_input",
          "type": "bytes29"
        }
      ],
      "name": "sequence",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes29",
          "name": "_header",
          "type": "bytes29"
        }
      ],
      "name": "target",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes29",
          "name": "_header",
          "type": "bytes29"
        }
      ],
      "name": "time",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_target",
          "type": "uint256"
        }
      ],
      "name": "toDiff",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes29",
          "name": "_header",
          "type": "bytes29"
        }
      ],
      "name": "tryAsHeader",
      "outputs": [
        {
          "internalType": "bytes29",
          "name": "",
          "type": "bytes29"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes29",
          "name": "_arr",
          "type": "bytes29"
        }
      ],
      "name": "tryAsHeaderArray",
      "outputs": [
        {
          "internalType": "bytes29",
          "name": "",
          "type": "bytes29"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes29",
          "name": "_arr",
          "type": "bytes29"
        }
      ],
      "name": "tryAsMerkleArray",
      "outputs": [
        {
          "internalType": "bytes29",
          "name": "",
          "type": "bytes29"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes29",
          "name": "_spk",
          "type": "bytes29"
        }
      ],
      "name": "tryAsSPK",
      "outputs": [
        {
          "internalType": "bytes29",
          "name": "",
          "type": "bytes29"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes29",
          "name": "_vin",
          "type": "bytes29"
        }
      ],
      "name": "tryAsVin",
      "outputs": [
        {
          "internalType": "bytes29",
          "name": "",
          "type": "bytes29"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes29",
          "name": "_vout",
          "type": "bytes29"
        }
      ],
      "name": "tryAsVout",
      "outputs": [
        {
          "internalType": "bytes29",
          "name": "",
          "type": "bytes29"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes29",
          "name": "_outpoint",
          "type": "bytes29"
        }
      ],
      "name": "txidLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes29",
          "name": "_output",
          "type": "bytes29"
        }
      ],
      "name": "value",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes29",
          "name": "_output",
          "type": "bytes29"
        }
      ],
      "name": "valueBytes",
      "outputs": [
        {
          "internalType": "bytes8",
          "name": "",
          "type": "bytes8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes29",
          "name": "_header",
          "type": "bytes29"
        }
      ],
      "name": "work",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes29",
          "name": "_header",
          "type": "bytes29"
        }
      ],
      "name": "workHash",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x74d62b5aaef9baa3e5cc9f0d8fec6eb23f9044b30b292303fca0eaf21f684251",
  "receipt": {
    "to": null,
    "from": "0x5364E3557572bd5D5903C0e9C21BE359F2Eac1dA",
    "contractAddress": "0x3b377E98B51867e03CE140b709BAA02ffBB31A51",
    "transactionIndex": 0,
    "gasUsed": "4274364",
    "logsBloom": "0x
    "blockHash": "0x6997a90ad77d405baf2161639db9edd5b21a17bca85ef10be241d771d27974a9",
    "transactionHash": "0x74d62b5aaef9baa3e5cc9f0d8fec6eb23f9044b30b292303fca0eaf21f684251",
    "logs": [],
    "blockNumber": 12801748,
    "cumulativeGasUsed": "4274364",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9bccde1a4f7e4627724163f00e6fb00c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DIFF1_TARGET\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RETARGET_PERIOD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RETARGET_PERIOD_BLOCKS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_a\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_b\",\"type\":\"bytes32\"}],\"name\":\"_merkleStep\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"digest\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_leaf\",\"type\":\"bytes32\"},{\"internalType\":\"bytes29\",\"name\":\"_proof\",\"type\":\"bytes29\"},{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"checkMerkle\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"number\",\"type\":\"uint64\"}],\"name\":\"compactIntLength\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes29\",\"name\":\"_header\",\"type\":\"bytes29\"}],\"name\":\"diff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes29\",\"name\":\"memView\",\"type\":\"bytes29\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"indexCompactInt\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"number\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes29\",\"name\":\"_arr\",\"type\":\"bytes29\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"indexHeaderArray\",\"outputs\":[{\"internalType\":\"bytes29\",\"name\":\"\",\"type\":\"bytes29\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes29\",\"name\":\"_vin\",\"type\":\"bytes29\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"indexVin\",\"outputs\":[{\"internalType\":\"bytes29\",\"name\":\"\",\"type\":\"bytes29\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes29\",\"name\":\"_vout\",\"type\":\"bytes29\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"indexVout\",\"outputs\":[{\"internalType\":\"bytes29\",\"name\":\"\",\"type\":\"bytes29\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes29\",\"name\":\"_inputs\",\"type\":\"bytes29\"}],\"name\":\"inputLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes29\",\"name\":\"_header\",\"type\":\"bytes29\"}],\"name\":\"merkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes29\",\"name\":\"_spk\",\"type\":\"bytes29\"}],\"name\":\"opReturnPayload\",\"outputs\":[{\"internalType\":\"bytes29\",\"name\":\"\",\"type\":\"bytes29\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes29\",\"name\":\"_input\",\"type\":\"bytes29\"}],\"name\":\"outpoint\",\"outputs\":[{\"internalType\":\"bytes29\",\"name\":\"\",\"type\":\"bytes29\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes29\",\"name\":\"_outpoint\",\"type\":\"bytes29\"}],\"name\":\"outpointIdx\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes29\",\"name\":\"_outputs\",\"type\":\"bytes29\"}],\"name\":\"outputLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes29\",\"name\":\"_header\",\"type\":\"bytes29\"}],\"name\":\"parent\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes29\",\"name\":\"_spk\",\"type\":\"bytes29\"}],\"name\":\"payload\",\"outputs\":[{\"internalType\":\"bytes29\",\"name\":\"\",\"type\":\"bytes29\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_previousTarget\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_firstTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_secondTimestamp\",\"type\":\"uint256\"}],\"name\":\"retargetAlgorithm\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"input\",\"type\":\"bytes32\"}],\"name\":\"revertBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes29\",\"name\":\"_output\",\"type\":\"bytes29\"}],\"name\":\"scriptPubkey\",\"outputs\":[{\"internalType\":\"bytes29\",\"name\":\"\",\"type\":\"bytes29\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes29\",\"name\":\"_output\",\"type\":\"bytes29\"}],\"name\":\"scriptPubkeyBytes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes29\",\"name\":\"_input\",\"type\":\"bytes29\"}],\"name\":\"scriptSig\",\"outputs\":[{\"internalType\":\"bytes29\",\"name\":\"\",\"type\":\"bytes29\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes29\",\"name\":\"_input\",\"type\":\"bytes29\"}],\"name\":\"sequence\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes29\",\"name\":\"_header\",\"type\":\"bytes29\"}],\"name\":\"target\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes29\",\"name\":\"_header\",\"type\":\"bytes29\"}],\"name\":\"time\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_target\",\"type\":\"uint256\"}],\"name\":\"toDiff\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes29\",\"name\":\"_header\",\"type\":\"bytes29\"}],\"name\":\"tryAsHeader\",\"outputs\":[{\"internalType\":\"bytes29\",\"name\":\"\",\"type\":\"bytes29\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes29\",\"name\":\"_arr\",\"type\":\"bytes29\"}],\"name\":\"tryAsHeaderArray\",\"outputs\":[{\"internalType\":\"bytes29\",\"name\":\"\",\"type\":\"bytes29\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes29\",\"name\":\"_arr\",\"type\":\"bytes29\"}],\"name\":\"tryAsMerkleArray\",\"outputs\":[{\"internalType\":\"bytes29\",\"name\":\"\",\"type\":\"bytes29\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes29\",\"name\":\"_spk\",\"type\":\"bytes29\"}],\"name\":\"tryAsSPK\",\"outputs\":[{\"internalType\":\"bytes29\",\"name\":\"\",\"type\":\"bytes29\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes29\",\"name\":\"_vin\",\"type\":\"bytes29\"}],\"name\":\"tryAsVin\",\"outputs\":[{\"internalType\":\"bytes29\",\"name\":\"\",\"type\":\"bytes29\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes29\",\"name\":\"_vout\",\"type\":\"bytes29\"}],\"name\":\"tryAsVout\",\"outputs\":[{\"internalType\":\"bytes29\",\"name\":\"\",\"type\":\"bytes29\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes29\",\"name\":\"_outpoint\",\"type\":\"bytes29\"}],\"name\":\"txidLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes29\",\"name\":\"_output\",\"type\":\"bytes29\"}],\"name\":\"value\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes29\",\"name\":\"_output\",\"type\":\"bytes29\"}],\"name\":\"valueBytes\",\"outputs\":[{\"internalType\":\"bytes8\",\"name\":\"\",\"type\":\"bytes8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes29\",\"name\":\"_header\",\"type\":\"bytes29\"}],\"name\":\"work\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes29\",\"name\":\"_header\",\"type\":\"bytes29\"}],\"name\":\"workHash\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/ViewBTC.sol\":\"ViewBTC\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// a library for performing overflow-safe math, courtesy of DappHub (https://github.com/dapphub/ds-math)\\n\\nlibrary SafeMath {\\n    function add(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x + y) >= x, 'ds-math-add-overflow');\\n    }\\n\\n    function sub(uint x, uint y) internal pure returns (uint z) {\\n        require((z = x - y) <= x, 'ds-math-sub-underflow');\\n    }\\n\\n    function mul(uint x, uint y) internal pure returns (uint z) {\\n        require(y == 0 || (z = x * y) / y == x, 'ds-math-mul-overflow');\\n    }\\n    \\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b; //TODO: edit it\\n    }\\n}\",\"keccak256\":\"0x0e9e1f6ce97bc6b4de34121b05b78ef753eb8399f1087e8daf8cb5ac0e33954c\",\"license\":\"MIT\"},\"contracts/libraries/TypedMemView.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./SafeMath.sol\\\";\\n\\nlibrary TypedMemView {\\n    using SafeMath for uint256;\\n\\n    // Why does this exist?\\n    // the solidity `bytes memory` type has a few weaknesses.\\n    // 1. You can't index ranges effectively\\n    // 2. You can't slice without copying\\n    // 3. The underlying data may represent any type\\n    // 4. Solidity never deallocates memory, and memory costs grow\\n    //    superlinearly\\n\\n    // By using a memory view instead of a `bytes memory` we get the following\\n    // advantages:\\n    // 1. Slices are done on the stack, by manipulating the pointer\\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\\n    // 3. We can insert type info into the pointer, and typecheck at runtime\\n\\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\\n    // algorithms.\\n\\n    // Why bytes29?\\n    // We want to avoid confusion between views, digests, and other common\\n    // types so we chose a large and uncommonly used odd number of bytes\\n    //\\n    // Note that while bytes are left-aligned in a word, integers and addresses\\n    // are right-aligned. This means when working in assembly we have to\\n    // account for the 3 unused bytes on the righthand side\\n    //\\n    // First 5 bytes are a type flag.\\n    // - ff_ffff_fffe is reserved for unknown type.\\n    // - ff_ffff_ffff is reserved for invalid types/errors.\\n    // next 12 are memory address\\n    // next 12 are len\\n    // bottom 3 bytes are empty\\n\\n    // Assumptions:\\n    // - non-modification of memory.\\n    // - No Solidity updates\\n    // - - wrt free mem point\\n    // - - wrt bytes representation in memory\\n    // - - wrt memory addressing in general\\n\\n    // Usage:\\n    // - create type constants\\n    // - use `assertType` for runtime type assertions\\n    // - - unfortunately we can't do this at compile time yet :(\\n    // - recommended: implement modifiers that perform type checking\\n    // - - e.g.\\n    // - - `uint40 constant MY_TYPE = 3;`\\n    // - - ` modifer onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\\n    // - instantiate a typed view from a bytearray using `ref`\\n    // - use `index` to inspect the contents of the view\\n    // - use `slice` to create smaller views into the same memory\\n    // - - `slice` can increase the offset\\n    // - - `slice can decrease the length`\\n    // - - must specify the output type of `slice`\\n    // - - `slice` will return a null view if you try to overrun\\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\\n    // - use `equal` for typed comparisons.\\n\\n\\n    // The null view\\n    bytes29 public constant NULL = hex\\\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\\";\\n    uint256 constant LOW_12_MASK = 0xffffffffffffffffffffffff;\\n    uint8 constant TWELVE_BYTES = 96;\\n\\n    /**\\n     * @notice      Returns the encoded hex character that represents the lower 4 bits of the argument.\\n     * @param _b    The byte\\n     * @return      char - The encoded hex character\\n     */\\n    function nibbleHex(uint8 _b) public pure returns (uint8 char) {\\n        // This can probably be done more efficiently, but it's only in error\\n        // paths, so we don't really care :)\\n        uint8 _nibble = _b | 0xf0; // set top 4, keep bottom 4\\n        if (_nibble == 0xf0) {return 0x30;} // 0\\n        if (_nibble == 0xf1) {return 0x31;} // 1\\n        if (_nibble == 0xf2) {return 0x32;} // 2\\n        if (_nibble == 0xf3) {return 0x33;} // 3\\n        if (_nibble == 0xf4) {return 0x34;} // 4\\n        if (_nibble == 0xf5) {return 0x35;} // 5\\n        if (_nibble == 0xf6) {return 0x36;} // 6\\n        if (_nibble == 0xf7) {return 0x37;} // 7\\n        if (_nibble == 0xf8) {return 0x38;} // 8\\n        if (_nibble == 0xf9) {return 0x39;} // 9\\n        if (_nibble == 0xfa) {return 0x61;} // a\\n        if (_nibble == 0xfb) {return 0x62;} // b\\n        if (_nibble == 0xfc) {return 0x63;} // c\\n        if (_nibble == 0xfd) {return 0x64;} // d\\n        if (_nibble == 0xfe) {return 0x65;} // e\\n        if (_nibble == 0xff) {return 0x66;} // f\\n    }\\n\\n    /**\\n     * @notice      Returns a uint16 containing the hex-encoded byte.\\n     *              `the first 8 bits of encoded is the nibbleHex of top 4 bits of _b`\\n     *              `the second 8 bits of encoded is the nibbleHex of lower 4 bits of _b`\\n     * @param _b    The byte\\n     * @return      encoded - The hex-encoded byte\\n     */\\n    function byteHex(uint8 _b) public pure returns (uint16 encoded) {\\n        encoded |= nibbleHex(_b >> 4); // top 4 bits\\n        encoded <<= 8;\\n        encoded |= nibbleHex(_b); // lower 4 bits\\n    }\\n\\n    /**\\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\\n     *              `second` contains the encoded lower 16 bytes.\\n     *\\n     * @param _b    The 32 bytes as uint256\\n     * @return      first - The top 16 bytes\\n     * @return      second - The bottom 16 bytes\\n     */\\n    function encodeHex(uint256 _b) public pure returns (uint256 first, uint256 second) {\\n        for (uint8 i = 31; i > 15; i -= 1) {\\n            uint8 _byte = uint8(_b >> (i * 8));\\n            first |= byteHex(_byte);\\n            if (i != 16) {\\n                first <<= 16;\\n            }\\n        }\\n\\n        // abusing underflow here =_=\\n        for (uint8 i = 15; i < 255 ; i -= 1) {\\n            uint8 _byte = uint8(_b >> (i * 8));\\n            second |= byteHex(_byte);\\n            if (i != 0) {\\n                second <<= 16;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice          Changes the endianness of a uint256.\\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\\n     * @param _b        The unsigned integer to reverse\\n     * @return          v - The reversed value\\n     */\\n    function reverseUint256(uint256 _b) public pure returns (uint256 v) {\\n        v = _b;\\n\\n        // swap bytes\\n        v = ((v >> 8) & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\\n        ((v & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) << 8);\\n        // swap 2-byte long pairs\\n        v = ((v >> 16) & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\\n        ((v & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) << 16);\\n        // swap 4-byte long pairs\\n        v = ((v >> 32) & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\\n        ((v & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) << 32);\\n        // swap 8-byte long pairs\\n        v = ((v >> 64) & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\\n        ((v & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) << 64);\\n        // swap 16-byte long pairs\\n        v = (v >> 128) | (v << 128);\\n    }\\n\\n    /**\\n     * @notice      Create a mask with the highest `_len` bits set.\\n     * @param _len  The length\\n     * @return      mask - The mask\\n     */\\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\\n        // ugly. redo without assembly?\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            mask := sar(\\n            sub(_len, 1),\\n            0x8000000000000000000000000000000000000000000000000000000000000000\\n            )\\n        }\\n    }\\n\\n    /**\\n     * @notice      Return the null view.\\n     * @return      bytes29 - The null view\\n     */\\n    function nullView() public pure returns (bytes29) {\\n        return NULL;\\n    }\\n\\n    /**\\n     * @notice      Check if the view is null.\\n     * @return      bool - True if the view is null\\n     */\\n    function isNull(bytes29 memView) public pure returns (bool) {\\n        return memView == NULL;\\n    }\\n\\n    /**\\n     * @notice      Check if the view is not null.\\n     * @return      bool - True if the view is not null\\n     */\\n    function notNull(bytes29 memView) public pure returns (bool) {\\n        return !isNull(memView);\\n    }\\n\\n    /**\\n     * @notice          Check if the view is of a valid type and points to a valid location\\n     *                  in memory.\\n     * @dev             We perform this check by examining solidity's unallocated memory\\n     *                  pointer and ensuring that the view's upper bound is less than that.\\n     * @param memView   The view\\n     * @return          ret - True if the view is valid\\n     */\\n    function isValid(bytes29 memView) public pure returns (bool ret) {\\n        if (typeOf(memView) == 0xffffffffff) {return false;}\\n        uint256 _end = end(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ret := not(gt(_end, mload(0x40)))\\n        }\\n    }\\n\\n    /**\\n     * @notice          Require that a typed memory view be valid.\\n     * @dev             Returns the view for easy chaining.\\n     * @param memView   The view\\n     * @return          bytes29 - The validated view\\n     */\\n    function assertValid(bytes29 memView) public pure returns (bytes29) {\\n        require(isValid(memView), \\\"Validity assertion failed\\\");\\n        return memView;\\n    }\\n\\n    /**\\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\\n     * @param memView   The view\\n     * @param _expected The expected type\\n     * @return          bool - True if the memview is of the expected type\\n     */\\n    function isType(bytes29 memView, uint40 _expected) public pure returns (bool) {\\n        return typeOf(memView) == _expected;\\n    }\\n\\n    /**\\n     * @notice          Require that a typed memory view has a specific type.\\n     * @dev             Returns the view for easy chaining.\\n     * @param memView   The view\\n     * @param _expected The expected type\\n     * @return          bytes29 - The view with validated type\\n     */\\n    function assertType(bytes29 memView, uint40 _expected) public pure returns (bytes29) {\\n        if (!isType(memView, _expected)) {\\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\\n            (, uint256 e) = encodeHex(uint256(_expected));\\n            string memory err = string(\\n                abi.encodePacked(\\n                    \\\"Type assertion failed. Got 0x\\\",\\n                    uint80(g),\\n                    \\\". Expected 0x\\\",\\n                    uint80(e)\\n                )\\n            );\\n            revert(err);\\n        }\\n        return memView;\\n    }\\n\\n    /**\\n     * @notice          Return an identical view with a different type.\\n     * @param memView   The view\\n     * @param _newType  The new type\\n     * @return          newView - The new view with the specified type\\n     */\\n    function castTo(bytes29 memView, uint40 _newType) public pure returns (bytes29 newView) {\\n        // then | in the new type\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n        // shift off the top 5 bytes\\n            newView := or(newView, shr(40, shl(40, memView)))\\n            newView := or(newView, shl(216, _newType))\\n        }\\n    }\\n\\n    /**\\n     * @notice          Unsafe raw pointer construction. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @dev             Unsafe raw pointer construction. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @param _type     The type\\n     * @param _loc      The memory address\\n     * @param _len      The length\\n     * @return          newView - The new view with the specified type, location and length\\n     */\\n    function unsafeBuildUnchecked(uint256 _type, uint256 _loc, uint256 _len) private pure returns (bytes29 newView) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            newView := shl(96, or(newView, _type)) // insert type\\n            newView := shl(96, or(newView, _loc))  // insert loc\\n            newView := shl(24, or(newView, _len))  // empty bottom 3 bytes\\n        }\\n    }\\n\\n    /**\\n     * @notice          Instantiate a new memory view. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @dev             Instantiate a new memory view. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @param _type     The type\\n     * @param _loc      The memory address\\n     * @param _len      The length\\n     * @return          newView - The new view with the specified type, location and length\\n     */\\n    function build(uint256 _type, uint256 _loc, uint256 _len) public pure returns (bytes29 newView) {\\n        uint256 _end = _loc.add(_len);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            if gt(_end, mload(0x40)) {\\n                _end := 0\\n            }\\n        }\\n        if (_end == 0) {\\n            return NULL;\\n        }\\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\\n    }\\n\\n    /**\\n     * @notice          Instantiate a memory view from a byte array.\\n     * @dev             Note that due to Solidity memory representation, it is not possible to\\n     *                  implement a deref, as the `bytes` type stores its len in memory.\\n     * @param arr       The byte array\\n     * @param newType   The type\\n     * @return          bytes29 - The memory view\\n     */\\n    function ref(bytes memory arr, uint40 newType) public pure returns (bytes29) {\\n        uint256 _len = arr.length;\\n\\n        uint256 _loc;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            _loc := add(arr, 0x20)  // our view is of the data, not the struct\\n        }\\n\\n        return build(newType, _loc, _len);\\n    }\\n\\n    /**\\n     * @notice          Return the associated type information.\\n     * @param memView   The memory view\\n     * @return          _type - The type associated with the view\\n     */\\n    function typeOf(bytes29 memView) public pure returns (uint40 _type) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n        // 216 == 256 - 40\\n            _type := shr(216, memView) // shift out lower 24 bytes\\n        }\\n    }\\n\\n    /**\\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the 5-byte type flag is equal\\n     */\\n    function sameType(bytes29 left, bytes29 right) public pure returns (bool) {\\n        // XOR the inputs to check their difference\\n        return (left ^ right) >> (2 * TWELVE_BYTES) == 0;\\n    }\\n\\n    /**\\n     * @notice          Return the memory address of the underlying bytes.\\n     * @param memView   The view\\n     * @return          _loc - The memory address\\n     */\\n    function loc(bytes29 memView) public pure returns (uint96 _loc) {\\n        uint256 _mask = LOW_12_MASK;  // assembly can't use globals\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n        // 120 bits = 12 bytes (the encoded loc) + 3 bytes (empty low space)\\n            _loc := and(shr(120, memView), _mask)\\n        }\\n    }\\n\\n    /**\\n     * @notice          The number of memory words this memory view occupies, rounded up.\\n     * @param memView   The view\\n     * @return          uint256 - The number of memory words\\n     */\\n    function words(bytes29 memView) public pure returns (uint256) {\\n        return uint256(len(memView)).add(32) / 32;\\n    }\\n\\n    /**\\n     * @notice          The in-memory footprint of a fresh copy of the view.\\n     * @param memView   The view\\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\\n     */\\n    function footprint(bytes29 memView) public pure returns (uint256) {\\n        return words(memView) * 32;\\n    }\\n\\n    /**\\n     * @notice          The number of bytes of the view.\\n     * @param memView   The view\\n     * @return          _len - The length of the view\\n     */\\n    function len(bytes29 memView) public pure returns (uint96 _len) {\\n        uint256 _mask = LOW_12_MASK;  // assembly can't use globals\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            _len := and(shr(24, memView), _mask)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Returns the endpoint of `memView`.\\n     * @param memView   The view\\n     * @return          uint256 - The endpoint of `memView`\\n     */\\n    function end(bytes29 memView) public pure returns (uint256) {\\n        return loc(memView) + len(memView);\\n    }\\n\\n    /**\\n     * @notice          Safe slicing without memory modification.\\n     * @param memView   The view\\n     * @param _index    The start index\\n     * @param _len      The length\\n     * @param newType   The new type\\n     * @return          bytes29 - The new view\\n     */\\n    function slice(bytes29 memView, uint256 _index, uint256 _len, uint40 newType) public pure returns (bytes29) {\\n        uint256 _loc = loc(memView);\\n\\n        // Ensure it doesn't overrun the view\\n        if (_loc.add(_index).add(_len) > end(memView)) {\\n            return NULL;\\n        }\\n\\n        _loc = _loc.add(_index);\\n        return build(newType, _loc, _len);\\n    }\\n\\n    /**\\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\\n     * @param memView   The view\\n     * @param _len      The length\\n     * @param newType   The new type\\n     * @return          bytes29 - The new view\\n     */\\n    function prefix(bytes29 memView, uint256 _len, uint40 newType) public pure returns (bytes29) {\\n        return slice(memView, 0, _len, newType);\\n    }\\n\\n    /**\\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` byte.\\n     * @param memView   The view\\n     * @param _len      The length\\n     * @param newType   The new type\\n     * @return          bytes29 - The new view\\n     */\\n    function postfix(bytes29 memView, uint256 _len, uint40 newType) public pure returns (bytes29) {\\n        return slice(memView, uint256(len(memView)).sub(_len), _len, newType);\\n    }\\n\\n    /**\\n     * @notice          Construct an error message for an indexing overrun.\\n     * @param _loc      The memory address\\n     * @param _len      The length\\n     * @param _index    The index\\n     * @param _slice    The slice where the overrun occurred\\n     * @return          err - The err\\n     */\\n    function indexErrOverrun(\\n        uint256 _loc,\\n        uint256 _len,\\n        uint256 _index,\\n        uint256 _slice\\n    ) public pure returns (string memory err) {\\n        (, uint256 a) = encodeHex(_loc);\\n        (, uint256 b) = encodeHex(_len);\\n        (, uint256 c) = encodeHex(_index);\\n        (, uint256 d) = encodeHex(_slice);\\n        err = string(\\n            abi.encodePacked(\\n                \\\"TypedMemView/index - Overran the view. Slice is at 0x\\\",\\n                uint48(a),\\n                \\\" with length 0x\\\",\\n                uint48(b),\\n                \\\". Attempted to index at offset 0x\\\",\\n                uint48(c),\\n                \\\" with length 0x\\\",\\n                uint48(d),\\n                \\\".\\\"\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice          Load up to 32 bytes from the view onto the stack.\\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\\n     *                  This can be immediately cast to a smaller fixed-length byte array.\\n     *                  To automatically cast to an integer, use `indexUint`.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @param _bytes    The bytes\\n     * @return          result - The 32 byte result\\n     */\\n    function index(bytes29 memView, uint256 _index, uint8 _bytes) public pure returns (bytes32 result) {\\n        if (_bytes == 0) {return bytes32(0);}\\n        if (_index.add(_bytes) > len(memView)) {\\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\\n        }\\n        require(_bytes <= 32, \\\"TypedMemView/index - Attempted to index more than 32 bytes\\\");\\n\\n        // FIXME: why the following lines need `unchecked`\\n    unchecked {\\n        uint8 bitLength = _bytes * 8;\\n        uint256 _loc = loc(memView);\\n        uint256 _mask = leftMask(bitLength);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            result := and(mload(add(_loc, _index)), _mask)\\n        }\\n    }\\n\\n    }\\n\\n    /**\\n     * @notice          Parse an unsigned integer from the view at `_index`.\\n     * @dev             Requires that the view have >= `_bytes` bytes following that index.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @param _bytes    The bytes\\n     * @return          result - The unsigned integer\\n     */\\n    function indexUint(bytes29 memView, uint256 _index, uint8 _bytes) public pure returns (uint256 result) {\\n        return uint256(index(memView, _index, _bytes)) >> ((32 - _bytes) * 8);\\n    }\\n\\n    /**\\n     * @notice          Parse an unsigned integer from LE bytes.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @param _bytes    The bytes\\n     * @return          result - The unsigned integer\\n     */\\n    function indexLEUint(bytes29 memView, uint256 _index, uint8 _bytes) public pure returns (uint256 result) {\\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\\n    }\\n\\n    /**\\n     * @notice          Parse an address from the view at `_index`. Requires that the view have >= 20 bytes\\n     *                  following that index.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @return          address - The address\\n     */\\n    function indexAddress(bytes29 memView, uint256 _index) public pure returns (address) {\\n        return address(uint160(indexUint(memView, _index, 20)));\\n    }\\n\\n    /**\\n     * @notice          Return the keccak256 hash of the underlying memory\\n     * @param memView   The view\\n     * @return          digest - The keccak256 hash of the underlying memory\\n     */\\n    function keccak(bytes29 memView) public pure returns (bytes32 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            digest := keccak256(_loc, _len)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Return the sha2 digest of the underlying memory.\\n     * @dev             We explicitly deallocate memory afterwards.\\n     * @param memView   The view\\n     * @return          digest - The sha2 hash of the underlying memory\\n     */\\n    function sha2(bytes29 memView) public view returns (bytes32 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\\n            digest := mload(ptr)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\\n     * @param memView   The pre-image\\n     * @return          digest - the Digest\\n     */\\n    function hash160(bytes29 memView) public view returns (bytes20 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2\\n            pop(staticcall(gas(), 3, ptr, 0x20, ptr, 0x20)) // rmd160\\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\\n        }\\n    }\\n\\n    /**\\n     * @notice          Implements bitcoin's hash256 (double sha2)\\n     * @param memView   A view of the preimage\\n     * @return          digest - the Digest\\n     */\\n    function hash256(bytes29 memView) public view returns (bytes32 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\\n            pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha2 #2\\n            digest := mload(ptr)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Return true if the underlying memory is equal. Else false.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the underlying memory is equal\\n     */\\n    function untypedEqual(bytes29 left, bytes29 right) public pure returns (bool) {\\n        return (loc(left) == loc(right) && len(left) == len(right)) || keccak(left) == keccak(right);\\n    }\\n\\n    /**\\n     * @notice          Return false if the underlying memory is equal. Else true.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - False if the underlying memory is equal\\n     */\\n    function untypedNotEqual(bytes29 left, bytes29 right) public pure returns (bool) {\\n        return !untypedEqual(left, right);\\n    }\\n\\n    /**\\n     * @notice          Compares type equality.\\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the types are the same\\n     */\\n    function equal(bytes29 left, bytes29 right) public pure returns (bool) {\\n        return left == right || (typeOf(left) == typeOf(right) && keccak(left) == keccak(right));\\n    }\\n\\n    /**\\n     * @notice          Compares type inequality.\\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the types are not the same\\n     */\\n    function notEqual(bytes29 left, bytes29 right) public pure returns (bool) {\\n        return !equal(left, right);\\n    }\\n\\n    /**\\n     * @notice          Copy the view to a location, return an unsafe memory reference\\n     * @dev             Super Dangerous direct memory access.\\n     *\\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\\n     *                  As such it MUST be consumed IMMEDIATELY.\\n     *                  This function is private to prevent unsafe usage by callers.\\n     * @param memView   The view\\n     * @param _newLoc   The new location\\n     * @return          written - the unsafe memory reference\\n     */\\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\\n        require(notNull(memView), \\\"TypedMemView/copyTo - Null pointer deref\\\");\\n        require(isValid(memView), \\\"TypedMemView/copyTo - Invalid pointer deref\\\");\\n        uint256 _len = len(memView);\\n        uint256 _oldLoc = loc(memView);\\n\\n        uint256 ptr;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40)\\n        // revert if we're writing in occupied memory\\n            if gt(ptr, _newLoc) {\\n                revert(0x60, 0x20) // empty revert message\\n            }\\n\\n        // use the identity precompile to copy\\n        // guaranteed not to fail, so pop the success\\n            pop(staticcall(gas(), 4, _oldLoc, _len, _newLoc, _len))\\n        }\\n\\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\\n    }\\n\\n    /**\\n     * @notice          Copies the referenced memory to a new loc in memory, returning a `bytes` pointing to\\n     *                  the new memory\\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n     * @param memView   The view\\n     * @return          ret - The view pointing to the new memory\\n     */\\n    function clone(bytes29 memView) public view returns (bytes memory ret) {\\n        uint256 ptr;\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n            ret := ptr\\n        }\\n        unsafeCopyTo(memView, ptr + 0x20);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\\n            mstore(ptr, _len) // write len of new array (in bytes)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\\n     * @dev             Super Dangerous direct memory access.\\n     *\\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\\n     *                  As such it MUST be consumed IMMEDIATELY.\\n     *                  This function is private to prevent unsafe usage by callers.\\n     * @param memViews  The views\\n     * @return          unsafeView - The conjoined view pointing to the new memory\\n     */\\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location) private view returns (bytes29 unsafeView) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n        // revert if we're writing in occupied memory\\n            if gt(ptr, _location) {\\n                revert(0x60, 0x20) // empty revert message\\n            }\\n        }\\n\\n        uint256 _offset = 0;\\n        for (uint256 i = 0; i < memViews.length; i ++) {\\n            bytes29 memView = memViews[i];\\n            unsafeCopyTo(memView, _location + _offset);\\n            _offset += len(memView);\\n        }\\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\\n    }\\n\\n    /**\\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\\n     * @param memViews  The views\\n     * @return          bytes32 - The keccak256 digest\\n     */\\n    function joinKeccak(bytes29[] memory memViews) public view returns (bytes32) {\\n        uint256 ptr;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n        }\\n        return keccak(unsafeJoin(memViews, ptr));\\n    }\\n\\n    /**\\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\\n     * @param memViews  The views\\n     * @return          bytes32 - The sha256 digest\\n     */\\n    function joinSha2(bytes29[] memory memViews) public view returns (bytes32) {\\n        uint256 ptr;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n        }\\n        return sha2(unsafeJoin(memViews, ptr));\\n    }\\n\\n    /**\\n     * @notice          copies all views, joins them into a new bytearray.\\n     * @param memViews  The views\\n     * @return          ret - The new byte array\\n     */\\n    function join(bytes29[] memory memViews) public view returns (bytes memory ret) {\\n        uint256 ptr;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n        }\\n\\n        bytes29 _newView = unsafeJoin(memViews, ptr + 0x20);\\n        uint256 _written = len(_newView);\\n        uint256 _footprint = footprint(_newView);\\n\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n        // store the legnth\\n            mstore(ptr, _written)\\n        // new pointer is old + 0x20 + the footprint of the body\\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\\n            ret := ptr\\n        }\\n    }\\n}\",\"keccak256\":\"0x2a8fbc963c1d8e124fcfd48685672d36433b36afd4c76a1fea5e6260c1dea4b5\",\"license\":\"MIT\"},\"contracts/libraries/ViewBTC.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./TypedMemView.sol\\\";\\nimport \\\"./SafeMath.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\nlibrary ViewBTC {\\n    using TypedMemView for bytes29;\\n    using SafeMath for uint256;\\n\\n    // The target at minimum Difficulty. Also the target of the genesis block\\n    uint256 public constant DIFF1_TARGET = 0xffff0000000000000000000000000000000000000000000000000000;\\n\\n    uint256 public constant RETARGET_PERIOD = 2 * 7 * 24 * 60 * 60;  // 2 weeks in seconds\\n    uint256 public constant RETARGET_PERIOD_BLOCKS = 2016;  // 2 weeks in blocks\\n\\n    enum BTCTypes {\\n        Unknown,            // 0x0\\n        CompactInt,         // 0x1\\n        ScriptSig,          // 0x2 - with length prefix\\n        Outpoint,           // 0x3\\n        TxIn,               // 0x4\\n        IntermediateTxIns,  // 0x5 - used in vin parsing\\n        Vin,                // 0x6\\n        ScriptPubkey,       // 0x7 - with length prefix\\n        PKH,                // 0x8 - the 20-byte payload digest\\n        WPKH,               // 0x9 - the 20-byte payload digest\\n        WSH,                // 0xa - the 32-byte payload digest\\n        SH,                 // 0xb - the 20-byte payload digest\\n        OpReturnPayload,    // 0xc\\n        TxOut,              // 0xd\\n        IntermediateTxOuts, // 0xe - used in vout parsing\\n        Vout,               // 0xf\\n        Header,             // 0x10\\n        HeaderArray,        // 0x11\\n        MerkleNode,         // 0x12\\n        MerkleStep,         // 0x13\\n        MerkleArray         // 0x14\\n    }\\n\\n    // TODO: any way to bubble up more info?\\n    // @notice             requires `memView` to be of a specified type\\n    // @param memView      a 29-byte view with a 5-byte type\\n    // @param t            the expected type (e.g. BTCTypes.Outpoint, BTCTypes.TxIn, etc)\\n    // @return             passes if it is the correct type, errors if not\\n    modifier typeAssert(bytes29 memView, BTCTypes t) {\\n        memView.assertType(uint40(t));\\n        _;\\n    }\\n\\n    // Revert with an error message re: non-minimal VarInts\\n    function revertNonMinimal(bytes29 ref) private pure returns (string memory) {\\n        (, uint256 g) = TypedMemView.encodeHex(ref.indexUint(0, uint8(ref.len())));\\n        string memory err = string(\\n            abi.encodePacked(\\n                \\\"Non-minimal var int. Got 0x\\\",\\n                uint144(g)\\n            )\\n        );\\n        revert(err);\\n    }\\n\\n    // @notice             reads a compact int from the view at the specified index\\n    // @param memView      a 29-byte view with a 5-byte type\\n    // @param _index       the index\\n    // @return             the compact int at the specified index\\n    function indexCompactInt(bytes29 memView, uint256 _index) public pure returns (uint64 number) {\\n        uint256 flag = memView.indexUint(_index, 1);\\n        if (flag <= 0xfc) {\\n            return uint64(flag);\\n        } else if (flag == 0xfd) {\\n            number = uint64(memView.indexLEUint(_index + 1, 2));\\n            if (compactIntLength(number) != 3) {revertNonMinimal(memView.slice(_index, 3, 0));}\\n        } else if (flag == 0xfe) {\\n            number = uint64(memView.indexLEUint(_index + 1, 4));\\n            if (compactIntLength(number) != 5) {revertNonMinimal(memView.slice(_index, 5, 0));}\\n        } else if (flag == 0xff) {\\n            number = uint64(memView.indexLEUint(_index + 1, 8));\\n            if (compactIntLength(number) != 9) {revertNonMinimal(memView.slice(_index, 9, 0));}\\n        }\\n    }\\n\\n    // @notice         gives the total length (in bytes) of a CompactInt-encoded number\\n    // @param number   the number as uint64\\n    // @return         the compact integer as uint8\\n    function compactIntLength(uint64 number) public pure returns (uint8) {\\n        if (number <= 0xfc) {\\n            return 1;\\n        } else if (number <= 0xffff) {\\n            return 3;\\n        } else if (number <= 0xffffffff) {\\n            return 5;\\n        } else {\\n            return 9;\\n        }\\n    }\\n\\n    // @notice             extracts the LE txid from an outpoint\\n    // @param _outpoint    the outpoint\\n    // @return             the LE txid\\n    function txidLE(bytes29 _outpoint) public pure typeAssert(_outpoint, BTCTypes.Outpoint) returns (bytes32) {\\n        return _outpoint.index(0, 32);\\n    }\\n\\n    // @notice             extracts the index as an integer from the outpoint\\n    // @param _outpoint    the outpoint\\n    // @return             the index\\n    function outpointIdx(bytes29 _outpoint) public pure typeAssert(_outpoint, BTCTypes.Outpoint) returns (uint32) {\\n        return uint32(_outpoint.indexLEUint(32, 4));\\n    }\\n\\n    // @notice          extracts the outpoint from an input\\n    // @param _input    the input\\n    // @return          the outpoint as a typed memory\\n    function outpoint(bytes29 _input) public pure typeAssert(_input, BTCTypes.TxIn) returns (bytes29) {\\n        return _input.slice(0, 36, uint40(BTCTypes.Outpoint));\\n    }\\n\\n    // @notice           extracts the script sig from an input\\n    // @param _input     the input\\n    // @return           the script sig as a typed memory\\n    function scriptSig(bytes29 _input) public pure typeAssert(_input, BTCTypes.TxIn) returns (bytes29) {\\n        uint64 scriptLength = indexCompactInt(_input, 36);\\n        return _input.slice(36, compactIntLength(scriptLength) + scriptLength, uint40(BTCTypes.ScriptSig));\\n    }\\n\\n    // @notice         extracts the sequence from an input\\n    // @param _input   the input\\n    // @return         the sequence\\n    function sequence(bytes29 _input) public pure typeAssert(_input, BTCTypes.TxIn) returns (uint32) {\\n        uint64 scriptLength = indexCompactInt(_input, 36);\\n        uint256 scriptEnd = 36 + compactIntLength(scriptLength) + scriptLength;\\n        return uint32(_input.indexLEUint(scriptEnd, 4));\\n    }\\n\\n    // @notice         determines the length of the first input in an array of inputs\\n    // @param _inputs  the vin without its length prefix\\n    // @return         the input length\\n    function inputLength(bytes29 _inputs) public pure typeAssert(_inputs, BTCTypes.IntermediateTxIns) returns (uint256) {\\n        uint64 scriptLength = indexCompactInt(_inputs, 36);\\n        return uint256(compactIntLength(scriptLength)) + uint256(scriptLength) + 36 + 4;\\n    }\\n\\n    // @notice         extracts the input at a specified index\\n    // @param _vin     the vin\\n    // @param _index   the index of the desired input\\n    // @return         the desired input\\n    function indexVin(bytes29 _vin, uint256 _index) public pure typeAssert(_vin, BTCTypes.Vin) returns (bytes29) {\\n        uint256 _nIns = uint256(indexCompactInt(_vin, 0));\\n        uint256 _viewLen = _vin.len();\\n        require(_index < _nIns, \\\"Vin read overrun\\\");\\n\\n        uint256 _offset = uint256(compactIntLength(uint64(_nIns)));\\n        bytes29 _remaining;\\n        for (uint256 _i = 0; _i < _index; _i += 1) {\\n            _remaining = _vin.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxIns));\\n            _offset += inputLength(_remaining);\\n        }\\n\\n        _remaining = _vin.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxIns));\\n        uint256 _len = inputLength(_remaining);\\n        return _vin.slice(_offset, _len, uint40(BTCTypes.TxIn));\\n    }\\n\\n    // @notice         extracts the raw LE bytes of the output value\\n    // @param _output  the output\\n    // @return         the raw LE bytes of the output value\\n    function valueBytes(bytes29 _output) public pure typeAssert(_output, BTCTypes.TxOut) returns (bytes8) {\\n        return bytes8(_output.index(0, 8));\\n    }\\n\\n    // @notice         extracts the value from an output\\n    // @param _output  the output\\n    // @return         the value\\n    // function value(bytes29 _output) internal pure typeAssert(_output, BTCTypes.TxOut) returns (uint64) {\\n    //     return uint64(_output.indexLEUint(0, 8));\\n    // }\\n    function value(bytes29 _output) public pure returns (uint64) {\\n        return uint64(_output.indexLEUint(0, 8));\\n    }\\n\\n    // @notice             extracts the scriptPubkey from an output\\n    // @param _output      the output\\n    // @return             the scriptPubkey\\n    function scriptPubkey(bytes29 _output) public pure typeAssert(_output, BTCTypes.TxOut) returns (bytes29) {\\n        uint64 scriptLength = indexCompactInt(_output, 8);\\n        return _output.slice(8, compactIntLength(scriptLength) + scriptLength, uint40(BTCTypes.ScriptPubkey));\\n    }\\n\\n    function scriptPubkeyBytes(bytes29 _output) public pure typeAssert(_output, BTCTypes.TxOut) returns (bytes32) {\\n        uint64 scriptLength = indexCompactInt(_output, 8);\\n        bytes29 scriptPubkeyView = _output.slice(8, compactIntLength(scriptLength) + scriptLength, uint40(BTCTypes.ScriptPubkey));\\n        return scriptPubkeyView.index(compactIntLength(scriptLength), uint8(scriptLength));\\n    }\\n\\n    // @notice             determines the length of the first output in an array of outputs\\n    // @param _outputs     the vout without its length prefix\\n    // @return             the output length\\n    function outputLength(bytes29 _outputs) public pure typeAssert(_outputs, BTCTypes.IntermediateTxOuts) returns (uint256) {\\n        uint64 scriptLength = indexCompactInt(_outputs, 8);\\n        return uint256(compactIntLength(scriptLength)) + uint256(scriptLength) + 8;\\n    }\\n\\n    // @notice         extracts the output at a specified index\\n    // @param _vout    the vout\\n    // @param _index   the index of the desired output\\n    // @return         the desired output\\n    // function indexVout(bytes29 _vout, uint256 _index) internal pure typeAssert(_vout, BTCTypes.Vout) returns (bytes29) {\\n    //     uint256 _nOuts = uint256(indexCompactInt(_vout, 0));\\n    //     uint256 _viewLen = _vout.len();\\n    //     require(_index < _nOuts, \\\"Vout read overrun\\\");\\n\\n    //     uint256 _offset = uint256(compactIntLength(uint64(_nOuts)));\\n    //     bytes29 _remaining;\\n    //     for (uint256 _i = 0; _i < _index; _i += 1) {\\n    //         _remaining = _vout.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxOuts));\\n    //         _offset += outputLength(_remaining);\\n    //     }\\n\\n    //     _remaining = _vout.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxOuts));\\n    //     uint256 _len = outputLength(_remaining);\\n    //     return _vout.slice(_offset, _len, uint40(BTCTypes.TxOut));\\n    // }\\n    function indexVout(bytes29 _vout, uint256 _index) public pure returns (bytes29) {\\n        uint256 _nOuts = uint256(indexCompactInt(_vout, 0));\\n        uint256 _viewLen = _vout.len();\\n        require(_index < _nOuts, \\\"Vout read overrun\\\");\\n\\n        uint256 _offset = uint256(compactIntLength(uint64(_nOuts)));\\n        bytes29 _remaining;\\n        for (uint256 _i = 0; _i < _index; _i += 1) {\\n            _remaining = _vout.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxOuts));\\n            _offset += outputLength(_remaining);\\n        }\\n\\n        _remaining = _vout.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxOuts));\\n        uint256 _len = outputLength(_remaining);\\n        return _vout.slice(_offset, _len, uint40(BTCTypes.TxOut));\\n    }\\n\\n    // @notice         extracts the Op Return Payload\\n    // @param _spk     the scriptPubkey\\n    // @return         the Op Return Payload (or null if not a valid Op Return output)\\n    function opReturnPayload(bytes29 _spk) public pure typeAssert(_spk, BTCTypes.ScriptPubkey) returns (bytes29) {\\n        uint64 _bodyLength = indexCompactInt(_spk, 0);\\n        uint64 _payloadLen = uint64(_spk.indexUint(3, 1));\\n\\n        // TODO: the max length of op return (with the prefixes) is 83, please check it for other consequences\\n        // Also the _spk.indexUint(3, 1) != _bodyLength - 3 has changed from _spk.indexUint(2, 1) != _bodyLength - 2\\n        if (_bodyLength > 83 || _bodyLength < 4 || _spk.indexUint(1, 1) != 0x6a || _spk.indexUint(3, 1) != _bodyLength - 3) {\\n            return TypedMemView.nullView();\\n        }\\n        // TODO: check, the previous starting index of slice was 3\\n        return _spk.slice(4, _payloadLen, uint40(BTCTypes.OpReturnPayload));\\n    }\\n\\n    // @notice         extracts the payload from a scriptPubkey\\n    // @param _spk     the scriptPubkey\\n    // @return         the payload (or null if not a valid PKH, SH, WPKH, or WSH output)\\n    function payload(bytes29 _spk) public pure typeAssert(_spk, BTCTypes.ScriptPubkey) returns (bytes29) {\\n        uint256 _spkLength = _spk.len();\\n        uint256 _bodyLength = indexCompactInt(_spk, 0);\\n        if (_bodyLength > 0x22 || _bodyLength < 0x16 || _bodyLength + 1 != _spkLength) {\\n            return TypedMemView.nullView();\\n        }\\n\\n        // Legacy\\n        if (_bodyLength == 0x19 && _spk.indexUint(0, 4) == 0x1976a914 && _spk.indexUint(_spkLength - 2, 2) == 0x88ac) {\\n            return _spk.slice(4, 20, uint40(BTCTypes.PKH));\\n        } else if (_bodyLength == 0x17 && _spk.indexUint(0, 3) == 0x17a914 && _spk.indexUint(_spkLength - 1, 1) == 0x87) {\\n            return _spk.slice(3, 20, uint40(BTCTypes.SH));\\n        }\\n\\n        // Witness v0\\n        if (_spk.indexUint(1, 1) == 0) {\\n            uint256 _payloadLen = _spk.indexUint(2, 1);\\n            if (_bodyLength != 0x22 && _bodyLength != 0x16 || _payloadLen != _bodyLength - 2) {\\n                return TypedMemView.nullView();\\n            }\\n            uint40 newType = uint40(_payloadLen == 0x20 ? BTCTypes.WSH : BTCTypes.WPKH);\\n            return _spk.slice(3, _payloadLen, newType);\\n        }\\n\\n        return TypedMemView.nullView();\\n    }\\n\\n    // @notice     (loosely) verifies an spk and converts to a typed memory\\n    // @dev        will return null in error cases. Will not check for disabled opcodes.\\n    // @param _spk the spk\\n    // @return     the typed spk (or null if error)\\n    function tryAsSPK(bytes29 _spk) public pure typeAssert(_spk, BTCTypes.Unknown) returns (bytes29) {\\n        if (_spk.len() == 0) {\\n            return TypedMemView.nullView();\\n        }\\n        uint64 _len = indexCompactInt(_spk, 0);\\n        if (_spk.len() == compactIntLength(_len) + _len) {\\n            return _spk.castTo(uint40(BTCTypes.ScriptPubkey));\\n        } else {\\n            return TypedMemView.nullView();\\n        }\\n    }\\n\\n    // @notice     verifies the vin and converts to a typed memory\\n    // @dev        will return null in error cases\\n    // @param _vin the vin\\n    // @return     the typed vin (or null if error)\\n    function tryAsVin(bytes29 _vin) public pure typeAssert(_vin, BTCTypes.Unknown) returns (bytes29) {\\n        if (_vin.len() == 0) {\\n            return TypedMemView.nullView();\\n        }\\n        uint64 _nIns = indexCompactInt(_vin, 0);\\n        uint256 _viewLen = _vin.len();\\n        if (_nIns == 0) {\\n            return TypedMemView.nullView();\\n        }\\n\\n        uint256 _offset = uint256(compactIntLength(_nIns));\\n        for (uint256 i = 0; i < _nIns; i++) {\\n            if (_offset >= _viewLen) {\\n                // We've reached the end, but are still trying to read more\\n                return TypedMemView.nullView();\\n            }\\n            bytes29 _remaining = _vin.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxIns));\\n            _offset += inputLength(_remaining);\\n        }\\n        if (_offset != _viewLen) {\\n            return TypedMemView.nullView();\\n        }\\n        return _vin.castTo(uint40(BTCTypes.Vin));\\n    }\\n\\n    // @notice         verifies the vout and converts to a typed memory\\n    // @dev            will return null in error cases\\n    // @param _vout    the vout\\n    // @return         the typed vout (or null if error)\\n    function tryAsVout(bytes29 _vout) public pure typeAssert(_vout, BTCTypes.Unknown) returns (bytes29) {\\n        if (_vout.len() == 0) {\\n            return TypedMemView.nullView();\\n        }\\n        uint64 _nOuts = indexCompactInt(_vout, 0);\\n\\n        uint256 _viewLen = _vout.len();\\n        if (_nOuts == 0) {\\n            return TypedMemView.nullView();\\n        }\\n\\n        uint256 _offset = uint256(compactIntLength(_nOuts));\\n        for (uint256 i = 0; i < _nOuts; i++) {\\n            if (_offset >= _viewLen) {\\n                // We've reached the end, but are still trying to read more\\n                return TypedMemView.nullView();\\n            }\\n            bytes29 _remaining = _vout.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxOuts));\\n            _offset += outputLength(_remaining);\\n        }\\n        if (_offset != _viewLen) {\\n            return TypedMemView.nullView();\\n        }\\n        return _vout.castTo(uint40(BTCTypes.Vout));\\n    }\\n\\n    // @notice         verifies the header and converts to a typed memory\\n    // @dev            will return null in error cases\\n    // @param _header  the header\\n    // @return         the typed header (or null if error)\\n    function tryAsHeader(bytes29 _header) public pure typeAssert(_header, BTCTypes.Unknown) returns (bytes29) {\\n        if (_header.len() != 80) {\\n            return TypedMemView.nullView();\\n        }\\n        return _header.castTo(uint40(BTCTypes.Header));\\n    }\\n\\n\\n    // @notice         Index a header array.\\n    // @dev            Errors on overruns\\n    // @param _arr     The header array\\n    // @param index    The 0-indexed location of the header to get\\n    // @return         the typed header at `index`\\n    function indexHeaderArray(bytes29 _arr, uint256 index) public pure typeAssert(_arr, BTCTypes.HeaderArray) returns (bytes29) {\\n        uint256 _start = index * (80);\\n        return _arr.slice(_start, 80, uint40(BTCTypes.Header));\\n    }\\n\\n\\n    // @notice     verifies the header array and converts to a typed memory\\n    // @dev        will return null in error cases\\n    // @param _arr the header array\\n    // @return     the typed header array (or null if error)\\n    function tryAsHeaderArray(bytes29 _arr) public pure typeAssert(_arr, BTCTypes.Unknown) returns (bytes29) {\\n        if (_arr.len() % 80 != 0) {\\n            return TypedMemView.nullView();\\n        }\\n        return _arr.castTo(uint40(BTCTypes.HeaderArray));\\n    }\\n\\n    // @notice     verifies the merkle array and converts to a typed memory\\n    // @dev        will return null in error cases\\n    // @param _arr the merkle array\\n    // @return     the typed merkle array (or null if error)\\n    function tryAsMerkleArray(bytes29 _arr) public pure typeAssert(_arr, BTCTypes.Unknown) returns (bytes29) {\\n        if (_arr.len() % 32 != 0) {\\n            return TypedMemView.nullView();\\n        }\\n        return _arr.castTo(uint40(BTCTypes.MerkleArray));\\n    }\\n\\n    // @notice         extracts the merkle root from the header\\n    // @param _header  the header\\n    // @return         the merkle root\\n    // function merkleRoot(bytes29 _header) internal pure typeAssert(_header, BTCTypes.Header) returns (bytes32) {\\n    //     return _header.index(36, 32);\\n    // }\\n\\n    function merkleRoot(bytes29 _header) public pure returns (bytes32) {\\n        return _header.index(36, 32);\\n    }\\n\\n    // @notice         extracts the target from the header\\n    // @param _header  the header\\n    // @return         the target\\n    function target(bytes29  _header) public pure typeAssert(_header, BTCTypes.Header) returns (uint256) {\\n        uint256 _mantissa = _header.indexLEUint(72, 3);\\n        require(_header.indexUint(75, 1) > 2, \\\"ViewBTC: invalid target difficulty\\\");\\n        uint256 _exponent = _header.indexUint(75, 1) - 3;\\n        return _mantissa * (256 ** _exponent);\\n    }\\n\\n    // @notice         calculates the difficulty from a target\\n    // @param _target  the target\\n    // @return         the difficulty\\n    function toDiff(uint256  _target) public pure returns (uint256) {\\n        return DIFF1_TARGET / (_target);\\n    }\\n\\n    // @notice         extracts the difficulty from the header\\n    // @param _header  the header\\n    // @return         the difficulty\\n    function diff(bytes29  _header) public pure typeAssert(_header, BTCTypes.Header) returns (uint256) {\\n        return toDiff(target(_header));\\n    }\\n\\n    // @notice         extracts the timestamp from the header\\n    // @param _header  the header\\n    // @return         the timestamp\\n    function time(bytes29  _header) public pure typeAssert(_header, BTCTypes.Header) returns (uint32) {\\n        return uint32(_header.indexLEUint(68, 4));\\n    }\\n\\n    // @notice         extracts the parent hash from the header\\n    // @param _header  the header\\n    // @return         the parent hash\\n    function parent(bytes29 _header) public pure typeAssert(_header, BTCTypes.Header) returns (bytes32) {\\n        return _header.index(4, 32);\\n    }\\n\\n    // @notice         calculates the Proof of Work hash of the header\\n    // @param _header  the header\\n    // @return         the Proof of Work hash\\n    function workHash(bytes29 _header) public view typeAssert(_header, BTCTypes.Header) returns (bytes32) {\\n        return _header.hash256();\\n    }\\n\\n    // @notice         calculates the Proof of Work hash of the header, and converts to an integer\\n    // @param _header  the header\\n    // @return         the Proof of Work hash as an integer\\n    function work(bytes29 _header) public view typeAssert(_header, BTCTypes.Header) returns (uint256) {\\n        return TypedMemView.reverseUint256(uint256(workHash(_header)));\\n    }\\n\\n    // @notice          Concatenates and hashes two inputs for merkle proving\\n    // @dev             Not recommended to call directly.\\n    // @param _a        The first hash\\n    // @param _b        The second hash\\n    // @return          The double-sha256 of the concatenated hashes\\n    function _merkleStep(bytes32 _a, bytes32 _b) public view returns (bytes32 digest) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            mstore(ptr, _a)\\n            mstore(add(ptr, 0x20), _b)\\n            pop(staticcall(gas(), 2, ptr, 0x40, ptr, 0x20)) // sha2 #1\\n            pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha2 #2\\n            digest := mload(ptr)\\n        }\\n    }\\n\\n    // @notice         verifies a merkle proof\\n    // @param _leaf    the leaf in LE format\\n    // @param _proof   the proof nodes in LE format\\n    // @param _root    the merkle root in BE format (same as the merkle root that is stored in the block header)\\n    // @param _index   the index\\n    // @return         true if valid, false if otherwise\\n    function checkMerkle(\\n        bytes32 _leaf,\\n        bytes29 _proof,\\n        bytes32 _root,\\n        uint256 _index\\n    ) public view returns (bool) {\\n        uint256 nodes = _proof.len() / 32;\\n        if (nodes == 0) {\\n            return _leaf == _root;\\n        }\\n\\n        uint256 _idx = _index;\\n        bytes32 _current = _leaf;\\n\\n        for (uint i = 0; i < nodes; i++) {\\n            bytes32 _next = _proof.index(i * 32, 32);\\n            if (_idx % 2 == 1) {\\n                _current = _merkleStep(_next, _current);\\n            } else {\\n                _current = _merkleStep(_current, _next);\\n            }\\n            _idx >>= 1;\\n        }\\n\\n        return revertBytes32(_current) == _root;\\n    }\\n\\n    function revertBytes32(bytes32 input) public pure returns(bytes32) {\\n        bytes memory temp;\\n        bytes32 result;\\n        for (uint i = 0; i < 32; i++) {\\n            temp = abi.encodePacked(temp, input[31-i]);\\n        }\\n        assembly {\\n            result := mload(add(temp, 32))\\n        }\\n        return result;\\n    }\\n    // @notice                 performs the bitcoin difficulty retarget\\n    // @dev                    implements the Bitcoin algorithm precisely\\n    // @param _previousTarget  the target of the previous period\\n    // @param _firstTimestamp  the timestamp of the first block in the difficulty period\\n    // @param _secondTimestamp the timestamp of the last block in the difficulty period\\n    // @return                 the new period's target threshold\\n    function retargetAlgorithm(\\n        uint256 _previousTarget,\\n        uint256 _firstTimestamp,\\n        uint256 _secondTimestamp\\n    ) public pure returns (uint256) {\\n        uint256 _elapsedTime = _secondTimestamp - _firstTimestamp;\\n\\n        // Normalize ratio to factor of 4 if very long or very short\\n        if (_elapsedTime < RETARGET_PERIOD / (4)) {\\n            _elapsedTime = RETARGET_PERIOD / (4);\\n        }\\n        if (_elapsedTime > RETARGET_PERIOD * (4)) {\\n            _elapsedTime = RETARGET_PERIOD * (4);\\n        }\\n\\n        /*\\n            NB: high targets e.g. ffff0020 can cause overflows here\\n                so we divide it by 256**2, then multiply by 256**2 later\\n                we know the target is evenly divisible by 256**2, so this isn't an issue\\n        */\\n        uint256 _adjusted = _previousTarget / (65536) * (_elapsedTime);\\n        return _adjusted.div(RETARGET_PERIOD) * (65536);\\n    }\\n}\",\"keccak256\":\"0xe856c1e2351a041f90374797baba5d25fdaf0f5e0986638dec3236c3b2eac866\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x614c5761003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106102475760003560e01c80638c1be5c911610145578063cddb4507116100c2578063f172b06011610086578063f172b0601461052e578063f594d59f14610541578063f867eaac14610554578063f89fd37514610579578063fe5a59b61461058c57610247565b8063cddb4507146104bd578063d4258ca7146104d0578063dccd7f0f146104dc578063df90556114610508578063e6e3b2be1461051b57610247565b80639dbf87aa116101095780639dbf87aa1461045e578063a54d8e6414610471578063ade29ec114610484578063b259123214610497578063cb71c49b146104aa57610247565b80638c1be5c9146104095780638cc715691461041c578063905bf5281461042557806393c90681146104385780639d8e299f1461044b57610247565b80634ed7e908116101d3578063701acc1f11610197578063701acc1f146103aa578063707de626146103bd578063746a1631146103d05780637e5dc0eb146103e357806388330e53146103f657610247565b80634ed7e9081461034b57806357315b481461035e57806360234fc51461037157806362ef7dad146103845780636c3029ad1461039757610247565b80632ea56fa11161021a5780632ea56fa1146102ca578063372da9ed146102dd5780633c445e3c146102f0578063451f393d14610303578063454495e61461032b57610247565b8063056e04ec1461024c57806307d1afa914610269578063097948031461028c578063208d043a1461029f575b600080fd5b6102566212750081565b6040519081526020015b60405180910390f35b61027c61027736600461471b565b61059f565b6040519015158152602001610260565b61025661029a3660046146eb565b61076a565b6102b26102ad3660046146c0565b610783565b6040516001600160401b039091168152602001610260565b6102566102d8366004614688565b610b9a565b6102566102eb366004614688565b610ccc565b6102566102fe3660046146eb565b610da8565b610316610311366004614688565b610e28565b60405163ffffffff9091168152602001610260565b61033e610339366004614688565b610f99565b6040516102609190614843565b61033e610359366004614688565b6111e9565b61033e61036c3660046146c0565b611386565b61033e61037f3660046146c0565b611745565b610256610392366004614688565b611a6b565b6102566103a5366004614688565b611d42565b6102566103b8366004614757565b611e25565b6102566103cb366004614688565b611e51565b6102b26103de366004614688565b611f28565b61033e6103f1366004614688565b611fbd565b61033e610404366004614688565b612511565b61033e610417366004614688565b61292b565b6102566107e081565b610256610433366004614688565b612c48565b610316610446366004614688565b612dff565b610256610459366004614688565b612ed6565b61025661046c366004614688565b612fa5565b61033e61047f366004614688565b612feb565b61033e610492366004614688565b613193565b6102566104a536600461479b565b613920565b61033e6104b8366004614688565b6139bd565b6102566104cb366004614688565b613b0d565b61025661ffff60d01b81565b6104ef6104ea366004614688565b613bae565b6040516001600160c01b03199091168152602001610260565b61033e6105163660046146c0565b613c86565b61033e610529366004614688565b613d88565b61031661053c366004614688565b613e63565b61033e61054f366004614688565b613f3a565b6105676105623660046147c6565b614276565b60405160ff9091168152602001610260565b610256610587366004614688565b6142cf565b61033e61059a366004614688565b6143a1565b604051639cb855cb60e01b8152600090819060209073a7e24f80E66bb09819D813e9c4b1B176e22C2d4490639cb855cb906105e49062ffffff198a1690600401614843565b60206040518083038186803b1580156105fc57600080fd5b505af4158015610610573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063491906147ed565b61063e91906149c3565b6001600160601b0316905080610658575050838214610762565b828660005b8381101561075057600073a7e24f80E66bb09819D813e9c4b1B176e22C2d446338c17a3f62ffffff198b16610693856020614afd565b60206040518463ffffffff1660e01b81526004016106b393929190614854565b60206040518083038186803b1580156106cb57600080fd5b505af41580156106df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107039190614703565b9050610710600285614ba6565b60011415610729576107228184611e25565b9250610736565b6107338382611e25565b92505b5060019290921c918061074881614b8b565b91505061065d565b508561075b82610da8565b1493505050505b949350505050565b600061077b8261ffff60d01b6149af565b90505b919050565b60405163da98f02b60e01b8152600090819073a7e24f80E66bb09819D813e9c4b1B176e22C2d449063da98f02b906107ca9062ffffff198816908790600190600401614854565b60206040518083038186803b1580156107e257600080fd5b505af41580156107f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081a9190614703565b905060fc811161082b579050610b94565b8060fd141561098a5773a7e24f80E66bb09819D813e9c4b1B176e22C2d4463c197cfef62ffffff198616610860866001614947565b60026040518463ffffffff1660e01b815260040161088093929190614854565b60206040518083038186803b15801561089857600080fd5b505af41580156108ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d09190614703565b91506108db82614276565b60ff166003146109855760405163373f671760e11b81526109839073a7e24f80E66bb09819D813e9c4b1B176e22C2d4490636e7ece2e9061092e9062ffffff198916908890600390600090600401614875565b60206040518083038186803b15801561094657600080fd5b505af415801561095a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097e91906146a4565b614486565b505b610b92565b8060fe1415610a8d5773a7e24f80E66bb09819D813e9c4b1B176e22C2d4463c197cfef62ffffff1986166109bf866001614947565b60046040518463ffffffff1660e01b81526004016109df93929190614854565b60206040518083038186803b1580156109f757600080fd5b505af4158015610a0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2f9190614703565b9150610a3a82614276565b60ff166005146109855760405163373f671760e11b81526109839073a7e24f80E66bb09819D813e9c4b1B176e22C2d4490636e7ece2e9061092e9062ffffff198916908890600590600090600401614875565b8060ff1415610b925773a7e24f80E66bb09819D813e9c4b1B176e22C2d4463c197cfef62ffffff198616610ac2866001614947565b60086040518463ffffffff1660e01b8152600401610ae293929190614854565b60206040518083038186803b158015610afa57600080fd5b505af4158015610b0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b329190614703565b9150610b3d82614276565b60ff16600914610b925760405163373f671760e11b8152610b909073a7e24f80E66bb09819D813e9c4b1B176e22C2d4490636e7ece2e9061092e9062ffffff198916908890600990600090600401614875565b505b505b92915050565b600081600373a7e24f80E66bb09819D813e9c4b1B176e22C2d4463a60a728262ffffff198416836040518363ffffffff1660e01b8152600401610bde9291906148f7565b60206040518083038186803b158015610bf657600080fd5b505af4158015610c0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2e91906146a4565b506040516338c17a3f60e01b815273a7e24f80E66bb09819D813e9c4b1B176e22C2d44906338c17a3f90610c729062ffffff19881690600090602090600401614854565b60206040518083038186803b158015610c8a57600080fd5b505af4158015610c9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc29190614703565b92505b5050919050565b600081601073a7e24f80E66bb09819D813e9c4b1B176e22C2d4463a60a728262ffffff198416836040518363ffffffff1660e01b8152600401610d109291906148f7565b60206040518083038186803b158015610d2857600080fd5b505af4158015610d3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6091906146a4565b5073a7e24f80E66bb09819D813e9c4b1B176e22C2d446340bec88f610d84866142cf565b60405160e083901b6001600160e01b03191681526004810191909152602401610c72565b6000606081805b6020811015610e1c578285610dc583601f614b1c565b60208110610de357634e487b7160e01b600052603260045260246000fd5b1a60f81b604051602001610df8929190614814565b60405160208183030381529060405292508080610e1490614b8b565b915050610daf565b50506020015192915050565b600081600473a7e24f80E66bb09819D813e9c4b1B176e22C2d4463a60a728262ffffff198416836040518363ffffffff1660e01b8152600401610e6c9291906148f7565b60206040518083038186803b158015610e8457600080fd5b505af4158015610e98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ebc91906146a4565b506000610eca856024610783565b9050600081610ed883614276565b610ee390602461498a565b60ff16610ef0919061495f565b60405163c197cfef60e01b81526001600160401b0391909116915073a7e24f80E66bb09819D813e9c4b1B176e22C2d449063c197cfef90610f3f9062ffffff198a169085906004908101614854565b60206040518083038186803b158015610f5757600080fd5b505af4158015610f6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8f9190614703565b9695505050505050565b6000818173a7e24f80E66bb09819D813e9c4b1B176e22C2d4463a60a728262ffffff198416836040518363ffffffff1660e01b8152600401610fdc9291906148f7565b60206040518083038186803b158015610ff457600080fd5b505af4158015611008573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102c91906146a4565b50604051639cb855cb60e01b815260209073a7e24f80E66bb09819D813e9c4b1B176e22C2d4490639cb855cb9061106d9062ffffff19891690600401614843565b60206040518083038186803b15801561108557600080fd5b505af4158015611099573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110bd91906147ed565b6110c79190614bba565b6001600160601b0316156111585773a7e24f80E66bb09819D813e9c4b1B176e22C2d446365acccba6040518163ffffffff1660e01b815260040160206040518083038186803b15801561111957600080fd5b505af415801561112d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115191906146a4565b9250610cc5565b73a7e24f80E66bb09819D813e9c4b1B176e22C2d446308d5a72762ffffff19861660145b6040518363ffffffff1660e01b81526004016111999291906148f7565b60206040518083038186803b1580156111b157600080fd5b505af41580156111c5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc291906146a4565b6000818173a7e24f80E66bb09819D813e9c4b1B176e22C2d4463a60a728262ffffff198416836040518363ffffffff1660e01b815260040161122c9291906148f7565b60206040518083038186803b15801561124457600080fd5b505af4158015611258573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127c91906146a4565b50604051639cb855cb60e01b815273a7e24f80E66bb09819D813e9c4b1B176e22C2d4490639cb855cb906112ba9062ffffff19881690600401614843565b60206040518083038186803b1580156112d257600080fd5b505af41580156112e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130a91906147ed565b6001600160601b031660501461135e5773a7e24f80E66bb09819D813e9c4b1B176e22C2d446365acccba6040518163ffffffff1660e01b815260040160206040518083038186803b15801561111957600080fd5b73a7e24f80E66bb09819D813e9c4b1B176e22C2d446308d5a72762ffffff198616601061117c565b600082600673a7e24f80E66bb09819D813e9c4b1B176e22C2d4463a60a728262ffffff198416836040518363ffffffff1660e01b81526004016113ca9291906148f7565b60206040518083038186803b1580156113e257600080fd5b505af41580156113f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141a91906146a4565b506000611428866000610783565b604051639cb855cb60e01b81526001600160401b0391909116915060009073a7e24f80E66bb09819D813e9c4b1B176e22C2d4490639cb855cb906114769062ffffff198b1690600401614843565b60206040518083038186803b15801561148e57600080fd5b505af41580156114a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c691906147ed565b6001600160601b031690508186106115185760405162461bcd60e51b815260206004820152601060248201526f2b34b7103932b0b21037bb32b9393ab760811b60448201526064015b60405180910390fd5b600061152383614276565b60ff1690506000805b888110156115f85773a7e24f80E66bb09819D813e9c4b1B176e22C2d4463758a15c862ffffff198c1661155f8688614b1c565b60056040518463ffffffff1660e01b815260040161157f939291906148d2565b60206040518083038186803b15801561159757600080fd5b505af41580156115ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115cf91906146a4565b91506115da82611d42565b6115e49084614947565b92506115f1600182614947565b905061152c565b5073a7e24f80E66bb09819D813e9c4b1B176e22C2d4463758a15c862ffffff198b166116248587614b1c565b60056040518463ffffffff1660e01b8152600401611644939291906148d2565b60206040518083038186803b15801561165c57600080fd5b505af4158015611670573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061169491906146a4565b905060006116a182611d42565b60405163373f671760e11b815290915073a7e24f80E66bb09819D813e9c4b1B176e22C2d4490636e7ece2e906116e79062ffffff198e1690879086906004908101614875565b60206040518083038186803b1580156116ff57600080fd5b505af4158015611713573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173791906146a4565b9a9950505050505050505050565b600080611753846000610783565b604051639cb855cb60e01b81526001600160401b0391909116915060009073a7e24f80E66bb09819D813e9c4b1B176e22C2d4490639cb855cb906117a19062ffffff19891690600401614843565b60206040518083038186803b1580156117b957600080fd5b505af41580156117cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f191906147ed565b6001600160601b0316905081841061183f5760405162461bcd60e51b81526020600482015260116024820152702b37baba103932b0b21037bb32b9393ab760791b604482015260640161150f565b600061184a83614276565b60ff1690506000805b8681101561191f5773a7e24f80E66bb09819D813e9c4b1B176e22C2d4463758a15c862ffffff198a166118868688614b1c565b600e6040518463ffffffff1660e01b81526004016118a6939291906148d2565b60206040518083038186803b1580156118be57600080fd5b505af41580156118d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f691906146a4565b915061190182612ed6565b61190b9084614947565b9250611918600182614947565b9050611853565b5073a7e24f80E66bb09819D813e9c4b1B176e22C2d4463758a15c862ffffff19891661194b8587614b1c565b600e6040518463ffffffff1660e01b815260040161196b939291906148d2565b60206040518083038186803b15801561198357600080fd5b505af4158015611997573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119bb91906146a4565b905060006119c882612ed6565b60405163373f671760e11b815290915073a7e24f80E66bb09819D813e9c4b1B176e22C2d4490636e7ece2e90611a0f9062ffffff198c169087908690600d90600401614875565b60206040518083038186803b158015611a2757600080fd5b505af4158015611a3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a5f91906146a4565b98975050505050505050565b600081601073a7e24f80E66bb09819D813e9c4b1B176e22C2d4463a60a728262ffffff198416836040518363ffffffff1660e01b8152600401611aaf9291906148f7565b60206040518083038186803b158015611ac757600080fd5b505af4158015611adb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aff91906146a4565b5060405163c197cfef60e01b815260009073a7e24f80E66bb09819D813e9c4b1B176e22C2d449063c197cfef90611b469062ffffff19891690604890600390600401614854565b60206040518083038186803b158015611b5e57600080fd5b505af4158015611b72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b969190614703565b60405163da98f02b60e01b815290915060029073a7e24f80E66bb09819D813e9c4b1B176e22C2d449063da98f02b90611bdf9062ffffff198a1690604b90600190600401614854565b60206040518083038186803b158015611bf757600080fd5b505af4158015611c0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c2f9190614703565b11611c875760405162461bcd60e51b815260206004820152602260248201527f566965774254433a20696e76616c69642074617267657420646966666963756c604482015261747960f01b606482015260840161150f565b60405163da98f02b60e01b815260009060039073a7e24f80E66bb09819D813e9c4b1B176e22C2d449063da98f02b90611cd09062ffffff198b1690604b90600190600401614854565b60206040518083038186803b158015611ce857600080fd5b505af4158015611cfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d209190614703565b611d2a9190614b1c565b9050611d3881610100614a2f565b610f8f9083614afd565b600081600573a7e24f80E66bb09819D813e9c4b1B176e22C2d4463a60a728262ffffff198416836040518363ffffffff1660e01b8152600401611d869291906148f7565b60206040518083038186803b158015611d9e57600080fd5b505af4158015611db2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dd691906146a4565b506000611de4856024610783565b9050806001600160401b0316611df982614276565b60ff16611e069190614947565b611e11906024614947565b611e1c906004614947565b95945050505050565b600060405183815282602082015260208160408360025afa5060208160208360025afa50519392505050565b600081601073a7e24f80E66bb09819D813e9c4b1B176e22C2d4463a60a728262ffffff198416836040518363ffffffff1660e01b8152600401611e959291906148f7565b60206040518083038186803b158015611ead57600080fd5b505af4158015611ec1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee591906146a4565b506040516338c17a3f60e01b815273a7e24f80E66bb09819D813e9c4b1B176e22C2d44906338c17a3f90610c729062ffffff198816906004906020908201614854565b60405163c197cfef60e01b815260009073a7e24f80E66bb09819D813e9c4b1B176e22C2d449063c197cfef90611f6d9062ffffff198616908590600890600401614854565b60206040518083038186803b158015611f8557600080fd5b505af4158015611f99573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077b9190614703565b6000818173a7e24f80E66bb09819D813e9c4b1B176e22C2d4463a60a728262ffffff198416836040518363ffffffff1660e01b81526004016120009291906148f7565b60206040518083038186803b15801561201857600080fd5b505af415801561202c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061205091906146a4565b50604051639cb855cb60e01b815273a7e24f80E66bb09819D813e9c4b1B176e22C2d4490639cb855cb9061208e9062ffffff19881690600401614843565b60206040518083038186803b1580156120a657600080fd5b505af41580156120ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120de91906147ed565b6001600160601b031661212f5773a7e24f80E66bb09819D813e9c4b1B176e22C2d446365acccba6040518163ffffffff1660e01b815260040160206040518083038186803b15801561111957600080fd5b600061213c856000610783565b604051639cb855cb60e01b815290915060009073a7e24f80E66bb09819D813e9c4b1B176e22C2d4490639cb855cb9061217f9062ffffff198a1690600401614843565b60206040518083038186803b15801561219757600080fd5b505af41580156121ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121cf91906147ed565b6001600160601b031690506001600160401b03821661226d5773a7e24f80E66bb09819D813e9c4b1B176e22C2d446365acccba6040518163ffffffff1660e01b815260040160206040518083038186803b15801561222c57600080fd5b505af4158015612240573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061226491906146a4565b94505050610cc5565b600061227883614276565b60ff16905060005b836001600160401b03168110156123e75782821061231f5773a7e24f80E66bb09819D813e9c4b1B176e22C2d446365acccba6040518163ffffffff1660e01b815260040160206040518083038186803b1580156122dc57600080fd5b505af41580156122f0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061231491906146a4565b965050505050610cc5565b600073a7e24f80E66bb09819D813e9c4b1B176e22C2d4463758a15c862ffffff198b1661234c8688614b1c565b600e6040518463ffffffff1660e01b815260040161236c939291906148d2565b60206040518083038186803b15801561238457600080fd5b505af4158015612398573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123bc91906146a4565b90506123c781612ed6565b6123d19084614947565b92505080806123df90614b8b565b915050612280565b508181146124755773a7e24f80E66bb09819D813e9c4b1B176e22C2d446365acccba6040518163ffffffff1660e01b815260040160206040518083038186803b15801561243357600080fd5b505af4158015612447573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061246b91906146a4565b9550505050610cc5565b73a7e24f80E66bb09819D813e9c4b1B176e22C2d446308d5a72762ffffff198916600f5b6040518363ffffffff1660e01b81526004016124b69291906148f7565b60206040518083038186803b1580156124ce57600080fd5b505af41580156124e2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061250691906146a4565b979650505050505050565b6000818173a7e24f80E66bb09819D813e9c4b1B176e22C2d4463a60a728262ffffff198416836040518363ffffffff1660e01b81526004016125549291906148f7565b60206040518083038186803b15801561256c57600080fd5b505af4158015612580573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125a491906146a4565b50604051639cb855cb60e01b815273a7e24f80E66bb09819D813e9c4b1B176e22C2d4490639cb855cb906125e29062ffffff19881690600401614843565b60206040518083038186803b1580156125fa57600080fd5b505af415801561260e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061263291906147ed565b6001600160601b03166126835773a7e24f80E66bb09819D813e9c4b1B176e22C2d446365acccba6040518163ffffffff1660e01b815260040160206040518083038186803b15801561111957600080fd5b6000612690856000610783565b604051639cb855cb60e01b815290915060009073a7e24f80E66bb09819D813e9c4b1B176e22C2d4490639cb855cb906126d39062ffffff198a1690600401614843565b60206040518083038186803b1580156126eb57600080fd5b505af41580156126ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061272391906147ed565b6001600160601b031690506001600160401b0382166127805773a7e24f80E66bb09819D813e9c4b1B176e22C2d446365acccba6040518163ffffffff1660e01b815260040160206040518083038186803b15801561222c57600080fd5b600061278b83614276565b60ff16905060005b836001600160401b03168110156128b7578282106127ef5773a7e24f80E66bb09819D813e9c4b1B176e22C2d446365acccba6040518163ffffffff1660e01b815260040160206040518083038186803b1580156122dc57600080fd5b600073a7e24f80E66bb09819D813e9c4b1B176e22C2d4463758a15c862ffffff198b1661281c8688614b1c565b60056040518463ffffffff1660e01b815260040161283c939291906148d2565b60206040518083038186803b15801561285457600080fd5b505af4158015612868573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061288c91906146a4565b905061289781611d42565b6128a19084614947565b92505080806128af90614b8b565b915050612793565b508181146129035773a7e24f80E66bb09819D813e9c4b1B176e22C2d446365acccba6040518163ffffffff1660e01b815260040160206040518083038186803b15801561243357600080fd5b73a7e24f80E66bb09819D813e9c4b1B176e22C2d446308d5a72762ffffff1989166006612499565b6000818173a7e24f80E66bb09819D813e9c4b1B176e22C2d4463a60a728262ffffff198416836040518363ffffffff1660e01b815260040161296e9291906148f7565b60206040518083038186803b15801561298657600080fd5b505af415801561299a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129be91906146a4565b50604051639cb855cb60e01b815273a7e24f80E66bb09819D813e9c4b1B176e22C2d4490639cb855cb906129fc9062ffffff19881690600401614843565b60206040518083038186803b158015612a1457600080fd5b505af4158015612a28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a4c91906147ed565b6001600160601b0316612a9d5773a7e24f80E66bb09819D813e9c4b1B176e22C2d446365acccba6040518163ffffffff1660e01b815260040160206040518083038186803b15801561111957600080fd5b6000612aaa856000610783565b905080612ab682614276565b60ff16612ac3919061495f565b604051639cb855cb60e01b81526001600160401b03919091169073a7e24f80E66bb09819D813e9c4b1B176e22C2d4490639cb855cb90612b0d9062ffffff198a1690600401614843565b60206040518083038186803b158015612b2557600080fd5b505af4158015612b39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b5d91906147ed565b6001600160601b03161415612c04576040516308d5a72760e01b815273a7e24f80E66bb09819D813e9c4b1B176e22C2d44906308d5a72790612bac9062ffffff198916906007906004016148f7565b60206040518083038186803b158015612bc457600080fd5b505af4158015612bd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bfc91906146a4565b935050610cc5565b73a7e24f80E66bb09819D813e9c4b1B176e22C2d446365acccba6040518163ffffffff1660e01b815260040160206040518083038186803b158015612bc457600080fd5b600081600d73a7e24f80E66bb09819D813e9c4b1B176e22C2d4463a60a728262ffffff198416836040518363ffffffff1660e01b8152600401612c8c9291906148f7565b60206040518083038186803b158015612ca457600080fd5b505af4158015612cb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cdc91906146a4565b506000612cea856008610783565b9050600073a7e24f80E66bb09819D813e9c4b1B176e22C2d44636e7ece2e62ffffff198816600885612d1b81614276565b60ff16612d28919061495f565b60076040518563ffffffff1660e01b8152600401612d49949392919061489f565b60206040518083038186803b158015612d6157600080fd5b505af4158015612d75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d9991906146a4565b905073a7e24f80E66bb09819D813e9c4b1B176e22C2d446338c17a3f62ffffff198316612dc585614276565b6040516001600160e01b031960e085901b16815262ffffff19909216600483015260ff908116602483015285166044820152606401610f3f565b600081600373a7e24f80E66bb09819D813e9c4b1B176e22C2d4463a60a728262ffffff198416836040518363ffffffff1660e01b8152600401612e439291906148f7565b60206040518083038186803b158015612e5b57600080fd5b505af4158015612e6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e9391906146a4565b5060405163c197cfef60e01b815273a7e24f80E66bb09819D813e9c4b1B176e22C2d449063c197cfef90610c729062ffffff198816906020906004908101614854565b600081600e73a7e24f80E66bb09819D813e9c4b1B176e22C2d4463a60a728262ffffff198416836040518363ffffffff1660e01b8152600401612f1a9291906148f7565b60206040518083038186803b158015612f3257600080fd5b505af4158015612f46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f6a91906146a4565b506000612f78856008610783565b9050806001600160401b0316612f8d82614276565b60ff16612f9a9190614947565b611e1c906008614947565b6040516338c17a3f60e01b815260009073a7e24f80E66bb09819D813e9c4b1B176e22C2d44906338c17a3f90611f6d9062ffffff19861690602490602090600401614854565b6000818173a7e24f80E66bb09819D813e9c4b1B176e22C2d4463a60a728262ffffff198416836040518363ffffffff1660e01b815260040161302e9291906148f7565b60206040518083038186803b15801561304657600080fd5b505af415801561305a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061307e91906146a4565b50604051639cb855cb60e01b815260509073a7e24f80E66bb09819D813e9c4b1B176e22C2d4490639cb855cb906130bf9062ffffff19891690600401614843565b60206040518083038186803b1580156130d757600080fd5b505af41580156130eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061310f91906147ed565b6131199190614bba565b6001600160601b03161561316b5773a7e24f80E66bb09819D813e9c4b1B176e22C2d446365acccba6040518163ffffffff1660e01b815260040160206040518083038186803b15801561111957600080fd5b73a7e24f80E66bb09819D813e9c4b1B176e22C2d446308d5a72762ffffff198616601161117c565b600081600773a7e24f80E66bb09819D813e9c4b1B176e22C2d4463a60a728262ffffff198416836040518363ffffffff1660e01b81526004016131d79291906148f7565b60206040518083038186803b1580156131ef57600080fd5b505af4158015613203573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061322791906146a4565b50604051639cb855cb60e01b815260009073a7e24f80E66bb09819D813e9c4b1B176e22C2d4490639cb855cb906132689062ffffff19891690600401614843565b60206040518083038186803b15801561328057600080fd5b505af4158015613294573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132b891906147ed565b6001600160601b0316905060006132d0866000610783565b6001600160401b0316905060228111806132ea5750601681105b806132ff5750816132fc826001614947565b14155b156133485773a7e24f80E66bb09819D813e9c4b1B176e22C2d446365acccba6040518163ffffffff1660e01b815260040160206040518083038186803b15801561222c57600080fd5b8060191480156133ec575060405163da98f02b60e01b815273a7e24f80E66bb09819D813e9c4b1B176e22C2d449063da98f02b906133959062ffffff198a16906000906004908101614854565b60206040518083038186803b1580156133ad57600080fd5b505af41580156133c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133e59190614703565b631976a914145b8015613494575073a7e24f80E66bb09819D813e9c4b1B176e22C2d4463da98f02b62ffffff19881661341f600286614b1c565b60026040518463ffffffff1660e01b815260040161343f93929190614854565b60206040518083038186803b15801561345757600080fd5b505af415801561346b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061348f9190614703565b6188ac145b156134f85773a7e24f80E66bb09819D813e9c4b1B176e22C2d44636e7ece2e62ffffff1988166004601460085b6040518563ffffffff1660e01b81526004016134e09493929190614875565b60206040518083038186803b15801561222c57600080fd5b80601714801561359c575060405163da98f02b60e01b815273a7e24f80E66bb09819D813e9c4b1B176e22C2d449063da98f02b906135469062ffffff198a1690600090600390600401614854565b60206040518083038186803b15801561355e57600080fd5b505af4158015613572573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135969190614703565b6217a914145b8015613643575073a7e24f80E66bb09819D813e9c4b1B176e22C2d4463da98f02b62ffffff1988166135cf600186614b1c565b60016040518463ffffffff1660e01b81526004016135ef93929190614854565b60206040518083038186803b15801561360757600080fd5b505af415801561361b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061363f9190614703565b6087145b156136745773a7e24f80E66bb09819D813e9c4b1B176e22C2d44636e7ece2e62ffffff19881660036014600b6134c1565b60405163da98f02b60e01b815273a7e24f80E66bb09819D813e9c4b1B176e22C2d449063da98f02b906136b69062ffffff198a16906001908190600401614854565b60206040518083038186803b1580156136ce57600080fd5b505af41580156136e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137069190614703565b6138a45760405163da98f02b60e01b815260009073a7e24f80E66bb09819D813e9c4b1B176e22C2d449063da98f02b906137509062ffffff198b1690600290600190600401614854565b60206040518083038186803b15801561376857600080fd5b505af415801561377c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137a09190614703565b9050816022141580156137b4575081601614155b806137c957506137c5600283614b1c565b8114155b156138125773a7e24f80E66bb09819D813e9c4b1B176e22C2d446365acccba6040518163ffffffff1660e01b815260040160206040518083038186803b15801561243357600080fd5b600081602014613823576009613826565b600a5b601481111561384557634e487b7160e01b600052602160045260246000fd5b60405163373f671760e11b815290915073a7e24f80E66bb09819D813e9c4b1B176e22C2d4490636e7ece2e9061388c9062ffffff198c169060039087908790600401614875565b60206040518083038186803b1580156122dc57600080fd5b73a7e24f80E66bb09819D813e9c4b1B176e22C2d446365acccba6040518163ffffffff1660e01b815260040160206040518083038186803b1580156138e857600080fd5b505af41580156138fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8f91906146a4565b60008061392d8484614b1c565b905061393d6004621275006149af565b811015613955576139526004621275006149af565b90505b613963621275006004614afd565b81111561397b57613978621275006004614afd565b90505b60008161398b62010000886149af565b6139959190614afd565b90506139a4816212750061467c565b6139b19062010000614afd565b925050505b9392505050565b600081600473a7e24f80E66bb09819D813e9c4b1B176e22C2d4463a60a728262ffffff198416836040518363ffffffff1660e01b8152600401613a019291906148f7565b60206040518083038186803b158015613a1957600080fd5b505af4158015613a2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a5191906146a4565b506000613a5f856024610783565b905073a7e24f80E66bb09819D813e9c4b1B176e22C2d44636e7ece2e62ffffff198716602484613a8e81614276565b60ff16613a9b919061495f565b60025b6040518563ffffffff1660e01b8152600401613abd949392919061489f565b60206040518083038186803b158015613ad557600080fd5b505af4158015613ae9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e1c91906146a4565b600081601073a7e24f80E66bb09819D813e9c4b1B176e22C2d4463a60a728262ffffff198416836040518363ffffffff1660e01b8152600401613b519291906148f7565b60206040518083038186803b158015613b6957600080fd5b505af4158015613b7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ba191906146a4565b50610cc261029a85611a6b565b600081600d73a7e24f80E66bb09819D813e9c4b1B176e22C2d4463a60a728262ffffff198416836040518363ffffffff1660e01b8152600401613bf29291906148f7565b60206040518083038186803b158015613c0a57600080fd5b505af4158015613c1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c4291906146a4565b506040516338c17a3f60e01b815273a7e24f80E66bb09819D813e9c4b1B176e22C2d44906338c17a3f90610c729062ffffff19881690600090600890600401614854565b600082601173a7e24f80E66bb09819D813e9c4b1B176e22C2d4463a60a728262ffffff198416836040518363ffffffff1660e01b8152600401613cca9291906148f7565b60206040518083038186803b158015613ce257600080fd5b505af4158015613cf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d1a91906146a4565b506000613d28856050614afd565b60405163373f671760e11b815290915073a7e24f80E66bb09819D813e9c4b1B176e22C2d4490636e7ece2e90613d709062ffffff198a16908590605090601090600401614875565b60206040518083038186803b1580156138e857600080fd5b600081600473a7e24f80E66bb09819D813e9c4b1B176e22C2d4463a60a728262ffffff198416836040518363ffffffff1660e01b8152600401613dcc9291906148f7565b60206040518083038186803b158015613de457600080fd5b505af4158015613df8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e1c91906146a4565b5060405163373f671760e11b815273a7e24f80E66bb09819D813e9c4b1B176e22C2d4490636e7ece2e906111999062ffffff19881690600090602490600390600401614875565b600081601073a7e24f80E66bb09819D813e9c4b1B176e22C2d4463a60a728262ffffff198416836040518363ffffffff1660e01b8152600401613ea79291906148f7565b60206040518083038186803b158015613ebf57600080fd5b505af4158015613ed3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ef791906146a4565b5060405163c197cfef60e01b815273a7e24f80E66bb09819D813e9c4b1B176e22C2d449063c197cfef90610c729062ffffff198816906044906004908101614854565b600081600773a7e24f80E66bb09819D813e9c4b1B176e22C2d4463a60a728262ffffff198416836040518363ffffffff1660e01b8152600401613f7e9291906148f7565b60206040518083038186803b158015613f9657600080fd5b505af4158015613faa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fce91906146a4565b506000613fdc856000610783565b60405163da98f02b60e01b815290915060009073a7e24f80E66bb09819D813e9c4b1B176e22C2d449063da98f02b906140259062ffffff198a1690600390600190600401614854565b60206040518083038186803b15801561403d57600080fd5b505af4158015614051573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140759190614703565b90506053826001600160401b0316118061409857506004826001600160401b0316105b80614135575060405163da98f02b60e01b815273a7e24f80E66bb09819D813e9c4b1B176e22C2d449063da98f02b906140e09062ffffff198a16906001908190600401614854565b60206040518083038186803b1580156140f857600080fd5b505af415801561410c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141309190614703565b606a14155b806141e95750614146600383614b33565b60405163da98f02b60e01b81526001600160401b03919091169073a7e24f80E66bb09819D813e9c4b1B176e22C2d449063da98f02b906141969062ffffff198b1690600390600190600401614854565b60206040518083038186803b1580156141ae57600080fd5b505af41580156141c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141e69190614703565b14155b156142325773a7e24f80E66bb09819D813e9c4b1B176e22C2d446365acccba6040518163ffffffff1660e01b815260040160206040518083038186803b15801561222c57600080fd5b60405163373f671760e11b815273a7e24f80E66bb09819D813e9c4b1B176e22C2d4490636e7ece2e90613d709062ffffff198a16906004908690600c90830161489f565b600060fc826001600160401b0316116142915750600161077e565b61ffff826001600160401b0316116142ab5750600361077e565b63ffffffff826001600160401b0316116142c75750600561077e565b50600961077e565b600081601073a7e24f80E66bb09819D813e9c4b1B176e22C2d4463a60a728262ffffff198416836040518363ffffffff1660e01b81526004016143139291906148f7565b60206040518083038186803b15801561432b57600080fd5b505af415801561433f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061436391906146a4565b506040516307f6f12360e21b815273a7e24f80E66bb09819D813e9c4b1B176e22C2d4490631fdbc48c90610c729062ffffff19881690600401614843565b600081600d73a7e24f80E66bb09819D813e9c4b1B176e22C2d4463a60a728262ffffff198416836040518363ffffffff1660e01b81526004016143e59291906148f7565b60206040518083038186803b1580156143fd57600080fd5b505af4158015614411573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061443591906146a4565b506000614443856008610783565b905073a7e24f80E66bb09819D813e9c4b1B176e22C2d44636e7ece2e62ffffff19871660088461447281614276565b60ff1661447f919061495f565b6007613a9e565b604051639cb855cb60e01b815260609060009073a7e24f80E66bb09819D813e9c4b1B176e22C2d449063a1ce10e690829063da98f02b9062ffffff1988169086908490639cb855cb906144dd908590600401614843565b60206040518083038186803b1580156144f557600080fd5b505af4158015614509573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061452d91906147ed565b6040518463ffffffff1660e01b815260040161454b93929190614854565b60206040518083038186803b15801561456357600080fd5b505af4158015614577573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061459b9190614703565b6040518263ffffffff1660e01b81526004016145b991815260200190565b604080518083038186803b1580156145d057600080fd5b505af41580156145e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146089190614778565b604080517f4e6f6e2d6d696e696d616c2076617220696e742e20476f7420307800000000006020820152607083901b6dffffffffffffffffffffffffffff1916603b8201528151602d818303018152604d82019283905262461bcd60e51b909252919350915061150f908290605101614914565b60006139b682846149af565b600060208284031215614699578081fd5b81356139b681614c0c565b6000602082840312156146b5578081fd5b81516139b681614c0c565b600080604083850312156146d2578081fd5b82356146dd81614c0c565b946020939093013593505050565b6000602082840312156146fc578081fd5b5035919050565b600060208284031215614714578081fd5b5051919050565b60008060008060808587031215614730578182fd5b84359350602085013561474281614c0c565b93969395505050506040820135916060013590565b60008060408385031215614769578182fd5b50508035926020909101359150565b6000806040838503121561478a578182fd5b505080516020909101519092909150565b6000806000606084860312156147af578283fd5b505081359360208301359350604090920135919050565b6000602082840312156147d7578081fd5b81356001600160401b03811681146139b6578182fd5b6000602082840312156147fe578081fd5b81516001600160601b03811681146139b6578182fd5b60008351614826818460208801614b5b565b6001600160f81b0319939093169190920190815260010192915050565b62ffffff1991909116815260200190565b62ffffff19939093168352602083019190915260ff16604082015260600190565b62ffffff199490941684526020840192909252604083015264ffffffffff16606082015260800190565b62ffffff1994909416845260208401929092526001600160401b0316604083015264ffffffffff16606082015260800190565b62ffffff19939093168352602083019190915264ffffffffff16604082015260600190565b62ffffff1992909216825264ffffffffff16602082015260400190565b6000602082528251806020840152614933816040850160208701614b5b565b601f01601f19169190910160400192915050565b6000821982111561495a5761495a614be0565b500190565b60006001600160401b0380831681851680830382111561498157614981614be0565b01949350505050565b600060ff821660ff84168060ff038211156149a7576149a7614be0565b019392505050565b6000826149be576149be614bf6565b500490565b60006001600160601b03808416806149dd576149dd614bf6565b92169190910492915050565b80825b60018086116149fb5750614a26565b818704821115614a0d57614a0d614be0565b80861615614a1a57918102915b9490941c9380026149ec565b94509492505050565b60006139b66000198484600082614a48575060016139b6565b81614a55575060006139b6565b8160018114614a6b5760028114614a7557614aa2565b60019150506139b6565b60ff841115614a8657614a86614be0565b6001841b915084821115614a9c57614a9c614be0565b506139b6565b5060208310610133831016604e8410600b8410161715614ad5575081810a83811115614ad057614ad0614be0565b6139b6565b614ae284848460016149e9565b808604821115614af457614af4614be0565b02949350505050565b6000816000190483118215151615614b1757614b17614be0565b500290565b600082821015614b2e57614b2e614be0565b500390565b60006001600160401b0383811690831681811015614b5357614b53614be0565b039392505050565b60005b83811015614b76578181015183820152602001614b5e565b83811115614b85576000848401525b50505050565b6000600019821415614b9f57614b9f614be0565b5060010190565b600082614bb557614bb5614bf6565b500690565b60006001600160601b0380841680614bd457614bd4614bf6565b92169190910692915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b62ffffff1981168114614c1e57600080fd5b5056fea264697066735822122008ad39fdea71e405608bf2f5cdcdacc97a8cecf6ac3ba1d91b8839387d5b574064736f6c63430008020033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106102475760003560e01c80638c1be5c911610145578063cddb4507116100c2578063f172b06011610086578063f172b0601461052e578063f594d59f14610541578063f867eaac14610554578063f89fd37514610579578063fe5a59b61461058c57610247565b8063cddb4507146104bd578063d4258ca7146104d0578063dccd7f0f146104dc578063df90556114610508578063e6e3b2be1461051b57610247565b80639dbf87aa116101095780639dbf87aa1461045e578063a54d8e6414610471578063ade29ec114610484578063b259123214610497578063cb71c49b146104aa57610247565b80638c1be5c9146104095780638cc715691461041c578063905bf5281461042557806393c90681146104385780639d8e299f1461044b57610247565b80634ed7e908116101d3578063701acc1f11610197578063701acc1f146103aa578063707de626146103bd578063746a1631146103d05780637e5dc0eb146103e357806388330e53146103f657610247565b80634ed7e9081461034b57806357315b481461035e57806360234fc51461037157806362ef7dad146103845780636c3029ad1461039757610247565b80632ea56fa11161021a5780632ea56fa1146102ca578063372da9ed146102dd5780633c445e3c146102f0578063451f393d14610303578063454495e61461032b57610247565b8063056e04ec1461024c57806307d1afa914610269578063097948031461028c578063208d043a1461029f575b600080fd5b6102566212750081565b6040519081526020015b60405180910390f35b61027c61027736600461471b565b61059f565b6040519015158152602001610260565b61025661029a3660046146eb565b61076a565b6102b26102ad3660046146c0565b610783565b6040516001600160401b039091168152602001610260565b6102566102d8366004614688565b610b9a565b6102566102eb366004614688565b610ccc565b6102566102fe3660046146eb565b610da8565b610316610311366004614688565b610e28565b60405163ffffffff9091168152602001610260565b61033e610339366004614688565b610f99565b6040516102609190614843565b61033e610359366004614688565b6111e9565b61033e61036c3660046146c0565b611386565b61033e61037f3660046146c0565b611745565b610256610392366004614688565b611a6b565b6102566103a5366004614688565b611d42565b6102566103b8366004614757565b611e25565b6102566103cb366004614688565b611e51565b6102b26103de366004614688565b611f28565b61033e6103f1366004614688565b611fbd565b61033e610404366004614688565b612511565b61033e610417366004614688565b61292b565b6102566107e081565b610256610433366004614688565b612c48565b610316610446366004614688565b612dff565b610256610459366004614688565b612ed6565b61025661046c366004614688565b612fa5565b61033e61047f366004614688565b612feb565b61033e610492366004614688565b613193565b6102566104a536600461479b565b613920565b61033e6104b8366004614688565b6139bd565b6102566104cb366004614688565b613b0d565b61025661ffff60d01b81565b6104ef6104ea366004614688565b613bae565b6040516001600160c01b03199091168152602001610260565b61033e6105163660046146c0565b613c86565b61033e610529366004614688565b613d88565b61031661053c366004614688565b613e63565b61033e61054f366004614688565b613f3a565b6105676105623660046147c6565b614276565b60405160ff9091168152602001610260565b610256610587366004614688565b6142cf565b61033e61059a366004614688565b6143a1565b604051639cb855cb60e01b8152600090819060209073__$23851852cf97a1ff2525b5bae2bad8f731$__90639cb855cb906105e49062ffffff198a1690600401614843565b60206040518083038186803b1580156105fc57600080fd5b505af4158015610610573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063491906147ed565b61063e91906149c3565b6001600160601b0316905080610658575050838214610762565b828660005b8381101561075057600073__$23851852cf97a1ff2525b5bae2bad8f731$__6338c17a3f62ffffff198b16610693856020614afd565b60206040518463ffffffff1660e01b81526004016106b393929190614854565b60206040518083038186803b1580156106cb57600080fd5b505af41580156106df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107039190614703565b9050610710600285614ba6565b60011415610729576107228184611e25565b9250610736565b6107338382611e25565b92505b5060019290921c918061074881614b8b565b91505061065d565b508561075b82610da8565b1493505050505b949350505050565b600061077b8261ffff60d01b6149af565b90505b919050565b60405163da98f02b60e01b8152600090819073__$23851852cf97a1ff2525b5bae2bad8f731$__9063da98f02b906107ca9062ffffff198816908790600190600401614854565b60206040518083038186803b1580156107e257600080fd5b505af41580156107f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081a9190614703565b905060fc811161082b579050610b94565b8060fd141561098a5773__$23851852cf97a1ff2525b5bae2bad8f731$__63c197cfef62ffffff198616610860866001614947565b60026040518463ffffffff1660e01b815260040161088093929190614854565b60206040518083038186803b15801561089857600080fd5b505af41580156108ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d09190614703565b91506108db82614276565b60ff166003146109855760405163373f671760e11b81526109839073__$23851852cf97a1ff2525b5bae2bad8f731$__90636e7ece2e9061092e9062ffffff198916908890600390600090600401614875565b60206040518083038186803b15801561094657600080fd5b505af415801561095a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097e91906146a4565b614486565b505b610b92565b8060fe1415610a8d5773__$23851852cf97a1ff2525b5bae2bad8f731$__63c197cfef62ffffff1986166109bf866001614947565b60046040518463ffffffff1660e01b81526004016109df93929190614854565b60206040518083038186803b1580156109f757600080fd5b505af4158015610a0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a2f9190614703565b9150610a3a82614276565b60ff166005146109855760405163373f671760e11b81526109839073__$23851852cf97a1ff2525b5bae2bad8f731$__90636e7ece2e9061092e9062ffffff198916908890600590600090600401614875565b8060ff1415610b925773__$23851852cf97a1ff2525b5bae2bad8f731$__63c197cfef62ffffff198616610ac2866001614947565b60086040518463ffffffff1660e01b8152600401610ae293929190614854565b60206040518083038186803b158015610afa57600080fd5b505af4158015610b0e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b329190614703565b9150610b3d82614276565b60ff16600914610b925760405163373f671760e11b8152610b909073__$23851852cf97a1ff2525b5bae2bad8f731$__90636e7ece2e9061092e9062ffffff198916908890600990600090600401614875565b505b505b92915050565b600081600373__$23851852cf97a1ff2525b5bae2bad8f731$__63a60a728262ffffff198416836040518363ffffffff1660e01b8152600401610bde9291906148f7565b60206040518083038186803b158015610bf657600080fd5b505af4158015610c0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2e91906146a4565b506040516338c17a3f60e01b815273__$23851852cf97a1ff2525b5bae2bad8f731$__906338c17a3f90610c729062ffffff19881690600090602090600401614854565b60206040518083038186803b158015610c8a57600080fd5b505af4158015610c9e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc29190614703565b92505b5050919050565b600081601073__$23851852cf97a1ff2525b5bae2bad8f731$__63a60a728262ffffff198416836040518363ffffffff1660e01b8152600401610d109291906148f7565b60206040518083038186803b158015610d2857600080fd5b505af4158015610d3c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6091906146a4565b5073__$23851852cf97a1ff2525b5bae2bad8f731$__6340bec88f610d84866142cf565b60405160e083901b6001600160e01b03191681526004810191909152602401610c72565b6000606081805b6020811015610e1c578285610dc583601f614b1c565b60208110610de357634e487b7160e01b600052603260045260246000fd5b1a60f81b604051602001610df8929190614814565b60405160208183030381529060405292508080610e1490614b8b565b915050610daf565b50506020015192915050565b600081600473__$23851852cf97a1ff2525b5bae2bad8f731$__63a60a728262ffffff198416836040518363ffffffff1660e01b8152600401610e6c9291906148f7565b60206040518083038186803b158015610e8457600080fd5b505af4158015610e98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ebc91906146a4565b506000610eca856024610783565b9050600081610ed883614276565b610ee390602461498a565b60ff16610ef0919061495f565b60405163c197cfef60e01b81526001600160401b0391909116915073__$23851852cf97a1ff2525b5bae2bad8f731$__9063c197cfef90610f3f9062ffffff198a169085906004908101614854565b60206040518083038186803b158015610f5757600080fd5b505af4158015610f6b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8f9190614703565b9695505050505050565b6000818173__$23851852cf97a1ff2525b5bae2bad8f731$__63a60a728262ffffff198416836040518363ffffffff1660e01b8152600401610fdc9291906148f7565b60206040518083038186803b158015610ff457600080fd5b505af4158015611008573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061102c91906146a4565b50604051639cb855cb60e01b815260209073__$23851852cf97a1ff2525b5bae2bad8f731$__90639cb855cb9061106d9062ffffff19891690600401614843565b60206040518083038186803b15801561108557600080fd5b505af4158015611099573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110bd91906147ed565b6110c79190614bba565b6001600160601b0316156111585773__$23851852cf97a1ff2525b5bae2bad8f731$__6365acccba6040518163ffffffff1660e01b815260040160206040518083038186803b15801561111957600080fd5b505af415801561112d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115191906146a4565b9250610cc5565b73__$23851852cf97a1ff2525b5bae2bad8f731$__6308d5a72762ffffff19861660145b6040518363ffffffff1660e01b81526004016111999291906148f7565b60206040518083038186803b1580156111b157600080fd5b505af41580156111c5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc291906146a4565b6000818173__$23851852cf97a1ff2525b5bae2bad8f731$__63a60a728262ffffff198416836040518363ffffffff1660e01b815260040161122c9291906148f7565b60206040518083038186803b15801561124457600080fd5b505af4158015611258573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061127c91906146a4565b50604051639cb855cb60e01b815273__$23851852cf97a1ff2525b5bae2bad8f731$__90639cb855cb906112ba9062ffffff19881690600401614843565b60206040518083038186803b1580156112d257600080fd5b505af41580156112e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130a91906147ed565b6001600160601b031660501461135e5773__$23851852cf97a1ff2525b5bae2bad8f731$__6365acccba6040518163ffffffff1660e01b815260040160206040518083038186803b15801561111957600080fd5b73__$23851852cf97a1ff2525b5bae2bad8f731$__6308d5a72762ffffff198616601061117c565b600082600673__$23851852cf97a1ff2525b5bae2bad8f731$__63a60a728262ffffff198416836040518363ffffffff1660e01b81526004016113ca9291906148f7565b60206040518083038186803b1580156113e257600080fd5b505af41580156113f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061141a91906146a4565b506000611428866000610783565b604051639cb855cb60e01b81526001600160401b0391909116915060009073__$23851852cf97a1ff2525b5bae2bad8f731$__90639cb855cb906114769062ffffff198b1690600401614843565b60206040518083038186803b15801561148e57600080fd5b505af41580156114a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c691906147ed565b6001600160601b031690508186106115185760405162461bcd60e51b815260206004820152601060248201526f2b34b7103932b0b21037bb32b9393ab760811b60448201526064015b60405180910390fd5b600061152383614276565b60ff1690506000805b888110156115f85773__$23851852cf97a1ff2525b5bae2bad8f731$__63758a15c862ffffff198c1661155f8688614b1c565b60056040518463ffffffff1660e01b815260040161157f939291906148d2565b60206040518083038186803b15801561159757600080fd5b505af41580156115ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115cf91906146a4565b91506115da82611d42565b6115e49084614947565b92506115f1600182614947565b905061152c565b5073__$23851852cf97a1ff2525b5bae2bad8f731$__63758a15c862ffffff198b166116248587614b1c565b60056040518463ffffffff1660e01b8152600401611644939291906148d2565b60206040518083038186803b15801561165c57600080fd5b505af4158015611670573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061169491906146a4565b905060006116a182611d42565b60405163373f671760e11b815290915073__$23851852cf97a1ff2525b5bae2bad8f731$__90636e7ece2e906116e79062ffffff198e1690879086906004908101614875565b60206040518083038186803b1580156116ff57600080fd5b505af4158015611713573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173791906146a4565b9a9950505050505050505050565b600080611753846000610783565b604051639cb855cb60e01b81526001600160401b0391909116915060009073__$23851852cf97a1ff2525b5bae2bad8f731$__90639cb855cb906117a19062ffffff19891690600401614843565b60206040518083038186803b1580156117b957600080fd5b505af41580156117cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f191906147ed565b6001600160601b0316905081841061183f5760405162461bcd60e51b81526020600482015260116024820152702b37baba103932b0b21037bb32b9393ab760791b604482015260640161150f565b600061184a83614276565b60ff1690506000805b8681101561191f5773__$23851852cf97a1ff2525b5bae2bad8f731$__63758a15c862ffffff198a166118868688614b1c565b600e6040518463ffffffff1660e01b81526004016118a6939291906148d2565b60206040518083038186803b1580156118be57600080fd5b505af41580156118d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118f691906146a4565b915061190182612ed6565b61190b9084614947565b9250611918600182614947565b9050611853565b5073__$23851852cf97a1ff2525b5bae2bad8f731$__63758a15c862ffffff19891661194b8587614b1c565b600e6040518463ffffffff1660e01b815260040161196b939291906148d2565b60206040518083038186803b15801561198357600080fd5b505af4158015611997573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119bb91906146a4565b905060006119c882612ed6565b60405163373f671760e11b815290915073__$23851852cf97a1ff2525b5bae2bad8f731$__90636e7ece2e90611a0f9062ffffff198c169087908690600d90600401614875565b60206040518083038186803b158015611a2757600080fd5b505af4158015611a3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a5f91906146a4565b98975050505050505050565b600081601073__$23851852cf97a1ff2525b5bae2bad8f731$__63a60a728262ffffff198416836040518363ffffffff1660e01b8152600401611aaf9291906148f7565b60206040518083038186803b158015611ac757600080fd5b505af4158015611adb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aff91906146a4565b5060405163c197cfef60e01b815260009073__$23851852cf97a1ff2525b5bae2bad8f731$__9063c197cfef90611b469062ffffff19891690604890600390600401614854565b60206040518083038186803b158015611b5e57600080fd5b505af4158015611b72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b969190614703565b60405163da98f02b60e01b815290915060029073__$23851852cf97a1ff2525b5bae2bad8f731$__9063da98f02b90611bdf9062ffffff198a1690604b90600190600401614854565b60206040518083038186803b158015611bf757600080fd5b505af4158015611c0b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c2f9190614703565b11611c875760405162461bcd60e51b815260206004820152602260248201527f566965774254433a20696e76616c69642074617267657420646966666963756c604482015261747960f01b606482015260840161150f565b60405163da98f02b60e01b815260009060039073__$23851852cf97a1ff2525b5bae2bad8f731$__9063da98f02b90611cd09062ffffff198b1690604b90600190600401614854565b60206040518083038186803b158015611ce857600080fd5b505af4158015611cfc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d209190614703565b611d2a9190614b1c565b9050611d3881610100614a2f565b610f8f9083614afd565b600081600573__$23851852cf97a1ff2525b5bae2bad8f731$__63a60a728262ffffff198416836040518363ffffffff1660e01b8152600401611d869291906148f7565b60206040518083038186803b158015611d9e57600080fd5b505af4158015611db2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dd691906146a4565b506000611de4856024610783565b9050806001600160401b0316611df982614276565b60ff16611e069190614947565b611e11906024614947565b611e1c906004614947565b95945050505050565b600060405183815282602082015260208160408360025afa5060208160208360025afa50519392505050565b600081601073__$23851852cf97a1ff2525b5bae2bad8f731$__63a60a728262ffffff198416836040518363ffffffff1660e01b8152600401611e959291906148f7565b60206040518083038186803b158015611ead57600080fd5b505af4158015611ec1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee591906146a4565b506040516338c17a3f60e01b815273__$23851852cf97a1ff2525b5bae2bad8f731$__906338c17a3f90610c729062ffffff198816906004906020908201614854565b60405163c197cfef60e01b815260009073__$23851852cf97a1ff2525b5bae2bad8f731$__9063c197cfef90611f6d9062ffffff198616908590600890600401614854565b60206040518083038186803b158015611f8557600080fd5b505af4158015611f99573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061077b9190614703565b6000818173__$23851852cf97a1ff2525b5bae2bad8f731$__63a60a728262ffffff198416836040518363ffffffff1660e01b81526004016120009291906148f7565b60206040518083038186803b15801561201857600080fd5b505af415801561202c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061205091906146a4565b50604051639cb855cb60e01b815273__$23851852cf97a1ff2525b5bae2bad8f731$__90639cb855cb9061208e9062ffffff19881690600401614843565b60206040518083038186803b1580156120a657600080fd5b505af41580156120ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120de91906147ed565b6001600160601b031661212f5773__$23851852cf97a1ff2525b5bae2bad8f731$__6365acccba6040518163ffffffff1660e01b815260040160206040518083038186803b15801561111957600080fd5b600061213c856000610783565b604051639cb855cb60e01b815290915060009073__$23851852cf97a1ff2525b5bae2bad8f731$__90639cb855cb9061217f9062ffffff198a1690600401614843565b60206040518083038186803b15801561219757600080fd5b505af41580156121ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121cf91906147ed565b6001600160601b031690506001600160401b03821661226d5773__$23851852cf97a1ff2525b5bae2bad8f731$__6365acccba6040518163ffffffff1660e01b815260040160206040518083038186803b15801561222c57600080fd5b505af4158015612240573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061226491906146a4565b94505050610cc5565b600061227883614276565b60ff16905060005b836001600160401b03168110156123e75782821061231f5773__$23851852cf97a1ff2525b5bae2bad8f731$__6365acccba6040518163ffffffff1660e01b815260040160206040518083038186803b1580156122dc57600080fd5b505af41580156122f0573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061231491906146a4565b965050505050610cc5565b600073__$23851852cf97a1ff2525b5bae2bad8f731$__63758a15c862ffffff198b1661234c8688614b1c565b600e6040518463ffffffff1660e01b815260040161236c939291906148d2565b60206040518083038186803b15801561238457600080fd5b505af4158015612398573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123bc91906146a4565b90506123c781612ed6565b6123d19084614947565b92505080806123df90614b8b565b915050612280565b508181146124755773__$23851852cf97a1ff2525b5bae2bad8f731$__6365acccba6040518163ffffffff1660e01b815260040160206040518083038186803b15801561243357600080fd5b505af4158015612447573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061246b91906146a4565b9550505050610cc5565b73__$23851852cf97a1ff2525b5bae2bad8f731$__6308d5a72762ffffff198916600f5b6040518363ffffffff1660e01b81526004016124b69291906148f7565b60206040518083038186803b1580156124ce57600080fd5b505af41580156124e2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061250691906146a4565b979650505050505050565b6000818173__$23851852cf97a1ff2525b5bae2bad8f731$__63a60a728262ffffff198416836040518363ffffffff1660e01b81526004016125549291906148f7565b60206040518083038186803b15801561256c57600080fd5b505af4158015612580573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125a491906146a4565b50604051639cb855cb60e01b815273__$23851852cf97a1ff2525b5bae2bad8f731$__90639cb855cb906125e29062ffffff19881690600401614843565b60206040518083038186803b1580156125fa57600080fd5b505af415801561260e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061263291906147ed565b6001600160601b03166126835773__$23851852cf97a1ff2525b5bae2bad8f731$__6365acccba6040518163ffffffff1660e01b815260040160206040518083038186803b15801561111957600080fd5b6000612690856000610783565b604051639cb855cb60e01b815290915060009073__$23851852cf97a1ff2525b5bae2bad8f731$__90639cb855cb906126d39062ffffff198a1690600401614843565b60206040518083038186803b1580156126eb57600080fd5b505af41580156126ff573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061272391906147ed565b6001600160601b031690506001600160401b0382166127805773__$23851852cf97a1ff2525b5bae2bad8f731$__6365acccba6040518163ffffffff1660e01b815260040160206040518083038186803b15801561222c57600080fd5b600061278b83614276565b60ff16905060005b836001600160401b03168110156128b7578282106127ef5773__$23851852cf97a1ff2525b5bae2bad8f731$__6365acccba6040518163ffffffff1660e01b815260040160206040518083038186803b1580156122dc57600080fd5b600073__$23851852cf97a1ff2525b5bae2bad8f731$__63758a15c862ffffff198b1661281c8688614b1c565b60056040518463ffffffff1660e01b815260040161283c939291906148d2565b60206040518083038186803b15801561285457600080fd5b505af4158015612868573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061288c91906146a4565b905061289781611d42565b6128a19084614947565b92505080806128af90614b8b565b915050612793565b508181146129035773__$23851852cf97a1ff2525b5bae2bad8f731$__6365acccba6040518163ffffffff1660e01b815260040160206040518083038186803b15801561243357600080fd5b73__$23851852cf97a1ff2525b5bae2bad8f731$__6308d5a72762ffffff1989166006612499565b6000818173__$23851852cf97a1ff2525b5bae2bad8f731$__63a60a728262ffffff198416836040518363ffffffff1660e01b815260040161296e9291906148f7565b60206040518083038186803b15801561298657600080fd5b505af415801561299a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129be91906146a4565b50604051639cb855cb60e01b815273__$23851852cf97a1ff2525b5bae2bad8f731$__90639cb855cb906129fc9062ffffff19881690600401614843565b60206040518083038186803b158015612a1457600080fd5b505af4158015612a28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a4c91906147ed565b6001600160601b0316612a9d5773__$23851852cf97a1ff2525b5bae2bad8f731$__6365acccba6040518163ffffffff1660e01b815260040160206040518083038186803b15801561111957600080fd5b6000612aaa856000610783565b905080612ab682614276565b60ff16612ac3919061495f565b604051639cb855cb60e01b81526001600160401b03919091169073__$23851852cf97a1ff2525b5bae2bad8f731$__90639cb855cb90612b0d9062ffffff198a1690600401614843565b60206040518083038186803b158015612b2557600080fd5b505af4158015612b39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b5d91906147ed565b6001600160601b03161415612c04576040516308d5a72760e01b815273__$23851852cf97a1ff2525b5bae2bad8f731$__906308d5a72790612bac9062ffffff198916906007906004016148f7565b60206040518083038186803b158015612bc457600080fd5b505af4158015612bd8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bfc91906146a4565b935050610cc5565b73__$23851852cf97a1ff2525b5bae2bad8f731$__6365acccba6040518163ffffffff1660e01b815260040160206040518083038186803b158015612bc457600080fd5b600081600d73__$23851852cf97a1ff2525b5bae2bad8f731$__63a60a728262ffffff198416836040518363ffffffff1660e01b8152600401612c8c9291906148f7565b60206040518083038186803b158015612ca457600080fd5b505af4158015612cb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612cdc91906146a4565b506000612cea856008610783565b9050600073__$23851852cf97a1ff2525b5bae2bad8f731$__636e7ece2e62ffffff198816600885612d1b81614276565b60ff16612d28919061495f565b60076040518563ffffffff1660e01b8152600401612d49949392919061489f565b60206040518083038186803b158015612d6157600080fd5b505af4158015612d75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d9991906146a4565b905073__$23851852cf97a1ff2525b5bae2bad8f731$__6338c17a3f62ffffff198316612dc585614276565b6040516001600160e01b031960e085901b16815262ffffff19909216600483015260ff908116602483015285166044820152606401610f3f565b600081600373__$23851852cf97a1ff2525b5bae2bad8f731$__63a60a728262ffffff198416836040518363ffffffff1660e01b8152600401612e439291906148f7565b60206040518083038186803b158015612e5b57600080fd5b505af4158015612e6f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e9391906146a4565b5060405163c197cfef60e01b815273__$23851852cf97a1ff2525b5bae2bad8f731$__9063c197cfef90610c729062ffffff198816906020906004908101614854565b600081600e73__$23851852cf97a1ff2525b5bae2bad8f731$__63a60a728262ffffff198416836040518363ffffffff1660e01b8152600401612f1a9291906148f7565b60206040518083038186803b158015612f3257600080fd5b505af4158015612f46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f6a91906146a4565b506000612f78856008610783565b9050806001600160401b0316612f8d82614276565b60ff16612f9a9190614947565b611e1c906008614947565b6040516338c17a3f60e01b815260009073__$23851852cf97a1ff2525b5bae2bad8f731$__906338c17a3f90611f6d9062ffffff19861690602490602090600401614854565b6000818173__$23851852cf97a1ff2525b5bae2bad8f731$__63a60a728262ffffff198416836040518363ffffffff1660e01b815260040161302e9291906148f7565b60206040518083038186803b15801561304657600080fd5b505af415801561305a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061307e91906146a4565b50604051639cb855cb60e01b815260509073__$23851852cf97a1ff2525b5bae2bad8f731$__90639cb855cb906130bf9062ffffff19891690600401614843565b60206040518083038186803b1580156130d757600080fd5b505af41580156130eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061310f91906147ed565b6131199190614bba565b6001600160601b03161561316b5773__$23851852cf97a1ff2525b5bae2bad8f731$__6365acccba6040518163ffffffff1660e01b815260040160206040518083038186803b15801561111957600080fd5b73__$23851852cf97a1ff2525b5bae2bad8f731$__6308d5a72762ffffff198616601161117c565b600081600773__$23851852cf97a1ff2525b5bae2bad8f731$__63a60a728262ffffff198416836040518363ffffffff1660e01b81526004016131d79291906148f7565b60206040518083038186803b1580156131ef57600080fd5b505af4158015613203573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061322791906146a4565b50604051639cb855cb60e01b815260009073__$23851852cf97a1ff2525b5bae2bad8f731$__90639cb855cb906132689062ffffff19891690600401614843565b60206040518083038186803b15801561328057600080fd5b505af4158015613294573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132b891906147ed565b6001600160601b0316905060006132d0866000610783565b6001600160401b0316905060228111806132ea5750601681105b806132ff5750816132fc826001614947565b14155b156133485773__$23851852cf97a1ff2525b5bae2bad8f731$__6365acccba6040518163ffffffff1660e01b815260040160206040518083038186803b15801561222c57600080fd5b8060191480156133ec575060405163da98f02b60e01b815273__$23851852cf97a1ff2525b5bae2bad8f731$__9063da98f02b906133959062ffffff198a16906000906004908101614854565b60206040518083038186803b1580156133ad57600080fd5b505af41580156133c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133e59190614703565b631976a914145b8015613494575073__$23851852cf97a1ff2525b5bae2bad8f731$__63da98f02b62ffffff19881661341f600286614b1c565b60026040518463ffffffff1660e01b815260040161343f93929190614854565b60206040518083038186803b15801561345757600080fd5b505af415801561346b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061348f9190614703565b6188ac145b156134f85773__$23851852cf97a1ff2525b5bae2bad8f731$__636e7ece2e62ffffff1988166004601460085b6040518563ffffffff1660e01b81526004016134e09493929190614875565b60206040518083038186803b15801561222c57600080fd5b80601714801561359c575060405163da98f02b60e01b815273__$23851852cf97a1ff2525b5bae2bad8f731$__9063da98f02b906135469062ffffff198a1690600090600390600401614854565b60206040518083038186803b15801561355e57600080fd5b505af4158015613572573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135969190614703565b6217a914145b8015613643575073__$23851852cf97a1ff2525b5bae2bad8f731$__63da98f02b62ffffff1988166135cf600186614b1c565b60016040518463ffffffff1660e01b81526004016135ef93929190614854565b60206040518083038186803b15801561360757600080fd5b505af415801561361b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061363f9190614703565b6087145b156136745773__$23851852cf97a1ff2525b5bae2bad8f731$__636e7ece2e62ffffff19881660036014600b6134c1565b60405163da98f02b60e01b815273__$23851852cf97a1ff2525b5bae2bad8f731$__9063da98f02b906136b69062ffffff198a16906001908190600401614854565b60206040518083038186803b1580156136ce57600080fd5b505af41580156136e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137069190614703565b6138a45760405163da98f02b60e01b815260009073__$23851852cf97a1ff2525b5bae2bad8f731$__9063da98f02b906137509062ffffff198b1690600290600190600401614854565b60206040518083038186803b15801561376857600080fd5b505af415801561377c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137a09190614703565b9050816022141580156137b4575081601614155b806137c957506137c5600283614b1c565b8114155b156138125773__$23851852cf97a1ff2525b5bae2bad8f731$__6365acccba6040518163ffffffff1660e01b815260040160206040518083038186803b15801561243357600080fd5b600081602014613823576009613826565b600a5b601481111561384557634e487b7160e01b600052602160045260246000fd5b60405163373f671760e11b815290915073__$23851852cf97a1ff2525b5bae2bad8f731$__90636e7ece2e9061388c9062ffffff198c169060039087908790600401614875565b60206040518083038186803b1580156122dc57600080fd5b73__$23851852cf97a1ff2525b5bae2bad8f731$__6365acccba6040518163ffffffff1660e01b815260040160206040518083038186803b1580156138e857600080fd5b505af41580156138fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8f91906146a4565b60008061392d8484614b1c565b905061393d6004621275006149af565b811015613955576139526004621275006149af565b90505b613963621275006004614afd565b81111561397b57613978621275006004614afd565b90505b60008161398b62010000886149af565b6139959190614afd565b90506139a4816212750061467c565b6139b19062010000614afd565b925050505b9392505050565b600081600473__$23851852cf97a1ff2525b5bae2bad8f731$__63a60a728262ffffff198416836040518363ffffffff1660e01b8152600401613a019291906148f7565b60206040518083038186803b158015613a1957600080fd5b505af4158015613a2d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a5191906146a4565b506000613a5f856024610783565b905073__$23851852cf97a1ff2525b5bae2bad8f731$__636e7ece2e62ffffff198716602484613a8e81614276565b60ff16613a9b919061495f565b60025b6040518563ffffffff1660e01b8152600401613abd949392919061489f565b60206040518083038186803b158015613ad557600080fd5b505af4158015613ae9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e1c91906146a4565b600081601073__$23851852cf97a1ff2525b5bae2bad8f731$__63a60a728262ffffff198416836040518363ffffffff1660e01b8152600401613b519291906148f7565b60206040518083038186803b158015613b6957600080fd5b505af4158015613b7d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ba191906146a4565b50610cc261029a85611a6b565b600081600d73__$23851852cf97a1ff2525b5bae2bad8f731$__63a60a728262ffffff198416836040518363ffffffff1660e01b8152600401613bf29291906148f7565b60206040518083038186803b158015613c0a57600080fd5b505af4158015613c1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c4291906146a4565b506040516338c17a3f60e01b815273__$23851852cf97a1ff2525b5bae2bad8f731$__906338c17a3f90610c729062ffffff19881690600090600890600401614854565b600082601173__$23851852cf97a1ff2525b5bae2bad8f731$__63a60a728262ffffff198416836040518363ffffffff1660e01b8152600401613cca9291906148f7565b60206040518083038186803b158015613ce257600080fd5b505af4158015613cf6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d1a91906146a4565b506000613d28856050614afd565b60405163373f671760e11b815290915073__$23851852cf97a1ff2525b5bae2bad8f731$__90636e7ece2e90613d709062ffffff198a16908590605090601090600401614875565b60206040518083038186803b1580156138e857600080fd5b600081600473__$23851852cf97a1ff2525b5bae2bad8f731$__63a60a728262ffffff198416836040518363ffffffff1660e01b8152600401613dcc9291906148f7565b60206040518083038186803b158015613de457600080fd5b505af4158015613df8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e1c91906146a4565b5060405163373f671760e11b815273__$23851852cf97a1ff2525b5bae2bad8f731$__90636e7ece2e906111999062ffffff19881690600090602490600390600401614875565b600081601073__$23851852cf97a1ff2525b5bae2bad8f731$__63a60a728262ffffff198416836040518363ffffffff1660e01b8152600401613ea79291906148f7565b60206040518083038186803b158015613ebf57600080fd5b505af4158015613ed3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ef791906146a4565b5060405163c197cfef60e01b815273__$23851852cf97a1ff2525b5bae2bad8f731$__9063c197cfef90610c729062ffffff198816906044906004908101614854565b600081600773__$23851852cf97a1ff2525b5bae2bad8f731$__63a60a728262ffffff198416836040518363ffffffff1660e01b8152600401613f7e9291906148f7565b60206040518083038186803b158015613f9657600080fd5b505af4158015613faa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613fce91906146a4565b506000613fdc856000610783565b60405163da98f02b60e01b815290915060009073__$23851852cf97a1ff2525b5bae2bad8f731$__9063da98f02b906140259062ffffff198a1690600390600190600401614854565b60206040518083038186803b15801561403d57600080fd5b505af4158015614051573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140759190614703565b90506053826001600160401b0316118061409857506004826001600160401b0316105b80614135575060405163da98f02b60e01b815273__$23851852cf97a1ff2525b5bae2bad8f731$__9063da98f02b906140e09062ffffff198a16906001908190600401614854565b60206040518083038186803b1580156140f857600080fd5b505af415801561410c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141309190614703565b606a14155b806141e95750614146600383614b33565b60405163da98f02b60e01b81526001600160401b03919091169073__$23851852cf97a1ff2525b5bae2bad8f731$__9063da98f02b906141969062ffffff198b1690600390600190600401614854565b60206040518083038186803b1580156141ae57600080fd5b505af41580156141c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906141e69190614703565b14155b156142325773__$23851852cf97a1ff2525b5bae2bad8f731$__6365acccba6040518163ffffffff1660e01b815260040160206040518083038186803b15801561222c57600080fd5b60405163373f671760e11b815273__$23851852cf97a1ff2525b5bae2bad8f731$__90636e7ece2e90613d709062ffffff198a16906004908690600c90830161489f565b600060fc826001600160401b0316116142915750600161077e565b61ffff826001600160401b0316116142ab5750600361077e565b63ffffffff826001600160401b0316116142c75750600561077e565b50600961077e565b600081601073__$23851852cf97a1ff2525b5bae2bad8f731$__63a60a728262ffffff198416836040518363ffffffff1660e01b81526004016143139291906148f7565b60206040518083038186803b15801561432b57600080fd5b505af415801561433f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061436391906146a4565b506040516307f6f12360e21b815273__$23851852cf97a1ff2525b5bae2bad8f731$__90631fdbc48c90610c729062ffffff19881690600401614843565b600081600d73__$23851852cf97a1ff2525b5bae2bad8f731$__63a60a728262ffffff198416836040518363ffffffff1660e01b81526004016143e59291906148f7565b60206040518083038186803b1580156143fd57600080fd5b505af4158015614411573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061443591906146a4565b506000614443856008610783565b905073__$23851852cf97a1ff2525b5bae2bad8f731$__636e7ece2e62ffffff19871660088461447281614276565b60ff1661447f919061495f565b6007613a9e565b604051639cb855cb60e01b815260609060009073__$23851852cf97a1ff2525b5bae2bad8f731$__9063a1ce10e690829063da98f02b9062ffffff1988169086908490639cb855cb906144dd908590600401614843565b60206040518083038186803b1580156144f557600080fd5b505af4158015614509573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061452d91906147ed565b6040518463ffffffff1660e01b815260040161454b93929190614854565b60206040518083038186803b15801561456357600080fd5b505af4158015614577573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061459b9190614703565b6040518263ffffffff1660e01b81526004016145b991815260200190565b604080518083038186803b1580156145d057600080fd5b505af41580156145e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906146089190614778565b604080517f4e6f6e2d6d696e696d616c2076617220696e742e20476f7420307800000000006020820152607083901b6dffffffffffffffffffffffffffff1916603b8201528151602d818303018152604d82019283905262461bcd60e51b909252919350915061150f908290605101614914565b60006139b682846149af565b600060208284031215614699578081fd5b81356139b681614c0c565b6000602082840312156146b5578081fd5b81516139b681614c0c565b600080604083850312156146d2578081fd5b82356146dd81614c0c565b946020939093013593505050565b6000602082840312156146fc578081fd5b5035919050565b600060208284031215614714578081fd5b5051919050565b60008060008060808587031215614730578182fd5b84359350602085013561474281614c0c565b93969395505050506040820135916060013590565b60008060408385031215614769578182fd5b50508035926020909101359150565b6000806040838503121561478a578182fd5b505080516020909101519092909150565b6000806000606084860312156147af578283fd5b505081359360208301359350604090920135919050565b6000602082840312156147d7578081fd5b81356001600160401b03811681146139b6578182fd5b6000602082840312156147fe578081fd5b81516001600160601b03811681146139b6578182fd5b60008351614826818460208801614b5b565b6001600160f81b0319939093169190920190815260010192915050565b62ffffff1991909116815260200190565b62ffffff19939093168352602083019190915260ff16604082015260600190565b62ffffff199490941684526020840192909252604083015264ffffffffff16606082015260800190565b62ffffff1994909416845260208401929092526001600160401b0316604083015264ffffffffff16606082015260800190565b62ffffff19939093168352602083019190915264ffffffffff16604082015260600190565b62ffffff1992909216825264ffffffffff16602082015260400190565b6000602082528251806020840152614933816040850160208701614b5b565b601f01601f19169190910160400192915050565b6000821982111561495a5761495a614be0565b500190565b60006001600160401b0380831681851680830382111561498157614981614be0565b01949350505050565b600060ff821660ff84168060ff038211156149a7576149a7614be0565b019392505050565b6000826149be576149be614bf6565b500490565b60006001600160601b03808416806149dd576149dd614bf6565b92169190910492915050565b80825b60018086116149fb5750614a26565b818704821115614a0d57614a0d614be0565b80861615614a1a57918102915b9490941c9380026149ec565b94509492505050565b60006139b66000198484600082614a48575060016139b6565b81614a55575060006139b6565b8160018114614a6b5760028114614a7557614aa2565b60019150506139b6565b60ff841115614a8657614a86614be0565b6001841b915084821115614a9c57614a9c614be0565b506139b6565b5060208310610133831016604e8410600b8410161715614ad5575081810a83811115614ad057614ad0614be0565b6139b6565b614ae284848460016149e9565b808604821115614af457614af4614be0565b02949350505050565b6000816000190483118215151615614b1757614b17614be0565b500290565b600082821015614b2e57614b2e614be0565b500390565b60006001600160401b0383811690831681811015614b5357614b53614be0565b039392505050565b60005b83811015614b76578181015183820152602001614b5e565b83811115614b85576000848401525b50505050565b6000600019821415614b9f57614b9f614be0565b5060010190565b600082614bb557614bb5614bf6565b500690565b60006001600160601b0380841680614bd457614bd4614bf6565b92169190910692915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b62ffffff1981168114614c1e57600080fd5b5056fea264697066735822122008ad39fdea71e405608bf2f5cdcdacc97a8cecf6ac3ba1d91b8839387d5b574064736f6c63430008020033",
  "libraries": {
    "TypedMemView": "0xa7e24f80E66bb09819D813e9c4b1B176e22C2d44"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}