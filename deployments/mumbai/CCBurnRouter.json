{
  "address": "0x77eBDB133Ae596fC29e0e96b371F4824190d4f77",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_relay",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lockers",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_teleBTC",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_transferDeadline",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_protocolPercentageFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_slasherPercentageReward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_bitcoinFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userTargetAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_lockerTargetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "lockerLockingScript",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestIdOfLocker",
          "type": "uint256"
        }
      ],
      "name": "BurnDispute",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "userTargetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "userScript",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "enum ScriptTypes",
          "name": "scriptType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "burntAmount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "lockerTargetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "lockerLockingScript",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestIdOfLocker",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "CCBurn",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_lockerTargetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "lockerLockingScript",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_blockNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "txId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LockerDispute",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldBitcoinFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newBitcoinFee",
          "type": "uint256"
        }
      ],
      "name": "NewBitcoinFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldLockers",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newLockers",
          "type": "address"
        }
      ],
      "name": "NewLockers",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldProtocolPercentageFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newProtocolPercentageFee",
          "type": "uint256"
        }
      ],
      "name": "NewProtocolPercentageFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldRelay",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newRelay",
          "type": "address"
        }
      ],
      "name": "NewRelay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldSlasherPercentageFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newSlasherPercentageFee",
          "type": "uint256"
        }
      ],
      "name": "NewSlasherPercentageFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldTeleBTC",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newTeleBTC",
          "type": "address"
        }
      ],
      "name": "NewTeleBTC",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldTransferDeadline",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTransferDeadline",
          "type": "uint256"
        }
      ],
      "name": "NewTransferDeadline",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldTreasury",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newTreasury",
          "type": "address"
        }
      ],
      "name": "NewTreasury",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lockerTargetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestIdOfLocker",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "bitcoinTxId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "bitcoinTxOutputIndex",
          "type": "uint256"
        }
      ],
      "name": "PaidCCBurn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "bitcoinFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "_version",
          "type": "bytes4"
        },
        {
          "internalType": "bytes",
          "name": "_vin",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_vout",
          "type": "bytes"
        },
        {
          "internalType": "bytes4",
          "name": "_locktime",
          "type": "bytes4"
        },
        {
          "internalType": "uint256",
          "name": "_blockNumber",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_intermediateNodes",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_lockerLockingScript",
          "type": "bytes"
        },
        {
          "internalType": "uint256[]",
          "name": "_burnReqIndexes",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_voutIndexes",
          "type": "uint256[]"
        }
      ],
      "name": "burnProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "burnRequestCounter",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "burnRequests",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "burntAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "userScript",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isTransferred",
          "type": "bool"
        },
        {
          "internalType": "enum ScriptTypes",
          "name": "scriptType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "requestIdOfLocker",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_userScript",
          "type": "bytes"
        },
        {
          "internalType": "enum ScriptTypes",
          "name": "_scriptType",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "_lockerLockingScript",
          "type": "bytes"
        }
      ],
      "name": "ccBurn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_burntAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_lockerLockingScript",
          "type": "bytes"
        },
        {
          "internalType": "uint256[]",
          "name": "_indices",
          "type": "uint256[]"
        }
      ],
      "name": "disputeBurn",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_lockerLockingScript",
          "type": "bytes"
        },
        {
          "internalType": "bytes4[]",
          "name": "_versions",
          "type": "bytes4[]"
        },
        {
          "internalType": "bytes",
          "name": "_inputVin",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_inputVout",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_outputVin",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_outputVout",
          "type": "bytes"
        },
        {
          "internalType": "bytes4[]",
          "name": "_locktimes",
          "type": "bytes4[]"
        },
        {
          "internalType": "bytes",
          "name": "_inputIntermediateNodes",
          "type": "bytes"
        },
        {
          "internalType": "uint256[]",
          "name": "_indexesAndBlockNumbers",
          "type": "uint256[]"
        }
      ],
      "name": "disputeLocker",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lockerTargetAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "isTransferred",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "isUsedAsBurnProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lockers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolPercentageFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "relay",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bitcoinFee",
          "type": "uint256"
        }
      ],
      "name": "setBitcoinFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_lockers",
          "type": "address"
        }
      ],
      "name": "setLockers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_protocolPercentageFee",
          "type": "uint256"
        }
      ],
      "name": "setProtocolPercentageFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_relay",
          "type": "address"
        }
      ],
      "name": "setRelay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_slasherPercentageReward",
          "type": "uint256"
        }
      ],
      "name": "setSlasherPercentageReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_teleBTC",
          "type": "address"
        }
      ],
      "name": "setTeleBTC",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_transferDeadline",
          "type": "uint256"
        }
      ],
      "name": "setTransferDeadline",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "name": "setTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slasherPercentageReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "teleBTC",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferDeadline",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "treasury",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xbf29d8d4b37814a04f23de587b7f672328fd96eb98668a40af33111187ffaab7",
  "receipt": {
    "to": null,
    "from": "0x1DE72A1935Df9b4E02315BDa3C3cDbDF2A640583",
    "contractAddress": "0x77eBDB133Ae596fC29e0e96b371F4824190d4f77",
    "transactionIndex": 49,
    "gasUsed": "5250699",
    "logsBloom": "0x
    "blockHash": "0x9ffeae46cb2665208bd10116eb9f760209c2f1c40a27cfb6fd6cf9d77a94c05a",
    "transactionHash": "0xbf29d8d4b37814a04f23de587b7f672328fd96eb98668a40af33111187ffaab7",
    "logs": [
      {
        "transactionIndex": 49,
        "blockNumber": 29208018,
        "transactionHash": "0xbf29d8d4b37814a04f23de587b7f672328fd96eb98668a40af33111187ffaab7",
        "address": "0x77eBDB133Ae596fC29e0e96b371F4824190d4f77",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001de72a1935df9b4e02315bda3c3cdbdf2a640583"
        ],
        "data": "0x",
        "logIndex": 176,
        "blockHash": "0x9ffeae46cb2665208bd10116eb9f760209c2f1c40a27cfb6fd6cf9d77a94c05a"
      },
      {
        "transactionIndex": 49,
        "blockNumber": 29208018,
        "transactionHash": "0xbf29d8d4b37814a04f23de587b7f672328fd96eb98668a40af33111187ffaab7",
        "address": "0x77eBDB133Ae596fC29e0e96b371F4824190d4f77",
        "topics": [
          "0x4c28a3f61a715259c4dc930c23e7423b8fa52e13232c061a6e488729c66184f4"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000038adf06c391a670e3681479fe2eb3be891cdce5d",
        "logIndex": 177,
        "blockHash": "0x9ffeae46cb2665208bd10116eb9f760209c2f1c40a27cfb6fd6cf9d77a94c05a"
      },
      {
        "transactionIndex": 49,
        "blockNumber": 29208018,
        "transactionHash": "0xbf29d8d4b37814a04f23de587b7f672328fd96eb98668a40af33111187ffaab7",
        "address": "0x77eBDB133Ae596fC29e0e96b371F4824190d4f77",
        "topics": [
          "0xfa021c2ec0f46429a53e7f88b88065e40001f50c9d38b2e8b713beaf9828d4c3"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000009b2992c82b62927aae5542690f804684ceb7f07b",
        "logIndex": 178,
        "blockHash": "0x9ffeae46cb2665208bd10116eb9f760209c2f1c40a27cfb6fd6cf9d77a94c05a"
      },
      {
        "transactionIndex": 49,
        "blockNumber": 29208018,
        "transactionHash": "0xbf29d8d4b37814a04f23de587b7f672328fd96eb98668a40af33111187ffaab7",
        "address": "0x77eBDB133Ae596fC29e0e96b371F4824190d4f77",
        "topics": [
          "0x567657fa3f286518b318f4a29870674f433f622fdfc819691acb13105b228225"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000005364e3557572bd5d5903c0e9c21be359f2eac1da",
        "logIndex": 179,
        "blockHash": "0x9ffeae46cb2665208bd10116eb9f760209c2f1c40a27cfb6fd6cf9d77a94c05a"
      },
      {
        "transactionIndex": 49,
        "blockNumber": 29208018,
        "transactionHash": "0xbf29d8d4b37814a04f23de587b7f672328fd96eb98668a40af33111187ffaab7",
        "address": "0x77eBDB133Ae596fC29e0e96b371F4824190d4f77",
        "topics": [
          "0x36a4c08a38b736dcecb6c328dba61238529620e83ccb23db2cc43cd34ec26096"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000080ebbfb887904d1970b20fb477fa03953ef9c9b5",
        "logIndex": 180,
        "blockHash": "0x9ffeae46cb2665208bd10116eb9f760209c2f1c40a27cfb6fd6cf9d77a94c05a"
      },
      {
        "transactionIndex": 49,
        "blockNumber": 29208018,
        "transactionHash": "0xbf29d8d4b37814a04f23de587b7f672328fd96eb98668a40af33111187ffaab7",
        "address": "0x77eBDB133Ae596fC29e0e96b371F4824190d4f77",
        "topics": [
          "0x92c10a242ca42973030420e2ee32b3ba7818cc643f896958f620c606cf300416"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a",
        "logIndex": 181,
        "blockHash": "0x9ffeae46cb2665208bd10116eb9f760209c2f1c40a27cfb6fd6cf9d77a94c05a"
      },
      {
        "transactionIndex": 49,
        "blockNumber": 29208018,
        "transactionHash": "0xbf29d8d4b37814a04f23de587b7f672328fd96eb98668a40af33111187ffaab7",
        "address": "0x77eBDB133Ae596fC29e0e96b371F4824190d4f77",
        "topics": [
          "0x7d205f60891f60851c61cd244ba387d72b6589e7c0ac41b9d909ab0ce2c2a53b"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000032",
        "logIndex": 182,
        "blockHash": "0x9ffeae46cb2665208bd10116eb9f760209c2f1c40a27cfb6fd6cf9d77a94c05a"
      },
      {
        "transactionIndex": 49,
        "blockNumber": 29208018,
        "transactionHash": "0xbf29d8d4b37814a04f23de587b7f672328fd96eb98668a40af33111187ffaab7",
        "address": "0x77eBDB133Ae596fC29e0e96b371F4824190d4f77",
        "topics": [
          "0xaa50b3683e42a13535a5b9c2c32780cccf956fb546b523a3542ac4ad8b544f67"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000032",
        "logIndex": 183,
        "blockHash": "0x9ffeae46cb2665208bd10116eb9f760209c2f1c40a27cfb6fd6cf9d77a94c05a"
      },
      {
        "transactionIndex": 49,
        "blockNumber": 29208018,
        "transactionHash": "0xbf29d8d4b37814a04f23de587b7f672328fd96eb98668a40af33111187ffaab7",
        "address": "0x77eBDB133Ae596fC29e0e96b371F4824190d4f77",
        "topics": [
          "0x47c5f9c13c35ebb166f6a8d8c56af73f8b323ac0fee7aec4a5e0490bbf67a4fe"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000032",
        "logIndex": 184,
        "blockHash": "0x9ffeae46cb2665208bd10116eb9f760209c2f1c40a27cfb6fd6cf9d77a94c05a"
      },
      {
        "transactionIndex": 49,
        "blockNumber": 29208018,
        "transactionHash": "0xbf29d8d4b37814a04f23de587b7f672328fd96eb98668a40af33111187ffaab7",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000001de72a1935df9b4e02315bda3c3cdbdf2a640583",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001bef6e155a705b00000000000000000000000000000000000000000000000446f056cf37fbc22d000000000000000000000000000000000000000000000af3c91aa23bf2d30f1a00000000000000000000000000000000000000000000000446d4676122a151d2000000000000000000000000000000000000000000000af3c93691aa082d7f75",
        "logIndex": 185,
        "blockHash": "0x9ffeae46cb2665208bd10116eb9f760209c2f1c40a27cfb6fd6cf9d77a94c05a"
      }
    ],
    "blockNumber": 29208018,
    "cumulativeGasUsed": "12598829",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x38Adf06C391a670e3681479Fe2Eb3BE891cDce5D",
    "0x9b2992c82b62927AaE5542690f804684CEB7F07B",
    "0x5364E3557572bd5D5903C0e9C21BE359F2Eac1dA",
    "0x80eBbFb887904d1970b20Fb477Fa03953EF9c9B5",
    10,
    50,
    50,
    50
  ],
  "numDeployments": 1,
  "solcInputHash": "75de7cb825f3b6d07e1f1f6c98977d78",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_relay\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lockers\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_teleBTC\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_transferDeadline\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_protocolPercentageFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_slasherPercentageReward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bitcoinFee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userTargetAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_lockerTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"lockerLockingScript\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestIdOfLocker\",\"type\":\"uint256\"}],\"name\":\"BurnDispute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"userTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"userScript\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"enum ScriptTypes\",\"name\":\"scriptType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"burntAmount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lockerTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"lockerLockingScript\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestIdOfLocker\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"CCBurn\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_lockerTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"lockerLockingScript\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"txId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LockerDispute\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBitcoinFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBitcoinFee\",\"type\":\"uint256\"}],\"name\":\"NewBitcoinFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldLockers\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newLockers\",\"type\":\"address\"}],\"name\":\"NewLockers\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldProtocolPercentageFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newProtocolPercentageFee\",\"type\":\"uint256\"}],\"name\":\"NewProtocolPercentageFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldRelay\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newRelay\",\"type\":\"address\"}],\"name\":\"NewRelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldSlasherPercentageFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newSlasherPercentageFee\",\"type\":\"uint256\"}],\"name\":\"NewSlasherPercentageFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldTeleBTC\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTeleBTC\",\"type\":\"address\"}],\"name\":\"NewTeleBTC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldTransferDeadline\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTransferDeadline\",\"type\":\"uint256\"}],\"name\":\"NewTransferDeadline\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldTreasury\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTreasury\",\"type\":\"address\"}],\"name\":\"NewTreasury\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lockerTargetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestIdOfLocker\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"bitcoinTxId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bitcoinTxOutputIndex\",\"type\":\"uint256\"}],\"name\":\"PaidCCBurn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"bitcoinFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_version\",\"type\":\"bytes4\"},{\"internalType\":\"bytes\",\"name\":\"_vin\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_vout\",\"type\":\"bytes\"},{\"internalType\":\"bytes4\",\"name\":\"_locktime\",\"type\":\"bytes4\"},{\"internalType\":\"uint256\",\"name\":\"_blockNumber\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_intermediateNodes\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_lockerLockingScript\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"_burnReqIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_voutIndexes\",\"type\":\"uint256[]\"}],\"name\":\"burnProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"burnRequestCounter\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"burnRequests\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burntAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"userScript\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isTransferred\",\"type\":\"bool\"},{\"internalType\":\"enum ScriptTypes\",\"name\":\"scriptType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"requestIdOfLocker\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_userScript\",\"type\":\"bytes\"},{\"internalType\":\"enum ScriptTypes\",\"name\":\"_scriptType\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"_lockerLockingScript\",\"type\":\"bytes\"}],\"name\":\"ccBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_burntAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_lockerLockingScript\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"_indices\",\"type\":\"uint256[]\"}],\"name\":\"disputeBurn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_lockerLockingScript\",\"type\":\"bytes\"},{\"internalType\":\"bytes4[]\",\"name\":\"_versions\",\"type\":\"bytes4[]\"},{\"internalType\":\"bytes\",\"name\":\"_inputVin\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_inputVout\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_outputVin\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_outputVout\",\"type\":\"bytes\"},{\"internalType\":\"bytes4[]\",\"name\":\"_locktimes\",\"type\":\"bytes4[]\"},{\"internalType\":\"bytes\",\"name\":\"_inputIntermediateNodes\",\"type\":\"bytes\"},{\"internalType\":\"uint256[]\",\"name\":\"_indexesAndBlockNumbers\",\"type\":\"uint256[]\"}],\"name\":\"disputeLocker\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockerTargetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"isTransferred\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"isUsedAsBurnProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolPercentageFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"relay\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bitcoinFee\",\"type\":\"uint256\"}],\"name\":\"setBitcoinFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_lockers\",\"type\":\"address\"}],\"name\":\"setLockers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolPercentageFee\",\"type\":\"uint256\"}],\"name\":\"setProtocolPercentageFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_relay\",\"type\":\"address\"}],\"name\":\"setRelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slasherPercentageReward\",\"type\":\"uint256\"}],\"name\":\"setSlasherPercentageReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teleBTC\",\"type\":\"address\"}],\"name\":\"setTeleBTC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_transferDeadline\",\"type\":\"uint256\"}],\"name\":\"setTransferDeadline\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"}],\"name\":\"setTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slasherPercentageReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teleBTC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferDeadline\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"treasury\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"burnProof(bytes4,bytes,bytes,bytes4,uint256,bytes,uint256,bytes,uint256[],uint256[])\":{\"details\":\"Makes isTransferred flag true for the paid requests\",\"params\":{\"_blockNumber\":\"Height of the block containing the burn transaction\",\"_burnReqIndexes\":\"Indexes of requests that locker wants to provide proof for them\",\"_index\":\"Index of transaction containing the burn transaction in the block\",\"_intermediateNodes\":\"Merkle inclusion proof for transaction containing the burn transaction\",\"_lockerLockingScript\":\"Locker's locking script (on Bitcoin) that this burn request belongs to\",\"_locktime\":\"Lock time of the transaction containing the burn transaction\",\"_version\":\"Version of the transaction containing the burn transaction\",\"_vin\":\"Inputs of the transaction containing the burn transaction\",\"_vout\":\"Outputs of the transaction containing the burn transaction\",\"_voutIndexes\":\"Indexes of outputs that were used to pay burn requests (_voutIndexes[i] belongs to _burnReqIndexes[i])\"},\"returns\":{\"_0\":\"\"}},\"ccBurn(uint256,bytes,uint8,bytes)\":{\"details\":\"After submitting the burn request, lockers have a limited time                                     to send BTC and provide burn proof\",\"params\":{\"_amount\":\"Amount of teleBTC that user wants to burn\",\"_lockerLockingScript\":\"Locking script of locker that should execute the burn request\",\"_userScript\":\"User's bitcoin script type\"},\"returns\":{\"_burntAmount\":\"               Amount of teleBTC that user will receive (after reducing fees)\"}},\"constructor\":{\"params\":{\"_bitcoinFee\":\"Fee of submitting a transaction on Bitcoin\",\"_lockers\":\"Address of lockers contract\",\"_protocolPercentageFee\":\"Percentage of tokens that user pays to protocol for burning\",\"_relay\":\"Address of relay contract\",\"_slasherPercentageReward\":\"Percentage of tokens that slasher receives after slashing a locker\",\"_teleBTC\":\"Address of teleBTC contract\",\"_transferDeadline\":\"Dealine of sending BTC to user (aster submitting a burn request)\",\"_treasury\":\"Address of the treasury of the protocol\"}},\"disputeBurn(bytes,uint256[])\":{\"params\":{\"_indices\":\"Array of indices of the requests whose deadline has passed\",\"_lockerLockingScript\":\"locker's locking script that the unpaid request belongs to\"},\"returns\":{\"_0\":\"True if dispute is successful\"}},\"disputeLocker(bytes,bytes4[],bytes,bytes,bytes,bytes,bytes4[],bytes,uint256[])\":{\"details\":\"Input tx is a malicious tx which shows that locker spent BTC                                         Output tx is the tx that was spent by locker in input tx                                         Output tx --> money goes to locker --> Input tx --> locker steals the funds\",\"params\":{\"_indexesAndBlockNumbers\":\"Indices of malicious input in input tx, input tx in block and block number of input tx\",\"_inputIntermediateNodes\":\"Merkle inclusion proof for the malicious transaction\",\"_inputVin\":\"Inputs of the malicious transaction\",\"_inputVout\":\"Outputs of the malicious transaction\",\"_lockerLockingScript\":\"Suspicious locker's locking script\",\"_locktimes\":\"Locktimes of input and output tx\",\"_outputVin\":\"Inputs of the spent transaction\",\"_outputVout\":\"Outputs of the spent transaction\",\"_versions\":\"Versions of input and output tx\"},\"returns\":{\"_0\":\"True if dispute is successful\"}},\"isTransferred(address,uint256)\":{\"params\":{\"_index\":\"The index of the request for the locker\",\"_lockerTargetAddress\":\"Locker's address on the target chain\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setBitcoinFee(uint256)\":{\"details\":\"Only owner can call this\",\"params\":{\"_bitcoinFee\":\"The new Bitcoin transaction fee\"}},\"setLockers(address)\":{\"details\":\"Only owner can call this\",\"params\":{\"_lockers\":\"The new lockers contract address\"}},\"setProtocolPercentageFee(uint256)\":{\"details\":\"Only owner can call this\",\"params\":{\"_protocolPercentageFee\":\"The new protocol percentage fee\"}},\"setRelay(address)\":{\"details\":\"Only owner can call this\",\"params\":{\"_relay\":\"The new relay contract address\"}},\"setSlasherPercentageReward(uint256)\":{\"details\":\"Only owner can call this\",\"params\":{\"_slasherPercentageReward\":\"The new slasher percentage reward\"}},\"setTeleBTC(address)\":{\"details\":\"Only owner can call this\",\"params\":{\"_teleBTC\":\"The new teleBTC contract address\"}},\"setTransferDeadline(uint256)\":{\"details\":\"Only owner can call this                                     Deadline should be greater than relay finalization parameter\",\"params\":{\"_transferDeadline\":\"The new transfer deadline\"}},\"setTreasury(address)\":{\"details\":\"Only owner can call this\",\"params\":{\"_treasury\":\"The new treasury address\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"events\":{\"CCBurn(address,bytes,uint8,uint256,uint256,address,bytes,uint256,uint256)\":{\"notice\":\"Emits when a burn request gets submitted\"},\"LockerDispute(address,bytes,uint256,bytes32,uint256)\":{\"notice\":\"Emits when a locker gets slashed for withdrawing BTC without proper reason\"},\"NewBitcoinFee(uint256,uint256)\":{\"notice\":\"Emits when changes made to bitcoin fee\"},\"NewLockers(address,address)\":{\"notice\":\"Emits when changes made to lockers address\"},\"NewProtocolPercentageFee(uint256,uint256)\":{\"notice\":\"Emits when changes made to percentage fee\"},\"NewRelay(address,address)\":{\"notice\":\"Emits when changes made to relay address\"},\"NewSlasherPercentageFee(uint256,uint256)\":{\"notice\":\"Emits when changes made to slasher percentage fee\"},\"NewTeleBTC(address,address)\":{\"notice\":\"Emits when changes made to TeleBTC address\"},\"NewTransferDeadline(uint256,uint256)\":{\"notice\":\"Emits when changes made to transfer deadline\"},\"NewTreasury(address,address)\":{\"notice\":\"Emits when changes made to treasury address\"},\"PaidCCBurn(address,uint256,bytes32,uint256)\":{\"notice\":\"Emits when a burn proof is provided\"}},\"kind\":\"user\",\"methods\":{\"burnProof(bytes4,bytes,bytes,bytes4,uint256,bytes,uint256,bytes,uint256[],uint256[])\":{\"notice\":\"Checks the correctness of burn proof\"},\"ccBurn(uint256,bytes,uint8,bytes)\":{\"notice\":\"Burns teleBTC and records the burn request\"},\"constructor\":{\"notice\":\"Handles cross-chain burn requests\"},\"disputeBurn(bytes,uint256[])\":{\"notice\":\"Slashes a locker if she did not pay a cc burn request before its deadline\"},\"disputeLocker(bytes,bytes4[],bytes,bytes,bytes,bytes,bytes4[],bytes,uint256[])\":{\"notice\":\"Slashes a locker if they issue a tx that doesn't match any burn request\"},\"isTransferred(address,uint256)\":{\"notice\":\"Shows if a burn request has been done or not\"},\"setBitcoinFee(uint256)\":{\"notice\":\"Changes Bitcoin transaction fee\"},\"setLockers(address)\":{\"notice\":\"Changes lockers contract address\"},\"setProtocolPercentageFee(uint256)\":{\"notice\":\"Changes protocol percentage fee for burning tokens\"},\"setRelay(address)\":{\"notice\":\"Changes relay contract address\"},\"setSlasherPercentageReward(uint256)\":{\"notice\":\"Changes slasher percentage reward for disputing lockers\"},\"setTeleBTC(address)\":{\"notice\":\"Changes teleBTC contract address\"},\"setTransferDeadline(uint256)\":{\"notice\":\"Changes deadline of executing burn requests\"},\"setTreasury(address)\":{\"notice\":\"Changes protocol treasury address\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/routers/CCBurnRouter.sol\":\"CCBurnRouter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x08d867b4c0bb782b9135691fa732b6846e0f133006489c3aa505abd1f6de56cb\",\"license\":\"MIT\"},\"contracts/erc20/interfaces/ITeleBTC.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ITeleBTC is IERC20 {\\n\\n    // Events\\n    event Mint(address indexed doer, address indexed receiver, uint value);\\n\\n    event Burn(address indexed doer, address indexed burner, uint value);\\n\\n    event MinterAdded(address indexed newMinter);\\n\\n    event MinterRemoved(address indexed minter);\\n\\n    event BurnerAdded(address indexed newBurner);\\n\\n    event BurnerRemoved(address indexed burner);\\n\\n    event NewMintLimit(uint oldMintLimit, uint newMintLimit);\\n\\n    event NewEpochLength(uint oldEpochLength, uint newEpochLength);\\n\\n    // read functions\\n\\n    function decimals() external view returns (uint8);\\n\\n    // state-changing functions\\n\\n    function addMinter(address account) external;\\n\\n    function removeMinter(address account) external;\\n\\n    function addBurner(address account) external;\\n\\n    function removeBurner(address account) external;\\n\\n    function mint(address receiver, uint amount) external returns(bool);\\n\\n    function burn(uint256 amount) external returns(bool);\\n\\n    function setMaxmimumMintLimit(uint _mintLimit) external;\\n\\n    function setEpochLength(uint _length) external;\\n}\",\"keccak256\":\"0x9db4603a130e2613ac9cd1fcb45f16960fce1d08cc1200a8c6c899dcaa1b4e7e\",\"license\":\"MIT\"},\"contracts/libraries/BitcoinHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"./TypedMemView.sol\\\";\\nimport \\\"../types/ScriptTypesEnum.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\nlibrary BitcoinHelper {\\n\\n    using SafeCast for uint96;\\n    using SafeCast for uint256;\\n\\n    using TypedMemView for bytes;\\n    using TypedMemView for bytes29;\\n\\n    // The target at minimum Difficulty. Also the target of the genesis block\\n    uint256 internal constant DIFF1_TARGET = 0xffff0000000000000000000000000000000000000000000000000000;\\n\\n    uint256 internal constant RETARGET_PERIOD = 2 * 7 * 24 * 60 * 60;  // 2 weeks in seconds\\n    uint256 internal constant RETARGET_PERIOD_BLOCKS = 2016;  // 2 weeks in blocks\\n\\n    enum BTCTypes {\\n        Unknown,            // 0x0\\n        CompactInt,         // 0x1\\n        ScriptSig,          // 0x2 - with length prefix\\n        Outpoint,           // 0x3\\n        TxIn,               // 0x4\\n        IntermediateTxIns,  // 0x5 - used in vin parsing\\n        Vin,                // 0x6\\n        ScriptPubkey,       // 0x7 - with length prefix\\n        PKH,                // 0x8 - the 20-byte payload digest\\n        WPKH,               // 0x9 - the 20-byte payload digest\\n        WSH,                // 0xa - the 32-byte payload digest\\n        SH,                 // 0xb - the 20-byte payload digest\\n        OpReturnPayload,    // 0xc\\n        TxOut,              // 0xd\\n        IntermediateTxOuts, // 0xe - used in vout parsing\\n        Vout,               // 0xf\\n        Header,             // 0x10\\n        HeaderArray,        // 0x11\\n        MerkleNode,         // 0x12\\n        MerkleStep,         // 0x13\\n        MerkleArray         // 0x14\\n    }\\n\\n    /// @notice             requires `memView` to be of a specified type\\n    /// @dev                passes if it is the correct type, errors if not\\n    /// @param memView      a 29-byte view with a 5-byte type\\n    /// @param t            the expected type (e.g. BTCTypes.Outpoint, BTCTypes.TxIn, etc)\\n    modifier typeAssert(bytes29 memView, BTCTypes t) {\\n        memView.assertType(uint40(t));\\n        _;\\n    }\\n\\n    // Revert with an error message re: non-minimal VarInts\\n    function revertNonMinimal(bytes29 ref) private pure returns (string memory) {\\n        (, uint256 g) = TypedMemView.encodeHex(ref.indexUint(0, ref.len().toUint8()));\\n        string memory err = string(\\n            abi.encodePacked(\\n                \\\"Non-minimal var int. Got 0x\\\",\\n                uint144(g)\\n            )\\n        );\\n        revert(err);\\n    }\\n\\n    /// @notice             reads a compact int from the view at the specified index\\n    /// @param memView      a 29-byte view with a 5-byte type\\n    /// @param _index       the index\\n    /// @return number      returns the compact int at the specified index\\n    function indexCompactInt(bytes29 memView, uint256 _index) internal pure returns (uint64 number) {\\n        uint256 flag = memView.indexUint(_index, 1);\\n        if (flag <= 0xfc) {\\n            return flag.toUint64();\\n        } else if (flag == 0xfd) {\\n            number = memView.indexLEUint(_index + 1, 2).toUint64();\\n            if (compactIntLength(number) != 3) {revertNonMinimal(memView.slice(_index, 3, 0));}\\n        } else if (flag == 0xfe) {\\n            number = memView.indexLEUint(_index + 1, 4).toUint64();\\n            if (compactIntLength(number) != 5) {revertNonMinimal(memView.slice(_index, 5, 0));}\\n        } else if (flag == 0xff) {\\n            number = memView.indexLEUint(_index + 1, 8).toUint64();\\n            if (compactIntLength(number) != 9) {revertNonMinimal(memView.slice(_index, 9, 0));}\\n        }\\n    }\\n\\n    /// @notice         gives the total length (in bytes) of a CompactInt-encoded number\\n    /// @param number   the number as uint64\\n    /// @return         the compact integer length as uint8\\n    function compactIntLength(uint64 number) private pure returns (uint8) {\\n        if (number <= 0xfc) {\\n            return 1;\\n        } else if (number <= 0xffff) {\\n            return 3;\\n        } else if (number <= 0xffffffff) {\\n            return 5;\\n        } else {\\n            return 9;\\n        }\\n    }\\n\\n    /// @notice             extracts the LE txid from an outpoint\\n    /// @param _outpoint    the outpoint\\n    /// @return             the LE txid\\n    function txidLE(bytes29 _outpoint) internal pure typeAssert(_outpoint, BTCTypes.Outpoint) returns (bytes32) {\\n        return _outpoint.index(0, 32);\\n    }\\n\\n    /// @notice                      Calculates the required transaction Id from the transaction details\\n    /// @dev                         Calculates the hash of transaction details two consecutive times\\n    /// @param _version              Version of the transaction\\n    /// @param _vin                  Inputs of the transaction\\n    /// @param _vout                 Outputs of the transaction\\n    /// @param _locktime             Lock time of the transaction\\n    /// @return                      Transaction Id of the transaction (in LE form)\\n    function calculateTxId(\\n        bytes4 _version,\\n        bytes memory _vin,\\n        bytes memory _vout,\\n        bytes4 _locktime\\n    ) internal pure returns (bytes32) {\\n        bytes32 inputHash1 = sha256(abi.encodePacked(_version, _vin, _vout, _locktime));\\n        bytes32 inputHash2 = sha256(abi.encodePacked(inputHash1));\\n        return inputHash2;\\n    }\\n\\n    /// @notice                      Reverts a Bytes32 input\\n    /// @param _input                Bytes32 input that we want to revert\\n    /// @return                      Reverted bytes32\\n    function reverseBytes32(bytes32 _input) private pure returns (bytes32) {\\n        bytes memory temp;\\n        bytes32 result;\\n        for (uint i = 0; i < 32; i++) {\\n            temp = abi.encodePacked(temp, _input[31-i]);\\n        }\\n        assembly {\\n            result := mload(add(temp, 32))\\n        }\\n        return result;\\n    }\\n\\n    /// @notice                           Parses outpoint info from an input\\n    /// @dev                              Reverts if vin is null\\n    /// @param _vin                       The vin of a Bitcoin transaction\\n    /// @param _index                     Index of the input that we are looking at\\n    /// @return _txId                     Output tx id\\n    /// @return _outputIndex              Output tx index\\n    function extractOutpoint(\\n        bytes memory _vin, \\n        uint _index\\n    ) internal pure returns (bytes32 _txId, uint _outputIndex) {\\n        bytes29 vin = tryAsVin(_vin.ref(uint40(BTCTypes.Unknown)));\\n        require(!vin.isNull(), \\\"BitcoinHelper: vin is null\\\");\\n        bytes29 input = indexVin(vin, _index);\\n        bytes29 _outpoint = outpoint(input);\\n        _txId = txidLE(_outpoint);\\n        _outputIndex = outpointIdx(_outpoint);\\n    }\\n\\n    /// @notice             extracts the index as an integer from the outpoint\\n    /// @param _outpoint    the outpoint\\n    /// @return             the index\\n    function outpointIdx(bytes29 _outpoint) internal pure typeAssert(_outpoint, BTCTypes.Outpoint) returns (uint32) {\\n        return _outpoint.indexLEUint(32, 4).toUint32();\\n    }\\n\\n    /// @notice          extracts the outpoint from an input\\n    /// @param _input    the input\\n    /// @return          the outpoint as a typed memory\\n    function outpoint(bytes29 _input) internal pure typeAssert(_input, BTCTypes.TxIn) returns (bytes29) {\\n        return _input.slice(0, 36, uint40(BTCTypes.Outpoint));\\n    }\\n\\n    /// @notice           extracts the script sig from an input\\n    /// @param _input     the input\\n    /// @return           the script sig as a typed memory\\n    function scriptSig(bytes29 _input) internal pure typeAssert(_input, BTCTypes.TxIn) returns (bytes29) {\\n        uint64 scriptLength = indexCompactInt(_input, 36);\\n        return _input.slice(36, compactIntLength(scriptLength) + scriptLength, uint40(BTCTypes.ScriptSig));\\n    }\\n\\n    /// @notice         determines the length of the first input in an array of inputs\\n    /// @param _inputs  the vin without its length prefix\\n    /// @return         the input length\\n    function inputLength(bytes29 _inputs) private pure typeAssert(_inputs, BTCTypes.IntermediateTxIns) returns (uint256) {\\n        uint64 scriptLength = indexCompactInt(_inputs, 36);\\n        return uint256(compactIntLength(scriptLength)) + uint256(scriptLength) + 36 + 4;\\n    }\\n\\n    /// @notice         extracts the input at a specified index\\n    /// @param _vin     the vin\\n    /// @param _index   the index of the desired input\\n    /// @return         the desired input\\n    function indexVin(bytes29 _vin, uint256 _index) internal pure typeAssert(_vin, BTCTypes.Vin) returns (bytes29) {\\n        uint256 _nIns = uint256(indexCompactInt(_vin, 0));\\n        uint256 _viewLen = _vin.len();\\n        require(_index < _nIns, \\\"Vin read overrun\\\");\\n\\n        uint256 _offset = uint256(compactIntLength(uint64(_nIns)));\\n        bytes29 _remaining;\\n        for (uint256 _i = 0; _i < _index; _i += 1) {\\n            _remaining = _vin.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxIns));\\n            _offset += inputLength(_remaining);\\n        }\\n\\n        _remaining = _vin.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxIns));\\n        uint256 _len = inputLength(_remaining);\\n        return _vin.slice(_offset, _len, uint40(BTCTypes.TxIn));\\n    }\\n\\n    /// @notice         extracts the value from an output\\n    /// @param _output  the output\\n    /// @return         the value\\n    function value(bytes29 _output) internal pure typeAssert(_output, BTCTypes.TxOut) returns (uint64) {\\n        return _output.indexLEUint(0, 8).toUint64();\\n    }\\n\\n    /// @notice                   Finds total outputs value\\n    /// @dev                      Reverts if vout is null\\n    /// @param _vout              The vout of a Bitcoin transaction\\n    /// @return _totalValue       Total vout value\\n    function parseOutputsTotalValue(bytes memory _vout) internal pure returns (uint64 _totalValue) {\\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!voutView.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n        bytes29 output;\\n\\n        // Finds total number of outputs\\n        uint _numberOfOutputs = uint256(indexCompactInt(voutView, 0));\\n\\n        for (uint index = 0; index < _numberOfOutputs; index++) {\\n            output = indexVout(voutView, index);\\n            _totalValue = _totalValue + value(output);\\n        }\\n    }\\n\\n    /// @notice                           Parses the BTC amount that has been sent to \\n    ///                                   a specific script in a specific output\\n    /// @param _vout                      The vout of a Bitcoin transaction\\n    /// @param _voutIndex                 Index of the output that we are looking at\\n    /// @param _script                    Desired recipient script\\n    /// @param _scriptType                Type of the script (e.g. P2PK)\\n    /// @return bitcoinAmount             Amount of BTC have been sent to the _script\\n    function parseValueFromSpecificOutputHavingScript(\\n        bytes memory _vout,\\n        uint _voutIndex,\\n        bytes memory _script,\\n        ScriptTypes _scriptType\\n    ) internal pure returns (uint64 bitcoinAmount) {\\n\\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!voutView.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n        bytes29 output = indexVout(voutView, _voutIndex);\\n        bytes29 _scriptPubkey = scriptPubkey(output);\\n\\n        if (_scriptType == ScriptTypes.P2PK) {\\n            // note: first byte is Pushdata Bytelength. \\n            // note: public key length is 32.           \\n            bitcoinAmount = keccak256(_script) == keccak256(abi.encodePacked(_scriptPubkey.index(1, 32))) ? value(output) : 0;\\n        } else if (_scriptType == ScriptTypes.P2PKH) { \\n            // note: first three bytes are OP_DUP, OP_HASH160, Pushdata Bytelength. \\n            // note: public key hash length is 20.         \\n            bitcoinAmount = keccak256(_script) == keccak256(abi.encodePacked(_scriptPubkey.indexAddress(3))) ? value(output) : 0;\\n        } else if (_scriptType == ScriptTypes.P2SH) {\\n            // note: first two bytes are OP_HASH160, Pushdata Bytelength\\n            // note: script hash length is 20.                      \\n            bitcoinAmount = keccak256(_script) == keccak256(abi.encodePacked(_scriptPubkey.indexAddress(2))) ? value(output) : 0;\\n        } else if (_scriptType == ScriptTypes.P2WPKH) {               \\n            // note: first two bytes are OP_0, Pushdata Bytelength\\n            // note: segwit public key hash length is 20. \\n            bitcoinAmount = keccak256(_script) == keccak256(abi.encodePacked(_scriptPubkey.indexAddress(2))) ? value(output) : 0;\\n        } else if (_scriptType == ScriptTypes.P2WSH) {\\n            // note: first two bytes are OP_0, Pushdata Bytelength \\n            // note: segwit script hash length is 32.           \\n            bitcoinAmount = keccak256(_script) == keccak256(abi.encodePacked(_scriptPubkey.index(2, 32))) ? value(output) : 0;\\n        }\\n        \\n    }\\n\\n    /// @notice                           Parses the BTC amount of a transaction\\n    /// @dev                              Finds the BTC amount that has been sent to the locking script\\n    ///                                   Returns zero if no matching locking scrip is found\\n    /// @param _vout                      The vout of a Bitcoin transaction\\n    /// @param _lockingScript             Desired locking script\\n    /// @return bitcoinAmount             Amount of BTC have been sent to the _lockingScript\\n    function parseValueHavingLockingScript(\\n        bytes memory _vout,\\n        bytes memory _lockingScript\\n    ) internal view returns (uint64 bitcoinAmount) {\\n        // Checks that vout is not null\\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!voutView.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n\\n        bytes29 output;\\n        bytes29 _scriptPubkey;\\n        \\n        // Finds total number of outputs\\n        uint _numberOfOutputs = uint256(indexCompactInt(voutView, 0));\\n\\n        for (uint index = 0; index < _numberOfOutputs; index++) {\\n            output = indexVout(voutView, index);\\n            _scriptPubkey = scriptPubkey(output);\\n\\n            if (\\n                keccak256(abi.encodePacked(_scriptPubkey.clone())) == keccak256(abi.encodePacked(_lockingScript))\\n            ) {\\n                bitcoinAmount = value(output);\\n                // Stops searching after finding the desired locking script\\n                break;\\n            }\\n        }\\n    }\\n\\n    /// @notice                           Parses the BTC amount and the op_return of a transaction\\n    /// @dev                              Finds the BTC amount that has been sent to the locking script\\n    ///                                   Assumes that payload size is less than 76 bytes\\n    /// @param _vout                      The vout of a Bitcoin transaction\\n    /// @param _lockingScript             Desired locking script\\n    /// @return bitcoinAmount             Amount of BTC have been sent to the _lockingScript\\n    /// @return arbitraryData             Opreturn  data of the transaction\\n    function parseValueAndDataHavingLockingScriptSmallPayload(\\n        bytes memory _vout,\\n        bytes memory _lockingScript\\n    ) internal view returns (uint64 bitcoinAmount, bytes memory arbitraryData) {\\n        // Checks that vout is not null\\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!voutView.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n\\n        bytes29 output;\\n        bytes29 _scriptPubkey;\\n        bytes29 _scriptPubkeyWithLength;\\n        bytes29 _arbitraryData;\\n\\n        // Finds total number of outputs\\n        uint _numberOfOutputs = uint256(indexCompactInt(voutView, 0));\\n\\n        for (uint index = 0; index < _numberOfOutputs; index++) {\\n            output = indexVout(voutView, index);\\n            _scriptPubkey = scriptPubkey(output);\\n            _scriptPubkeyWithLength = scriptPubkeyWithLength(output);\\n            _arbitraryData = opReturnPayloadSmall(_scriptPubkeyWithLength);\\n\\n            // Checks whether the output is an arbitarary data or not\\n            if(_arbitraryData == TypedMemView.NULL) {\\n                // Output is not an arbitrary data\\n                if (\\n                    keccak256(abi.encodePacked(_scriptPubkey.clone())) == keccak256(abi.encodePacked(_lockingScript))\\n                ) {\\n                    bitcoinAmount = value(output);\\n                }\\n            } else {\\n                // Returns the whole bytes array\\n                arbitraryData = _arbitraryData.clone();\\n            }\\n        }\\n    }\\n\\n    /// @notice                           Parses the BTC amount and the op_return of a transaction\\n    /// @dev                              Finds the BTC amount that has been sent to the locking script\\n    ///                                   Assumes that payload size is greater than 75 bytes\\n    /// @param _vout                      The vout of a Bitcoin transaction\\n    /// @param _lockingScript             Desired locking script\\n    /// @return bitcoinAmount             Amount of BTC have been sent to the _lockingScript\\n    /// @return arbitraryData             Opreturn  data of the transaction\\n    function parseValueAndDataHavingLockingScriptBigPayload(\\n        bytes memory _vout,\\n        bytes memory _lockingScript\\n    ) internal view returns (uint64 bitcoinAmount, bytes memory arbitraryData) {\\n        // Checks that vout is not null\\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!voutView.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n\\n        bytes29 output;\\n        bytes29 _scriptPubkey;\\n        bytes29 _scriptPubkeyWithLength;\\n        bytes29 _arbitraryData;\\n\\n        // Finds total number of outputs\\n        uint _numberOfOutputs = uint256(indexCompactInt(voutView, 0));\\n\\n        for (uint index = 0; index < _numberOfOutputs; index++) {\\n            output = indexVout(voutView, index);\\n            _scriptPubkey = scriptPubkey(output);\\n            _scriptPubkeyWithLength = scriptPubkeyWithLength(output);\\n            _arbitraryData = opReturnPayloadBig(_scriptPubkeyWithLength);\\n\\n            // Checks whether the output is an arbitarary data or not\\n            if(_arbitraryData == 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) {\\n                // Output is not an arbitrary data\\n                if (\\n                    keccak256(abi.encodePacked(_scriptPubkey.clone())) == keccak256(abi.encodePacked(_lockingScript))\\n                ) {\\n                    bitcoinAmount = value(output);\\n                }\\n            } else {\\n                // Returns the whole bytes array\\n                arbitraryData = _arbitraryData.clone();\\n            }\\n        }\\n    }\\n\\n    /// @notice             extracts the scriptPubkey from an output\\n    /// @param _output      the output\\n    /// @return             the scriptPubkey\\n    function scriptPubkey(bytes29 _output) internal pure typeAssert(_output, BTCTypes.TxOut) returns (bytes29) {\\n        uint64 scriptLength = indexCompactInt(_output, 8);\\n        return _output.slice(8 + compactIntLength(scriptLength), scriptLength, uint40(BTCTypes.ScriptPubkey));\\n    }\\n\\n    /// @notice             extracts the scriptPubkey from an output\\n    /// @param _output      the output\\n    /// @return             the scriptPubkey\\n    function scriptPubkeyWithLength(bytes29 _output) internal pure typeAssert(_output, BTCTypes.TxOut) returns (bytes29) {\\n        uint64 scriptLength = indexCompactInt(_output, 8);\\n        return _output.slice(8, compactIntLength(scriptLength) + scriptLength, uint40(BTCTypes.ScriptPubkey));\\n    }\\n\\n    /// @notice                           Parses locking script from an output\\n    /// @dev                              Reverts if vout is null\\n    /// @param _vout                      The vout of a Bitcoin transaction\\n    /// @param _index                     Index of the output that we are looking at\\n    /// @return _lockingScript            Parsed locking script\\n    function getLockingScript(\\n        bytes memory _vout, \\n        uint _index\\n    ) internal view returns (bytes memory _lockingScript) {\\n        bytes29 vout = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        require(!vout.isNull(), \\\"BitcoinHelper: vout is null\\\");\\n        bytes29 output = indexVout(vout, _index);\\n        bytes29 _lockingScriptBytes29 = scriptPubkey(output);\\n        _lockingScript = _lockingScriptBytes29.clone();\\n    }\\n\\n    /// @notice                   Returns number of outputs in a vout\\n    /// @param _vout              The vout of a Bitcoin transaction           \\n    function numberOfOutputs(bytes memory _vout) internal pure returns (uint _numberOfOutputs) {\\n        bytes29 voutView = tryAsVout(_vout.ref(uint40(BTCTypes.Unknown)));\\n        _numberOfOutputs = uint256(indexCompactInt(voutView, 0));\\n    }\\n\\n    /// @notice             determines the length of the first output in an array of outputs\\n    /// @param _outputs     the vout without its length prefix\\n    /// @return             the output length\\n    function outputLength(bytes29 _outputs) private pure typeAssert(_outputs, BTCTypes.IntermediateTxOuts) returns (uint256) {\\n        uint64 scriptLength = indexCompactInt(_outputs, 8);\\n        return uint256(compactIntLength(scriptLength)) + uint256(scriptLength) + 8;\\n    }\\n\\n    /// @notice         extracts the output at a specified index\\n    /// @param _vout    the vout\\n    /// @param _index   the index of the desired output\\n    /// @return         the desired output\\n    function indexVout(bytes29 _vout, uint256 _index) internal pure typeAssert(_vout, BTCTypes.Vout) returns (bytes29) {\\n        uint256 _nOuts = uint256(indexCompactInt(_vout, 0));\\n        uint256 _viewLen = _vout.len();\\n        require(_index < _nOuts, \\\"Vout read overrun\\\");\\n\\n        uint256 _offset = uint256(compactIntLength(uint64(_nOuts)));\\n        bytes29 _remaining;\\n        for (uint256 _i = 0; _i < _index; _i += 1) {\\n            _remaining = _vout.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxOuts));\\n            _offset += outputLength(_remaining);\\n        }\\n\\n        _remaining = _vout.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxOuts));\\n        uint256 _len = outputLength(_remaining);\\n        return _vout.slice(_offset, _len, uint40(BTCTypes.TxOut));\\n    }\\n\\n    /// @notice         extracts the Op Return Payload\\n    /// @dev            structure of the input is: 1 byte op return + 2 bytes indicating the length of payload + max length for op return payload is 80 bytes\\n    /// @param _spk     the scriptPubkey\\n    /// @return         the Op Return Payload (or null if not a valid Op Return output)\\n    function opReturnPayloadBig(bytes29 _spk) internal pure typeAssert(_spk, BTCTypes.ScriptPubkey) returns (bytes29) {\\n        uint64 _bodyLength = indexCompactInt(_spk, 0);\\n        uint64 _payloadLen = _spk.indexUint(3, 1).toUint64();\\n        if (_bodyLength > 83 || _bodyLength < 4 || _spk.indexUint(1, 1) != 0x6a || _spk.indexUint(3, 1) != _bodyLength - 3) {\\n            return TypedMemView.nullView();\\n        }\\n        return _spk.slice(4, _payloadLen, uint40(BTCTypes.OpReturnPayload));\\n    }\\n\\n    /// @notice         extracts the Op Return Payload\\n    /// @dev            structure of the input is: 1 byte op return + 1 bytes indicating the length of payload + max length for op return payload is 75 bytes\\n    /// @param _spk     the scriptPubkey\\n    /// @return         the Op Return Payload (or null if not a valid Op Return output)\\n    function opReturnPayloadSmall(bytes29 _spk) internal pure typeAssert(_spk, BTCTypes.ScriptPubkey) returns (bytes29) {\\n        uint64 _bodyLength = indexCompactInt(_spk, 0);\\n        uint64 _payloadLen = _spk.indexUint(2, 1).toUint64();\\n        if (_bodyLength > 77 || _bodyLength < 4 || _spk.indexUint(1, 1) != 0x6a || _spk.indexUint(2, 1) != _bodyLength - 2) {\\n            return TypedMemView.nullView();\\n        }\\n        return _spk.slice(3, _payloadLen, uint40(BTCTypes.OpReturnPayload));\\n    }\\n\\n    /// @notice     verifies the vin and converts to a typed memory\\n    /// @dev        will return null in error cases\\n    /// @param _vin the vin\\n    /// @return     the typed vin (or null if error)\\n    function tryAsVin(bytes29 _vin) internal pure typeAssert(_vin, BTCTypes.Unknown) returns (bytes29) {\\n        if (_vin.len() == 0) {\\n            return TypedMemView.nullView();\\n        }\\n        uint64 _nIns = indexCompactInt(_vin, 0);\\n        uint256 _viewLen = _vin.len();\\n        if (_nIns == 0) {\\n            return TypedMemView.nullView();\\n        }\\n\\n        uint256 _offset = uint256(compactIntLength(_nIns));\\n        for (uint256 i = 0; i < _nIns; i++) {\\n            if (_offset >= _viewLen) {\\n                // We've reached the end, but are still trying to read more\\n                return TypedMemView.nullView();\\n            }\\n            bytes29 _remaining = _vin.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxIns));\\n            _offset += inputLength(_remaining);\\n        }\\n        if (_offset != _viewLen) {\\n            return TypedMemView.nullView();\\n        }\\n        return _vin.castTo(uint40(BTCTypes.Vin));\\n    }\\n\\n    /// @notice         verifies the vout and converts to a typed memory\\n    /// @dev            will return null in error cases\\n    /// @param _vout    the vout\\n    /// @return         the typed vout (or null if error)\\n    function tryAsVout(bytes29 _vout) internal pure typeAssert(_vout, BTCTypes.Unknown) returns (bytes29) {\\n        if (_vout.len() == 0) {\\n            return TypedMemView.nullView();\\n        }\\n        uint64 _nOuts = indexCompactInt(_vout, 0);\\n\\n        uint256 _viewLen = _vout.len();\\n        if (_nOuts == 0) {\\n            return TypedMemView.nullView();\\n        }\\n\\n        uint256 _offset = uint256(compactIntLength(_nOuts));\\n        for (uint256 i = 0; i < _nOuts; i++) {\\n            if (_offset >= _viewLen) {\\n                // We've reached the end, but are still trying to read more\\n                return TypedMemView.nullView();\\n            }\\n            bytes29 _remaining = _vout.postfix(_viewLen - _offset, uint40(BTCTypes.IntermediateTxOuts));\\n            _offset += outputLength(_remaining);\\n        }\\n        if (_offset != _viewLen) {\\n            return TypedMemView.nullView();\\n        }\\n        return _vout.castTo(uint40(BTCTypes.Vout));\\n    }\\n\\n    /// @notice         verifies the header and converts to a typed memory\\n    /// @dev            will return null in error cases\\n    /// @param _header  the header\\n    /// @return         the typed header (or null if error)\\n    function tryAsHeader(bytes29 _header) internal pure typeAssert(_header, BTCTypes.Unknown) returns (bytes29) {\\n        if (_header.len() != 80) {\\n            return TypedMemView.nullView();\\n        }\\n        return _header.castTo(uint40(BTCTypes.Header));\\n    }\\n\\n\\n    /// @notice         Index a header array.\\n    /// @dev            Errors on overruns\\n    /// @param _arr     The header array\\n    /// @param index    The 0-indexed location of the header to get\\n    /// @return         the typed header at `index`\\n    function indexHeaderArray(bytes29 _arr, uint256 index) internal pure typeAssert(_arr, BTCTypes.HeaderArray) returns (bytes29) {\\n        uint256 _start = index * 80;\\n        return _arr.slice(_start, 80, uint40(BTCTypes.Header));\\n    }\\n\\n\\n    /// @notice     verifies the header array and converts to a typed memory\\n    /// @dev        will return null in error cases\\n    /// @param _arr the header array\\n    /// @return     the typed header array (or null if error)\\n    function tryAsHeaderArray(bytes29 _arr) internal pure typeAssert(_arr, BTCTypes.Unknown) returns (bytes29) {\\n        if (_arr.len() % 80 != 0) {\\n            return TypedMemView.nullView();\\n        }\\n        return _arr.castTo(uint40(BTCTypes.HeaderArray));\\n    }\\n\\n    /// @notice     verifies the merkle array and converts to a typed memory\\n    /// @dev        will return null in error cases\\n    /// @param _arr the merkle array\\n    /// @return     the typed merkle array (or null if error)\\n    function tryAsMerkleArray(bytes29 _arr) internal pure typeAssert(_arr, BTCTypes.Unknown) returns (bytes29) {\\n        if (_arr.len() % 32 != 0) {\\n            return TypedMemView.nullView();\\n        }\\n        return _arr.castTo(uint40(BTCTypes.MerkleArray));\\n    }\\n\\n    /// @notice         extracts the merkle root from the header\\n    /// @param _header  the header\\n    /// @return         the merkle root\\n    function merkleRoot(bytes29 _header) internal pure typeAssert(_header, BTCTypes.Header) returns (bytes32) {\\n        return _header.index(36, 32);\\n    }\\n\\n    /// @notice         extracts the target from the header\\n    /// @param _header  the header\\n    /// @return         the target\\n    function target(bytes29  _header) internal pure typeAssert(_header, BTCTypes.Header) returns (uint256) {\\n        uint256 _mantissa = _header.indexLEUint(72, 3);\\n        require(_header.indexUint(75, 1) > 2, \\\"ViewBTC: invalid target difficulty\\\");\\n        uint256 _exponent = _header.indexUint(75, 1) - 3;\\n        return _mantissa * (256 ** _exponent);\\n    }\\n\\n    /// @notice         calculates the difficulty from a target\\n    /// @param _target  the target\\n    /// @return         the difficulty\\n    function toDiff(uint256  _target) private pure returns (uint256) {\\n        return DIFF1_TARGET / (_target);\\n    }\\n\\n    /// @notice         extracts the difficulty from the header\\n    /// @param _header  the header\\n    /// @return         the difficulty\\n    function diff(bytes29  _header) internal pure typeAssert(_header, BTCTypes.Header) returns (uint256) {\\n        return toDiff(target(_header));\\n    }\\n\\n    /// @notice         extracts the timestamp from the header\\n    /// @param _header  the header\\n    /// @return         the timestamp\\n    function time(bytes29  _header) internal pure typeAssert(_header, BTCTypes.Header) returns (uint32) {\\n        return uint32(_header.indexLEUint(68, 4));\\n    }\\n\\n    /// @notice         extracts the parent hash from the header\\n    /// @param _header  the header\\n    /// @return         the parent hash\\n    function parent(bytes29 _header) internal pure typeAssert(_header, BTCTypes.Header) returns (bytes32) {\\n        return _header.index(4, 32);\\n    }\\n\\n    /// @notice                     Checks validity of header chain\\n    /// @dev                        Compares current header parent to previous header's digest\\n    /// @param _header              The raw bytes header\\n    /// @param _prevHeaderDigest    The previous header's digest\\n    /// @return                     true if the connect is valid, false otherwise\\n    function checkParent(bytes29 _header, bytes32 _prevHeaderDigest) internal pure typeAssert(_header, BTCTypes.Header) returns (bool) {\\n        return parent(_header) == _prevHeaderDigest;\\n    }\\n\\n    /// @notice                     Validates a tx inclusion in the block\\n    /// @dev                        `index` is not a reliable indicator of location within a block\\n    /// @param _txid                The txid (LE)\\n    /// @param _merkleRoot          The merkle root\\n    /// @param _intermediateNodes   The proof's intermediate nodes (digests between leaf and root)\\n    /// @param _index               The leaf's index in the tree (0-indexed)\\n    /// @return                     true if fully valid, false otherwise\\n    function prove( \\n        bytes32 _txid,\\n        bytes32 _merkleRoot,\\n        bytes29 _intermediateNodes,\\n        uint _index\\n    ) internal view typeAssert(_intermediateNodes, BTCTypes.MerkleArray) returns (bool) {\\n        // Shortcut the empty-block case\\n        if (\\n            _txid == _merkleRoot &&\\n                _index == 0 &&\\n                    _intermediateNodes.len() == 0\\n        ) {\\n            return true;\\n        }\\n\\n        return checkMerkle(_txid, _intermediateNodes, _merkleRoot, _index);\\n    }\\n\\n    /// @notice         verifies a merkle proof\\n    /// @dev            leaf, proof, and root are in LE format\\n    /// @param _leaf    the leaf\\n    /// @param _proof   the proof nodes\\n    /// @param _root    the merkle root\\n    /// @param _index   the index\\n    /// @return         true if valid, false if otherwise\\n    function checkMerkle(\\n        bytes32 _leaf,\\n        bytes29 _proof,\\n        bytes32 _root,\\n        uint256 _index\\n    ) private view typeAssert(_proof, BTCTypes.MerkleArray) returns (bool) {\\n        uint256 nodes = _proof.len() / 32;\\n        if (nodes == 0) {\\n            return _leaf == _root;\\n        }\\n\\n        uint256 _idx = _index;\\n        bytes32 _current = _leaf;\\n\\n        for (uint i = 0; i < nodes; i++) {\\n            bytes32 _next = _proof.index(i * 32, 32);\\n            if (_idx % 2 == 1) {\\n                _current = merkleStep(_next, _current);\\n            } else {\\n                _current = merkleStep(_current, _next);\\n            }\\n            _idx >>= 1;\\n        }\\n\\n        return _current == _root;\\n    }\\n\\n    /// @notice          Concatenates and hashes two inputs for merkle proving\\n    /// @dev             Not recommended to call directly.\\n    /// @param _a        The first hash\\n    /// @param _b        The second hash\\n    /// @return digest   The double-sha256 of the concatenated hashes\\n    function merkleStep(bytes32 _a, bytes32 _b) private view returns (bytes32 digest) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            mstore(ptr, _a)\\n            mstore(add(ptr, 0x20), _b)\\n            pop(staticcall(gas(), 2, ptr, 0x40, ptr, 0x20)) // sha256 #1\\n            pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha256 #2\\n            digest := mload(ptr)\\n        }\\n    }\\n\\n    /// @notice                 performs the bitcoin difficulty retarget\\n    /// @dev                    implements the Bitcoin algorithm precisely\\n    /// @param _previousTarget  the target of the previous period\\n    /// @param _firstTimestamp  the timestamp of the first block in the difficulty period\\n    /// @param _secondTimestamp the timestamp of the last block in the difficulty period\\n    /// @return                 the new period's target threshold\\n    function retargetAlgorithm(\\n        uint256 _previousTarget,\\n        uint256 _firstTimestamp,\\n        uint256 _secondTimestamp\\n    ) internal pure returns (uint256) {\\n        uint256 _elapsedTime = _secondTimestamp - _firstTimestamp;\\n\\n        // Normalize ratio to factor of 4 if very long or very short\\n        if (_elapsedTime < RETARGET_PERIOD / 4) {\\n            _elapsedTime = RETARGET_PERIOD / 4;\\n        }\\n        if (_elapsedTime > RETARGET_PERIOD * 4) {\\n            _elapsedTime = RETARGET_PERIOD * 4;\\n        }\\n\\n        /*\\n            NB: high targets e.g. ffff0020 can cause overflows here\\n                so we divide it by 256**2, then multiply by 256**2 later\\n                we know the target is evenly divisible by 256**2, so this isn't an issue\\n        */\\n        uint256 _adjusted = _previousTarget / 65536 * _elapsedTime;\\n        return _adjusted / RETARGET_PERIOD * 65536;\\n    }\\n}\",\"keccak256\":\"0xaa971daf5757b21dce5e3cbf68c8d113033e4e8f1ecd1101c7d314807f1e4dd9\",\"license\":\"MIT\"},\"contracts/libraries/TypedMemView.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\n/** @author Summa (https://summa.one) */\\n\\n/*\\n    Original version: https://github.com/summa-tx/memview-sol/blob/main/contracts/TypedMemView.sol\\n    We made few changes to the original version:\\n    1. Use solidity version 8 compiler\\n    2. Remove SafeMath library\\n    3. Add unchecked in line 522\\n*/\\n\\nlibrary TypedMemView {\\n\\n    // Why does this exist?\\n    // the solidity `bytes memory` type has a few weaknesses.\\n    // 1. You can't index ranges effectively\\n    // 2. You can't slice without copying\\n    // 3. The underlying data may represent any type\\n    // 4. Solidity never deallocates memory, and memory costs grow\\n    //    superlinearly\\n\\n    // By using a memory view instead of a `bytes memory` we get the following\\n    // advantages:\\n    // 1. Slices are done on the stack, by manipulating the pointer\\n    // 2. We can index arbitrary ranges and quickly convert them to stack types\\n    // 3. We can insert type info into the pointer, and typecheck at runtime\\n\\n    // This makes `TypedMemView` a useful tool for efficient zero-copy\\n    // algorithms.\\n\\n    // Why bytes29?\\n    // We want to avoid confusion between views, digests, and other common\\n    // types so we chose a large and uncommonly used odd number of bytes\\n    //\\n    // Note that while bytes are left-aligned in a word, integers and addresses\\n    // are right-aligned. This means when working in assembly we have to\\n    // account for the 3 unused bytes on the righthand side\\n    //\\n    // First 5 bytes are a type flag.\\n    // - ff_ffff_fffe is reserved for unknown type.\\n    // - ff_ffff_ffff is reserved for invalid types/errors.\\n    // next 12 are memory address\\n    // next 12 are len\\n    // bottom 3 bytes are empty\\n\\n    // Assumptions:\\n    // - non-modification of memory.\\n    // - No Solidity updates\\n    // - - wrt free mem point\\n    // - - wrt bytes representation in memory\\n    // - - wrt memory addressing in general\\n\\n    // Usage:\\n    // - create type constants\\n    // - use `assertType` for runtime type assertions\\n    // - - unfortunately we can't do this at compile time yet :(\\n    // - recommended: implement modifiers that perform type checking\\n    // - - e.g.\\n    // - - `uint40 constant MY_TYPE = 3;`\\n    // - - ` modifer onlyMyType(bytes29 myView) { myView.assertType(MY_TYPE); }`\\n    // - instantiate a typed view from a bytearray using `ref`\\n    // - use `index` to inspect the contents of the view\\n    // - use `slice` to create smaller views into the same memory\\n    // - - `slice` can increase the offset\\n    // - - `slice can decrease the length`\\n    // - - must specify the output type of `slice`\\n    // - - `slice` will return a null view if you try to overrun\\n    // - - make sure to explicitly check for this with `notNull` or `assertType`\\n    // - use `equal` for typed comparisons.\\n\\n\\n    // The null view\\n    bytes29 internal constant NULL = hex\\\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\\\";\\n    uint256 constant LOW_12_MASK = 0xffffffffffffffffffffffff;\\n    uint8 constant TWELVE_BYTES = 96;\\n\\n    /**\\n     * @notice      Returns the encoded hex character that represents the lower 4 bits of the argument.\\n     * @param _b    The byte\\n     * @return      char - The encoded hex character\\n     */\\n    function nibbleHex(uint8 _b) internal pure returns (uint8 char) {\\n        // This can probably be done more efficiently, but it's only in error\\n        // paths, so we don't really care :)\\n        uint8 _nibble = _b | 0xf0; // set top 4, keep bottom 4\\n        if (_nibble == 0xf0) {return 0x30;} // 0\\n        if (_nibble == 0xf1) {return 0x31;} // 1\\n        if (_nibble == 0xf2) {return 0x32;} // 2\\n        if (_nibble == 0xf3) {return 0x33;} // 3\\n        if (_nibble == 0xf4) {return 0x34;} // 4\\n        if (_nibble == 0xf5) {return 0x35;} // 5\\n        if (_nibble == 0xf6) {return 0x36;} // 6\\n        if (_nibble == 0xf7) {return 0x37;} // 7\\n        if (_nibble == 0xf8) {return 0x38;} // 8\\n        if (_nibble == 0xf9) {return 0x39;} // 9\\n        if (_nibble == 0xfa) {return 0x61;} // a\\n        if (_nibble == 0xfb) {return 0x62;} // b\\n        if (_nibble == 0xfc) {return 0x63;} // c\\n        if (_nibble == 0xfd) {return 0x64;} // d\\n        if (_nibble == 0xfe) {return 0x65;} // e\\n        if (_nibble == 0xff) {return 0x66;} // f\\n    }\\n\\n    /**\\n     * @notice      Returns a uint16 containing the hex-encoded byte.\\n     *              `the first 8 bits of encoded is the nibbleHex of top 4 bits of _b`\\n     *              `the second 8 bits of encoded is the nibbleHex of lower 4 bits of _b`\\n     * @param _b    The byte\\n     * @return      encoded - The hex-encoded byte\\n     */\\n    function byteHex(uint8 _b) internal pure returns (uint16 encoded) {\\n        encoded |= nibbleHex(_b >> 4); // top 4 bits\\n        encoded <<= 8;\\n        encoded |= nibbleHex(_b); // lower 4 bits\\n    }\\n\\n    /**\\n     * @notice      Encodes the uint256 to hex. `first` contains the encoded top 16 bytes.\\n     *              `second` contains the encoded lower 16 bytes.\\n     *\\n     * @param _b    The 32 bytes as uint256\\n     * @return      first - The top 16 bytes\\n     * @return      second - The bottom 16 bytes\\n     */\\n    function encodeHex(uint256 _b) internal pure returns (uint256 first, uint256 second) {\\n        for (uint8 i = 31; i > 15; i -= 1) {\\n            uint8 _byte = uint8(_b >> (i * 8));\\n            first |= byteHex(_byte);\\n            if (i != 16) {\\n                first <<= 16;\\n            }\\n        }\\n\\n        unchecked {\\n            // abusing underflow here =_=\\n            for (uint8 i = 15; i < 255 ; i -= 1) {\\n                uint8 _byte = uint8(_b >> (i * 8));\\n                second |= byteHex(_byte);\\n                if (i != 0) {\\n                    second <<= 16;\\n                }\\n            }\\n        }\\n        \\n    }\\n\\n    /**\\n     * @notice          Changes the endianness of a uint256.\\n     * @dev             https://graphics.stanford.edu/~seander/bithacks.html#ReverseParallel\\n     * @param _b        The unsigned integer to reverse\\n     * @return          v - The reversed value\\n     */\\n    function reverseUint256(uint256 _b) internal pure returns (uint256 v) {\\n        v = _b;\\n\\n        // swap bytes\\n        v = ((v >> 8) & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) |\\n        ((v & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) << 8);\\n        // swap 2-byte long pairs\\n        v = ((v >> 16) & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) |\\n        ((v & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) << 16);\\n        // swap 4-byte long pairs\\n        v = ((v >> 32) & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) |\\n        ((v & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) << 32);\\n        // swap 8-byte long pairs\\n        v = ((v >> 64) & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) |\\n        ((v & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) << 64);\\n        // swap 16-byte long pairs\\n        v = (v >> 128) | (v << 128);\\n    }\\n\\n    /**\\n     * @notice      Create a mask with the highest `_len` bits set.\\n     * @param _len  The length\\n     * @return      mask - The mask\\n     */\\n    function leftMask(uint8 _len) private pure returns (uint256 mask) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            mask := sar(\\n            sub(_len, 1),\\n            0x8000000000000000000000000000000000000000000000000000000000000000\\n            )\\n        }\\n    }\\n\\n    /**\\n     * @notice      Return the null view.\\n     * @return      bytes29 - The null view\\n     */\\n    function nullView() internal pure returns (bytes29) {\\n        return NULL;\\n    }\\n\\n    /**\\n     * @notice      Check if the view is null.\\n     * @return      bool - True if the view is null\\n     */\\n    function isNull(bytes29 memView) internal pure returns (bool) {\\n        return memView == NULL;\\n    }\\n\\n    /**\\n     * @notice      Check if the view is not null.\\n     * @return      bool - True if the view is not null\\n     */\\n    function notNull(bytes29 memView) internal pure returns (bool) {\\n        return !isNull(memView);\\n    }\\n\\n    /**\\n     * @notice          Check if the view is of a valid type and points to a valid location\\n     *                  in memory.\\n     * @dev             We perform this check by examining solidity's unallocated memory\\n     *                  pointer and ensuring that the view's upper bound is less than that.\\n     * @param memView   The view\\n     * @return          ret - True if the view is valid\\n     */\\n    function isValid(bytes29 memView) internal pure returns (bool ret) {\\n        if (typeOf(memView) == 0xffffffffff) {return false;}\\n        uint256 _end = end(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ret := not(gt(_end, mload(0x40)))\\n        }\\n    }\\n\\n    /**\\n     * @notice          Require that a typed memory view be valid.\\n     * @dev             Returns the view for easy chaining.\\n     * @param memView   The view\\n     * @return          bytes29 - The validated view\\n     */\\n    function assertValid(bytes29 memView) internal pure returns (bytes29) {\\n        require(isValid(memView), \\\"Validity assertion failed\\\");\\n        return memView;\\n    }\\n\\n    /**\\n     * @notice          Return true if the memview is of the expected type. Otherwise false.\\n     * @param memView   The view\\n     * @param _expected The expected type\\n     * @return          bool - True if the memview is of the expected type\\n     */\\n    function isType(bytes29 memView, uint40 _expected) internal pure returns (bool) {\\n        return typeOf(memView) == _expected;\\n    }\\n\\n    /**\\n     * @notice          Require that a typed memory view has a specific type.\\n     * @dev             Returns the view for easy chaining.\\n     * @param memView   The view\\n     * @param _expected The expected type\\n     * @return          bytes29 - The view with validated type\\n     */\\n    function assertType(bytes29 memView, uint40 _expected) internal pure returns (bytes29) {\\n        if (!isType(memView, _expected)) {\\n            (, uint256 g) = encodeHex(uint256(typeOf(memView)));\\n            (, uint256 e) = encodeHex(uint256(_expected));\\n            string memory err = string(\\n                abi.encodePacked(\\n                    \\\"Type assertion failed. Got 0x\\\",\\n                    uint80(g),\\n                    \\\". Expected 0x\\\",\\n                    uint80(e)\\n                )\\n            );\\n            revert(err);\\n        }\\n        return memView;\\n    }\\n\\n    /**\\n     * @notice          Return an identical view with a different type.\\n     * @param memView   The view\\n     * @param _newType  The new type\\n     * @return          newView - The new view with the specified type\\n     */\\n    function castTo(bytes29 memView, uint40 _newType) internal pure returns (bytes29 newView) {\\n        // then | in the new type\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n        // shift off the top 5 bytes\\n            newView := or(newView, shr(40, shl(40, memView)))\\n            newView := or(newView, shl(216, _newType))\\n        }\\n    }\\n\\n    /**\\n     * @notice          Unsafe raw pointer construction. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @dev             Unsafe raw pointer construction. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @param _type     The type\\n     * @param _loc      The memory address\\n     * @param _len      The length\\n     * @return          newView - The new view with the specified type, location and length\\n     */\\n    function unsafeBuildUnchecked(uint256 _type, uint256 _loc, uint256 _len) private pure returns (bytes29 newView) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            newView := shl(96, or(newView, _type)) // insert type\\n            newView := shl(96, or(newView, _loc))  // insert loc\\n            newView := shl(24, or(newView, _len))  // empty bottom 3 bytes\\n        }\\n    }\\n\\n    /**\\n     * @notice          Instantiate a new memory view. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @dev             Instantiate a new memory view. This should generally not be called\\n     *                  directly. Prefer `ref` wherever possible.\\n     * @param _type     The type\\n     * @param _loc      The memory address\\n     * @param _len      The length\\n     * @return          newView - The new view with the specified type, location and length\\n     */\\n    function build(uint256 _type, uint256 _loc, uint256 _len) internal pure returns (bytes29 newView) {\\n        uint256 _end = _loc + _len;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            if gt(_end, mload(0x40)) {\\n                _end := 0\\n            }\\n        }\\n        if (_end == 0) {\\n            return NULL;\\n        }\\n        newView = unsafeBuildUnchecked(_type, _loc, _len);\\n    }\\n\\n    /**\\n     * @notice          Instantiate a memory view from a byte array.\\n     * @dev             Note that due to Solidity memory representation, it is not possible to\\n     *                  implement a deref, as the `bytes` type stores its len in memory.\\n     * @param arr       The byte array\\n     * @param newType   The type\\n     * @return          bytes29 - The memory view\\n     */\\n    function ref(bytes memory arr, uint40 newType) internal pure returns (bytes29) {\\n        uint256 _len = arr.length;\\n\\n        uint256 _loc;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            _loc := add(arr, 0x20)  // our view is of the data, not the struct\\n        }\\n\\n        return build(newType, _loc, _len);\\n    }\\n\\n    /**\\n     * @notice          Return the associated type information.\\n     * @param memView   The memory view\\n     * @return          _type - The type associated with the view\\n     */\\n    function typeOf(bytes29 memView) internal pure returns (uint40 _type) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n        // 216 == 256 - 40\\n            _type := shr(216, memView) // shift out lower (12 + 12 + 3) bytes\\n        }\\n    }\\n\\n    /**\\n     * @notice          Optimized type comparison. Checks that the 5-byte type flag is equal.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the 5-byte type flag is equal\\n     */\\n    function sameType(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        // XOR the inputs to check their difference\\n        return (left ^ right) >> (2 * TWELVE_BYTES) == 0;\\n    }\\n\\n    /**\\n     * @notice          Return the memory address of the underlying bytes.\\n     * @param memView   The view\\n     * @return          _loc - The memory address\\n     */\\n    function loc(bytes29 memView) internal pure returns (uint96 _loc) {\\n        uint256 _mask = LOW_12_MASK;  // assembly can't use globals\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n        // 120 bits = 12 bytes (the encoded loc) + 3 bytes (empty low space)\\n            _loc := and(shr(120, memView), _mask)\\n        }\\n    }\\n\\n    /**\\n     * @notice          The number of memory words this memory view occupies, rounded up.\\n     * @param memView   The view\\n     * @return          uint256 - The number of memory words\\n     */\\n    function words(bytes29 memView) internal pure returns (uint256) {\\n        return (uint256(len(memView)) + 32) / 32;\\n    }\\n\\n    /**\\n     * @notice          The in-memory footprint of a fresh copy of the view.\\n     * @param memView   The view\\n     * @return          uint256 - The in-memory footprint of a fresh copy of the view.\\n     */\\n    function footprint(bytes29 memView) internal pure returns (uint256) {\\n        return words(memView) * 32;\\n    }\\n\\n    /**\\n     * @notice          The number of bytes of the view.\\n     * @param memView   The view\\n     * @return          _len - The length of the view\\n     */\\n    function len(bytes29 memView) internal pure returns (uint96 _len) {\\n        uint256 _mask = LOW_12_MASK;  // assembly can't use globals\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            _len := and(shr(24, memView), _mask)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Returns the endpoint of `memView`.\\n     * @param memView   The view\\n     * @return          uint256 - The endpoint of `memView`\\n     */\\n    function end(bytes29 memView) internal pure returns (uint256) {\\n        return loc(memView) + len(memView);\\n    }\\n\\n    /**\\n     * @notice          Safe slicing without memory modification.\\n     * @param memView   The view\\n     * @param _index    The start index\\n     * @param _len      The length\\n     * @param newType   The new type\\n     * @return          bytes29 - The new view\\n     */\\n    function slice(bytes29 memView, uint256 _index, uint256 _len, uint40 newType) internal pure returns (bytes29) {\\n        uint256 _loc = loc(memView);\\n\\n        // Ensure it doesn't overrun the view\\n        if (_loc + _index + _len > end(memView)) {\\n            return NULL;\\n        }\\n\\n        _loc = _loc + _index;\\n        return build(newType, _loc, _len);\\n    }\\n\\n    /**\\n     * @notice          Shortcut to `slice`. Gets a view representing the first `_len` bytes.\\n     * @param memView   The view\\n     * @param _len      The length\\n     * @param newType   The new type\\n     * @return          bytes29 - The new view\\n     */\\n    function prefix(bytes29 memView, uint256 _len, uint40 newType) internal pure returns (bytes29) {\\n        return slice(memView, 0, _len, newType);\\n    }\\n\\n    /**\\n     * @notice          Shortcut to `slice`. Gets a view representing the last `_len` bytes.\\n     * @param memView   The view\\n     * @param _len      The length\\n     * @param newType   The new type\\n     * @return          bytes29 - The new view\\n     */\\n    function postfix(bytes29 memView, uint256 _len, uint40 newType) internal pure returns (bytes29) {\\n        return slice(memView, uint256(len(memView)) - _len, _len, newType);\\n    }\\n\\n    /**\\n     * @notice          Construct an error message for an indexing overrun.\\n     * @param _loc      The memory address\\n     * @param _len      The length\\n     * @param _index    The index\\n     * @param _slice    The slice where the overrun occurred\\n     * @return          err - The err\\n     */\\n    function indexErrOverrun(\\n        uint256 _loc,\\n        uint256 _len,\\n        uint256 _index,\\n        uint256 _slice\\n    ) internal pure returns (string memory err) {\\n        (, uint256 a) = encodeHex(_loc);\\n        (, uint256 b) = encodeHex(_len);\\n        (, uint256 c) = encodeHex(_index);\\n        (, uint256 d) = encodeHex(_slice);\\n        err = string(\\n            abi.encodePacked(\\n                \\\"TypedMemView/index - Overran the view. Slice is at 0x\\\",\\n                uint48(a),\\n                \\\" with length 0x\\\",\\n                uint48(b),\\n                \\\". Attempted to index at offset 0x\\\",\\n                uint48(c),\\n                \\\" with length 0x\\\",\\n                uint48(d),\\n                \\\".\\\"\\n            )\\n        );\\n    }\\n\\n    /**\\n     * @notice          Load up to 32 bytes from the view onto the stack.\\n     * @dev             Returns a bytes32 with only the `_bytes` highest bytes set.\\n     *                  This can be immediately cast to a smaller fixed-length byte array.\\n     *                  To automatically cast to an integer, use `indexUint`.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @param _bytes    The bytes length\\n     * @return          result - The 32 byte result\\n     */\\n    function index(bytes29 memView, uint256 _index, uint8 _bytes) internal pure returns (bytes32 result) {\\n        if (_bytes == 0) {return bytes32(0);}\\n        if (_index + _bytes > len(memView)) {\\n            revert(indexErrOverrun(loc(memView), len(memView), _index, uint256(_bytes)));\\n        }\\n        require(_bytes <= 32, \\\"TypedMemView/index - Attempted to index more than 32 bytes\\\");\\n\\n        unchecked {\\n            uint8 bitLength = _bytes * 8;\\n            uint256 _loc = loc(memView);\\n            uint256 _mask = leftMask(bitLength);\\n            assembly {\\n                // solium-disable-previous-line security/no-inline-assembly\\n                result := and(mload(add(_loc, _index)), _mask)\\n            }   \\n        }\\n\\n    }\\n\\n    /**\\n     * @notice          Parse an unsigned integer from the view at `_index`.\\n     * @dev             Requires that the view has >= `_bytes` bytes following that index.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @param _bytes    The bytes length\\n     * @return          result - The unsigned integer\\n     */\\n    function indexUint(bytes29 memView, uint256 _index, uint8 _bytes) internal pure returns (uint256 result) {\\n        return uint256(index(memView, _index, _bytes)) >> ((32 - _bytes) * 8);\\n    }\\n\\n    /**\\n     * @notice          Parse an unsigned integer from LE bytes.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @param _bytes    The bytes length\\n     * @return          result - The unsigned integer\\n     */\\n    function indexLEUint(bytes29 memView, uint256 _index, uint8 _bytes) internal pure returns (uint256 result) {\\n        return reverseUint256(uint256(index(memView, _index, _bytes)));\\n    }\\n\\n    /**\\n     * @notice          Parse an address from the view at `_index`. Requires that the view have >= 20 bytes\\n     *                  following that index.\\n     * @param memView   The view\\n     * @param _index    The index\\n     * @return          address - The address\\n     */\\n    function indexAddress(bytes29 memView, uint256 _index) internal pure returns (address) {\\n        return address(uint160(indexUint(memView, _index, 20)));\\n    }\\n\\n    /**\\n     * @notice          Return the keccak256 hash of the underlying memory\\n     * @param memView   The view\\n     * @return          digest - The keccak256 hash of the underlying memory\\n     */\\n    function keccak(bytes29 memView) internal pure returns (bytes32 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            digest := keccak256(_loc, _len)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Return the sha2 digest of the underlying memory.\\n     * @dev             We explicitly deallocate memory afterwards.\\n     * @param memView   The view\\n     * @return          digest - The sha2 hash of the underlying memory\\n     */\\n    function sha2(bytes29 memView) internal view returns (bytes32 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\\n            digest := mload(ptr)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Implements bitcoin's hash160 (rmd160(sha2()))\\n     * @param memView   The pre-image\\n     * @return          digest - the Digest\\n     */\\n    function hash160(bytes29 memView) internal view returns (bytes20 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2\\n            pop(staticcall(gas(), 3, ptr, 0x20, ptr, 0x20)) // rmd160\\n            digest := mload(add(ptr, 0xc)) // return value is 0-prefixed.\\n        }\\n    }\\n\\n    /**\\n     * @notice          Implements bitcoin's hash256 (double sha2)\\n     * @param memView   A view of the preimage\\n     * @return          digest - the Digest\\n     */\\n    function hash256(bytes29 memView) internal view returns (bytes32 digest) {\\n        uint256 _loc = loc(memView);\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n            pop(staticcall(gas(), 2, _loc, _len, ptr, 0x20)) // sha2 #1\\n            pop(staticcall(gas(), 2, ptr, 0x20, ptr, 0x20)) // sha2 #2\\n            digest := mload(ptr)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Return true if the underlying memory is equal. Else false.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the underlying memory is equal\\n     */\\n    function untypedEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        return (loc(left) == loc(right) && len(left) == len(right)) || keccak(left) == keccak(right);\\n    }\\n\\n    /**\\n     * @notice          Return false if the underlying memory is equal. Else true.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - False if the underlying memory is equal\\n     */\\n    function untypedNotEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        return !untypedEqual(left, right);\\n    }\\n\\n    /**\\n     * @notice          Compares type equality.\\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the types are the same\\n     */\\n    function equal(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        return left == right || (typeOf(left) == typeOf(right) && keccak(left) == keccak(right));\\n    }\\n\\n    /**\\n     * @notice          Compares type inequality.\\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n     * @param left      The first view\\n     * @param right     The second view\\n     * @return          bool - True if the types are not the same\\n     */\\n    function notEqual(bytes29 left, bytes29 right) internal pure returns (bool) {\\n        return !equal(left, right);\\n    }\\n\\n    /**\\n     * @notice          Copy the view to a location, return an unsafe memory reference\\n     * @dev             Super Dangerous direct memory access.\\n     *\\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\\n     *                  As such it MUST be consumed IMMEDIATELY.\\n     *                  This function is private to prevent unsafe usage by callers.\\n     * @param memView   The view\\n     * @param _newLoc   The new location\\n     * @return          written - the unsafe memory reference\\n     */\\n    function unsafeCopyTo(bytes29 memView, uint256 _newLoc) private view returns (bytes29 written) {\\n        require(notNull(memView), \\\"TypedMemView/copyTo - Null pointer deref\\\");\\n        require(isValid(memView), \\\"TypedMemView/copyTo - Invalid pointer deref\\\");\\n        uint256 _len = len(memView);\\n        uint256 _oldLoc = loc(memView);\\n\\n        uint256 ptr;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40)\\n        // revert if we're writing in occupied memory\\n            if gt(ptr, _newLoc) {\\n                revert(0x60, 0x20) // empty revert message\\n            }\\n\\n        // use the identity precompile to copy\\n        // guaranteed not to fail, so pop the success\\n            pop(staticcall(gas(), 4, _oldLoc, _len, _newLoc, _len))\\n        }\\n\\n        written = unsafeBuildUnchecked(typeOf(memView), _newLoc, _len);\\n    }\\n\\n    /**\\n     * @notice          Copies the referenced memory to a new loc in memory, returning a `bytes` pointing to\\n     *                  the new memory\\n     * @dev             Shortcuts if the pointers are identical, otherwise compares type and digest.\\n     * @param memView   The view\\n     * @return          ret - The view pointing to the new memory\\n     */\\n    function clone(bytes29 memView) internal view returns (bytes memory ret) {\\n        uint256 ptr;\\n        uint256 _len = len(memView);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n            ret := ptr\\n        }\\n        unsafeCopyTo(memView, ptr + 0x20);\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            mstore(0x40, add(add(ptr, _len), 0x20)) // write new unused pointer\\n            mstore(ptr, _len) // write len of new array (in bytes)\\n        }\\n    }\\n\\n    /**\\n     * @notice          Join the views in memory, return an unsafe reference to the memory.\\n     * @dev             Super Dangerous direct memory access.\\n     *\\n     *                  This reference can be overwritten if anything else modifies memory (!!!).\\n     *                  As such it MUST be consumed IMMEDIATELY.\\n     *                  This function is private to prevent unsafe usage by callers.\\n     * @param memViews  The views\\n     * @return          unsafeView - The conjoined view pointing to the new memory\\n     */\\n    function unsafeJoin(bytes29[] memory memViews, uint256 _location) private view returns (bytes29 unsafeView) {\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            let ptr := mload(0x40)\\n        // revert if we're writing in occupied memory\\n            if gt(ptr, _location) {\\n                revert(0x60, 0x20) // empty revert message\\n            }\\n        }\\n\\n        uint256 _offset = 0;\\n        for (uint256 i = 0; i < memViews.length; i ++) {\\n            bytes29 memView = memViews[i];\\n            unsafeCopyTo(memView, _location + _offset);\\n            _offset += len(memView);\\n        }\\n        unsafeView = unsafeBuildUnchecked(0, _location, _offset);\\n    }\\n\\n    /**\\n     * @notice          Produce the keccak256 digest of the concatenated contents of multiple views.\\n     * @param memViews  The views\\n     * @return          bytes32 - The keccak256 digest\\n     */\\n    function joinKeccak(bytes29[] memory memViews) internal view returns (bytes32) {\\n        uint256 ptr;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n        }\\n        return keccak(unsafeJoin(memViews, ptr));\\n    }\\n\\n    /**\\n     * @notice          Produce the sha256 digest of the concatenated contents of multiple views.\\n     * @param memViews  The views\\n     * @return          bytes32 - The sha256 digest\\n     */\\n    function joinSha2(bytes29[] memory memViews) internal view returns (bytes32) {\\n        uint256 ptr;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n        }\\n        return sha2(unsafeJoin(memViews, ptr));\\n    }\\n\\n    /**\\n     * @notice          copies all views, joins them into a new bytearray.\\n     * @param memViews  The views\\n     * @return          ret - The new byte array\\n     */\\n    function join(bytes29[] memory memViews) internal view returns (bytes memory ret) {\\n        uint256 ptr;\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n            ptr := mload(0x40) // load unused memory pointer\\n        }\\n\\n        bytes29 _newView = unsafeJoin(memViews, ptr + 0x20);\\n        uint256 _written = len(_newView);\\n        uint256 _footprint = footprint(_newView);\\n\\n        assembly {\\n        // solium-disable-previous-line security/no-inline-assembly\\n        // store the legnth\\n            mstore(ptr, _written)\\n        // new pointer is old + 0x20 + the footprint of the body\\n            mstore(0x40, add(add(ptr, _footprint), 0x20))\\n            ret := ptr\\n        }\\n    }\\n}\",\"keccak256\":\"0x51c24c7c86620e39b732ba1b0de62c314842541748905323df7600a2797a2bd4\",\"license\":\"MIT\"},\"contracts/lockers/interfaces/ILockers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"./ILockersStorage.sol\\\";\\n\\ninterface ILockers is ILockersStorage {\\n\\n     // Events\\n\\n    event RequestAddLocker(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TDTLockedAmount,\\n        uint nativeTokenLockedAmount\\n    );\\n\\n    event RevokeAddLockerRequest(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TDTLockedAmount,\\n        uint nativeTokenLockedAmount\\n    );\\n\\n    event RequestRemoveLocker(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TDTUnlockedAmount,\\n        uint nativeTokenUnlockedAmount,\\n        uint netMinted        //   = totalMinted  - totalBurnt which needs to be burnt\\n    );\\n\\n    event LockerAdded(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TDTLockedAmount,\\n        uint nativeTokenLockedAmount,\\n        uint addingTime\\n    );\\n\\n    event LockerRemoved(\\n        address indexed lockerTargetAddress,\\n        bytes lockerLockingScript,\\n        uint TDTUnlockedAmount,\\n        uint nativeTokenUnlockedAmount\\n    );\\n\\n    event LockerSlashed(\\n        address indexed lockerTargetAddress,\\n        uint rewardAmount,\\n        address indexed rewardRecipient,\\n        uint amount,\\n        address indexed recipient,\\n        uint slashedCollateralAmount,\\n        uint slashTime,\\n        bool isForCCBurn\\n    );\\n\\n    event LockerLiquidated(\\n        address indexed lockerTargetAddress,\\n        address indexed liquidatorAddress,\\n        uint collateralAmount,\\n        uint teleBTCAmount,\\n        uint liquidateTime\\n    );\\n\\n    event LockerSlashedCollateralSold(\\n        address indexed lockerTargetAddress,\\n        address indexed buyerAddress,\\n        uint slashingAmount,\\n        uint teleBTCAmount,\\n        uint slashingTime\\n    );\\n\\n    event CollateralAdded(\\n        address indexed lockerTargetAddress,\\n        uint addedCollateral,\\n        uint totalCollateral,\\n        uint addingTime\\n    );\\n\\n    event CollateralRemoved(\\n        address indexed lockerTargetAddress,\\n        uint removedCollateral,\\n        uint totalCollateral,\\n        uint removingTime\\n    );\\n\\n    event MintByLocker(\\n        address indexed lockerTargetAddress,\\n        address indexed receiver,\\n        uint mintedAmount,\\n        uint lockerFee,\\n        uint mintingTime\\n    );\\n\\n    event BurnByLocker(\\n        address indexed lockerTargetAddress,\\n        uint burntAmount,\\n        uint lockerFee,\\n        uint burningTime\\n    );\\n\\n    event MinterAdded(\\n        address indexed account\\n    );\\n\\n    event MinterRemoved(\\n        address indexed account\\n    );\\n\\n    event BurnerAdded(\\n        address indexed account\\n    );\\n    \\n    event BurnerRemoved(\\n        address indexed account\\n    );\\n\\n    event NewLockerPercentageFee(\\n        uint oldLockerPercentageFee,\\n        uint newLockerPercentageFee\\n    );\\n\\n    event NewPriceWithDiscountRatio(\\n        uint oldPriceWithDiscountRatio,\\n        uint newPriceWithDiscountRatio\\n    );\\n\\n    event NewMinRequiredTDTLockedAmount(\\n        uint oldMinRequiredTDTLockedAmount,\\n        uint newMinRequiredTDTLockedAmount\\n    );\\n\\n    event NewMinRequiredTNTLockedAmount(\\n        uint oldMinRequiredTNTLockedAmount,\\n        uint newMinRequiredTNTLockedAmount\\n    );\\n\\n    event NewPriceOracle(\\n        address oldPriceOracle,\\n        address newPriceOracle\\n    );\\n\\n    event NewCCBurnRouter(\\n        address oldCCBurnRouter,\\n        address newCCBurnRouter\\n    );\\n\\n    event NewExchangeConnector(\\n        address oldExchangeConnector,\\n        address newExchangeConnector\\n    );\\n\\n    event NewTeleportDAOToken(\\n        address oldTDTToken,\\n        address newTDTToken\\n    ); \\n\\n    event NewTeleBTC(\\n        address oldTeleBTC,\\n        address newTeleBTC\\n    );   \\n\\n    event NewCollateralRatio(\\n        uint oldCollateralRatio,\\n        uint newCollateralRatio\\n    );  \\n\\n    event NewLiquidationRatio(\\n        uint oldLiquidationRatio,\\n        uint newLiquidationRatio\\n    );   \\n\\n    event NewMinLeavingIntervalTime(\\n        uint oldMinLeavingIntervalTime,\\n        uint newMinLeavingIntervalTime\\n    );   \\n\\n\\n    // Read-only functions\\n    function getLockerTargetAddress(bytes calldata _lockerLockingScript) external view returns (address);\\n\\n    function isLocker(bytes calldata _lockerLockingScript) external view returns (bool);\\n\\n    function getNumberOfLockers() external view returns (uint);\\n\\n    function getLockerLockingScript(address _lockerTargetAddress) external view returns (bytes memory);\\n\\n    function isActive(address _lockerTargetAddress) external view returns (bool);\\n\\n    function getLockerCapacity(address _lockerTargetAddress) external view returns (uint);\\n\\n    function priceOfOneUnitOfCollateralInBTC() external view returns (uint);\\n\\n    function isMinter(address account) external view returns(bool);\\n\\n    function isBurner(address account) external view returns(bool);\\n\\n    // State-changing functions\\n\\n    function pauseLocker() external;\\n\\n    function unPauseLocker() external;\\n\\n    function addMinter(address _account) external;\\n\\n    function removeMinter(address _account) external;\\n\\n    function addBurner(address _account) external;\\n\\n    function removeBurner(address _account) external;\\n\\n    function mint(bytes calldata _lockerLockingScript, address _receiver, uint _amount) external returns(uint);\\n\\n    function burn(bytes calldata _lockerLockingScript, uint256 _amount) external returns(uint);\\n\\n    function setTeleportDAOToken(address _tdtTokenAddress) external;\\n\\n    function setLockerPercentageFee(uint _lockerPercentageFee) external;\\n\\n    function setPriceWithDiscountRatio(uint _priceWithDiscountRatio) external;\\n\\n    function setMinRequiredTDTLockedAmount(uint _minRequiredTDTLockedAmount) external;\\n\\n    function setMinRequiredTNTLockedAmount(uint _minRequiredTNTLockedAmount) external;\\n\\n    function setPriceOracle(address _priceOracle) external;\\n\\n    function setCCBurnRouter(address _ccBurnRouter) external;\\n\\n    function setExchangeConnector(address _exchangeConnector) external;\\n\\n    function setTeleBTC(address _teleBTC) external;\\n\\n    function setCollateralRatio(uint _collateralRatio) external;\\n\\n    function setLiquidationRatio(uint _liquidationRatio) external;\\n\\n    function setMinLeavingIntervalTime(uint _minLeavingIntervalTime) external;\\n\\n    function liquidateLocker(\\n        address _lockerTargetAddress,\\n        uint _btcAmount\\n    ) external returns (bool);\\n\\n    function addCollateral(\\n        address _lockerTargetAddress,\\n        uint _addingNativeTokenAmount\\n    ) external payable returns (bool);\\n\\n    function removeCollateral(\\n        uint _removingNativeTokenAmount\\n    ) external payable returns (bool);\\n\\n    function requestToBecomeLocker(\\n        bytes calldata _lockerLockingScript,\\n        uint _lockedTDTAmount,\\n        uint _lockedNativeTokenAmount,\\n        ScriptTypes _lockerRescueType,\\n        bytes calldata _lockerRescueScript\\n    ) external payable returns (bool);\\n\\n    function revokeRequest() external returns (bool);\\n\\n    function addLocker(address _lockerTargetAddress) external returns (bool);\\n\\n    function requestToRemoveLocker() external returns (bool);\\n\\n    function ownerRemoveLocker(address _lockerTargetAddress) external returns(bool);\\n\\n    function selfRemoveLocker() external returns (bool);\\n\\n    function slashIdleLocker(\\n        address _lockerTargetAddress,\\n        uint _rewardAmount,\\n        address _rewardRecipient,\\n        uint _amount,\\n        address _recipient\\n    ) external returns(bool);\\n\\n    function slashThiefLocker(\\n        address _lockerTargetAddress,\\n        uint _rewardAmount,\\n        address _rewardRecipient,\\n        uint _amount\\n    ) external returns(bool);\\n\\n    function buySlashedCollateralOfLocker(\\n        address _lockerTargetAddress,\\n        uint _collateralAmount\\n    ) external returns (bool);\\n\\n}\",\"keccak256\":\"0xfac3843b759b7c7859303ffeb6e082139b80b7f7e9de458384fb5eb9737e2282\",\"license\":\"MIT\"},\"contracts/lockers/interfaces/ILockersStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"../../types/DataTypes.sol\\\";\\n\\ninterface ILockersStorage {\\n    // Read-only functions\\n\\n    function TeleportDAOToken() external view returns(address);\\n\\n    function teleBTC() external view returns(address);\\n\\n    function ccBurnRouter() external view returns(address);\\n\\n    function exchangeConnector() external view returns(address);\\n\\n    function priceOracle() external view returns(address);\\n\\n    function minRequiredTDTLockedAmount() external view returns(uint);\\n\\n    function minRequiredTNTLockedAmount() external view returns(uint);\\n\\n    function lockerPercentageFee() external view returns(uint);\\n\\n    function collateralRatio() external view returns(uint);\\n\\n    function liquidationRatio() external view returns(uint);\\n\\n    function priceWithDiscountRatio() external view returns(uint);\\n\\n    function totalNumberOfCandidates() external view returns(uint);\\n\\n    function totalNumberOfLockers() external view returns(uint);\\n\\n    function minLeavingIntervalTime() external view returns(uint);\\n  \\n}\\n\\n\\n\\n \",\"keccak256\":\"0xb5f5aaabab93f9dfd0513b498296ea0599ee32a8400d0bf5dcd39755ab19adea\",\"license\":\"MIT\"},\"contracts/relay/interfaces/IBitcoinRelay.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\ninterface IBitcoinRelay {\\n    // Structures\\n\\n    /// @notice                 \\tStructure for recording block header\\n    /// @param selfHash             Hash of block header\\n    /// @param parentHash          \\tHash of parent block header\\n    /// @param merkleRoot       \\tMerkle root of transactions in the block\\n    /// @param relayer              Address of relayer who submitted the block header\\n    /// @param gasPrice             Gas price of tx that relayer submitted the block header\\n    struct blockHeader {\\n        bytes32 selfHash;\\n        bytes32 parentHash;\\n        bytes32 merkleRoot;\\n        address relayer;\\n        uint gasPrice;\\n    }\\n\\n    // Events\\n\\n    /// @notice                     Emits when a block header is added\\n    /// @param height               Height of submitted header\\n    /// @param selfHash             Hash of submitted header\\n    /// @param parentHash           Parent hash of submitted header\\n    /// @param relayer              Address of relayer who submitted the block header\\n    event BlockAdded(\\n        uint indexed height,\\n        bytes32 selfHash,\\n        bytes32 indexed parentHash,\\n        address indexed relayer\\n    );\\n\\n    /// @notice                     Emits when a block header gets finalized\\n    /// @param height               Height of the header\\n    /// @param selfHash             Hash of the header\\n    /// @param parentHash           Parent hash of the header\\n    /// @param relayer              Address of relayer who submitted the block header\\n    /// @param rewardAmountTNT      Amount of reward that the relayer receives in target native token\\n    /// @param rewardAmountTDT      Amount of reward that the relayer receives in TDT\\n    event BlockFinalized(\\n        uint indexed height,\\n        bytes32 selfHash,\\n        bytes32 parentHash,\\n        address indexed relayer,\\n        uint rewardAmountTNT,\\n        uint rewardAmountTDT\\n    );\\n         \\n\\n    /// @notice                     Emits when changes made to reward amount in TDT\\n    event NewRewardAmountInTDT (\\n        uint oldRewardAmountInTDT, \\n        uint newRewardAmountInTDT\\n    );\\n\\n    /// @notice                     Emits when changes made to finalization parameter\\n    event NewFinalizationParameter (\\n        uint oldFinalizationParameter, \\n        uint newFinalizationParameter\\n    );\\n\\n    /// @notice                     Emits when changes made to relayer percentage fee\\n    event NewRelayerPercentageFee (\\n        uint oldRelayerPercentageFee, \\n        uint newRelayerPercentageFee\\n    );\\n\\n    /// @notice                     Emits when changes made to teleportDAO token\\n    event NewTeleportDAOToken (\\n        address oldTeleportDAOToken, \\n        address newTeleportDAOToken\\n    );\\n\\n    /// @notice                     Emits when changes made to epoch length\\n    event NewEpochLength(\\n        uint oldEpochLength, \\n        uint newEpochLength\\n    );\\n\\n    /// @notice                     Emits when changes made to base queries\\n    event NewBaseQueries(\\n        uint oldBaseQueries, \\n        uint newBaseQueries\\n    );\\n\\n    /// @notice                     Emits when changes made to submission gas used\\n    event NewSubmissionGasUsed(\\n        uint oldSubmissionGasUsed, \\n        uint newSubmissionGasUsed\\n    );\\n\\n    // Read-only functions\\n\\n    function relayGenesisHash() external view returns (bytes32);\\n\\n    function initialHeight() external view returns(uint);\\n\\n    function lastSubmittedHeight() external view returns(uint);\\n\\n    function finalizationParameter() external view returns(uint);\\n\\n    function TeleportDAOToken() external view returns(address);\\n\\n    function relayerPercentageFee() external view returns(uint);\\n\\n    function epochLength() external view returns(uint);\\n\\n    function lastEpochQueries() external view returns(uint);\\n\\n    function currentEpochQueries() external view returns(uint);\\n\\n    function baseQueries() external view returns(uint);\\n\\n    function submissionGasUsed() external view returns(uint);\\n\\n    function getBlockHeaderHash(uint height, uint index) external view returns(bytes32);\\n\\n    function getBlockHeaderFee (uint _height, uint _index) external view returns(uint);\\n\\n    function getNumberOfSubmittedHeaders(uint height) external view returns (uint);\\n\\n    function availableTDT() external view returns(uint);\\n\\n    function availableTNT() external view returns(uint);\\n\\n    function findHeight(bytes32 _hash) external view returns (uint256);\\n\\n    function findAncestor(bytes32 _hash, uint256 _offset) external view returns (bytes32); \\n\\n    function isAncestor(bytes32 _ancestor, bytes32 _descendant, uint256 _limit) external view returns (bool); \\n\\n    function rewardAmountInTDT() external view returns (uint);\\n\\n    // State-changing functions\\n\\n    function pauseRelay() external;\\n\\n    function unpauseRelay() external;\\n\\n    function setRewardAmountInTDT(uint _rewardAmountInTDT) external;\\n\\n    function setFinalizationParameter(uint _finalizationParameter) external;\\n\\n    function setRelayerPercentageFee(uint _relayerPercentageFee) external;\\n\\n    function setTeleportDAOToken(address _TeleportDAOToken) external;\\n\\n    function setEpochLength(uint _epochLength) external;\\n\\n    function setBaseQueries(uint _baseQueries) external;\\n\\n    function setSubmissionGasUsed(uint _submissionGasUsed) external;\\n\\n    function checkTxProof(\\n        bytes32 txid,\\n        uint blockHeight,\\n        bytes calldata intermediateNodes,\\n        uint index\\n    ) external payable returns (bool);\\n\\n    function addHeaders(bytes calldata _anchor, bytes calldata _headers) external returns (bool);\\n\\n    function addHeadersWithRetarget(\\n        bytes calldata _oldPeriodStartHeader,\\n        bytes calldata _oldPeriodEndHeader,\\n        bytes calldata _headers\\n    ) external returns (bool);\\n\\n    function ownerAddHeaders(bytes calldata _anchor, bytes calldata _headers) external returns (bool);\\n\\n    function ownerAddHeadersWithRetarget(\\n        bytes calldata _oldPeriodStartHeader,\\n        bytes calldata _oldPeriodEndHeader,\\n        bytes calldata _headers\\n    ) external returns (bool);\\n}\",\"keccak256\":\"0x9428d09a781f52b6071a92a1095aaa3c26a08e767b5bdb64d5669111ef738cbd\",\"license\":\"MIT\"},\"contracts/routers/CCBurnRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"./interfaces/ICCBurnRouter.sol\\\";\\nimport \\\"../erc20/interfaces/ITeleBTC.sol\\\";\\nimport \\\"../relay/interfaces/IBitcoinRelay.sol\\\";\\nimport \\\"../lockers/interfaces/ILockers.sol\\\";\\nimport \\\"../libraries/BitcoinHelper.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract CCBurnRouter is ICCBurnRouter, Ownable, ReentrancyGuard {\\n\\n    modifier nonZeroAddress(address _address) {\\n        require(_address != address(0), \\\"CCBurnRouter: address is zero\\\");\\n        _;\\n    }\\n\\n    modifier nonZeroValue(uint _value) {\\n        require(_value > 0, \\\"CCBurnRouter: value is zero\\\");\\n        _;\\n    }\\n\\n    // Constants\\n    uint constant MAX_PROTOCOL_FEE = 10000;\\n    uint constant MAX_SLASHER_REWARD = 10000;\\n\\n    // Public variables\\n    address public override relay;\\n    address public override lockers;\\n    address public override teleBTC;\\n    address public override treasury;\\n    uint public override transferDeadline;\\n    uint public override protocolPercentageFee; // Min amount is %0.01\\n    uint public override slasherPercentageReward; // Min amount is %1\\n    uint public override bitcoinFee; // Fee of submitting a tx on Bitcoin\\n    mapping(address => burnRequest[]) public burnRequests; // Mapping from locker target address to assigned burn requests\\n    mapping(address => uint) public burnRequestCounter;\\n    mapping(bytes32 => bool) public override isUsedAsBurnProof; // Mapping that shows a txId has been submitted to pay a burn request\\n\\n    /// @notice                             Handles cross-chain burn requests\\n    /// @param _relay                       Address of relay contract\\n    /// @param _lockers                     Address of lockers contract\\n    /// @param _treasury                    Address of the treasury of the protocol\\n    /// @param _teleBTC                     Address of teleBTC contract\\n    /// @param _transferDeadline            Dealine of sending BTC to user (aster submitting a burn request)\\n    /// @param _protocolPercentageFee       Percentage of tokens that user pays to protocol for burning\\n    /// @param _slasherPercentageReward     Percentage of tokens that slasher receives after slashing a locker\\n    /// @param _bitcoinFee                  Fee of submitting a transaction on Bitcoin\\n    constructor(\\n        address _relay,\\n        address _lockers,\\n        address _treasury,\\n        address _teleBTC,\\n        uint _transferDeadline,\\n        uint _protocolPercentageFee,\\n        uint _slasherPercentageReward,\\n        uint _bitcoinFee\\n    ) {\\n        _setRelay(_relay);\\n        _setLockers(_lockers);\\n        _setTreasury(_treasury);\\n        _setTeleBTC(_teleBTC);\\n        _setTransferDeadline(_transferDeadline);\\n        _setProtocolPercentageFee(_protocolPercentageFee);\\n        _setSlasherPercentageReward(_slasherPercentageReward);\\n        _setBitcoinFee(_bitcoinFee);\\n    }\\n\\n    receive() external payable {}\\n\\n    function renounceOwnership() public virtual override onlyOwner {}\\n\\n    /// @notice                         Shows if a burn request has been done or not\\n    /// @param _lockerTargetAddress\\t\\tLocker's address on the target chain\\n    /// @param _index                   The index of the request for the locker\\n    function isTransferred(\\n        address _lockerTargetAddress,\\n        uint _index\\n    ) external view override returns (bool) {\\n        return burnRequests[_lockerTargetAddress][_index].isTransferred;\\n    }\\n\\n    /// @notice                             Changes relay contract address\\n    /// @dev                                Only owner can call this\\n    /// @param _relay                       The new relay contract address\\n    function setRelay(address _relay) external override onlyOwner {\\n        _setRelay(_relay);\\n    }\\n\\n    /// @notice                             Changes lockers contract address\\n    /// @dev                                Only owner can call this\\n    /// @param _lockers                     The new lockers contract address\\n    function setLockers(address _lockers) external override onlyOwner {\\n        _setLockers(_lockers);\\n    }\\n\\n    /// @notice                             Changes teleBTC contract address\\n    /// @dev                                Only owner can call this\\n    /// @param _teleBTC                     The new teleBTC contract address\\n    function setTeleBTC(address _teleBTC) external override onlyOwner {\\n        _setTeleBTC(_teleBTC);\\n    }\\n\\n    /// @notice                             Changes protocol treasury address\\n    /// @dev                                Only owner can call this\\n    /// @param _treasury                    The new treasury address\\n    function setTreasury(address _treasury) external override onlyOwner {\\n        _setTreasury(_treasury);\\n    }\\n\\n    /// @notice                             Changes deadline of executing burn requests\\n    /// @dev                                Only owner can call this\\n    ///                                     Deadline should be greater than relay finalization parameter\\n    /// @param _transferDeadline            The new transfer deadline\\n    function setTransferDeadline(uint _transferDeadline) external override onlyOwner {\\n        _setTransferDeadline(_transferDeadline);\\n    }\\n\\n    /// @notice                             Changes protocol percentage fee for burning tokens\\n    /// @dev                                Only owner can call this\\n    /// @param _protocolPercentageFee       The new protocol percentage fee\\n    function setProtocolPercentageFee(uint _protocolPercentageFee) external override onlyOwner {\\n        _setProtocolPercentageFee(_protocolPercentageFee);\\n    }\\n\\n    /// @notice                            Changes slasher percentage reward for disputing lockers\\n    /// @dev                               Only owner can call this\\n    /// @param _slasherPercentageReward    The new slasher percentage reward\\n    function setSlasherPercentageReward(uint _slasherPercentageReward) external override onlyOwner {\\n        _setSlasherPercentageReward(_slasherPercentageReward);\\n    }\\n\\n    /// @notice                             Changes Bitcoin transaction fee\\n    /// @dev                                Only owner can call this\\n    /// @param _bitcoinFee                  The new Bitcoin transaction fee\\n    function setBitcoinFee(uint _bitcoinFee) external override onlyOwner {\\n        _setBitcoinFee(_bitcoinFee);\\n    }\\n\\n    /// @notice                             Internal setter for relay contract address\\n    /// @param _relay                       The new relay contract address\\n    function _setRelay(address _relay) private nonZeroAddress(_relay) {\\n        emit NewRelay(relay, _relay);\\n        relay = _relay;\\n    }\\n\\n    /// @notice                             Internal setter for lockers contract address\\n    /// @param _lockers                     The new lockers contract address\\n    function _setLockers(address _lockers) private nonZeroAddress(_lockers) {\\n        emit NewLockers(lockers, _lockers);\\n        lockers = _lockers;\\n    }\\n\\n    /// @notice                             Internal setter for teleBTC contract address\\n    /// @param _teleBTC                     The new teleBTC contract address\\n    function _setTeleBTC(address _teleBTC) private nonZeroAddress(_teleBTC) {\\n        emit NewTeleBTC(teleBTC, _teleBTC);\\n        teleBTC = _teleBTC;\\n    }\\n\\n    /// @notice                             Internal setter for protocol treasury address\\n    /// @param _treasury                    The new treasury address\\n    function _setTreasury(address _treasury) private nonZeroAddress(_treasury) {\\n        emit NewTreasury(treasury, _treasury);\\n        treasury = _treasury;\\n    }\\n\\n    /// @notice                             Internal setter for deadline of executing burn requests\\n    ///                                     Deadline should be greater than relay finalization parameter\\n    /// @param _transferDeadline            The new transfer deadline\\n    function _setTransferDeadline(uint _transferDeadline) private {\\n        uint _finalizationParameter = IBitcoinRelay(relay).finalizationParameter();\\n        // Gives lockers enough time to pay cc burn requests\\n        require(_transferDeadline > _finalizationParameter, \\\"CCBurnRouter: transfer deadline is too low\\\");\\n        emit NewTransferDeadline(transferDeadline, _transferDeadline);\\n        transferDeadline = _transferDeadline;\\n    }\\n\\n    /// @notice                             Internal setter for protocol percentage fee for burning tokens\\n    /// @param _protocolPercentageFee       The new protocol percentage fee\\n    function _setProtocolPercentageFee(uint _protocolPercentageFee) private {\\n        require(MAX_PROTOCOL_FEE >= _protocolPercentageFee, \\\"CCBurnRouter: protocol fee is out of range\\\");\\n        emit NewProtocolPercentageFee(protocolPercentageFee, _protocolPercentageFee);\\n        protocolPercentageFee = _protocolPercentageFee;\\n    }\\n\\n    /// @notice                             Internal setter for slasher percentage reward for disputing lockers\\n    /// @param _slasherPercentageReward     The new slasher percentage reward\\n    function _setSlasherPercentageReward(uint _slasherPercentageReward) private {\\n        require(MAX_SLASHER_REWARD >= _slasherPercentageReward, \\\"CCBurnRouter: slasher percentage reward is out of range\\\");\\n        emit NewSlasherPercentageFee(slasherPercentageReward, _slasherPercentageReward);\\n        slasherPercentageReward = _slasherPercentageReward;\\n    }\\n\\n    /// @notice                             Internal setter for Bitcoin transaction fee\\n    /// @param _bitcoinFee                  The new Bitcoin transaction fee\\n    function _setBitcoinFee(uint _bitcoinFee) private {\\n        emit NewBitcoinFee(bitcoinFee, _bitcoinFee);\\n        require(MAX_PROTOCOL_FEE >= _bitcoinFee, \\\"CCBurnRouter: btc fee is out of range\\\");\\n        bitcoinFee = _bitcoinFee;\\n    }\\n\\n    /// @notice                             Burns teleBTC and records the burn request\\n    /// @dev                                After submitting the burn request, lockers have a limited time\\n    ///                                     to send BTC and provide burn proof\\n    /// @param _amount                      Amount of teleBTC that user wants to burn\\n    /// @param _userScript                  User's bitcoin script type\\n    /// @param _lockerLockingScript\\t        Locking script of locker that should execute the burn request\\n    /// @return _burntAmount                Amount of teleBTC that user will receive (after reducing fees)\\n    function ccBurn(\\n        uint _amount,\\n        bytes memory _userScript,\\n        ScriptTypes _scriptType,\\n        bytes calldata _lockerLockingScript\\n    ) external nonReentrant nonZeroValue(_amount) override returns (uint _burntAmount) {\\n        // Checks validity of user's script\\n        _checkScriptType(_userScript, _scriptType);\\n\\n        // Checks if the given locking script is locker\\n        require(\\n            ILockers(lockers).isLocker(_lockerLockingScript),\\n            \\\"CCBurnRouter: given locking script is not locker\\\"\\n        );\\n\\n        /*\\n            Gets the target address of locker\\n            note: we don't check whether _lockerTargetAddress is equal to zero\\n            or not since _lockerLockingScript is locker\\n        */\\n        address _lockerTargetAddress = ILockers(lockers)\\n        .getLockerTargetAddress(_lockerLockingScript);\\n\\n        // Transfers users's teleBTC\\n        ITeleBTC(teleBTC).transferFrom(_msgSender(), address(this), _amount);\\n\\n        uint remainingAmount = _getFees(\\n            _amount,\\n            _lockerTargetAddress\\n        );\\n\\n        // Burns remained teleBTC\\n        ITeleBTC(teleBTC).approve(lockers, remainingAmount);\\n        _burntAmount = ILockers(lockers).burn(_lockerLockingScript, remainingAmount);\\n\\n        _saveBurnRequest(\\n            _amount,\\n            _burntAmount,\\n            _userScript,\\n            _scriptType,\\n            IBitcoinRelay(relay).lastSubmittedHeight(),\\n            _lockerTargetAddress\\n        );\\n\\n        emit CCBurn(\\n            _msgSender(),\\n            _userScript,\\n            _scriptType,\\n            _amount,\\n            _burntAmount,\\n            _lockerTargetAddress,\\n            _lockerLockingScript,\\n            burnRequests[_lockerTargetAddress][burnRequests[_lockerTargetAddress].length - 1].requestIdOfLocker,// index of request\\n            burnRequests[_lockerTargetAddress][burnRequests[_lockerTargetAddress].length - 1].deadline\\n        );\\n\\n    }\\n\\n    /// @notice                             Checks the correctness of burn proof\\n    /// @dev                                Makes isTransferred flag true for the paid requests\\n    /// @param _version                     Version of the transaction containing the burn transaction\\n    /// @param _vin                         Inputs of the transaction containing the burn transaction\\n    /// @param _vout                        Outputs of the transaction containing the burn transaction\\n    /// @param _locktime                    Lock time of the transaction containing the burn transaction\\n    /// @param _blockNumber                 Height of the block containing the burn transaction\\n    /// @param _intermediateNodes           Merkle inclusion proof for transaction containing the burn transaction\\n    /// @param _index                       Index of transaction containing the burn transaction in the block\\n    /// @param _lockerLockingScript         Locker's locking script (on Bitcoin) that this burn request belongs to\\n    /// @param _burnReqIndexes              Indexes of requests that locker wants to provide proof for them\\n    /// @param _voutIndexes                 Indexes of outputs that were used to pay burn requests (_voutIndexes[i] belongs to _burnReqIndexes[i])\\n    /// @return\\n    function burnProof(\\n        bytes4 _version,\\n        bytes memory _vin,\\n        bytes memory _vout,\\n        bytes4 _locktime,\\n        uint256 _blockNumber,\\n        bytes memory _intermediateNodes,\\n        uint _index,\\n        bytes memory _lockerLockingScript,\\n        uint[] memory _burnReqIndexes,\\n        uint[] memory _voutIndexes\\n    ) external payable nonReentrant override returns (bool) {\\n        // Checks that locker's tx doesn't have any locktime\\n        require(_locktime == bytes4(0), \\\"CCBurnRouter: non-zero lock time\\\");\\n\\n        // Checks if the locking script is valid\\n        require(\\n            ILockers(lockers).isLocker(_lockerLockingScript),\\n            \\\"CCBurnRouter: given locking script is not locker\\\"\\n        );\\n\\n        // Get the target address of the locker from its locking script\\n        address _lockerTargetAddress = ILockers(lockers)\\n        .getLockerTargetAddress(_lockerLockingScript);\\n\\n        require(\\n            _burnReqIndexes.length == _voutIndexes.length,\\n            \\\"CCBurnRouter: wrong indexes\\\"\\n        );\\n\\n        // Checks inclusion of transaction\\n        bytes32 txId = BitcoinHelper.calculateTxId(_version, _vin, _vout, _locktime);\\n        require(\\n            _isConfirmed(\\n                txId,\\n                _blockNumber,\\n                _intermediateNodes,\\n                _index\\n            ),\\n            \\\"CCBurnRouter: transaction has not finalized yet\\\"\\n        );\\n\\n        // Checks the paid burn requests\\n        uint paidOutputCounter = _checkPaidBurnRequests(\\n            txId,\\n            _blockNumber,\\n            _lockerTargetAddress,\\n            _vout,\\n            _burnReqIndexes,\\n            _voutIndexes\\n        );\\n\\n        /*\\n            Checks if there is an output that goes back to the locker\\n            Sets isUsedAsBurnProof of txId true if all the outputs (except one) were used to pay cc burn requests\\n        */\\n        _updateIsUsedAsBurnProof(paidOutputCounter, _vout, _lockerLockingScript, txId);\\n\\n        return true;\\n    }\\n\\n    /// @notice                             Slashes a locker if she did not pay a cc burn request before its deadline\\n    /// @param _lockerLockingScript         locker's locking script that the unpaid request belongs to\\n    /// @param _indices                     Array of indices of the requests whose deadline has passed\\n    /// @return                             True if dispute is successful\\n    function disputeBurn(\\n        bytes calldata _lockerLockingScript,\\n        uint[] memory _indices\\n    ) external nonReentrant override returns (bool) {\\n        // Checks if the locking script is valid\\n        require(\\n            ILockers(lockers).isLocker(_lockerLockingScript),\\n            \\\"CCBurnRouter: given locking script is not locker\\\"\\n        );\\n\\n        // Get the target address of the locker from its locking script\\n        address _lockerTargetAddress = ILockers(lockers)\\n        .getLockerTargetAddress(_lockerLockingScript);\\n\\n        uint _lastSubmittedHeight = IBitcoinRelay(relay).lastSubmittedHeight();\\n\\n        // Goes through provided indexes of burn requests to see if locker should be slashed\\n        for (uint i = 0; i < _indices.length; i++) {\\n            // Checks that locker has not provided burn proof\\n            require(\\n                !burnRequests[_lockerTargetAddress][_indices[i]].isTransferred,\\n                \\\"CCBurnRouter: request has been paid before\\\"\\n            );\\n\\n            // Checks that payback deadline has passed\\n            require(\\n                burnRequests[_lockerTargetAddress][_indices[i]].deadline < _lastSubmittedHeight,\\n                \\\"CCBurnRouter: payback deadline has not passed yet\\\"\\n            );\\n\\n            // Sets \\\"isTransferred = true\\\" to prevent slashing the locker again\\n            burnRequests[_lockerTargetAddress][_indices[i]].isTransferred = true;\\n\\n            // Slashes locker and sends the slashed amount to the user\\n            ILockers(lockers).slashIdleLocker(\\n                _lockerTargetAddress,\\n                burnRequests[_lockerTargetAddress][_indices[i]].amount*slasherPercentageReward/MAX_SLASHER_REWARD, // Slasher reward\\n                _msgSender(), // Slasher address\\n                burnRequests[_lockerTargetAddress][_indices[i]].amount,\\n                burnRequests[_lockerTargetAddress][_indices[i]].sender // User address\\n            );\\n\\n            emit BurnDispute(\\n                burnRequests[_lockerTargetAddress][_indices[i]].sender,\\n                _lockerTargetAddress,\\n                _lockerLockingScript,\\n                burnRequests[_lockerTargetAddress][_indices[i]].requestIdOfLocker\\n            );\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @notice                                 Slashes a locker if they issue a tx that doesn't match any burn request\\n    /// @dev                                    Input tx is a malicious tx which shows that locker spent BTC\\n    ///                                         Output tx is the tx that was spent by locker in input tx\\n    ///                                         Output tx --> money goes to locker --> Input tx --> locker steals the funds\\n    /// @param _lockerLockingScript             Suspicious locker's locking script\\n    /// @param _versions                        Versions of input and output tx\\n    /// @param _inputVin                        Inputs of the malicious transaction\\n    /// @param _inputVout                       Outputs of the malicious transaction\\n    /// @param _outputVin                       Inputs of the spent transaction\\n    /// @param _outputVout                      Outputs of the spent transaction\\n    /// @param _locktimes                       Locktimes of input and output tx\\n    /// @param _inputIntermediateNodes          Merkle inclusion proof for the malicious transaction\\n    /// @param _indexesAndBlockNumbers          Indices of malicious input in input tx, input tx in block and block number of input tx\\n    /// @return                                 True if dispute is successful\\n    function disputeLocker(\\n        bytes memory _lockerLockingScript,\\n        bytes4[] memory _versions, // [inputTxVersion, outputTxVersion]\\n        bytes memory _inputVin,\\n        bytes memory _inputVout,\\n        bytes memory _outputVin,\\n        bytes memory _outputVout,\\n        bytes4[] memory _locktimes, // [inputTxLocktime, outputTxLocktime]\\n        bytes memory _inputIntermediateNodes,\\n        uint[] memory _indexesAndBlockNumbers // [inputIndex, inputTxIndex, inputTxBlockNumber]\\n    ) external payable nonReentrant override returns (bool) {\\n        // Checks input array sizes\\n        require(\\n            _versions.length == 2 &&\\n            _locktimes.length == 2 &&\\n            _indexesAndBlockNumbers.length == 3,\\n            \\\"CCBurnRouter: wrong inputs\\\"\\n        );\\n\\n        // Checks if the locking script is valid\\n        require(\\n            ILockers(lockers).isLocker(_lockerLockingScript),\\n            \\\"CCBurnRouter: given locking script is not locker\\\"\\n        );\\n\\n        // Finds input tx id and checks its inclusion\\n        bytes32 _inputTxId = BitcoinHelper.calculateTxId(_versions[0], _inputVin, _inputVout, _locktimes[0]);\\n        require(\\n            _isConfirmed(\\n                _inputTxId,\\n                _indexesAndBlockNumbers[2], // Block number\\n                _inputIntermediateNodes,\\n                _indexesAndBlockNumbers[1] // Index of input tx in the block\\n            ),\\n            \\\"CCBurnRouter: input transaction is not finalized\\\"\\n        );\\n\\n        /*\\n            Checks that input tx has not been provided as a burn proof\\n            note: if a locker executes a cc burn request but doesn't provide burn proof before deadline,\\n            we consider the transaction as a malicious tx\\n        */\\n        require(\\n            !isUsedAsBurnProof[_inputTxId],\\n            \\\"CCBurnRouter: transaction has been used as burn proof\\\"\\n        );\\n\\n        // Extracts outpoint id and index from input tx\\n        (bytes32 _outpointId, uint _outpointIndex) = BitcoinHelper.extractOutpoint(\\n            _inputVin,\\n            _indexesAndBlockNumbers[0] // Index of malicious input in input tx\\n        );\\n\\n        // Checks that \\\"outpoint tx id == output tx id\\\"\\n        require(\\n            _outpointId == BitcoinHelper.calculateTxId(_versions[1], _outputVin, _outputVout, _locktimes[1]),\\n            \\\"CCBurnRouter: outpoint tx doesn't match with output tx\\\"\\n        );\\n\\n        // Checks that _outpointIndex of _outpointId belongs to locker locking script\\n        require(\\n            keccak256(BitcoinHelper.getLockingScript(_outputVout, _outpointIndex)) ==\\n            keccak256(_lockerLockingScript),\\n            \\\"CCBurnRouter: output tx doesn't belong to locker\\\"\\n        );\\n\\n        // Checks that deadline for using the tx as burn proof has passed\\n        require(\\n            IBitcoinRelay(relay).lastSubmittedHeight() > transferDeadline + _indexesAndBlockNumbers[2],\\n            \\\"CCBurnRouter: payback deadline has not passed yet\\\"\\n        );\\n\\n        // Slashes locker\\n        _slashLockerForDispute(\\n            _inputVout,\\n            _lockerLockingScript,\\n            _inputTxId,\\n            _indexesAndBlockNumbers[2] // Block number\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @notice                                 Slashes the malicious locker\\n    /// @param _inputVout                       Inputs of the malicious transaction\\n    /// @param _lockerLockingScript             Malicious locker's locking script\\n    /// @param _inputTxId                       Tx id of the malicious transaction\\n    /// @param _inputBlockNumber                Block number of the malicious transaction\\n    function _slashLockerForDispute(\\n        bytes memory _inputVout,\\n        bytes memory _lockerLockingScript,\\n        bytes32 _inputTxId,\\n        uint _inputBlockNumber\\n    ) private {\\n\\n        // Finds total value of malicious transaction\\n        uint totalValue = BitcoinHelper.parseOutputsTotalValue(_inputVout);\\n\\n        // Gets the target address of the locker from its Bitcoin address\\n        address _lockerTargetAddress = ILockers(lockers)\\n        .getLockerTargetAddress(_lockerLockingScript);\\n\\n        ILockers(lockers).slashThiefLocker(\\n            _lockerTargetAddress,\\n            totalValue*slasherPercentageReward/MAX_SLASHER_REWARD, // Slasher reward\\n            _msgSender(), // Slasher address\\n            totalValue\\n        );\\n\\n        // Emits the event\\n        emit LockerDispute(\\n            _lockerTargetAddress,\\n            _lockerLockingScript,\\n            _inputBlockNumber,\\n            _inputTxId,\\n            totalValue + totalValue*slasherPercentageReward/MAX_SLASHER_REWARD\\n        );\\n    }\\n\\n    /// @notice                             Checks the burn requests that get paid by this transaction\\n    /// @param _paidBlockNumber             Block number in which locker paid the burn request\\n    /// @param _lockerTargetAddress         Address of the locker on the target chain\\n    /// @param _vout                        Outputs of a transaction\\n    /// @param _burnReqIndexes              Indexes of requests that locker wants to provide proof for them\\n    /// @param _voutIndexes                 Indexes of outputs that were used to pay burn requests (_voutIndexes[i] belongs to _burnReqIndexes[i])\\n    /// @return paidOutputCounter           Number of executed burn requests\\n    function _checkPaidBurnRequests(\\n        bytes32 txId,\\n        uint _paidBlockNumber,\\n        address _lockerTargetAddress,\\n        bytes memory _vout,\\n        uint[] memory _burnReqIndexes,\\n        uint[] memory _voutIndexes\\n    ) private returns (uint paidOutputCounter) {\\n        uint parsedAmount;\\n        /*\\n            Below variable is for checking that every output in vout (except one)\\n            is related to a cc burn request so that we can\\n            set \\\"isUsedAsBurnProof = true\\\" for the whole txId\\n        */\\n        paidOutputCounter = 0;\\n\\n        for (uint i = 0; i < _burnReqIndexes.length; i++) {\\n            uint _burnReqIndex = _burnReqIndexes[i];\\n            // Checks that the request has not been paid and its deadline has not passed\\n            if (\\n                !burnRequests[_lockerTargetAddress][_burnReqIndex].isTransferred &&\\n            burnRequests[_lockerTargetAddress][_burnReqIndex].deadline >= _paidBlockNumber\\n            ) {\\n\\n                parsedAmount = BitcoinHelper.parseValueFromSpecificOutputHavingScript(\\n                    _vout,\\n                    _voutIndexes[i],\\n                    burnRequests[_lockerTargetAddress][_burnReqIndex].userScript,\\n                    ScriptTypes(uint(burnRequests[_lockerTargetAddress][_burnReqIndex].scriptType))\\n                );\\n\\n                // Checks that locker has sent required teleBTC amount\\n                if (burnRequests[_lockerTargetAddress][_burnReqIndex].burntAmount == parsedAmount) {\\n                    burnRequests[_lockerTargetAddress][_burnReqIndex].isTransferred = true;\\n                    paidOutputCounter = paidOutputCounter + 1;\\n                    emit PaidCCBurn(\\n                        _lockerTargetAddress,\\n                        burnRequests[_lockerTargetAddress][_burnReqIndex].requestIdOfLocker,\\n                        txId,\\n                        _voutIndexes[i]\\n                    );\\n                }\\n            }\\n        }\\n    }\\n\\n    /// @notice                                 Checks if all outputs of the transaction used to pay a cc burn request\\n    /// @dev                                    One output might return the remaining value to the locker\\n    /// @param _paidOutputCounter               Number of the tx outputs that pay a cc burn request\\n    /// @param _vout                            Outputs of a transaction\\n    /// @param _lockerLockingScript             Locking script of locker\\n    /// @param _txId                            Transaction id\\n    function _updateIsUsedAsBurnProof(\\n        uint _paidOutputCounter,\\n        bytes memory _vout,\\n        bytes memory _lockerLockingScript,\\n        bytes32 _txId\\n    ) private {\\n        uint parsedAmount = BitcoinHelper.parseValueHavingLockingScript(_vout, _lockerLockingScript);\\n        uint numberOfOutputs = BitcoinHelper.numberOfOutputs(_vout);\\n\\n        if (parsedAmount != 0 && _paidOutputCounter + 1 == numberOfOutputs) {\\n            // One output sends the remaining value to locker\\n            isUsedAsBurnProof[_txId] = true;\\n        } else if (_paidOutputCounter == numberOfOutputs) {\\n            // All output pays cc burn requests\\n            isUsedAsBurnProof[_txId] = true;\\n        }\\n    }\\n\\n    function _checkScriptType(bytes memory _userScript, ScriptTypes _scriptType) private pure {\\n        if (_scriptType == ScriptTypes.P2PK || _scriptType == ScriptTypes.P2WSH) {\\n            require(_userScript.length == 32, \\\"CCBurnRouter: invalid user script\\\");\\n        } else {\\n            require(_userScript.length == 20, \\\"CCBurnRouter: invalid user script\\\");\\n        }\\n    }\\n\\n    /// @notice                           Records burn request of user\\n    /// @param _amount                    Amount of wrapped token that user wants to burn\\n    /// @param _burntAmount               Amount of wrapped token that actually gets burnt after deducting fees from the original value (_amount)\\n    /// @param _userScript                User's Bitcoin script type\\n    /// @param _lastSubmittedHeight       Last block header height submitted on the relay contract\\n    /// @param _lockerTargetAddress       Locker's target chain address that the request belongs to\\n    function _saveBurnRequest(\\n        uint _amount,\\n        uint _burntAmount,\\n        bytes memory _userScript,\\n        ScriptTypes _scriptType,\\n        uint _lastSubmittedHeight,\\n        address _lockerTargetAddress\\n    ) private {\\n        burnRequest memory request;\\n        request.amount = _amount;\\n        request.burntAmount = _burntAmount;\\n        request.sender = _msgSender();\\n        request.userScript = _userScript;\\n        request.scriptType = _scriptType;\\n        request.deadline = _lastSubmittedHeight + transferDeadline;\\n        request.isTransferred = false;\\n        request.requestIdOfLocker = burnRequestCounter[_lockerTargetAddress];\\n        burnRequestCounter[_lockerTargetAddress] = burnRequestCounter[_lockerTargetAddress] + 1;\\n        burnRequests[_lockerTargetAddress].push(request);\\n    }\\n\\n    /// @notice                         Checks inclusion of the transaction in the specified block\\n    /// @dev                            Calls the relay contract to check Merkle inclusion proof\\n    /// @param _txId                    Id of the transaction\\n    /// @param _blockNumber             Height of the block containing the transaction\\n    /// @param _intermediateNodes       Merkle inclusion proof for the transaction\\n    /// @param _index                   Index of transaction in the block\\n    /// @return                         True if the transaction was included in the block\\n    function _isConfirmed(\\n        bytes32 _txId,\\n        uint256 _blockNumber,\\n        bytes memory _intermediateNodes,\\n        uint _index\\n    ) private returns (bool) {\\n        // Finds fee amount\\n        uint feeAmount = IBitcoinRelay(relay).getBlockHeaderFee(_blockNumber, 0);\\n        require(msg.value >= feeAmount, \\\"CCBurnRouter: relay fee is not sufficient\\\");\\n\\n        // Calls relay contract\\n        bytes memory data = Address.functionCallWithValue(\\n            relay,\\n            abi.encodeWithSignature(\\n                \\\"checkTxProof(bytes32,uint256,bytes,uint256)\\\",\\n                _txId,\\n                _blockNumber,\\n                _intermediateNodes,\\n                _index\\n            ),\\n            feeAmount\\n        );\\n\\n        // Sends extra ETH back to _msgSender()\\n        Address.sendValue(payable(_msgSender()), msg.value - feeAmount);\\n\\n        return abi.decode(data, (bool));\\n    }\\n\\n    /// @notice                      Checks inclusion of the transaction in the specified block\\n    /// @dev                         Calls the relay contract to check Merkle inclusion proof\\n    /// @param _amount               The amount to be burnt\\n    /// @param _lockerTargetAddress  The locker's address on the target blockchain\\n    /// @return                      Remaining amount after reducing fees\\n    function _getFees(\\n        uint _amount,\\n        address _lockerTargetAddress\\n    ) private returns (uint) {\\n        // Calculates protocol fee\\n        uint protocolFee = _amount*protocolPercentageFee/MAX_PROTOCOL_FEE;\\n\\n        require(_amount > protocolFee + bitcoinFee, \\\"CCBurnRouter: amount is too low\\\");\\n\\n        uint remainingAmount = _amount - protocolFee - bitcoinFee;\\n\\n        // Transfers protocol fee\\n        ITeleBTC(teleBTC).transfer(treasury, protocolFee);\\n\\n        // Transfers bitcoin fee to locker\\n        ITeleBTC(teleBTC).transfer(_lockerTargetAddress, bitcoinFee);\\n\\n        return remainingAmount;\\n    }\\n\\n}\",\"keccak256\":\"0xa3e5bc12202bce862bfeed0c573e6519f2f30f16b59be5a62befe3de5171bacd\",\"license\":\"MIT\"},\"contracts/routers/interfaces/ICCBurnRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"../../types/ScriptTypesEnum.sol\\\";\\n\\ninterface ICCBurnRouter {\\n\\n\\t// Structures\\n\\n    /// @notice                 \\tStructure for recording cc burn requests\\n    /// @param amount         \\t\\tAmount of tokens that user wants to burn\\n    /// @param burntAmount   \\t    Amount that user will receive (after reducing fees from amount)\\n    /// @param sender       \\t\\tAddress of user who requests burning\\n    /// @param userScript    \\t\\tLocking script of the user on Bitcoin\\n    /// @param deadline         \\tDeadline of locker for executing the request\\n    /// @param isTransferred    \\tTrue if the request has been executed\\n    /// @param scriptType    \\t\\tThe script type of the user (for bitcoin address)\\n    /// @param requestIdOfLocker    The index of the request for a specific locker\\n\\tstruct burnRequest {\\n\\t\\tuint amount;\\n\\t\\tuint burntAmount;\\n\\t\\taddress sender;\\n\\t\\tbytes userScript;\\n\\t\\tuint deadline;\\n\\t\\tbool isTransferred;\\n\\t\\tScriptTypes scriptType;\\n\\t\\tuint requestIdOfLocker;\\n  \\t}\\n\\n  \\t// Events\\n\\n\\t/// @notice                 \\t\\tEmits when a burn request gets submitted\\n    /// @param userTargetAddress        Target address of the user\\n    /// @param userScript        \\t\\tLocking script of user on Bitcoin\\n    /// @param scriptType        \\t\\tThe script type of the user (for bitcoin address)\\n    /// @param amount         \\t\\t\\tTotal requested amount\\n    /// @param burntAmount   \\t\\t    Amount that user will receive (after reducing fees)\\n\\t/// @param lockerTargetAddress\\t\\tLocker's address on the target chain\\n\\t/// @param lockerLockingScript\\t\\tLocker's locking script on Bitcoin blockchain\\n    /// @param requestIdOfLocker        The index of a request for a locker\\n    /// @param deadline         \\t\\tDeadline of locker for executing the request\\n  \\tevent CCBurn(\\n\\t\\taddress indexed userTargetAddress,\\n\\t\\tbytes userScript,\\n\\t\\tScriptTypes scriptType,\\n\\t\\tuint amount, \\n\\t\\tuint burntAmount, \\n\\t\\taddress indexed lockerTargetAddress,\\n\\t\\tbytes lockerLockingScript,\\n\\t\\tuint requestIdOfLocker,\\n\\t\\tuint indexed deadline\\n\\t);\\n\\n\\t/// @notice                 \\t\\tEmits when a burn proof is provided\\n    /// @param lockerTargetAddress      Target address of the locker\\n    /// @param requestIdOfLocker        The index of a request of a locker\\n    /// @param bitcoinTxId   \\t\\t    The bitcoin transaction hash\\n\\t/// @param bitcoinTxOutputIndex\\t\\tThe output index in the transaction\\n\\tevent PaidCCBurn(\\n\\t\\taddress indexed lockerTargetAddress,\\n\\t\\tuint requestIdOfLocker,\\n\\t\\tbytes32 bitcoinTxId,\\n\\t\\tuint bitcoinTxOutputIndex\\n\\t);\\n\\n\\t/// @notice                 \\t\\tEmits when a locker gets slashed for withdrawing BTC without proper reason\\n\\t/// @param _lockerTargetAddress\\t\\tLocker's address on the target chain\\n\\t/// @param _blockNumber\\t\\t\\t\\tBlock number of the malicious tx\\n\\t/// @param txId\\t\\t\\t\\t\\t\\tTransaction ID of the malicious tx\\n\\t/// @param amount\\t\\t\\t\\t\\tSlashed amount\\n\\tevent LockerDispute(\\n        address _lockerTargetAddress,\\n\\t\\tbytes lockerLockingScript,\\n    \\tuint _blockNumber,\\n        bytes32 txId,\\n\\t\\tuint amount\\n    );\\n\\n\\tevent BurnDispute(\\n\\t\\taddress indexed userTargetAddress,\\n\\t\\taddress indexed _lockerTargetAddress,\\n\\t\\tbytes lockerLockingScript,\\n\\t\\tuint requestIdOfLocker\\n\\t);\\n\\n\\t/// @notice                     \\tEmits when changes made to relay address\\n    event NewRelay(\\n        address oldRelay, \\n        address newRelay\\n    );\\n\\n\\t/// @notice                     \\tEmits when changes made to treasury address\\n    event NewTreasury(\\n        address oldTreasury, \\n        address newTreasury\\n    );\\n\\n\\t/// @notice                     \\tEmits when changes made to lockers address\\n    event NewLockers(\\n        address oldLockers, \\n        address newLockers\\n    );\\n\\n\\t/// @notice                     \\tEmits when changes made to TeleBTC address\\n    event NewTeleBTC(\\n        address oldTeleBTC, \\n        address newTeleBTC\\n    );\\n\\n\\t/// @notice                     \\tEmits when changes made to transfer deadline\\n    event NewTransferDeadline(\\n        uint oldTransferDeadline, \\n        uint newTransferDeadline\\n    );\\n\\n\\t/// @notice                     \\tEmits when changes made to percentage fee\\n    event NewProtocolPercentageFee(\\n        uint oldProtocolPercentageFee, \\n        uint newProtocolPercentageFee\\n    );\\n\\n\\t/// @notice                     \\tEmits when changes made to slasher percentage fee\\n    event NewSlasherPercentageFee(\\n        uint oldSlasherPercentageFee, \\n        uint newSlasherPercentageFee\\n    );\\n\\n\\t/// @notice                     \\tEmits when changes made to bitcoin fee\\n    event NewBitcoinFee(\\n        uint oldBitcoinFee, \\n        uint newBitcoinFee\\n    );\\n\\n\\n\\t// Read-only functions\\n\\n\\tfunction relay() external view returns (address);\\n\\n\\tfunction lockers() external view returns (address);\\n\\n\\tfunction teleBTC() external view returns (address);\\n\\n\\tfunction treasury() external view returns (address);\\n\\n\\tfunction transferDeadline() external view returns (uint);\\n\\n\\tfunction protocolPercentageFee() external view returns (uint);\\n\\n\\tfunction slasherPercentageReward() external view returns (uint);\\n\\n\\tfunction bitcoinFee() external view returns (uint); // Bitcoin transaction fee\\n\\n\\tfunction isTransferred(address _lockerTargetAddress, uint _index) external view returns (bool);\\n\\n\\tfunction isUsedAsBurnProof(bytes32 _txId) external view returns (bool);\\n\\n\\t// State-changing functions\\n\\n\\tfunction setRelay(address _relay) external;\\n\\n\\tfunction setLockers(address _lockers) external;\\n\\n\\tfunction setTeleBTC(address _teleBTC) external;\\n\\n\\tfunction setTreasury(address _treasury) external;\\n\\n\\tfunction setTransferDeadline(uint _transferDeadline) external;\\n\\n\\tfunction setProtocolPercentageFee(uint _protocolPercentageFee) external;\\n\\n\\tfunction setSlasherPercentageReward(uint _slasherPercentageReward) external;\\n\\n\\tfunction setBitcoinFee(uint _bitcoinFee) external;\\n\\n\\tfunction ccBurn(\\n\\t\\tuint _amount, \\n\\t\\tbytes calldata _userScript,\\n\\t\\tScriptTypes _scriptType,\\n\\t\\tbytes calldata _lockerLockingScript\\n\\t) external returns (uint);\\n\\n\\tfunction burnProof(\\n\\t\\tbytes4 _version,\\n\\t\\tbytes memory _vin,\\n\\t\\tbytes memory _vout,\\n\\t\\tbytes4 _locktime,\\n\\t\\tuint256 _blockNumber,\\n\\t\\tbytes memory _intermediateNodes,\\n\\t\\tuint _index,\\n\\t\\tbytes memory _lockerLockingScript,\\n        uint[] memory _burnReqIndexes,\\n        uint[] memory _voutIndexes\\n\\t) external payable returns (bool);\\n\\n\\tfunction disputeBurn(\\n\\t\\tbytes calldata _lockerLockingScript,\\n\\t\\tuint[] memory _indices\\n\\t) external returns (bool);\\n\\n    function disputeLocker(\\n        bytes memory _lockerLockingScript,\\n        bytes4[] memory _versions, // [inputTxVersion, outputTxVersion]\\n        bytes memory _inputVin,\\n        bytes memory _inputVout,\\n        bytes memory _outputVin,\\n        bytes memory _outputVout,\\n        bytes4[] memory _locktimes, // [inputTxLocktime, outputTxLocktime]\\n        bytes memory _inputIntermediateNodes,\\n        uint[] memory _indexesAndBlockNumbers // [inputIndex, inputTxIndex, outputTxIndex, inputTxBlockNumber, outputTxBlockNumber]\\n    ) external payable returns (bool);\\n}\",\"keccak256\":\"0x59f4c9e060a3c2561df5f9b82e5b9e837885b57f8e78c4e0477fd10496b62338\",\"license\":\"MIT\"},\"contracts/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"./ScriptTypesEnum.sol\\\";\\n\\nlibrary DataTypes {\\n\\n    /// @notice                             Structure for registering lockers\\n    /// @dev\\n    /// @param lockerLockingScript          Locker redeem script\\n    /// @param lockerRescueType             Locker script type in case of getting BTCs back\\n    /// @param lockerRescueScript           Locker script in case of getting BTCs back\\n    /// @param TDTLockedAmount              Bond amount of locker in TDT\\n    /// @param nativeTokenLockedAmount      Bond amount of locker in native token of the target chain\\n    /// @param netMinted                    Total minted - total burnt\\n    /// @param slashingTeleBTCAmount        Total amount of teleBTC a locker must be slashed\\n    /// @param reservedNativeTokenForSlash  Total native token reserved to support slashing teleBTC\\n    /// @param isLocker                     Indicates that is already a locker or not\\n    /// @param isCandidate                  Indicates that is a candidate or not\\n    /// @param isScriptHash                 Shows if it's script hash \\n    /// @param isActive                     Shows if a locker is active (has not requested for removal and\\n    ///                                     has enough collateral to accept more minting requests)\\n    struct locker {\\n        bytes lockerLockingScript;\\n        ScriptTypes lockerRescueType;\\n        bytes lockerRescueScript;\\n        uint TDTLockedAmount;\\n        uint nativeTokenLockedAmount;\\n        uint netMinted;\\n        uint slashingTeleBTCAmount;\\n        uint reservedNativeTokenForSlash;\\n        bool isLocker;\\n        bool isCandidate;\\n        bool isScriptHash;\\n        bool isActive;\\n    }\\n\\n    struct lockersLibConstants {\\n        uint OneHundredPercent;\\n        uint HealthFactor;\\n        uint UpperHealthFactor;\\n        uint MaxLockerFee;\\n        uint NativeTokenDecimal;\\n        address NativeToken;\\n    }\\n\\n    struct lockersLibParam {\\n        address teleportDAOToken;\\n        address teleBTC;\\n        address ccBurnRouter;\\n        address exchangeConnector;\\n        address priceOracle;\\n\\n        uint minRequiredTDTLockedAmount;\\n        uint minRequiredTNTLockedAmount;\\n        uint lockerPercentageFee;\\n        uint collateralRatio;\\n        uint liquidationRatio;\\n        uint priceWithDiscountRatio;\\n        uint minLeavingIntervalTime;\\n    }\\n}\",\"keccak256\":\"0xa768fb36fd996bd17f9ab0573c377155acbc63fd7dfdf5fd5b2d47f0e5637d38\",\"license\":\"MIT\"},\"contracts/types/ScriptTypesEnum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\n    enum ScriptTypes {\\n        P2PK, // 32 bytes\\n        P2PKH, // 20 bytes        \\n        P2SH, // 20 bytes          \\n        P2WPKH, // 20 bytes          \\n        P2WSH // 32 bytes               \\n    }\",\"keccak256\":\"0x0b00007c6dfa5422319f3a8d78dcf45f9dd44f9e4c61b7604dde673d8e7f96f9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620060f8380380620060f8833981016040819052620000349162000711565b6200003f33620000a9565b600180556200004e88620000f9565b6200005987620001af565b620000648662000261565b6200006f8562000313565b6200007a84620003c5565b6200008583620004ee565b620000908262000596565b6200009b8162000651565b5050505050505050620007ad565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b806001600160a01b038116620001455760405162461bcd60e51b815260206004820152601d6024820152600080516020620060d883398151915260448201526064015b60405180910390fd5b600254604080516001600160a01b03928316815291841660208301527f4c28a3f61a715259c4dc930c23e7423b8fa52e13232c061a6e488729c66184f4910160405180910390a150600280546001600160a01b0319166001600160a01b0392909216919091179055565b806001600160a01b038116620001f75760405162461bcd60e51b815260206004820152601d6024820152600080516020620060d883398151915260448201526064016200013c565b600354604080516001600160a01b03928316815291841660208301527ffa021c2ec0f46429a53e7f88b88065e40001f50c9d38b2e8b713beaf9828d4c3910160405180910390a150600380546001600160a01b0319166001600160a01b0392909216919091179055565b806001600160a01b038116620002a95760405162461bcd60e51b815260206004820152601d6024820152600080516020620060d883398151915260448201526064016200013c565b600554604080516001600160a01b03928316815291841660208301527f567657fa3f286518b318f4a29870674f433f622fdfc819691acb13105b228225910160405180910390a150600580546001600160a01b0319166001600160a01b0392909216919091179055565b806001600160a01b0381166200035b5760405162461bcd60e51b815260206004820152601d6024820152600080516020620060d883398151915260448201526064016200013c565b600454604080516001600160a01b03928316815291841660208301527f36a4c08a38b736dcecb6c328dba61238529620e83ccb23db2cc43cd34ec26096910160405180910390a150600480546001600160a01b0319166001600160a01b0392909216919091179055565b60025460408051630a072bc560e41b815290516000926001600160a01b03169163a072bc50916004808301926020929190829003018186803b1580156200040b57600080fd5b505afa15801562000420573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000446919062000794565b9050808211620004ac5760405162461bcd60e51b815260206004820152602a60248201527f43434275726e526f757465723a207472616e7366657220646561646c696e6520604482015269697320746f6f206c6f7760b01b60648201526084016200013c565b60065460408051918252602082018490527f92c10a242ca42973030420e2ee32b3ba7818cc643f896958f620c606cf300416910160405180910390a150600655565b806127101015620005555760405162461bcd60e51b815260206004820152602a60248201527f43434275726e526f757465723a2070726f746f636f6c20666565206973206f7560448201526974206f662072616e676560b01b60648201526084016200013c565b60075460408051918252602082018390527f7d205f60891f60851c61cd244ba387d72b6589e7c0ac41b9d909ab0ce2c2a53b910160405180910390a1600755565b806127101015620006105760405162461bcd60e51b815260206004820152603760248201527f43434275726e526f757465723a20736c61736865722070657263656e7461676560448201527f20726577617264206973206f7574206f662072616e676500000000000000000060648201526084016200013c565b60085460408051918252602082018390527faa50b3683e42a13535a5b9c2c32780cccf956fb546b523a3542ac4ad8b544f67910160405180910390a1600855565b60095460408051918252602082018390527f47c5f9c13c35ebb166f6a8d8c56af73f8b323ac0fee7aec4a5e0490bbf67a4fe910160405180910390a1806127101015620006ef5760405162461bcd60e51b815260206004820152602560248201527f43434275726e526f757465723a2062746320666565206973206f7574206f662060448201526472616e676560d81b60648201526084016200013c565b600955565b80516001600160a01b03811681146200070c57600080fd5b919050565b600080600080600080600080610100898b0312156200072e578384fd5b6200073989620006f4565b97506200074960208a01620006f4565b96506200075960408a01620006f4565b95506200076960608a01620006f4565b94506080890151935060a0890151925060c0890151915060e089015190509295985092959890939650565b600060208284031215620007a6578081fd5b5051919050565b61591b80620007bd6000396000f3fe6080604052600436106101a05760003560e01c80638d3d78cd116100ec578063c780c03f1161008a578063ea73263711610064578063ea732637146104a4578063f0f44260146104b7578063f2fde38b146104d7578063f47e2240146104f7576101a7565b8063c780c03f14610451578063c805f68b14610464578063cdbe374114610484576101a7565b8063b14d3532116100c6578063b14d3532146103e5578063b59589d114610405578063b74d0d3514610425578063bed6a6021461043b576101a7565b80638d3d78cd1461037a5780638da5cb5b1461039a578063930a60e8146103b8576101a7565b80635c4f5f3e1161015957806373532b2a1161013357806373532b2a146102fa5780637ed557481461031a5780637f0f18171461033a5780637ffe9a921461035a576101a7565b80635c4f5f3e146102a557806361d027b3146102c5578063715018a6146102e5576101a7565b80631812adb6146101ac5780631876dec4146101d55780631e2361681461020d578063419cba7f1461024d57806343149dba146102635780634782bc3614610283576101a7565b366101a757005b600080fd5b3480156101b857600080fd5b506101c260075481565b6040519081526020015b60405180910390f35b3480156101e157600080fd5b506003546101f5906001600160a01b031681565b6040516001600160a01b0390911681526020016101cc565b34801561021957600080fd5b5061023d610228366004614eca565b600c6020526000908152604090205460ff1681565b60405190151581526020016101cc565b34801561025957600080fd5b506101c260085481565b34801561026f57600080fd5b506101c261027e3660046151de565b61052b565b34801561028f57600080fd5b506102a361029e366004614eca565b610a77565b005b3480156102b157600080fd5b506102a36102c0366004614eca565b610aad565b3480156102d157600080fd5b506005546101f5906001600160a01b031681565b3480156102f157600080fd5b506102a3610ae0565b34801561030657600080fd5b5061023d61031536600461501f565b610b0c565b34801561032657600080fd5b506102a3610335366004614eca565b61126f565b34801561034657600080fd5b506102a3610355366004614e47565b6112a2565b34801561036657600080fd5b5061023d610375366004614e7f565b6112d5565b34801561038657600080fd5b506004546101f5906001600160a01b031681565b3480156103a657600080fd5b506000546001600160a01b03166101f5565b3480156103c457600080fd5b506101c26103d3366004614e47565b600b6020526000908152604090205481565b3480156103f157600080fd5b506102a3610400366004614e47565b61132d565b34801561041157600080fd5b506002546101f5906001600160a01b031681565b34801561043157600080fd5b506101c260095481565b34801561044757600080fd5b506101c260065481565b61023d61045f366004615084565b611360565b34801561047057600080fd5b506102a361047f366004614e47565b6118c5565b34801561049057600080fd5b506102a361049f366004614eca565b6118f8565b61023d6104b2366004614efa565b61192b565b3480156104c357600080fd5b506102a36104d2366004614e47565b611bd2565b3480156104e357600080fd5b506102a36104f2366004614e47565b611c05565b34801561050357600080fd5b50610517610512366004614e7f565b611c9d565b6040516101cc989796959493929190615619565b6000600260015414156105595760405162461bcd60e51b8152600401610550906155e2565b60405180910390fd5b600260015585806105ac5760405162461bcd60e51b815260206004820152601b60248201527f43434275726e526f757465723a2076616c7565206973207a65726f00000000006044820152606401610550565b6105b68686611d9a565b60035460405163aff2faa360e01b81526001600160a01b039091169063aff2faa3906105e890879087906004016153be565b60206040518083038186803b15801561060057600080fd5b505afa158015610614573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106389190614eaa565b6106545760405162461bcd60e51b8152600401610550906154cb565b60035460405163626885b560e11b81526000916001600160a01b03169063c4d10b6a9061068790889088906004016153be565b60206040518083038186803b15801561069f57600080fd5b505afa1580156106b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d79190614e63565b6004549091506001600160a01b03166323b872dd336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152306024820152604481018b9052606401602060405180830381600087803b15801561073a57600080fd5b505af115801561074e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107729190614eaa565b50600061077f8983611e37565b6004805460035460405163095ea7b360e01b81526001600160a01b039182169381019390935260248301849052929350919091169063095ea7b390604401602060405180830381600087803b1580156107d757600080fd5b505af11580156107eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080f9190614eaa565b506003546040516338463cff60e01b81526001600160a01b03909116906338463cff90610844908990899086906004016153d2565b602060405180830381600087803b15801561085e57600080fd5b505af1158015610872573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108969190614ee2565b935061092b89858a8a600260009054906101000a90046001600160a01b03166001600160a01b0316632f796d906040518163ffffffff1660e01b815260040160206040518083038186803b1580156108ed57600080fd5b505afa158015610901573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109259190614ee2565b87611ff3565b6001600160a01b0382166000908152600a602052604090208054610951906001906157c1565b8154811061096f57634e487b7160e01b600052603260045260246000fd5b906000526020600020906007020160040154826001600160a01b03166109923390565b6001600160a01b03167fe33c3da07e34f08c660e672e065c0fa53300573c646a21eadd6eef116a70e51e8b8b8e8a8d8d600a60008d6001600160a01b03166001600160a01b031681526020019081526020016000206001600a60008f6001600160a01b03166001600160a01b0316815260200190815260200160002080549050610a1c91906157c1565b81548110610a3a57634e487b7160e01b600052603260045260246000fd5b906000526020600020906007020160060154604051610a5f9796959493929190615409565b60405180910390a45050600180555095945050505050565b6000546001600160a01b03163314610aa15760405162461bcd60e51b8152600401610550906155ad565b610aaa816121bb565b50565b6000546001600160a01b03163314610ad75760405162461bcd60e51b8152600401610550906155ad565b610aaa81612274565b6000546001600160a01b03163314610b0a5760405162461bcd60e51b8152600401610550906155ad565b565b600060026001541415610b315760405162461bcd60e51b8152600401610550906155e2565b600260015560035460405163aff2faa360e01b81526001600160a01b039091169063aff2faa390610b6890879087906004016153be565b60206040518083038186803b158015610b8057600080fd5b505afa158015610b94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb89190614eaa565b610bd45760405162461bcd60e51b8152600401610550906154cb565b60035460405163626885b560e11b81526000916001600160a01b03169063c4d10b6a90610c0790889088906004016153be565b60206040518083038186803b158015610c1f57600080fd5b505afa158015610c33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c579190614e63565b90506000600260009054906101000a90046001600160a01b03166001600160a01b0316632f796d906040518163ffffffff1660e01b815260040160206040518083038186803b158015610ca957600080fd5b505afa158015610cbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce19190614ee2565b905060005b845181101561125f576001600160a01b0383166000908152600a602052604090208551869083908110610d2957634e487b7160e01b600052603260045260246000fd5b602002602001015181548110610d4f57634e487b7160e01b600052603260045260246000fd5b600091825260209091206005600790920201015460ff1615610dc65760405162461bcd60e51b815260206004820152602a60248201527f43434275726e526f757465723a207265717565737420686173206265656e2070604482015269616964206265666f726560b01b6064820152608401610550565b6001600160a01b0383166000908152600a602052604090208551839190879084908110610e0357634e487b7160e01b600052603260045260246000fd5b602002602001015181548110610e2957634e487b7160e01b600052603260045260246000fd5b90600052602060002090600702016004015410610e585760405162461bcd60e51b81526004016105509061551b565b6001600160a01b0383166000908152600a60205260409020855160019190879084908110610e9657634e487b7160e01b600052603260045260246000fd5b602002602001015181548110610ebc57634e487b7160e01b600052603260045260246000fd5b60009182526020808320600792909202909101600501805460ff1916931515939093179092556003546008546001600160a01b038781168452600a909452604090922088519390911692631697565b928792612710928b9088908110610f3257634e487b7160e01b600052603260045260246000fd5b602002602001015181548110610f5857634e487b7160e01b600052603260045260246000fd5b906000526020600020906007020160000154610f749190615779565b610f7e9190615759565b336001600160a01b0388166000908152600a602052604090208a518b9088908110610fb957634e487b7160e01b600052603260045260246000fd5b602002602001015181548110610fdf57634e487b7160e01b600052603260045260246000fd5b906000526020600020906007020160000154600a60008a6001600160a01b03166001600160a01b031681526020019081526020016000208b888151811061103657634e487b7160e01b600052603260045260246000fd5b60200260200101518154811061105c57634e487b7160e01b600052603260045260246000fd5b600091825260209091206007909102016002015460405160e087901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094529184166044840152606483015291909116608482015260a401602060405180830381600087803b1580156110cf57600080fd5b505af11580156110e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111079190614eaa565b506001600160a01b0383166000818152600a60205260409020865187908490811061114257634e487b7160e01b600052603260045260246000fd5b60200260200101518154811061116857634e487b7160e01b600052603260045260246000fd5b906000526020600020906007020160020160009054906101000a90046001600160a01b03166001600160a01b03167f58c23b4ae0617be275628875bcfd65759a441263099a256eeb27899fb5dd846d8989600a6000896001600160a01b03166001600160a01b031681526020019081526020016000208a87815181106111fe57634e487b7160e01b600052603260045260246000fd5b60200260200101518154811061122457634e487b7160e01b600052603260045260246000fd5b906000526020600020906007020160060154604051611245939291906153d2565b60405180910390a38061125781615860565b915050610ce6565b5050600180805595945050505050565b6000546001600160a01b031633146112995760405162461bcd60e51b8152600401610550906155ad565b610aaa81612397565b6000546001600160a01b031633146112cc5760405162461bcd60e51b8152600401610550906155ad565b610aaa8161243d565b6001600160a01b0382166000908152600a6020526040812080548390811061130d57634e487b7160e01b600052603260045260246000fd5b600091825260209091206005600790920201015460ff1690505b92915050565b6000546001600160a01b031633146113575760405162461bcd60e51b8152600401610550906155ad565b610aaa816124ce565b6000600260015414156113855760405162461bcd60e51b8152600401610550906155e2565b60026001819055895114801561139c575083516002145b80156113a9575081516003145b6113f55760405162461bcd60e51b815260206004820152601a60248201527f43434275726e526f757465723a2077726f6e6720696e707574730000000000006044820152606401610550565b60035460405163aff2faa360e01b81526001600160a01b039091169063aff2faa390611425908d906004016153f6565b60206040518083038186803b15801561143d57600080fd5b505afa158015611451573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114759190614eaa565b6114915760405162461bcd60e51b8152600401610550906154cb565b60006114ef8a6000815181106114b757634e487b7160e01b600052603260045260246000fd5b60200260200101518a8a886000815181106114e257634e487b7160e01b600052603260045260246000fd5b602002602001015161255f565b905061154d818460028151811061151657634e487b7160e01b600052603260045260246000fd5b6020026020010151868660018151811061154057634e487b7160e01b600052603260045260246000fd5b6020026020010151612655565b6115b25760405162461bcd60e51b815260206004820152603060248201527f43434275726e526f757465723a20696e707574207472616e73616374696f6e2060448201526f1a5cc81b9bdd08199a5b985b1a5e995960821b6064820152608401610550565b6000818152600c602052604090205460ff161561162f5760405162461bcd60e51b815260206004820152603560248201527f43434275726e526f757465723a207472616e73616374696f6e2068617320626560448201527432b7103ab9b2b21030b990313ab93710383937b7b360591b6064820152608401610550565b6000806116648b8660008151811061165757634e487b7160e01b600052603260045260246000fd5b60200260200101516127c7565b915091506116b78c60018151811061168c57634e487b7160e01b600052603260045260246000fd5b60200260200101518a8a8a6001815181106114e257634e487b7160e01b600052603260045260246000fd5b82146117245760405162461bcd60e51b815260206004820152603660248201527f43434275726e526f757465723a206f7574706f696e7420747820646f65736e276044820152750e840dac2e8c6d040eed2e8d040deeae8e0eae840e8f60531b6064820152608401610550565b8c5160208e0120611735898361287c565b80519060200120146117a25760405162461bcd60e51b815260206004820152603060248201527f43434275726e526f757465723a206f757470757420747820646f65736e27742060448201526f3132b637b733903a37903637b1b5b2b960811b6064820152608401610550565b846002815181106117c357634e487b7160e01b600052603260045260246000fd5b60200260200101516006546117d891906156cf565b600260009054906101000a90046001600160a01b03166001600160a01b0316632f796d906040518163ffffffff1660e01b815260040160206040518083038186803b15801561182657600080fd5b505afa15801561183a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061185e9190614ee2565b1161187b5760405162461bcd60e51b81526004016105509061551b565b6118af8a8e85886002815181106118a257634e487b7160e01b600052603260045260246000fd5b60200260200101516128f6565b505060018080559b9a5050505050505050505050565b6000546001600160a01b031633146118ef5760405162461bcd60e51b8152600401610550906155ad565b610aaa81612ac2565b6000546001600160a01b031633146119225760405162461bcd60e51b8152600401610550906155ad565b610aaa81612b53565b6000600260015414156119505760405162461bcd60e51b8152600401610550906155e2565b60026001556001600160e01b03198816156119ad5760405162461bcd60e51b815260206004820181905260248201527f43434275726e526f757465723a206e6f6e2d7a65726f206c6f636b2074696d656044820152606401610550565b60035460405163aff2faa360e01b81526001600160a01b039091169063aff2faa3906119dd9087906004016153f6565b60206040518083038186803b1580156119f557600080fd5b505afa158015611a09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a2d9190614eaa565b611a495760405162461bcd60e51b8152600401610550906154cb565b60035460405163626885b560e11b81526000916001600160a01b03169063c4d10b6a90611a7a9088906004016153f6565b60206040518083038186803b158015611a9257600080fd5b505afa158015611aa6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aca9190614e63565b90508251845114611b1d5760405162461bcd60e51b815260206004820152601b60248201527f43434275726e526f757465723a2077726f6e6720696e646578657300000000006044820152606401610550565b6000611b2b8d8d8d8d61255f565b9050611b39818a8a8a612655565b611b9d5760405162461bcd60e51b815260206004820152602f60248201527f43434275726e526f757465723a207472616e73616374696f6e20686173206e6f60448201526e1d08199a5b985b1a5e9959081e595d608a1b6064820152608401610550565b6000611bad828b858f8a8a612bf4565b9050611bbb818d8985613040565b505060018080559c9b505050505050505050505050565b6000546001600160a01b03163314611bfc5760405162461bcd60e51b8152600401610550906155ad565b610aaa816130c9565b6000546001600160a01b03163314611c2f5760405162461bcd60e51b8152600401610550906155ad565b6001600160a01b038116611c945760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610550565b610aaa8161315a565b600a6020528160005260406000208181548110611cb957600080fd5b600091825260209091206007909102018054600182015460028301546003840180549396509194506001600160a01b03169291611cf59061582b565b80601f0160208091040260200160405190810160405280929190818152602001828054611d219061582b565b8015611d6e5780601f10611d4357610100808354040283529160200191611d6e565b820191906000526020600020905b815481529060010190602001808311611d5157829003601f168201915b505050600484015460058501546006909501549394909360ff8083169450610100909204909116915088565b6000816004811115611dbc57634e487b7160e01b600052602160045260246000fd5b1480611de757506004816004811115611de557634e487b7160e01b600052602160045260246000fd5b145b15611e12578151602014611e0d5760405162461bcd60e51b81526004016105509061556c565b611e33565b8151601414611e335760405162461bcd60e51b81526004016105509061556c565b5050565b60008061271060075485611e4b9190615779565b611e559190615759565b905060095481611e6591906156cf565b8411611eb35760405162461bcd60e51b815260206004820152601f60248201527f43434275726e526f757465723a20616d6f756e7420697320746f6f206c6f77006044820152606401610550565b600954600090611ec383876157c1565b611ecd91906157c1565b6004805460055460405163a9059cbb60e01b81526001600160a01b039182169381019390935260248301869052929350919091169063a9059cbb90604401602060405180830381600087803b158015611f2557600080fd5b505af1158015611f39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f5d9190614eaa565b506004805460095460405163a9059cbb60e01b81526001600160a01b0388811694820194909452602481019190915291169063a9059cbb90604401602060405180830381600087803b158015611fb257600080fd5b505af1158015611fc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fea9190614eaa565b50949350505050565b604080516101008101825260006080820181905260a0820181905260c0820181815260e0830191909152888252602082018890523392820192909252606081018690529084600481111561205757634e487b7160e01b600052602160045260246000fd5b9081600481111561207857634e487b7160e01b600052602160045260246000fd5b90525060065461208890846156cf565b6080820152600060a082018190526001600160a01b038316808252600b6020818152604084205460e08601819052929093529091526120c89060016156cf565b6001600160a01b038381166000908152600b6020908152604080832094909455600a81528382208054600180820183559184529282902086516007909402019283558582015190830155928401516002820180546001600160a01b0319169190931617909155606083015180518493612148926003850192910190614c22565b50608082015160048281019190915560a083015160058301805460ff19169115159190911780825560c08501519261ff0019909116906101009084908111156121a157634e487b7160e01b600052602160045260246000fd5b021790555060e08201518160060155505050505050505050565b8061271010156122335760405162461bcd60e51b815260206004820152603760248201527f43434275726e526f757465723a20736c61736865722070657263656e7461676560448201527f20726577617264206973206f7574206f662072616e67650000000000000000006064820152608401610550565b60085460408051918252602082018390527faa50b3683e42a13535a5b9c2c32780cccf956fb546b523a3542ac4ad8b544f67910160405180910390a1600855565b60025460408051630a072bc560e41b815290516000926001600160a01b03169163a072bc50916004808301926020929190829003018186803b1580156122b957600080fd5b505afa1580156122cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122f19190614ee2565b90508082116123555760405162461bcd60e51b815260206004820152602a60248201527f43434275726e526f757465723a207472616e7366657220646561646c696e6520604482015269697320746f6f206c6f7760b01b6064820152608401610550565b60065460408051918252602082018490527f92c10a242ca42973030420e2ee32b3ba7818cc643f896958f620c606cf300416910160405180910390a150600655565b8061271010156123fc5760405162461bcd60e51b815260206004820152602a60248201527f43434275726e526f757465723a2070726f746f636f6c20666565206973206f7560448201526974206f662072616e676560b01b6064820152608401610550565b60075460408051918252602082018390527f7d205f60891f60851c61cd244ba387d72b6589e7c0ac41b9d909ab0ce2c2a53b910160405180910390a1600755565b806001600160a01b0381166124645760405162461bcd60e51b815260040161055090615494565b600454604080516001600160a01b03928316815291841660208301527f36a4c08a38b736dcecb6c328dba61238529620e83ccb23db2cc43cd34ec26096910160405180910390a150600480546001600160a01b0319166001600160a01b0392909216919091179055565b806001600160a01b0381166124f55760405162461bcd60e51b815260040161055090615494565b600354604080516001600160a01b03928316815291841660208301527ffa021c2ec0f46429a53e7f88b88065e40001f50c9d38b2e8b713beaf9828d4c3910160405180910390a150600380546001600160a01b0319166001600160a01b0392909216919091179055565b60008060028686868660405160200161257b94939291906152de565b60408051601f198184030181529082905261259591615331565b602060405180830381855afa1580156125b2573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906125d59190614ee2565b905060006002826040516020016125ee91815260200190565b60408051601f198184030181529082905261260891615331565b602060405180830381855afa158015612625573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906126489190614ee2565b925050505b949350505050565b60025460405163d0a8973960e01b8152600481018590526000602482018190529182916001600160a01b039091169063d0a897399060440160206040518083038186803b1580156126a557600080fd5b505afa1580156126b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126dd9190614ee2565b9050803410156127415760405162461bcd60e51b815260206004820152602960248201527f43434275726e526f757465723a2072656c617920666565206973206e6f7420736044820152681d59999a58da595b9d60ba1b6064820152608401610550565b60025460405160009161279e916001600160a01b039091169061276e908a908a908a908a9060240161538e565b60408051601f198184030181529190526020810180516001600160e01b0316634354da2560e01b179052846131aa565b90506127b3336127ae84346157c1565b6131da565b808060200190518101906126489190614eaa565b600080806127dd6127d886836132f8565b61331c565b90506127ee62ffffff198216613452565b1561283b5760405162461bcd60e51b815260206004820152601a60248201527f426974636f696e48656c7065723a2076696e206973206e756c6c0000000000006044820152606401610550565b60006128478286613461565b905060006128548261357f565b905061285f816135a3565b945061286a816135c5565b63ffffffff1693505050509250929050565b6060600061289461288f825b86906132f8565b6135ef565b90506128a562ffffff198216613452565b156128c25760405162461bcd60e51b81526004016105509061545d565b60006128ce82856136e0565b905060006128db826137da565b90506128ec62ffffff19821661382b565b9695505050505050565b60006129018561387b565b60035460405163626885b560e11b81526001600160401b039290921692506000916001600160a01b039091169063c4d10b6a906129429088906004016153f6565b60206040518083038186803b15801561295a57600080fd5b505afa15801561296e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129929190614e63565b6003546008549192506001600160a01b03169063b734de26908390612710906129bb9087615779565b6129c59190615759565b3360405160e085901b6001600160e01b03191681526001600160a01b0393841660048201526024810192909252909116604482015260648101859052608401602060405180830381600087803b158015612a1e57600080fd5b505af1158015612a32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a569190614eaa565b507f7ff138134e34ccab071315c38e38eec079f54726b890304ab46e2c5ab6f722bb8186858761271060085488612a8d9190615779565b612a979190615759565b612aa190886156cf565b604051612ab295949392919061534d565b60405180910390a1505050505050565b806001600160a01b038116612ae95760405162461bcd60e51b815260040161055090615494565b600254604080516001600160a01b03928316815291841660208301527f4c28a3f61a715259c4dc930c23e7423b8fa52e13232c061a6e488729c66184f4910160405180910390a150600280546001600160a01b0319166001600160a01b0392909216919091179055565b60095460408051918252602082018390527f47c5f9c13c35ebb166f6a8d8c56af73f8b323ac0fee7aec4a5e0490bbf67a4fe910160405180910390a1806127101015612bef5760405162461bcd60e51b815260206004820152602560248201527f43434275726e526f757465723a2062746320666565206973206f7574206f662060448201526472616e676560d81b6064820152608401610550565b600955565b600080805b8451811015613034576000858281518110612c2457634e487b7160e01b600052603260045260246000fd5b60200260200101519050600a6000896001600160a01b03166001600160a01b031681526020019081526020016000208181548110612c7257634e487b7160e01b600052603260045260246000fd5b600091825260209091206005600790920201015460ff16158015612ce157506001600160a01b0388166000908152600a6020526040902080548a919083908110612ccc57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600702016004015410155b1561302157612e8c87868481518110612d0a57634e487b7160e01b600052603260045260246000fd5b6020026020010151600a60008c6001600160a01b03166001600160a01b031681526020019081526020016000208481548110612d5657634e487b7160e01b600052603260045260246000fd5b90600052602060002090600702016003018054612d729061582b565b80601f0160208091040260200160405190810160405280929190818152602001828054612d9e9061582b565b8015612deb5780601f10612dc057610100808354040283529160200191612deb565b820191906000526020600020905b815481529060010190602001808311612dce57829003601f168201915b5050506001600160a01b038e166000908152600a6020526040902080549092508791508110612e2a57634e487b7160e01b600052603260045260246000fd5b906000526020600020906007020160050160019054906101000a900460ff166004811115612e6857634e487b7160e01b600052602160045260246000fd5b6004811115612e8757634e487b7160e01b600052602160045260246000fd5b61391b565b6001600160401b0316925082600a60008a6001600160a01b03166001600160a01b031681526020019081526020016000208281548110612edc57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060070201600101541415613021576001600160a01b0388166000908152600a6020526040902080546001919083908110612f3057634e487b7160e01b600052603260045260246000fd5b60009182526020909120600790910201600501805460ff1916911515919091179055612f5d8460016156cf565b6001600160a01b0389166000818152600a60205260409020805492965090917f1b46655c2f394f2191cb246d5982dbe00ad671f0b590e75e97c90ee97f1f782a919084908110612fbd57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060070201600601548c888681518110612ff057634e487b7160e01b600052603260045260246000fd5b6020026020010151604051613018939291909283526020830191909152604082015260600190565b60405180910390a25b508061302c81615860565b915050612bf9565b50509695505050505050565b600061304c8484613b5c565b6001600160401b03169050600061306285613c65565b9050811580159061307c57508061307a8760016156cf565b145b1561309f576000838152600c60205260409020805460ff191660011790556130c1565b808614156130c1576000838152600c60205260409020805460ff191660011790555b505050505050565b806001600160a01b0381166130f05760405162461bcd60e51b815260040161055090615494565b600554604080516001600160a01b03928316815291841660208301527f567657fa3f286518b318f4a29870674f433f622fdfc819691acb13105b228225910160405180910390a150600580546001600160a01b0319166001600160a01b0392909216919091179055565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60606131d08484846040518060600160405280602981526020016158bd60299139613c91565b90505b9392505050565b8047101561322a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610550565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114613277576040519150601f19603f3d011682016040523d82523d6000602084013e61327c565b606091505b50509050806132f35760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610550565b505050565b81516000906020840161331364ffffffffff85168284613dae565b95945050505050565b60008181613332815b62ffffff19841690613df2565b50601884901c6001600160601b03166133525762ffffff195b925061344b565b600061335f856000613ecc565b9050601885901c6001600160601b03166001600160401b03821661338c5762ffffff195b9450505061344b565b600061339783614013565b60ff16905060005b836001600160401b0316811015613413578282106133c85762ffffff195b96505050505061344b565b60006133e86133d784866157c1565b60055b62ffffff198c16919061406c565b90506133f3816140a0565b6133fd90846156cf565b925050808061340b90615860565b91505061339f565b5081811461342b5762ffffff195b955050505061344b565b61344560065b60d81b6301000000600160d81b0389161790565b95505050505b5050919050565b62ffffff19818116145b919050565b600082600661346f81613325565b50600061347d866000613ecc565b6001600160401b03169050601886901c6001600160601b03168186106134d85760405162461bcd60e51b815260206004820152601060248201526f2b34b7103932b0b21037bb32b9393ab760811b6044820152606401610550565b60006134e383614013565b60ff1690506000805b8881101561353b5761351261350184866157c1565b60055b62ffffff198d16919061406c565b915061351d826140a0565b61352790846156cf565b92506135346001826156cf565b90506134ec565b506135496133d783856157c1565b90506000613556826140a0565b905061356f838260045b62ffffff198e169291906140f4565b975050505050505b505092915050565b600081600461358d81613325565b5061264d62ffffff1985166000602460036140f4565b60008160036135b181613325565b5061264d62ffffff19851660006020614164565b60008160036135d381613325565b5061264d6135ea62ffffff198616602060046142bd565b614407565b600081816135fc81613325565b50601884901c6001600160601b03166136195762ffffff1961334b565b6000613626856000613ecc565b9050601885901c6001600160601b03166001600160401b03821661364e5762ffffff19613383565b600061365983614013565b60ff16905060005b836001600160401b03168110156136c4578282106136835762ffffff196133bd565b600061369961369284866157c1565b600e6133da565b90506136a481614470565b6136ae90846156cf565b92505080806136bc90615860565b915050613661565b508181146136d65762ffffff19613421565b613445600f613431565b600082600f6136ee81613325565b5060006136fc866000613ecc565b6001600160401b03169050601886901c6001600160601b03168186106137585760405162461bcd60e51b81526020600482015260116024820152702b37baba103932b0b21037bb32b9393ab760791b6044820152606401610550565b600061376383614013565b60ff1690506000805b888110156137b15761378861378184866157c1565b600e613504565b915061379382614470565b61379d90846156cf565b92506137aa6001826156cf565b905061376c565b506137bf61369283856157c1565b905060006137cc82614470565b905061356f8382600d613560565b600081600d6137e881613325565b5060006137f6856008613ecc565b905061331361380482614013565b61380f906008615712565b62ffffff1987169060ff166001600160401b03841660076140f4565b60606000806138438460181c6001600160601b031690565b60405193508392506001600160601b0316905061386a846138658460206156cf565b6144b9565b508181016020016040529052919050565b60008061388d61288f825b85906132f8565b905061389e62ffffff198216613452565b156138bb5760405162461bcd60e51b81526004016105509061545d565b6000806138c9836000613ecc565b6001600160401b0316905060005b81811015613912576138e984826136e0565b92506138f483614610565b6138fe90866156e7565b94508061390a81615860565b9150506138d7565b50505050919050565b60008061392b61288f87836132f8565b905061393c62ffffff198216613452565b156139595760405162461bcd60e51b81526004016105509061545d565b600061396582876136e0565b90506000613972826137da565b9050600085600481111561399657634e487b7160e01b600052602160045260246000fd5b14156139fb576139af62ffffff19821660016020614164565b6040516020016139c191815260200190565b604051602081830303815290604052805190602001208680519060200120146139eb5760006139f4565b6139f482614610565b9350613b51565b6001856004811115613a1d57634e487b7160e01b600052602160045260246000fd5b1415613a5c57613a3462ffffff1982166003614635565b6040516020016139c1919060609190911b6bffffffffffffffffffffffff1916815260140190565b6002856004811115613a7e57634e487b7160e01b600052602160045260246000fd5b1415613a9557613a3462ffffff1982166002614635565b6003856004811115613ab757634e487b7160e01b600052602160045260246000fd5b1415613ace57613a3462ffffff1982166002614635565b6004856004811115613af057634e487b7160e01b600052602160045260246000fd5b1415613b5157613b0962ffffff19821660026020614164565b604051602001613b1b91815260200190565b60405160208183030381529060405280519060200120868051906020012014613b45576000613b4e565b613b4e82614610565b93505b505050949350505050565b600080613b6b61288f82612888565b9050613b7c62ffffff198216613452565b15613b995760405162461bcd60e51b81526004016105509061545d565b6000806000613ba9846000613ecc565b6001600160401b0316905060005b81811015613c5a57613bc985826136e0565b9350613bd4846137da565b925086604051602001613be79190615331565b60405160208183030381529060405280519060200120613c0c8462ffffff191661382b565b604051602001613c1c9190615331565b604051602081830303815290604052805190602001201415613c4857613c4184614610565b9550613c5a565b80613c5281615860565b915050613bb7565b505050505092915050565b600080613c7461288f82613886565b9050613c81816000613ecc565b6001600160401b03169392505050565b606082471015613cf25760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610550565b843b613d405760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610550565b600080866001600160a01b03168587604051613d5c9190615331565b60006040518083038185875af1925050503d8060008114613d99576040519150601f19603f3d011682016040523d82523d6000602084013e613d9e565b606091505b5091509150612648828286614643565b600080613dbb83856156cf565b9050604051811115613dcb575060005b80613ddd5762ffffff199150506131d3565b5050606092831b9190911790911b1760181b90565b6000613dfe838361467c565b613ec5576000613e1d613e118560d81c90565b64ffffffffff1661469f565b9150506000613e328464ffffffffff1661469f565b6040517f5479706520617373657274696f6e206661696c65642e20476f7420307800000060208201526001600160b01b031960b086811b8216603d8401526c05c408af0e0cac6e8cac84060f609b1b604784015283901b16605482015290925060009150605e015b60405160208183030381529060405290508060405162461bcd60e51b815260040161055091906153f6565b5090919050565b600080613ee162ffffff19851684600161474b565b905060fc8111613efc57613ef48161477b565b915050611327565b8060fd1415613f6257613f2a613f25613f168560016156cf565b62ffffff1987169060026142bd565b61477b565b9150613f3582614013565b60ff16600314613f5d57613f5b613f5662ffffff19861685600360006140f4565b6147e3565b505b61400c565b8060fe1415613fb757613f8b613f25613f7c8560016156cf565b62ffffff1987169060046142bd565b9150613f9682614013565b60ff16600514613f5d57613f5b613f5662ffffff19861685600560006140f4565b8060ff141561400c57613fe0613f25613fd18560016156cf565b62ffffff1987169060086142bd565b9150613feb82614013565b60ff1660091461400c57613577613f5662ffffff19861685600960006140f4565b5092915050565b600060fc826001600160401b03161161402e5750600161345c565b61ffff826001600160401b0316116140485750600361345c565b63ffffffff826001600160401b0316116140645750600561345c565b50600961345c565b60006131d084846140868760181c6001600160601b031690565b6001600160601b031661409991906157c1565b85856140f4565b60008160056140ae81613325565b5060006140bc856024613ecc565b9050806001600160401b03166140d182614013565b60ff166140de91906156cf565b6140e99060246156cf565b6133139060046156cf565b60008061410a8660781c6001600160601b031690565b6001600160601b0316905061411e8661486a565b8461412987846156cf565b61413391906156cf565b11156141465762ffffff1991505061264d565b61415085826156cf565b90506128ec8364ffffffffff168286613dae565b600060ff8216614176575060006131d3565b6141898460181c6001600160601b031690565b6001600160601b031661419f60ff8416856156cf565b1115614203576141ea6141bb8560781c6001600160601b031690565b6001600160601b03166141d78660181c6001600160601b031690565b6001600160601b0316858560ff166148ab565b60405162461bcd60e51b815260040161055091906153f6565b60208260ff16111561427d5760405162461bcd60e51b815260206004820152603a60248201527f54797065644d656d566965772f696e646578202d20417474656d70746564207460448201527f6f20696e646578206d6f7265207468616e2033322062797465730000000000006064820152608401610550565b6008820260006142968660781c6001600160601b031690565b6001600160601b031690506000600160ff1b60001984011d91909501511695945050505050565b60006131d06142cd858585614164565b600881811c7eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff167fff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff009290911b9190911617601081811c7dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff167fffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff00009290911b9190911617602081811c7bffffffff00000000ffffffff00000000ffffffff00000000ffffffff167fffffffff00000000ffffffff00000000ffffffff00000000ffffffff000000009290911b9190911617604081811c77ffffffffffffffff0000000000000000ffffffffffffffff1677ffffffffffffffff0000000000000000ffffffffffffffff199290911b9190911617608081811c91901b1790565b600063ffffffff82111561446c5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b6064820152608401610550565b5090565b600081600e61447e81613325565b50600061448c856008613ecc565b9050806001600160401b03166144a182614013565b60ff166144ae91906156cf565b6133139060086156cf565b60006144c4836149d5565b6145215760405162461bcd60e51b815260206004820152602860248201527f54797065644d656d566965772f636f7079546f202d204e756c6c20706f696e7460448201526732b9103232b932b360c11b6064820152608401610550565b61452a836149e7565b61458a5760405162461bcd60e51b815260206004820152602b60248201527f54797065644d656d566965772f636f7079546f202d20496e76616c696420706f60448201526a34b73a32b9103232b932b360a91b6064820152608401610550565b600061459f8460181c6001600160601b031690565b6001600160601b0316905060006145bf8560781c6001600160601b031690565b6001600160601b0316905060006040519050848111156145df5760206060fd5b8285848460045afa506128ec6145f58760d81c90565b64ffffffffff60601b606091821b168717901b841760181b90565b600081600d61461e81613325565b5061264d613f2562ffffff198616600060086142bd565b60006131d38383601461474b565b606083156146525750816131d3565b8251156146625782518084602001fd5b8160405162461bcd60e51b815260040161055091906153f6565b60008164ffffffffff166146908460d81c90565b64ffffffffff16149392505050565b600080601f5b600f8160ff1611156146fd5760006146be826008615798565b60ff1685901c90506146cf81614a25565b61ffff16841793508160ff166010146146ea57601084901b93505b506146f66001826157d8565b90506146a5565b50600f5b60ff8160ff1610156147455760ff600882021684901c61472081614a25565b61ffff16831792508160ff1660001461473b57601083901b92505b5060001901614701565b50915091565b60006147588260206157d8565b614763906008615798565b60ff16614771858585614164565b901c949350505050565b60006001600160401b0382111561446c5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201526534206269747360d01b6064820152608401610550565b6060600061481761481282614804601887901c6001600160601b0316614a55565b62ffffff198716919061474b565b61469f565b6040517f4e6f6e2d6d696e696d616c2076617220696e742e20476f74203078000000000060208201526dffffffffffffffffffffffffffff19607083901b16603b82015290925060009150604d01613e9a565b600061487f8260181c6001600160601b031690565b6148928360781c6001600160601b031690565b61489c9190615737565b6001600160601b031692915050565b606060006148b88661469f565b91505060006148c68661469f565b91505060006148d48661469f565b91505060006148e28661469f565b604080517f54797065644d656d566965772f696e646578202d204f76657272616e20746865602082015274040ecd2caee5c40a6d8d2c6ca40d2e640c2e84060f605b1b818301526001600160d01b031960d098891b811660558301526e040eed2e8d040d8cadccee8d04060f608b1b605b830181905297891b8116606a8301527f2e20417474656d7074656420746f20696e646578206174206f666673657420306070830152600f60fb1b609083015295881b861660918201526097810196909652951b90921660a68401525050601760f91b60ac8201528151808203608d01815260ad90910190915295945050505050565b60006149e082613452565b1592915050565b60006149f38260d81c90565b64ffffffffff1664ffffffffff1415614a0e5750600061345c565b6000614a198361486a565b60405110199392505050565b6000614a3760048360ff16901c614ab6565b60ff161760081b62ffff0016614a4c82614ab6565b60ff1617919050565b600060ff82111561446c5760405162461bcd60e51b815260206004820152602560248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2038604482015264206269747360d81b6064820152608401610550565b600060f08083179060ff82161415614ad257603091505061345c565b8060ff1660f11415614ae857603191505061345c565b8060ff1660f21415614afe57603291505061345c565b8060ff1660f31415614b1457603391505061345c565b8060ff1660f41415614b2a57603491505061345c565b8060ff1660f51415614b4057603591505061345c565b8060ff1660f61415614b5657603691505061345c565b8060ff1660f71415614b6c57603791505061345c565b8060ff1660f81415614b8257603891505061345c565b8060ff1660f91415614b9857603991505061345c565b8060ff1660fa1415614bae57606191505061345c565b8060ff1660fb1415614bc457606291505061345c565b8060ff1660fc1415614bda57606391505061345c565b8060ff1660fd1415614bf057606491505061345c565b8060ff1660fe1415614c0657606591505061345c565b8060ff1660ff1415614c1c57606691505061345c565b50919050565b828054614c2e9061582b565b90600052602060002090601f016020900481019282614c505760008555614c96565b82601f10614c6957805160ff1916838001178555614c96565b82800160010185558215614c96579182015b82811115614c96578251825591602001919060010190614c7b565b5061446c9291505b8082111561446c5760008155600101614c9e565b600082601f830112614cc2578081fd5b81356020614cd7614cd2836156ac565b61567c565b8281528181019085830183850287018401881015614cf3578586fd5b855b85811015614d1857614d0682614d7f565b84529284019290840190600101614cf5565b5090979650505050505050565b600082601f830112614d35578081fd5b81356020614d45614cd2836156ac565b8281528181019085830183850287018401881015614d61578586fd5b855b85811015614d1857813584529284019290840190600101614d63565b80356001600160e01b03198116811461345c57600080fd5b60008083601f840112614da8578182fd5b5081356001600160401b03811115614dbe578182fd5b602083019150836020828501011115614dd657600080fd5b9250929050565b600082601f830112614ded578081fd5b81356001600160401b03811115614e0657614e06615891565b614e19601f8201601f191660200161567c565b818152846020838601011115614e2d578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215614e58578081fd5b81356131d3816158a7565b600060208284031215614e74578081fd5b81516131d3816158a7565b60008060408385031215614e91578081fd5b8235614e9c816158a7565b946020939093013593505050565b600060208284031215614ebb578081fd5b815180151581146131d3578182fd5b600060208284031215614edb578081fd5b5035919050565b600060208284031215614ef3578081fd5b5051919050565b6000806000806000806000806000806101408b8d031215614f19578586fd5b614f228b614d7f565b995060208b01356001600160401b0380821115614f3d578788fd5b614f498e838f01614ddd565b9a5060408d0135915080821115614f5e578788fd5b614f6a8e838f01614ddd565b9950614f7860608e01614d7f565b985060808d0135975060a08d0135915080821115614f94578687fd5b614fa08e838f01614ddd565b965060c08d0135955060e08d0135915080821115614fbc578485fd5b614fc88e838f01614ddd565b94506101008d0135915080821115614fde578384fd5b614fea8e838f01614d25565b93506101208d0135915080821115615000578283fd5b5061500d8d828e01614d25565b9150509295989b9194979a5092959850565b600080600060408486031215615033578283fd5b83356001600160401b0380821115615049578485fd5b61505587838801614d97565b9095509350602086013591508082111561506d578283fd5b5061507a86828701614d25565b9150509250925092565b60008060008060008060008060006101208a8c0312156150a2578283fd5b89356001600160401b03808211156150b8578485fd5b6150c48d838e01614ddd565b9a5060208c01359150808211156150d9578485fd5b6150e58d838e01614cb2565b995060408c01359150808211156150fa578485fd5b6151068d838e01614ddd565b985060608c013591508082111561511b578485fd5b6151278d838e01614ddd565b975060808c013591508082111561513c578485fd5b6151488d838e01614ddd565b965060a08c013591508082111561515d578485fd5b6151698d838e01614ddd565b955060c08c013591508082111561517e578485fd5b61518a8d838e01614cb2565b945060e08c013591508082111561519f578384fd5b6151ab8d838e01614ddd565b93506101008c01359150808211156151c1578283fd5b506151ce8c828d01614d25565b9150509295985092959850929598565b6000806000806000608086880312156151f5578283fd5b8535945060208601356001600160401b0380821115615212578485fd5b61521e89838a01614ddd565b95506040880135915060058210615233578485fd5b90935060608701359080821115615248578283fd5b5061525588828901614d97565b969995985093965092949392505050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b600081518084526152a88160208601602086016157fb565b601f01601f19169290920160200192915050565b600581106152da57634e487b7160e01b600052602160045260246000fd5b9052565b600063ffffffff60e01b80871683528551615300816004860160208a016157fb565b855190840190615317816004840160208a016157fb565b919094169301600481019390935250506008019392505050565b600082516153438184602087016157fb565b9190910192915050565b6001600160a01b038616815260a06020820181905260009061537190830187615290565b604083019590955250606081019290925260809091015292915050565b6000858252846020830152608060408301526153ad6080830185615290565b905082606083015295945050505050565b6000602082526131d0602083018486615266565b6000604082526153e6604083018587615266565b9050826020830152949350505050565b6000602082526131d36020830184615290565b600060c0825261541c60c083018a615290565b615429602084018a6152bc565b8760408401528660608401528281036080840152615448818688615266565b9150508260a083015298975050505050505050565b6020808252601b908201527f426974636f696e48656c7065723a20766f7574206973206e756c6c0000000000604082015260600190565b6020808252601d908201527f43434275726e526f757465723a2061646472657373206973207a65726f000000604082015260600190565b60208082526030908201527f43434275726e526f757465723a20676976656e206c6f636b696e67207363726960408201526f383a1034b9903737ba103637b1b5b2b960811b606082015260800190565b60208082526031908201527f43434275726e526f757465723a207061796261636b20646561646c696e652068604082015270185cc81b9bdd081c185cdcd959081e595d607a1b606082015260800190565b60208082526021908201527f43434275726e526f757465723a20696e76616c696420757365722073637269706040820152601d60fa1b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b888152602081018890526001600160a01b03871660408201526101006060820181905260009061564b83820189615290565b91505085608083015284151560a083015261566960c08301856152bc565b8260e08301529998505050505050505050565b604051601f8201601f191681016001600160401b03811182821017156156a4576156a4615891565b604052919050565b60006001600160401b038211156156c5576156c5615891565b5060209081020190565b600082198211156156e2576156e261587b565b500190565b60006001600160401b038083168185168083038211156157095761570961587b565b01949350505050565b600060ff821660ff84168060ff0382111561572f5761572f61587b565b019392505050565b60006001600160601b038083168185168083038211156157095761570961587b565b60008261577457634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156157935761579361587b565b500290565b600060ff821660ff84168160ff04811182151516156157b9576157b961587b565b029392505050565b6000828210156157d3576157d361587b565b500390565b600060ff821660ff8416808210156157f2576157f261587b565b90039392505050565b60005b838110156158165781810151838201526020016157fe565b83811115615825576000848401525b50505050565b60028104600182168061583f57607f821691505b60208210811415614c1c57634e487b7160e01b600052602260045260246000fd5b60006000198214156158745761587461587b565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610aaa57600080fdfe416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564a2646970667358221220be6063d4def3f6afa4ec4126f89f0d5407fdddcbcdfb58c103734b71be68cc4564736f6c6343000802003343434275726e526f757465723a2061646472657373206973207a65726f000000",
  "deployedBytecode": "0x6080604052600436106101a05760003560e01c80638d3d78cd116100ec578063c780c03f1161008a578063ea73263711610064578063ea732637146104a4578063f0f44260146104b7578063f2fde38b146104d7578063f47e2240146104f7576101a7565b8063c780c03f14610451578063c805f68b14610464578063cdbe374114610484576101a7565b8063b14d3532116100c6578063b14d3532146103e5578063b59589d114610405578063b74d0d3514610425578063bed6a6021461043b576101a7565b80638d3d78cd1461037a5780638da5cb5b1461039a578063930a60e8146103b8576101a7565b80635c4f5f3e1161015957806373532b2a1161013357806373532b2a146102fa5780637ed557481461031a5780637f0f18171461033a5780637ffe9a921461035a576101a7565b80635c4f5f3e146102a557806361d027b3146102c5578063715018a6146102e5576101a7565b80631812adb6146101ac5780631876dec4146101d55780631e2361681461020d578063419cba7f1461024d57806343149dba146102635780634782bc3614610283576101a7565b366101a757005b600080fd5b3480156101b857600080fd5b506101c260075481565b6040519081526020015b60405180910390f35b3480156101e157600080fd5b506003546101f5906001600160a01b031681565b6040516001600160a01b0390911681526020016101cc565b34801561021957600080fd5b5061023d610228366004614eca565b600c6020526000908152604090205460ff1681565b60405190151581526020016101cc565b34801561025957600080fd5b506101c260085481565b34801561026f57600080fd5b506101c261027e3660046151de565b61052b565b34801561028f57600080fd5b506102a361029e366004614eca565b610a77565b005b3480156102b157600080fd5b506102a36102c0366004614eca565b610aad565b3480156102d157600080fd5b506005546101f5906001600160a01b031681565b3480156102f157600080fd5b506102a3610ae0565b34801561030657600080fd5b5061023d61031536600461501f565b610b0c565b34801561032657600080fd5b506102a3610335366004614eca565b61126f565b34801561034657600080fd5b506102a3610355366004614e47565b6112a2565b34801561036657600080fd5b5061023d610375366004614e7f565b6112d5565b34801561038657600080fd5b506004546101f5906001600160a01b031681565b3480156103a657600080fd5b506000546001600160a01b03166101f5565b3480156103c457600080fd5b506101c26103d3366004614e47565b600b6020526000908152604090205481565b3480156103f157600080fd5b506102a3610400366004614e47565b61132d565b34801561041157600080fd5b506002546101f5906001600160a01b031681565b34801561043157600080fd5b506101c260095481565b34801561044757600080fd5b506101c260065481565b61023d61045f366004615084565b611360565b34801561047057600080fd5b506102a361047f366004614e47565b6118c5565b34801561049057600080fd5b506102a361049f366004614eca565b6118f8565b61023d6104b2366004614efa565b61192b565b3480156104c357600080fd5b506102a36104d2366004614e47565b611bd2565b3480156104e357600080fd5b506102a36104f2366004614e47565b611c05565b34801561050357600080fd5b50610517610512366004614e7f565b611c9d565b6040516101cc989796959493929190615619565b6000600260015414156105595760405162461bcd60e51b8152600401610550906155e2565b60405180910390fd5b600260015585806105ac5760405162461bcd60e51b815260206004820152601b60248201527f43434275726e526f757465723a2076616c7565206973207a65726f00000000006044820152606401610550565b6105b68686611d9a565b60035460405163aff2faa360e01b81526001600160a01b039091169063aff2faa3906105e890879087906004016153be565b60206040518083038186803b15801561060057600080fd5b505afa158015610614573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106389190614eaa565b6106545760405162461bcd60e51b8152600401610550906154cb565b60035460405163626885b560e11b81526000916001600160a01b03169063c4d10b6a9061068790889088906004016153be565b60206040518083038186803b15801561069f57600080fd5b505afa1580156106b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d79190614e63565b6004549091506001600160a01b03166323b872dd336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152306024820152604481018b9052606401602060405180830381600087803b15801561073a57600080fd5b505af115801561074e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107729190614eaa565b50600061077f8983611e37565b6004805460035460405163095ea7b360e01b81526001600160a01b039182169381019390935260248301849052929350919091169063095ea7b390604401602060405180830381600087803b1580156107d757600080fd5b505af11580156107eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061080f9190614eaa565b506003546040516338463cff60e01b81526001600160a01b03909116906338463cff90610844908990899086906004016153d2565b602060405180830381600087803b15801561085e57600080fd5b505af1158015610872573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108969190614ee2565b935061092b89858a8a600260009054906101000a90046001600160a01b03166001600160a01b0316632f796d906040518163ffffffff1660e01b815260040160206040518083038186803b1580156108ed57600080fd5b505afa158015610901573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109259190614ee2565b87611ff3565b6001600160a01b0382166000908152600a602052604090208054610951906001906157c1565b8154811061096f57634e487b7160e01b600052603260045260246000fd5b906000526020600020906007020160040154826001600160a01b03166109923390565b6001600160a01b03167fe33c3da07e34f08c660e672e065c0fa53300573c646a21eadd6eef116a70e51e8b8b8e8a8d8d600a60008d6001600160a01b03166001600160a01b031681526020019081526020016000206001600a60008f6001600160a01b03166001600160a01b0316815260200190815260200160002080549050610a1c91906157c1565b81548110610a3a57634e487b7160e01b600052603260045260246000fd5b906000526020600020906007020160060154604051610a5f9796959493929190615409565b60405180910390a45050600180555095945050505050565b6000546001600160a01b03163314610aa15760405162461bcd60e51b8152600401610550906155ad565b610aaa816121bb565b50565b6000546001600160a01b03163314610ad75760405162461bcd60e51b8152600401610550906155ad565b610aaa81612274565b6000546001600160a01b03163314610b0a5760405162461bcd60e51b8152600401610550906155ad565b565b600060026001541415610b315760405162461bcd60e51b8152600401610550906155e2565b600260015560035460405163aff2faa360e01b81526001600160a01b039091169063aff2faa390610b6890879087906004016153be565b60206040518083038186803b158015610b8057600080fd5b505afa158015610b94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb89190614eaa565b610bd45760405162461bcd60e51b8152600401610550906154cb565b60035460405163626885b560e11b81526000916001600160a01b03169063c4d10b6a90610c0790889088906004016153be565b60206040518083038186803b158015610c1f57600080fd5b505afa158015610c33573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c579190614e63565b90506000600260009054906101000a90046001600160a01b03166001600160a01b0316632f796d906040518163ffffffff1660e01b815260040160206040518083038186803b158015610ca957600080fd5b505afa158015610cbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce19190614ee2565b905060005b845181101561125f576001600160a01b0383166000908152600a602052604090208551869083908110610d2957634e487b7160e01b600052603260045260246000fd5b602002602001015181548110610d4f57634e487b7160e01b600052603260045260246000fd5b600091825260209091206005600790920201015460ff1615610dc65760405162461bcd60e51b815260206004820152602a60248201527f43434275726e526f757465723a207265717565737420686173206265656e2070604482015269616964206265666f726560b01b6064820152608401610550565b6001600160a01b0383166000908152600a602052604090208551839190879084908110610e0357634e487b7160e01b600052603260045260246000fd5b602002602001015181548110610e2957634e487b7160e01b600052603260045260246000fd5b90600052602060002090600702016004015410610e585760405162461bcd60e51b81526004016105509061551b565b6001600160a01b0383166000908152600a60205260409020855160019190879084908110610e9657634e487b7160e01b600052603260045260246000fd5b602002602001015181548110610ebc57634e487b7160e01b600052603260045260246000fd5b60009182526020808320600792909202909101600501805460ff1916931515939093179092556003546008546001600160a01b038781168452600a909452604090922088519390911692631697565b928792612710928b9088908110610f3257634e487b7160e01b600052603260045260246000fd5b602002602001015181548110610f5857634e487b7160e01b600052603260045260246000fd5b906000526020600020906007020160000154610f749190615779565b610f7e9190615759565b336001600160a01b0388166000908152600a602052604090208a518b9088908110610fb957634e487b7160e01b600052603260045260246000fd5b602002602001015181548110610fdf57634e487b7160e01b600052603260045260246000fd5b906000526020600020906007020160000154600a60008a6001600160a01b03166001600160a01b031681526020019081526020016000208b888151811061103657634e487b7160e01b600052603260045260246000fd5b60200260200101518154811061105c57634e487b7160e01b600052603260045260246000fd5b600091825260209091206007909102016002015460405160e087901b6001600160e01b03191681526001600160a01b03958616600482015260248101949094529184166044840152606483015291909116608482015260a401602060405180830381600087803b1580156110cf57600080fd5b505af11580156110e3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111079190614eaa565b506001600160a01b0383166000818152600a60205260409020865187908490811061114257634e487b7160e01b600052603260045260246000fd5b60200260200101518154811061116857634e487b7160e01b600052603260045260246000fd5b906000526020600020906007020160020160009054906101000a90046001600160a01b03166001600160a01b03167f58c23b4ae0617be275628875bcfd65759a441263099a256eeb27899fb5dd846d8989600a6000896001600160a01b03166001600160a01b031681526020019081526020016000208a87815181106111fe57634e487b7160e01b600052603260045260246000fd5b60200260200101518154811061122457634e487b7160e01b600052603260045260246000fd5b906000526020600020906007020160060154604051611245939291906153d2565b60405180910390a38061125781615860565b915050610ce6565b5050600180805595945050505050565b6000546001600160a01b031633146112995760405162461bcd60e51b8152600401610550906155ad565b610aaa81612397565b6000546001600160a01b031633146112cc5760405162461bcd60e51b8152600401610550906155ad565b610aaa8161243d565b6001600160a01b0382166000908152600a6020526040812080548390811061130d57634e487b7160e01b600052603260045260246000fd5b600091825260209091206005600790920201015460ff1690505b92915050565b6000546001600160a01b031633146113575760405162461bcd60e51b8152600401610550906155ad565b610aaa816124ce565b6000600260015414156113855760405162461bcd60e51b8152600401610550906155e2565b60026001819055895114801561139c575083516002145b80156113a9575081516003145b6113f55760405162461bcd60e51b815260206004820152601a60248201527f43434275726e526f757465723a2077726f6e6720696e707574730000000000006044820152606401610550565b60035460405163aff2faa360e01b81526001600160a01b039091169063aff2faa390611425908d906004016153f6565b60206040518083038186803b15801561143d57600080fd5b505afa158015611451573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114759190614eaa565b6114915760405162461bcd60e51b8152600401610550906154cb565b60006114ef8a6000815181106114b757634e487b7160e01b600052603260045260246000fd5b60200260200101518a8a886000815181106114e257634e487b7160e01b600052603260045260246000fd5b602002602001015161255f565b905061154d818460028151811061151657634e487b7160e01b600052603260045260246000fd5b6020026020010151868660018151811061154057634e487b7160e01b600052603260045260246000fd5b6020026020010151612655565b6115b25760405162461bcd60e51b815260206004820152603060248201527f43434275726e526f757465723a20696e707574207472616e73616374696f6e2060448201526f1a5cc81b9bdd08199a5b985b1a5e995960821b6064820152608401610550565b6000818152600c602052604090205460ff161561162f5760405162461bcd60e51b815260206004820152603560248201527f43434275726e526f757465723a207472616e73616374696f6e2068617320626560448201527432b7103ab9b2b21030b990313ab93710383937b7b360591b6064820152608401610550565b6000806116648b8660008151811061165757634e487b7160e01b600052603260045260246000fd5b60200260200101516127c7565b915091506116b78c60018151811061168c57634e487b7160e01b600052603260045260246000fd5b60200260200101518a8a8a6001815181106114e257634e487b7160e01b600052603260045260246000fd5b82146117245760405162461bcd60e51b815260206004820152603660248201527f43434275726e526f757465723a206f7574706f696e7420747820646f65736e276044820152750e840dac2e8c6d040eed2e8d040deeae8e0eae840e8f60531b6064820152608401610550565b8c5160208e0120611735898361287c565b80519060200120146117a25760405162461bcd60e51b815260206004820152603060248201527f43434275726e526f757465723a206f757470757420747820646f65736e27742060448201526f3132b637b733903a37903637b1b5b2b960811b6064820152608401610550565b846002815181106117c357634e487b7160e01b600052603260045260246000fd5b60200260200101516006546117d891906156cf565b600260009054906101000a90046001600160a01b03166001600160a01b0316632f796d906040518163ffffffff1660e01b815260040160206040518083038186803b15801561182657600080fd5b505afa15801561183a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061185e9190614ee2565b1161187b5760405162461bcd60e51b81526004016105509061551b565b6118af8a8e85886002815181106118a257634e487b7160e01b600052603260045260246000fd5b60200260200101516128f6565b505060018080559b9a5050505050505050505050565b6000546001600160a01b031633146118ef5760405162461bcd60e51b8152600401610550906155ad565b610aaa81612ac2565b6000546001600160a01b031633146119225760405162461bcd60e51b8152600401610550906155ad565b610aaa81612b53565b6000600260015414156119505760405162461bcd60e51b8152600401610550906155e2565b60026001556001600160e01b03198816156119ad5760405162461bcd60e51b815260206004820181905260248201527f43434275726e526f757465723a206e6f6e2d7a65726f206c6f636b2074696d656044820152606401610550565b60035460405163aff2faa360e01b81526001600160a01b039091169063aff2faa3906119dd9087906004016153f6565b60206040518083038186803b1580156119f557600080fd5b505afa158015611a09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a2d9190614eaa565b611a495760405162461bcd60e51b8152600401610550906154cb565b60035460405163626885b560e11b81526000916001600160a01b03169063c4d10b6a90611a7a9088906004016153f6565b60206040518083038186803b158015611a9257600080fd5b505afa158015611aa6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aca9190614e63565b90508251845114611b1d5760405162461bcd60e51b815260206004820152601b60248201527f43434275726e526f757465723a2077726f6e6720696e646578657300000000006044820152606401610550565b6000611b2b8d8d8d8d61255f565b9050611b39818a8a8a612655565b611b9d5760405162461bcd60e51b815260206004820152602f60248201527f43434275726e526f757465723a207472616e73616374696f6e20686173206e6f60448201526e1d08199a5b985b1a5e9959081e595d608a1b6064820152608401610550565b6000611bad828b858f8a8a612bf4565b9050611bbb818d8985613040565b505060018080559c9b505050505050505050505050565b6000546001600160a01b03163314611bfc5760405162461bcd60e51b8152600401610550906155ad565b610aaa816130c9565b6000546001600160a01b03163314611c2f5760405162461bcd60e51b8152600401610550906155ad565b6001600160a01b038116611c945760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610550565b610aaa8161315a565b600a6020528160005260406000208181548110611cb957600080fd5b600091825260209091206007909102018054600182015460028301546003840180549396509194506001600160a01b03169291611cf59061582b565b80601f0160208091040260200160405190810160405280929190818152602001828054611d219061582b565b8015611d6e5780601f10611d4357610100808354040283529160200191611d6e565b820191906000526020600020905b815481529060010190602001808311611d5157829003601f168201915b505050600484015460058501546006909501549394909360ff8083169450610100909204909116915088565b6000816004811115611dbc57634e487b7160e01b600052602160045260246000fd5b1480611de757506004816004811115611de557634e487b7160e01b600052602160045260246000fd5b145b15611e12578151602014611e0d5760405162461bcd60e51b81526004016105509061556c565b611e33565b8151601414611e335760405162461bcd60e51b81526004016105509061556c565b5050565b60008061271060075485611e4b9190615779565b611e559190615759565b905060095481611e6591906156cf565b8411611eb35760405162461bcd60e51b815260206004820152601f60248201527f43434275726e526f757465723a20616d6f756e7420697320746f6f206c6f77006044820152606401610550565b600954600090611ec383876157c1565b611ecd91906157c1565b6004805460055460405163a9059cbb60e01b81526001600160a01b039182169381019390935260248301869052929350919091169063a9059cbb90604401602060405180830381600087803b158015611f2557600080fd5b505af1158015611f39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f5d9190614eaa565b506004805460095460405163a9059cbb60e01b81526001600160a01b0388811694820194909452602481019190915291169063a9059cbb90604401602060405180830381600087803b158015611fb257600080fd5b505af1158015611fc6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fea9190614eaa565b50949350505050565b604080516101008101825260006080820181905260a0820181905260c0820181815260e0830191909152888252602082018890523392820192909252606081018690529084600481111561205757634e487b7160e01b600052602160045260246000fd5b9081600481111561207857634e487b7160e01b600052602160045260246000fd5b90525060065461208890846156cf565b6080820152600060a082018190526001600160a01b038316808252600b6020818152604084205460e08601819052929093529091526120c89060016156cf565b6001600160a01b038381166000908152600b6020908152604080832094909455600a81528382208054600180820183559184529282902086516007909402019283558582015190830155928401516002820180546001600160a01b0319169190931617909155606083015180518493612148926003850192910190614c22565b50608082015160048281019190915560a083015160058301805460ff19169115159190911780825560c08501519261ff0019909116906101009084908111156121a157634e487b7160e01b600052602160045260246000fd5b021790555060e08201518160060155505050505050505050565b8061271010156122335760405162461bcd60e51b815260206004820152603760248201527f43434275726e526f757465723a20736c61736865722070657263656e7461676560448201527f20726577617264206973206f7574206f662072616e67650000000000000000006064820152608401610550565b60085460408051918252602082018390527faa50b3683e42a13535a5b9c2c32780cccf956fb546b523a3542ac4ad8b544f67910160405180910390a1600855565b60025460408051630a072bc560e41b815290516000926001600160a01b03169163a072bc50916004808301926020929190829003018186803b1580156122b957600080fd5b505afa1580156122cd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122f19190614ee2565b90508082116123555760405162461bcd60e51b815260206004820152602a60248201527f43434275726e526f757465723a207472616e7366657220646561646c696e6520604482015269697320746f6f206c6f7760b01b6064820152608401610550565b60065460408051918252602082018490527f92c10a242ca42973030420e2ee32b3ba7818cc643f896958f620c606cf300416910160405180910390a150600655565b8061271010156123fc5760405162461bcd60e51b815260206004820152602a60248201527f43434275726e526f757465723a2070726f746f636f6c20666565206973206f7560448201526974206f662072616e676560b01b6064820152608401610550565b60075460408051918252602082018390527f7d205f60891f60851c61cd244ba387d72b6589e7c0ac41b9d909ab0ce2c2a53b910160405180910390a1600755565b806001600160a01b0381166124645760405162461bcd60e51b815260040161055090615494565b600454604080516001600160a01b03928316815291841660208301527f36a4c08a38b736dcecb6c328dba61238529620e83ccb23db2cc43cd34ec26096910160405180910390a150600480546001600160a01b0319166001600160a01b0392909216919091179055565b806001600160a01b0381166124f55760405162461bcd60e51b815260040161055090615494565b600354604080516001600160a01b03928316815291841660208301527ffa021c2ec0f46429a53e7f88b88065e40001f50c9d38b2e8b713beaf9828d4c3910160405180910390a150600380546001600160a01b0319166001600160a01b0392909216919091179055565b60008060028686868660405160200161257b94939291906152de565b60408051601f198184030181529082905261259591615331565b602060405180830381855afa1580156125b2573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906125d59190614ee2565b905060006002826040516020016125ee91815260200190565b60408051601f198184030181529082905261260891615331565b602060405180830381855afa158015612625573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906126489190614ee2565b925050505b949350505050565b60025460405163d0a8973960e01b8152600481018590526000602482018190529182916001600160a01b039091169063d0a897399060440160206040518083038186803b1580156126a557600080fd5b505afa1580156126b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126dd9190614ee2565b9050803410156127415760405162461bcd60e51b815260206004820152602960248201527f43434275726e526f757465723a2072656c617920666565206973206e6f7420736044820152681d59999a58da595b9d60ba1b6064820152608401610550565b60025460405160009161279e916001600160a01b039091169061276e908a908a908a908a9060240161538e565b60408051601f198184030181529190526020810180516001600160e01b0316634354da2560e01b179052846131aa565b90506127b3336127ae84346157c1565b6131da565b808060200190518101906126489190614eaa565b600080806127dd6127d886836132f8565b61331c565b90506127ee62ffffff198216613452565b1561283b5760405162461bcd60e51b815260206004820152601a60248201527f426974636f696e48656c7065723a2076696e206973206e756c6c0000000000006044820152606401610550565b60006128478286613461565b905060006128548261357f565b905061285f816135a3565b945061286a816135c5565b63ffffffff1693505050509250929050565b6060600061289461288f825b86906132f8565b6135ef565b90506128a562ffffff198216613452565b156128c25760405162461bcd60e51b81526004016105509061545d565b60006128ce82856136e0565b905060006128db826137da565b90506128ec62ffffff19821661382b565b9695505050505050565b60006129018561387b565b60035460405163626885b560e11b81526001600160401b039290921692506000916001600160a01b039091169063c4d10b6a906129429088906004016153f6565b60206040518083038186803b15801561295a57600080fd5b505afa15801561296e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129929190614e63565b6003546008549192506001600160a01b03169063b734de26908390612710906129bb9087615779565b6129c59190615759565b3360405160e085901b6001600160e01b03191681526001600160a01b0393841660048201526024810192909252909116604482015260648101859052608401602060405180830381600087803b158015612a1e57600080fd5b505af1158015612a32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a569190614eaa565b507f7ff138134e34ccab071315c38e38eec079f54726b890304ab46e2c5ab6f722bb8186858761271060085488612a8d9190615779565b612a979190615759565b612aa190886156cf565b604051612ab295949392919061534d565b60405180910390a1505050505050565b806001600160a01b038116612ae95760405162461bcd60e51b815260040161055090615494565b600254604080516001600160a01b03928316815291841660208301527f4c28a3f61a715259c4dc930c23e7423b8fa52e13232c061a6e488729c66184f4910160405180910390a150600280546001600160a01b0319166001600160a01b0392909216919091179055565b60095460408051918252602082018390527f47c5f9c13c35ebb166f6a8d8c56af73f8b323ac0fee7aec4a5e0490bbf67a4fe910160405180910390a1806127101015612bef5760405162461bcd60e51b815260206004820152602560248201527f43434275726e526f757465723a2062746320666565206973206f7574206f662060448201526472616e676560d81b6064820152608401610550565b600955565b600080805b8451811015613034576000858281518110612c2457634e487b7160e01b600052603260045260246000fd5b60200260200101519050600a6000896001600160a01b03166001600160a01b031681526020019081526020016000208181548110612c7257634e487b7160e01b600052603260045260246000fd5b600091825260209091206005600790920201015460ff16158015612ce157506001600160a01b0388166000908152600a6020526040902080548a919083908110612ccc57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600702016004015410155b1561302157612e8c87868481518110612d0a57634e487b7160e01b600052603260045260246000fd5b6020026020010151600a60008c6001600160a01b03166001600160a01b031681526020019081526020016000208481548110612d5657634e487b7160e01b600052603260045260246000fd5b90600052602060002090600702016003018054612d729061582b565b80601f0160208091040260200160405190810160405280929190818152602001828054612d9e9061582b565b8015612deb5780601f10612dc057610100808354040283529160200191612deb565b820191906000526020600020905b815481529060010190602001808311612dce57829003601f168201915b5050506001600160a01b038e166000908152600a6020526040902080549092508791508110612e2a57634e487b7160e01b600052603260045260246000fd5b906000526020600020906007020160050160019054906101000a900460ff166004811115612e6857634e487b7160e01b600052602160045260246000fd5b6004811115612e8757634e487b7160e01b600052602160045260246000fd5b61391b565b6001600160401b0316925082600a60008a6001600160a01b03166001600160a01b031681526020019081526020016000208281548110612edc57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060070201600101541415613021576001600160a01b0388166000908152600a6020526040902080546001919083908110612f3057634e487b7160e01b600052603260045260246000fd5b60009182526020909120600790910201600501805460ff1916911515919091179055612f5d8460016156cf565b6001600160a01b0389166000818152600a60205260409020805492965090917f1b46655c2f394f2191cb246d5982dbe00ad671f0b590e75e97c90ee97f1f782a919084908110612fbd57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060070201600601548c888681518110612ff057634e487b7160e01b600052603260045260246000fd5b6020026020010151604051613018939291909283526020830191909152604082015260600190565b60405180910390a25b508061302c81615860565b915050612bf9565b50509695505050505050565b600061304c8484613b5c565b6001600160401b03169050600061306285613c65565b9050811580159061307c57508061307a8760016156cf565b145b1561309f576000838152600c60205260409020805460ff191660011790556130c1565b808614156130c1576000838152600c60205260409020805460ff191660011790555b505050505050565b806001600160a01b0381166130f05760405162461bcd60e51b815260040161055090615494565b600554604080516001600160a01b03928316815291841660208301527f567657fa3f286518b318f4a29870674f433f622fdfc819691acb13105b228225910160405180910390a150600580546001600160a01b0319166001600160a01b0392909216919091179055565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60606131d08484846040518060600160405280602981526020016158bd60299139613c91565b90505b9392505050565b8047101561322a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610550565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114613277576040519150601f19603f3d011682016040523d82523d6000602084013e61327c565b606091505b50509050806132f35760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610550565b505050565b81516000906020840161331364ffffffffff85168284613dae565b95945050505050565b60008181613332815b62ffffff19841690613df2565b50601884901c6001600160601b03166133525762ffffff195b925061344b565b600061335f856000613ecc565b9050601885901c6001600160601b03166001600160401b03821661338c5762ffffff195b9450505061344b565b600061339783614013565b60ff16905060005b836001600160401b0316811015613413578282106133c85762ffffff195b96505050505061344b565b60006133e86133d784866157c1565b60055b62ffffff198c16919061406c565b90506133f3816140a0565b6133fd90846156cf565b925050808061340b90615860565b91505061339f565b5081811461342b5762ffffff195b955050505061344b565b61344560065b60d81b6301000000600160d81b0389161790565b95505050505b5050919050565b62ffffff19818116145b919050565b600082600661346f81613325565b50600061347d866000613ecc565b6001600160401b03169050601886901c6001600160601b03168186106134d85760405162461bcd60e51b815260206004820152601060248201526f2b34b7103932b0b21037bb32b9393ab760811b6044820152606401610550565b60006134e383614013565b60ff1690506000805b8881101561353b5761351261350184866157c1565b60055b62ffffff198d16919061406c565b915061351d826140a0565b61352790846156cf565b92506135346001826156cf565b90506134ec565b506135496133d783856157c1565b90506000613556826140a0565b905061356f838260045b62ffffff198e169291906140f4565b975050505050505b505092915050565b600081600461358d81613325565b5061264d62ffffff1985166000602460036140f4565b60008160036135b181613325565b5061264d62ffffff19851660006020614164565b60008160036135d381613325565b5061264d6135ea62ffffff198616602060046142bd565b614407565b600081816135fc81613325565b50601884901c6001600160601b03166136195762ffffff1961334b565b6000613626856000613ecc565b9050601885901c6001600160601b03166001600160401b03821661364e5762ffffff19613383565b600061365983614013565b60ff16905060005b836001600160401b03168110156136c4578282106136835762ffffff196133bd565b600061369961369284866157c1565b600e6133da565b90506136a481614470565b6136ae90846156cf565b92505080806136bc90615860565b915050613661565b508181146136d65762ffffff19613421565b613445600f613431565b600082600f6136ee81613325565b5060006136fc866000613ecc565b6001600160401b03169050601886901c6001600160601b03168186106137585760405162461bcd60e51b81526020600482015260116024820152702b37baba103932b0b21037bb32b9393ab760791b6044820152606401610550565b600061376383614013565b60ff1690506000805b888110156137b15761378861378184866157c1565b600e613504565b915061379382614470565b61379d90846156cf565b92506137aa6001826156cf565b905061376c565b506137bf61369283856157c1565b905060006137cc82614470565b905061356f8382600d613560565b600081600d6137e881613325565b5060006137f6856008613ecc565b905061331361380482614013565b61380f906008615712565b62ffffff1987169060ff166001600160401b03841660076140f4565b60606000806138438460181c6001600160601b031690565b60405193508392506001600160601b0316905061386a846138658460206156cf565b6144b9565b508181016020016040529052919050565b60008061388d61288f825b85906132f8565b905061389e62ffffff198216613452565b156138bb5760405162461bcd60e51b81526004016105509061545d565b6000806138c9836000613ecc565b6001600160401b0316905060005b81811015613912576138e984826136e0565b92506138f483614610565b6138fe90866156e7565b94508061390a81615860565b9150506138d7565b50505050919050565b60008061392b61288f87836132f8565b905061393c62ffffff198216613452565b156139595760405162461bcd60e51b81526004016105509061545d565b600061396582876136e0565b90506000613972826137da565b9050600085600481111561399657634e487b7160e01b600052602160045260246000fd5b14156139fb576139af62ffffff19821660016020614164565b6040516020016139c191815260200190565b604051602081830303815290604052805190602001208680519060200120146139eb5760006139f4565b6139f482614610565b9350613b51565b6001856004811115613a1d57634e487b7160e01b600052602160045260246000fd5b1415613a5c57613a3462ffffff1982166003614635565b6040516020016139c1919060609190911b6bffffffffffffffffffffffff1916815260140190565b6002856004811115613a7e57634e487b7160e01b600052602160045260246000fd5b1415613a9557613a3462ffffff1982166002614635565b6003856004811115613ab757634e487b7160e01b600052602160045260246000fd5b1415613ace57613a3462ffffff1982166002614635565b6004856004811115613af057634e487b7160e01b600052602160045260246000fd5b1415613b5157613b0962ffffff19821660026020614164565b604051602001613b1b91815260200190565b60405160208183030381529060405280519060200120868051906020012014613b45576000613b4e565b613b4e82614610565b93505b505050949350505050565b600080613b6b61288f82612888565b9050613b7c62ffffff198216613452565b15613b995760405162461bcd60e51b81526004016105509061545d565b6000806000613ba9846000613ecc565b6001600160401b0316905060005b81811015613c5a57613bc985826136e0565b9350613bd4846137da565b925086604051602001613be79190615331565b60405160208183030381529060405280519060200120613c0c8462ffffff191661382b565b604051602001613c1c9190615331565b604051602081830303815290604052805190602001201415613c4857613c4184614610565b9550613c5a565b80613c5281615860565b915050613bb7565b505050505092915050565b600080613c7461288f82613886565b9050613c81816000613ecc565b6001600160401b03169392505050565b606082471015613cf25760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610550565b843b613d405760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610550565b600080866001600160a01b03168587604051613d5c9190615331565b60006040518083038185875af1925050503d8060008114613d99576040519150601f19603f3d011682016040523d82523d6000602084013e613d9e565b606091505b5091509150612648828286614643565b600080613dbb83856156cf565b9050604051811115613dcb575060005b80613ddd5762ffffff199150506131d3565b5050606092831b9190911790911b1760181b90565b6000613dfe838361467c565b613ec5576000613e1d613e118560d81c90565b64ffffffffff1661469f565b9150506000613e328464ffffffffff1661469f565b6040517f5479706520617373657274696f6e206661696c65642e20476f7420307800000060208201526001600160b01b031960b086811b8216603d8401526c05c408af0e0cac6e8cac84060f609b1b604784015283901b16605482015290925060009150605e015b60405160208183030381529060405290508060405162461bcd60e51b815260040161055091906153f6565b5090919050565b600080613ee162ffffff19851684600161474b565b905060fc8111613efc57613ef48161477b565b915050611327565b8060fd1415613f6257613f2a613f25613f168560016156cf565b62ffffff1987169060026142bd565b61477b565b9150613f3582614013565b60ff16600314613f5d57613f5b613f5662ffffff19861685600360006140f4565b6147e3565b505b61400c565b8060fe1415613fb757613f8b613f25613f7c8560016156cf565b62ffffff1987169060046142bd565b9150613f9682614013565b60ff16600514613f5d57613f5b613f5662ffffff19861685600560006140f4565b8060ff141561400c57613fe0613f25613fd18560016156cf565b62ffffff1987169060086142bd565b9150613feb82614013565b60ff1660091461400c57613577613f5662ffffff19861685600960006140f4565b5092915050565b600060fc826001600160401b03161161402e5750600161345c565b61ffff826001600160401b0316116140485750600361345c565b63ffffffff826001600160401b0316116140645750600561345c565b50600961345c565b60006131d084846140868760181c6001600160601b031690565b6001600160601b031661409991906157c1565b85856140f4565b60008160056140ae81613325565b5060006140bc856024613ecc565b9050806001600160401b03166140d182614013565b60ff166140de91906156cf565b6140e99060246156cf565b6133139060046156cf565b60008061410a8660781c6001600160601b031690565b6001600160601b0316905061411e8661486a565b8461412987846156cf565b61413391906156cf565b11156141465762ffffff1991505061264d565b61415085826156cf565b90506128ec8364ffffffffff168286613dae565b600060ff8216614176575060006131d3565b6141898460181c6001600160601b031690565b6001600160601b031661419f60ff8416856156cf565b1115614203576141ea6141bb8560781c6001600160601b031690565b6001600160601b03166141d78660181c6001600160601b031690565b6001600160601b0316858560ff166148ab565b60405162461bcd60e51b815260040161055091906153f6565b60208260ff16111561427d5760405162461bcd60e51b815260206004820152603a60248201527f54797065644d656d566965772f696e646578202d20417474656d70746564207460448201527f6f20696e646578206d6f7265207468616e2033322062797465730000000000006064820152608401610550565b6008820260006142968660781c6001600160601b031690565b6001600160601b031690506000600160ff1b60001984011d91909501511695945050505050565b60006131d06142cd858585614164565b600881811c7eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff167fff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff009290911b9190911617601081811c7dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff167fffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff00009290911b9190911617602081811c7bffffffff00000000ffffffff00000000ffffffff00000000ffffffff167fffffffff00000000ffffffff00000000ffffffff00000000ffffffff000000009290911b9190911617604081811c77ffffffffffffffff0000000000000000ffffffffffffffff1677ffffffffffffffff0000000000000000ffffffffffffffff199290911b9190911617608081811c91901b1790565b600063ffffffff82111561446c5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203360448201526532206269747360d01b6064820152608401610550565b5090565b600081600e61447e81613325565b50600061448c856008613ecc565b9050806001600160401b03166144a182614013565b60ff166144ae91906156cf565b6133139060086156cf565b60006144c4836149d5565b6145215760405162461bcd60e51b815260206004820152602860248201527f54797065644d656d566965772f636f7079546f202d204e756c6c20706f696e7460448201526732b9103232b932b360c11b6064820152608401610550565b61452a836149e7565b61458a5760405162461bcd60e51b815260206004820152602b60248201527f54797065644d656d566965772f636f7079546f202d20496e76616c696420706f60448201526a34b73a32b9103232b932b360a91b6064820152608401610550565b600061459f8460181c6001600160601b031690565b6001600160601b0316905060006145bf8560781c6001600160601b031690565b6001600160601b0316905060006040519050848111156145df5760206060fd5b8285848460045afa506128ec6145f58760d81c90565b64ffffffffff60601b606091821b168717901b841760181b90565b600081600d61461e81613325565b5061264d613f2562ffffff198616600060086142bd565b60006131d38383601461474b565b606083156146525750816131d3565b8251156146625782518084602001fd5b8160405162461bcd60e51b815260040161055091906153f6565b60008164ffffffffff166146908460d81c90565b64ffffffffff16149392505050565b600080601f5b600f8160ff1611156146fd5760006146be826008615798565b60ff1685901c90506146cf81614a25565b61ffff16841793508160ff166010146146ea57601084901b93505b506146f66001826157d8565b90506146a5565b50600f5b60ff8160ff1610156147455760ff600882021684901c61472081614a25565b61ffff16831792508160ff1660001461473b57601083901b92505b5060001901614701565b50915091565b60006147588260206157d8565b614763906008615798565b60ff16614771858585614164565b901c949350505050565b60006001600160401b0382111561446c5760405162461bcd60e51b815260206004820152602660248201527f53616665436173743a2076616c756520646f65736e27742066697420696e203660448201526534206269747360d01b6064820152608401610550565b6060600061481761481282614804601887901c6001600160601b0316614a55565b62ffffff198716919061474b565b61469f565b6040517f4e6f6e2d6d696e696d616c2076617220696e742e20476f74203078000000000060208201526dffffffffffffffffffffffffffff19607083901b16603b82015290925060009150604d01613e9a565b600061487f8260181c6001600160601b031690565b6148928360781c6001600160601b031690565b61489c9190615737565b6001600160601b031692915050565b606060006148b88661469f565b91505060006148c68661469f565b91505060006148d48661469f565b91505060006148e28661469f565b604080517f54797065644d656d566965772f696e646578202d204f76657272616e20746865602082015274040ecd2caee5c40a6d8d2c6ca40d2e640c2e84060f605b1b818301526001600160d01b031960d098891b811660558301526e040eed2e8d040d8cadccee8d04060f608b1b605b830181905297891b8116606a8301527f2e20417474656d7074656420746f20696e646578206174206f666673657420306070830152600f60fb1b609083015295881b861660918201526097810196909652951b90921660a68401525050601760f91b60ac8201528151808203608d01815260ad90910190915295945050505050565b60006149e082613452565b1592915050565b60006149f38260d81c90565b64ffffffffff1664ffffffffff1415614a0e5750600061345c565b6000614a198361486a565b60405110199392505050565b6000614a3760048360ff16901c614ab6565b60ff161760081b62ffff0016614a4c82614ab6565b60ff1617919050565b600060ff82111561446c5760405162461bcd60e51b815260206004820152602560248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2038604482015264206269747360d81b6064820152608401610550565b600060f08083179060ff82161415614ad257603091505061345c565b8060ff1660f11415614ae857603191505061345c565b8060ff1660f21415614afe57603291505061345c565b8060ff1660f31415614b1457603391505061345c565b8060ff1660f41415614b2a57603491505061345c565b8060ff1660f51415614b4057603591505061345c565b8060ff1660f61415614b5657603691505061345c565b8060ff1660f71415614b6c57603791505061345c565b8060ff1660f81415614b8257603891505061345c565b8060ff1660f91415614b9857603991505061345c565b8060ff1660fa1415614bae57606191505061345c565b8060ff1660fb1415614bc457606291505061345c565b8060ff1660fc1415614bda57606391505061345c565b8060ff1660fd1415614bf057606491505061345c565b8060ff1660fe1415614c0657606591505061345c565b8060ff1660ff1415614c1c57606691505061345c565b50919050565b828054614c2e9061582b565b90600052602060002090601f016020900481019282614c505760008555614c96565b82601f10614c6957805160ff1916838001178555614c96565b82800160010185558215614c96579182015b82811115614c96578251825591602001919060010190614c7b565b5061446c9291505b8082111561446c5760008155600101614c9e565b600082601f830112614cc2578081fd5b81356020614cd7614cd2836156ac565b61567c565b8281528181019085830183850287018401881015614cf3578586fd5b855b85811015614d1857614d0682614d7f565b84529284019290840190600101614cf5565b5090979650505050505050565b600082601f830112614d35578081fd5b81356020614d45614cd2836156ac565b8281528181019085830183850287018401881015614d61578586fd5b855b85811015614d1857813584529284019290840190600101614d63565b80356001600160e01b03198116811461345c57600080fd5b60008083601f840112614da8578182fd5b5081356001600160401b03811115614dbe578182fd5b602083019150836020828501011115614dd657600080fd5b9250929050565b600082601f830112614ded578081fd5b81356001600160401b03811115614e0657614e06615891565b614e19601f8201601f191660200161567c565b818152846020838601011115614e2d578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215614e58578081fd5b81356131d3816158a7565b600060208284031215614e74578081fd5b81516131d3816158a7565b60008060408385031215614e91578081fd5b8235614e9c816158a7565b946020939093013593505050565b600060208284031215614ebb578081fd5b815180151581146131d3578182fd5b600060208284031215614edb578081fd5b5035919050565b600060208284031215614ef3578081fd5b5051919050565b6000806000806000806000806000806101408b8d031215614f19578586fd5b614f228b614d7f565b995060208b01356001600160401b0380821115614f3d578788fd5b614f498e838f01614ddd565b9a5060408d0135915080821115614f5e578788fd5b614f6a8e838f01614ddd565b9950614f7860608e01614d7f565b985060808d0135975060a08d0135915080821115614f94578687fd5b614fa08e838f01614ddd565b965060c08d0135955060e08d0135915080821115614fbc578485fd5b614fc88e838f01614ddd565b94506101008d0135915080821115614fde578384fd5b614fea8e838f01614d25565b93506101208d0135915080821115615000578283fd5b5061500d8d828e01614d25565b9150509295989b9194979a5092959850565b600080600060408486031215615033578283fd5b83356001600160401b0380821115615049578485fd5b61505587838801614d97565b9095509350602086013591508082111561506d578283fd5b5061507a86828701614d25565b9150509250925092565b60008060008060008060008060006101208a8c0312156150a2578283fd5b89356001600160401b03808211156150b8578485fd5b6150c48d838e01614ddd565b9a5060208c01359150808211156150d9578485fd5b6150e58d838e01614cb2565b995060408c01359150808211156150fa578485fd5b6151068d838e01614ddd565b985060608c013591508082111561511b578485fd5b6151278d838e01614ddd565b975060808c013591508082111561513c578485fd5b6151488d838e01614ddd565b965060a08c013591508082111561515d578485fd5b6151698d838e01614ddd565b955060c08c013591508082111561517e578485fd5b61518a8d838e01614cb2565b945060e08c013591508082111561519f578384fd5b6151ab8d838e01614ddd565b93506101008c01359150808211156151c1578283fd5b506151ce8c828d01614d25565b9150509295985092959850929598565b6000806000806000608086880312156151f5578283fd5b8535945060208601356001600160401b0380821115615212578485fd5b61521e89838a01614ddd565b95506040880135915060058210615233578485fd5b90935060608701359080821115615248578283fd5b5061525588828901614d97565b969995985093965092949392505050565b60008284528282602086013780602084860101526020601f19601f85011685010190509392505050565b600081518084526152a88160208601602086016157fb565b601f01601f19169290920160200192915050565b600581106152da57634e487b7160e01b600052602160045260246000fd5b9052565b600063ffffffff60e01b80871683528551615300816004860160208a016157fb565b855190840190615317816004840160208a016157fb565b919094169301600481019390935250506008019392505050565b600082516153438184602087016157fb565b9190910192915050565b6001600160a01b038616815260a06020820181905260009061537190830187615290565b604083019590955250606081019290925260809091015292915050565b6000858252846020830152608060408301526153ad6080830185615290565b905082606083015295945050505050565b6000602082526131d0602083018486615266565b6000604082526153e6604083018587615266565b9050826020830152949350505050565b6000602082526131d36020830184615290565b600060c0825261541c60c083018a615290565b615429602084018a6152bc565b8760408401528660608401528281036080840152615448818688615266565b9150508260a083015298975050505050505050565b6020808252601b908201527f426974636f696e48656c7065723a20766f7574206973206e756c6c0000000000604082015260600190565b6020808252601d908201527f43434275726e526f757465723a2061646472657373206973207a65726f000000604082015260600190565b60208082526030908201527f43434275726e526f757465723a20676976656e206c6f636b696e67207363726960408201526f383a1034b9903737ba103637b1b5b2b960811b606082015260800190565b60208082526031908201527f43434275726e526f757465723a207061796261636b20646561646c696e652068604082015270185cc81b9bdd081c185cdcd959081e595d607a1b606082015260800190565b60208082526021908201527f43434275726e526f757465723a20696e76616c696420757365722073637269706040820152601d60fa1b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b888152602081018890526001600160a01b03871660408201526101006060820181905260009061564b83820189615290565b91505085608083015284151560a083015261566960c08301856152bc565b8260e08301529998505050505050505050565b604051601f8201601f191681016001600160401b03811182821017156156a4576156a4615891565b604052919050565b60006001600160401b038211156156c5576156c5615891565b5060209081020190565b600082198211156156e2576156e261587b565b500190565b60006001600160401b038083168185168083038211156157095761570961587b565b01949350505050565b600060ff821660ff84168060ff0382111561572f5761572f61587b565b019392505050565b60006001600160601b038083168185168083038211156157095761570961587b565b60008261577457634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156157935761579361587b565b500290565b600060ff821660ff84168160ff04811182151516156157b9576157b961587b565b029392505050565b6000828210156157d3576157d361587b565b500390565b600060ff821660ff8416808210156157f2576157f261587b565b90039392505050565b60005b838110156158165781810151838201526020016157fe565b83811115615825576000848401525b50505050565b60028104600182168061583f57607f821691505b60208210811415614c1c57634e487b7160e01b600052602260045260246000fd5b60006000198214156158745761587461587b565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610aaa57600080fdfe416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564a2646970667358221220be6063d4def3f6afa4ec4126f89f0d5407fdddcbcdfb58c103734b71be68cc4564736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "burnProof(bytes4,bytes,bytes,bytes4,uint256,bytes,uint256,bytes,uint256[],uint256[])": {
        "details": "Makes isTransferred flag true for the paid requests",
        "params": {
          "_blockNumber": "Height of the block containing the burn transaction",
          "_burnReqIndexes": "Indexes of requests that locker wants to provide proof for them",
          "_index": "Index of transaction containing the burn transaction in the block",
          "_intermediateNodes": "Merkle inclusion proof for transaction containing the burn transaction",
          "_lockerLockingScript": "Locker's locking script (on Bitcoin) that this burn request belongs to",
          "_locktime": "Lock time of the transaction containing the burn transaction",
          "_version": "Version of the transaction containing the burn transaction",
          "_vin": "Inputs of the transaction containing the burn transaction",
          "_vout": "Outputs of the transaction containing the burn transaction",
          "_voutIndexes": "Indexes of outputs that were used to pay burn requests (_voutIndexes[i] belongs to _burnReqIndexes[i])"
        },
        "returns": {
          "_0": ""
        }
      },
      "ccBurn(uint256,bytes,uint8,bytes)": {
        "details": "After submitting the burn request, lockers have a limited time                                     to send BTC and provide burn proof",
        "params": {
          "_amount": "Amount of teleBTC that user wants to burn",
          "_lockerLockingScript": "Locking script of locker that should execute the burn request",
          "_userScript": "User's bitcoin script type"
        },
        "returns": {
          "_burntAmount": "               Amount of teleBTC that user will receive (after reducing fees)"
        }
      },
      "constructor": {
        "params": {
          "_bitcoinFee": "Fee of submitting a transaction on Bitcoin",
          "_lockers": "Address of lockers contract",
          "_protocolPercentageFee": "Percentage of tokens that user pays to protocol for burning",
          "_relay": "Address of relay contract",
          "_slasherPercentageReward": "Percentage of tokens that slasher receives after slashing a locker",
          "_teleBTC": "Address of teleBTC contract",
          "_transferDeadline": "Dealine of sending BTC to user (aster submitting a burn request)",
          "_treasury": "Address of the treasury of the protocol"
        }
      },
      "disputeBurn(bytes,uint256[])": {
        "params": {
          "_indices": "Array of indices of the requests whose deadline has passed",
          "_lockerLockingScript": "locker's locking script that the unpaid request belongs to"
        },
        "returns": {
          "_0": "True if dispute is successful"
        }
      },
      "disputeLocker(bytes,bytes4[],bytes,bytes,bytes,bytes,bytes4[],bytes,uint256[])": {
        "details": "Input tx is a malicious tx which shows that locker spent BTC                                         Output tx is the tx that was spent by locker in input tx                                         Output tx --> money goes to locker --> Input tx --> locker steals the funds",
        "params": {
          "_indexesAndBlockNumbers": "Indices of malicious input in input tx, input tx in block and block number of input tx",
          "_inputIntermediateNodes": "Merkle inclusion proof for the malicious transaction",
          "_inputVin": "Inputs of the malicious transaction",
          "_inputVout": "Outputs of the malicious transaction",
          "_lockerLockingScript": "Suspicious locker's locking script",
          "_locktimes": "Locktimes of input and output tx",
          "_outputVin": "Inputs of the spent transaction",
          "_outputVout": "Outputs of the spent transaction",
          "_versions": "Versions of input and output tx"
        },
        "returns": {
          "_0": "True if dispute is successful"
        }
      },
      "isTransferred(address,uint256)": {
        "params": {
          "_index": "The index of the request for the locker",
          "_lockerTargetAddress": "Locker's address on the target chain"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setBitcoinFee(uint256)": {
        "details": "Only owner can call this",
        "params": {
          "_bitcoinFee": "The new Bitcoin transaction fee"
        }
      },
      "setLockers(address)": {
        "details": "Only owner can call this",
        "params": {
          "_lockers": "The new lockers contract address"
        }
      },
      "setProtocolPercentageFee(uint256)": {
        "details": "Only owner can call this",
        "params": {
          "_protocolPercentageFee": "The new protocol percentage fee"
        }
      },
      "setRelay(address)": {
        "details": "Only owner can call this",
        "params": {
          "_relay": "The new relay contract address"
        }
      },
      "setSlasherPercentageReward(uint256)": {
        "details": "Only owner can call this",
        "params": {
          "_slasherPercentageReward": "The new slasher percentage reward"
        }
      },
      "setTeleBTC(address)": {
        "details": "Only owner can call this",
        "params": {
          "_teleBTC": "The new teleBTC contract address"
        }
      },
      "setTransferDeadline(uint256)": {
        "details": "Only owner can call this                                     Deadline should be greater than relay finalization parameter",
        "params": {
          "_transferDeadline": "The new transfer deadline"
        }
      },
      "setTreasury(address)": {
        "details": "Only owner can call this",
        "params": {
          "_treasury": "The new treasury address"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "CCBurn(address,bytes,uint8,uint256,uint256,address,bytes,uint256,uint256)": {
        "notice": "Emits when a burn request gets submitted"
      },
      "LockerDispute(address,bytes,uint256,bytes32,uint256)": {
        "notice": "Emits when a locker gets slashed for withdrawing BTC without proper reason"
      },
      "NewBitcoinFee(uint256,uint256)": {
        "notice": "Emits when changes made to bitcoin fee"
      },
      "NewLockers(address,address)": {
        "notice": "Emits when changes made to lockers address"
      },
      "NewProtocolPercentageFee(uint256,uint256)": {
        "notice": "Emits when changes made to percentage fee"
      },
      "NewRelay(address,address)": {
        "notice": "Emits when changes made to relay address"
      },
      "NewSlasherPercentageFee(uint256,uint256)": {
        "notice": "Emits when changes made to slasher percentage fee"
      },
      "NewTeleBTC(address,address)": {
        "notice": "Emits when changes made to TeleBTC address"
      },
      "NewTransferDeadline(uint256,uint256)": {
        "notice": "Emits when changes made to transfer deadline"
      },
      "NewTreasury(address,address)": {
        "notice": "Emits when changes made to treasury address"
      },
      "PaidCCBurn(address,uint256,bytes32,uint256)": {
        "notice": "Emits when a burn proof is provided"
      }
    },
    "kind": "user",
    "methods": {
      "burnProof(bytes4,bytes,bytes,bytes4,uint256,bytes,uint256,bytes,uint256[],uint256[])": {
        "notice": "Checks the correctness of burn proof"
      },
      "ccBurn(uint256,bytes,uint8,bytes)": {
        "notice": "Burns teleBTC and records the burn request"
      },
      "constructor": {
        "notice": "Handles cross-chain burn requests"
      },
      "disputeBurn(bytes,uint256[])": {
        "notice": "Slashes a locker if she did not pay a cc burn request before its deadline"
      },
      "disputeLocker(bytes,bytes4[],bytes,bytes,bytes,bytes,bytes4[],bytes,uint256[])": {
        "notice": "Slashes a locker if they issue a tx that doesn't match any burn request"
      },
      "isTransferred(address,uint256)": {
        "notice": "Shows if a burn request has been done or not"
      },
      "setBitcoinFee(uint256)": {
        "notice": "Changes Bitcoin transaction fee"
      },
      "setLockers(address)": {
        "notice": "Changes lockers contract address"
      },
      "setProtocolPercentageFee(uint256)": {
        "notice": "Changes protocol percentage fee for burning tokens"
      },
      "setRelay(address)": {
        "notice": "Changes relay contract address"
      },
      "setSlasherPercentageReward(uint256)": {
        "notice": "Changes slasher percentage reward for disputing lockers"
      },
      "setTeleBTC(address)": {
        "notice": "Changes teleBTC contract address"
      },
      "setTransferDeadline(uint256)": {
        "notice": "Changes deadline of executing burn requests"
      },
      "setTreasury(address)": {
        "notice": "Changes protocol treasury address"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 807,
        "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1634,
        "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 17679,
        "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
        "label": "relay",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 17682,
        "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
        "label": "lockers",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 17685,
        "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
        "label": "teleBTC",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 17688,
        "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
        "label": "treasury",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 17691,
        "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
        "label": "transferDeadline",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 17694,
        "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
        "label": "protocolPercentageFee",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 17697,
        "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
        "label": "slasherPercentageReward",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 17700,
        "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
        "label": "bitcoinFee",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 17706,
        "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
        "label": "burnRequests",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_array(t_struct(burnRequest)22691_storage)dyn_storage)"
      },
      {
        "astId": 17710,
        "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
        "label": "burnRequestCounter",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 17715,
        "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
        "label": "isUsedAsBurnProof",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_bytes32,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(burnRequest)22691_storage)dyn_storage": {
        "base": "t_struct(burnRequest)22691_storage",
        "encoding": "dynamic_array",
        "label": "struct ICCBurnRouter.burnRequest[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_enum(ScriptTypes)23797": {
        "encoding": "inplace",
        "label": "enum ScriptTypes",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_struct(burnRequest)22691_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct ICCBurnRouter.burnRequest[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(burnRequest)22691_storage)dyn_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(burnRequest)22691_storage": {
        "encoding": "inplace",
        "label": "struct ICCBurnRouter.burnRequest",
        "members": [
          {
            "astId": 22675,
            "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 22677,
            "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
            "label": "burntAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 22679,
            "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
            "label": "sender",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 22681,
            "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
            "label": "userScript",
            "offset": 0,
            "slot": "3",
            "type": "t_bytes_storage"
          },
          {
            "astId": 22683,
            "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
            "label": "deadline",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 22685,
            "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
            "label": "isTransferred",
            "offset": 0,
            "slot": "5",
            "type": "t_bool"
          },
          {
            "astId": 22688,
            "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
            "label": "scriptType",
            "offset": 1,
            "slot": "5",
            "type": "t_enum(ScriptTypes)23797"
          },
          {
            "astId": 22690,
            "contract": "contracts/routers/CCBurnRouter.sol:CCBurnRouter",
            "label": "requestIdOfLocker",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}