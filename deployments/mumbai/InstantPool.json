{
  "address": "0x757c14D28E945347bCBbA0b2FfE3A9090342fb61",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_teleBTC",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_instantRouter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_instantPercentageFee",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "teleBTCAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "instantPoolTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "AddLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "instantToken",
          "type": "address"
        }
      ],
      "name": "CreatedInstantPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestedAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "instantFee",
          "type": "uint256"
        }
      ],
      "name": "InstantLoan",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldInstantPercentageFee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newInstantPercentageFee",
          "type": "uint256"
        }
      ],
      "name": "NewInstantPercentageFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldInstantRouter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newInstaneRouter",
          "type": "address"
        }
      ],
      "name": "NewInstantRouter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldTeleBTC",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newTeleBTC",
          "type": "address"
        }
      ],
      "name": "NewTeleBTC",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "teleBTCAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "instantPoolTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "RemoveLiquidity",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "addLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "addLiquidityWithoutMint",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "availableTeleBTC",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_loanAmount",
          "type": "uint256"
        }
      ],
      "name": "getFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "getLoan",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "instantPercentageFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "instantRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_instantPoolTokenAmount",
          "type": "uint256"
        }
      ],
      "name": "removeLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_instantPercentageFee",
          "type": "uint256"
        }
      ],
      "name": "setInstantPercentageFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_instantRouter",
          "type": "address"
        }
      ],
      "name": "setInstantRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_teleBTC",
          "type": "address"
        }
      ],
      "name": "setTeleBTC",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "teleBTC",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAddedTeleBTC",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalUnpaidLoan",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf0f6d782f1460ace11b3955f5f2389fec2bede043e30c4da5a60704f99e2dfcc",
  "receipt": {
    "to": null,
    "from": "0x1DE72A1935Df9b4E02315BDa3C3cDbDF2A640583",
    "contractAddress": "0x757c14D28E945347bCBbA0b2FfE3A9090342fb61",
    "transactionIndex": 13,
    "gasUsed": "1654556",
    "logsBloom": "0x00000000000000800000000000000000000000000000000000800000000008000000000000000000000001000000000000008000000000000000000000008000000000000008000000000000000800820001000000000000000100000000000000000010020082000000000000020800000000100000000080000000000000400000000000000000000000000000000000000000000000000000000000000000200000000000000000080000000000000000048010000000000000000000004000040000000000000001200000008100000000000000000000100000000020000000000000000000000000080000000000000000000000000000820000110000",
    "blockHash": "0x85a387223f824eef6ded99abf5b645fdc9f2846f081c91eabca7b7a59f61a606",
    "transactionHash": "0xf0f6d782f1460ace11b3955f5f2389fec2bede043e30c4da5a60704f99e2dfcc",
    "logs": [
      {
        "transactionIndex": 13,
        "blockNumber": 29214152,
        "transactionHash": "0xf0f6d782f1460ace11b3955f5f2389fec2bede043e30c4da5a60704f99e2dfcc",
        "address": "0x757c14D28E945347bCBbA0b2FfE3A9090342fb61",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001de72a1935df9b4e02315bda3c3cdbdf2a640583"
        ],
        "data": "0x",
        "logIndex": 44,
        "blockHash": "0x85a387223f824eef6ded99abf5b645fdc9f2846f081c91eabca7b7a59f61a606"
      },
      {
        "transactionIndex": 13,
        "blockNumber": 29214152,
        "transactionHash": "0xf0f6d782f1460ace11b3955f5f2389fec2bede043e30c4da5a60704f99e2dfcc",
        "address": "0x757c14D28E945347bCBbA0b2FfE3A9090342fb61",
        "topics": [
          "0x36a4c08a38b736dcecb6c328dba61238529620e83ccb23db2cc43cd34ec26096"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000783d8a18461ba80704df8ecbc41e0ed84cfb84f",
        "logIndex": 45,
        "blockHash": "0x85a387223f824eef6ded99abf5b645fdc9f2846f081c91eabca7b7a59f61a606"
      },
      {
        "transactionIndex": 13,
        "blockNumber": 29214152,
        "transactionHash": "0xf0f6d782f1460ace11b3955f5f2389fec2bede043e30c4da5a60704f99e2dfcc",
        "address": "0x757c14D28E945347bCBbA0b2FfE3A9090342fb61",
        "topics": [
          "0x12ad124e13af4c31364ad22aa74320e167b37f005dafb75d71a210c49da3629e"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000576b9b0938617fe036842862649afc206b7af194",
        "logIndex": 46,
        "blockHash": "0x85a387223f824eef6ded99abf5b645fdc9f2846f081c91eabca7b7a59f61a606"
      },
      {
        "transactionIndex": 13,
        "blockNumber": 29214152,
        "transactionHash": "0xf0f6d782f1460ace11b3955f5f2389fec2bede043e30c4da5a60704f99e2dfcc",
        "address": "0x757c14D28E945347bCBbA0b2FfE3A9090342fb61",
        "topics": [
          "0xcf3912ac25e0959b5ddfa4ca255e81306efc617583c3cd678d59d5de59b48480"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000032",
        "logIndex": 47,
        "blockHash": "0x85a387223f824eef6ded99abf5b645fdc9f2846f081c91eabca7b7a59f61a606"
      },
      {
        "transactionIndex": 13,
        "blockNumber": 29214152,
        "transactionHash": "0xf0f6d782f1460ace11b3955f5f2389fec2bede043e30c4da5a60704f99e2dfcc",
        "address": "0x757c14D28E945347bCBbA0b2FfE3A9090342fb61",
        "topics": [
          "0xe23e0079f9641e026de850166f88913c635aeec5ccabb427c5775d3717c3216a",
          "0x0000000000000000000000000783d8a18461ba80704df8ecbc41e0ed84cfb84f"
        ],
        "data": "0x",
        "logIndex": 48,
        "blockHash": "0x85a387223f824eef6ded99abf5b645fdc9f2846f081c91eabca7b7a59f61a606"
      },
      {
        "transactionIndex": 13,
        "blockNumber": 29214152,
        "transactionHash": "0xf0f6d782f1460ace11b3955f5f2389fec2bede043e30c4da5a60704f99e2dfcc",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000001de72a1935df9b4e02315bda3c3cdbdf2a640583",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000985c6bee57fe80000000000000000000000000000000000000000000000044241fcd13cb3d71d000000000000000000000000000000000000000000000000251c4b87207b5cab0000000000000000000000000000000000000000000000044238770a7dce57350000000000000000000000000000000000000000000000002525d14ddf60dc93",
        "logIndex": 49,
        "blockHash": "0x85a387223f824eef6ded99abf5b645fdc9f2846f081c91eabca7b7a59f61a606"
      }
    ],
    "blockNumber": 29214152,
    "cumulativeGasUsed": "6052186",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0783d8A18461BA80704DF8EcBc41E0eD84CFB84f",
    "0x576b9B0938617fe036842862649afc206b7Af194",
    50,
    "InstantPoolToken",
    "IPT"
  ],
  "numDeployments": 1,
  "solcInputHash": "75de7cb825f3b6d07e1f1f6c98977d78",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teleBTC\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_instantRouter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_instantPercentageFee\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"teleBTCAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"instantPoolTokenAmount\",\"type\":\"uint256\"}],\"name\":\"AddLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"instantToken\",\"type\":\"address\"}],\"name\":\"CreatedInstantPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestedAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"instantFee\",\"type\":\"uint256\"}],\"name\":\"InstantLoan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldInstantPercentageFee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newInstantPercentageFee\",\"type\":\"uint256\"}],\"name\":\"NewInstantPercentageFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldInstantRouter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newInstaneRouter\",\"type\":\"address\"}],\"name\":\"NewInstantRouter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldTeleBTC\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newTeleBTC\",\"type\":\"address\"}],\"name\":\"NewTeleBTC\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"teleBTCAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"instantPoolTokenAmount\",\"type\":\"uint256\"}],\"name\":\"RemoveLiquidity\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"addLiquidityWithoutMint\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"availableTeleBTC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_loanAmount\",\"type\":\"uint256\"}],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getLoan\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"instantPercentageFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"instantRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_instantPoolTokenAmount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_instantPercentageFee\",\"type\":\"uint256\"}],\"name\":\"setInstantPercentageFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_instantRouter\",\"type\":\"address\"}],\"name\":\"setInstantRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_teleBTC\",\"type\":\"address\"}],\"name\":\"setTeleBTC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"teleBTC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAddedTeleBTC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalUnpaidLoan\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addLiquidity(address,uint256)\":{\"details\":\"@param _user          Address of user who receives instant pool token\",\"params\":{\"_amount\":\"Amount of liquidity that user wants to add\"},\"returns\":{\"_0\":\"Amount of instant pool token that user receives\"}},\"addLiquidityWithoutMint(uint256)\":{\"details\":\"Updates totalAddedTeleBTC (transferring teleBTC directly does not update it)\",\"params\":{\"_amount\":\"Amount of liquidity that user wants to add\"},\"returns\":{\"_0\":\"True if liquidity is added successfully\"}},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.\"},\"availableTeleBTC()\":{\"returns\":{\"_0\":\"Available amount of teleBTC that can be borrowed\"}},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"getLoan(address,uint256)\":{\"details\":\"Only instant router contract can call this\",\"params\":{\"_amount\":\"Amount of requested loan\",\"_user\":\"Address of user who wants loan\"},\"returns\":{\"_0\":\"Amount of given loan after reducing the fee\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeLiquidity(address,uint256)\":{\"details\":\"@param _user                          Address of user who receives teleBTC\",\"params\":{\"_instantPoolTokenAmount\":\"Amount of instant pool token that is burnt\"},\"returns\":{\"_0\":\"Amount of teleBTC that user receives\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setInstantPercentageFee(uint256)\":{\"details\":\"Only current owner can call this\",\"params\":{\"_instantPercentageFee\":\"The new percentage fee\"}},\"setInstantRouter(address)\":{\"details\":\"Only owner can call this\",\"params\":{\"_instantRouter\":\"The new instant router contract address\"}},\"setTeleBTC(address)\":{\"details\":\"Only owner can call this\",\"params\":{\"_teleBTC\":\"The new teleBTC contract address\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"totalUnpaidLoan()\":{\"returns\":{\"_0\":\"Amount of teleBTC that has been borrowed but has not been paid back\"}},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"events\":{\"AddLiquidity(address,uint256,uint256)\":{\"notice\":\"emits when some liquidity gets added to the pool               \"},\"CreatedInstantPool(address)\":{\"notice\":\"emits when an instant pool is created \"},\"InstantLoan(address,uint256,uint256)\":{\"notice\":\"Gets an instant loan from the contract\"},\"NewInstantPercentageFee(uint256,uint256)\":{\"notice\":\"Emits when changes made to instant percentage fee\"},\"NewInstantRouter(address,address)\":{\"notice\":\"Emits when changes made to instant router address\"},\"NewTeleBTC(address,address)\":{\"notice\":\"Emits when changes made to TeleBTC address\"},\"RemoveLiquidity(address,uint256,uint256)\":{\"notice\":\"Emits when some liquidity gets removed from the pool\"}},\"kind\":\"user\",\"methods\":{\"addLiquidity(address,uint256)\":{\"notice\":\"Adds liquidity to instant pool\"},\"addLiquidityWithoutMint(uint256)\":{\"notice\":\"Adds liquidity to instant pool without minting instant pool tokens\"},\"availableTeleBTC()\":{\"notice\":\"Gives available teleBTC amount\"},\"getLoan(address,uint256)\":{\"notice\":\"Gives loan to user\"},\"removeLiquidity(address,uint256)\":{\"notice\":\"Removes liquidity from instant pool\"},\"setInstantPercentageFee(uint256)\":{\"notice\":\"Changes instant loan fee\"},\"setInstantRouter(address)\":{\"notice\":\"Changes instant router contract address\"},\"setTeleBTC(address)\":{\"notice\":\"Changes teleBTC contract address\"},\"totalUnpaidLoan()\":{\"notice\":\"Gives the unpaid loans amount\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/pools/InstantPool.sol\":\"InstantPool\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/pools/InstantPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"./interfaces/IInstantPool.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract InstantPool is IInstantPool, ERC20, Ownable, ReentrancyGuard {\\n\\n    modifier nonZeroAddress(address _address) {\\n        require(_address != address(0), \\\"InstantPool: zero address\\\");\\n        _;\\n    }\\n\\n    // Constants\\n    uint constant MAX_INSTANT_PERCENTAGE_FEE = 10000;\\n\\n    address public override teleBTC;\\n    uint public override instantPercentageFee; // a number between 0-10000 to show %0.01\\n    uint public override totalAddedTeleBTC;\\n    address public override instantRouter;\\n\\n    constructor(\\n        address _teleBTC,\\n        address _instantRouter,\\n        uint _instantPercentageFee,\\n        string memory _name,\\n        string memory _symbol\\n    ) ERC20(_name, _symbol) {\\n        _setTeleBTC(_teleBTC);\\n        _setInstantRouter(_instantRouter);\\n        _setInstantPercentageFee(_instantPercentageFee);\\n\\n        emit CreatedInstantPool(_teleBTC);\\n    }\\n\\n    function renounceOwnership() public virtual override onlyOwner {}\\n\\n    /// @notice                               Gives available teleBTC amount\\n    /// @return                               Available amount of teleBTC that can be borrowed\\n    function availableTeleBTC() override public view returns (uint) {\\n        return IERC20(teleBTC).balanceOf(address(this));\\n    }\\n\\n    /// @notice                               Gives the unpaid loans amount\\n    /// @return                               Amount of teleBTC that has been borrowed but has not been paid back\\n    function totalUnpaidLoan() override external view returns (uint) {\\n        uint _availableTeleBTC = availableTeleBTC();\\n        return totalAddedTeleBTC >= _availableTeleBTC ? totalAddedTeleBTC - _availableTeleBTC : 0;\\n    }\\n\\n    /// @notice                 Changes instant router contract address\\n    /// @dev                    Only owner can call this\\n    /// @param _instantRouter   The new instant router contract address\\n    function setInstantRouter(address _instantRouter) external override onlyOwner {\\n        _setInstantRouter(_instantRouter);\\n    }\\n\\n    /// @notice                        Changes instant loan fee\\n    /// @dev                           Only current owner can call this\\n    /// @param _instantPercentageFee   The new percentage fee\\n    function setInstantPercentageFee(uint _instantPercentageFee) external override onlyOwner {\\n        _setInstantPercentageFee(_instantPercentageFee);\\n    }\\n\\n    /// @notice                 Changes teleBTC contract address\\n    /// @dev                    Only owner can call this\\n    /// @param _teleBTC         The new teleBTC contract address\\n    function setTeleBTC(address _teleBTC) external override onlyOwner {\\n        _setTeleBTC(_teleBTC);\\n    }\\n\\n    /// @notice                 Internal setter for instant router contract address\\n    /// @param _instantRouter   The new instant router contract address\\n    function _setInstantRouter(address _instantRouter) nonZeroAddress(_instantRouter) private {\\n        emit NewInstantRouter(instantRouter, _instantRouter);\\n        instantRouter = _instantRouter;\\n    }\\n\\n    /// @notice                         Internal setter for instant loan fee\\n    /// @param _instantPercentageFee    The new percentage fee\\n    function _setInstantPercentageFee(uint _instantPercentageFee) private {\\n        emit NewInstantPercentageFee(instantPercentageFee, _instantPercentageFee);\\n        require(\\n            _instantPercentageFee <= MAX_INSTANT_PERCENTAGE_FEE,\\n            \\\"InstantPool: amount more than max\\\"\\n        );\\n        instantPercentageFee = _instantPercentageFee;\\n    }\\n\\n    /// @notice                 Internal setter for teleBTC contract address\\n    /// @param _teleBTC         The new teleBTC contract address\\n    function _setTeleBTC(address _teleBTC) nonZeroAddress(_teleBTC) private {\\n        emit NewTeleBTC(teleBTC, _teleBTC);\\n        teleBTC = _teleBTC;\\n    }\\n\\n    function getFee(uint _loanAmount) external view override returns (uint) {\\n        return _loanAmount*instantPercentageFee/MAX_INSTANT_PERCENTAGE_FEE;\\n    }\\n\\n    /// @notice               Adds liquidity to instant pool\\n    /// @dev\\n    /// @param _user          Address of user who receives instant pool token\\n    /// @param _amount        Amount of liquidity that user wants to add\\n    /// @return               Amount of instant pool token that user receives\\n    function addLiquidity(address _user, uint _amount) external nonReentrant override returns (uint) {\\n        require(_amount > 0, \\\"InstantPool: input amount is zero\\\");\\n        uint instantPoolTokenAmount;\\n        // Transfers teleBTC from user\\n        IERC20(teleBTC).transferFrom(_msgSender(), address(this), _amount);\\n        if (totalAddedTeleBTC == 0 || totalSupply() == 0) {\\n            instantPoolTokenAmount = _amount;\\n        } else {\\n            instantPoolTokenAmount = _amount*totalSupply()/totalAddedTeleBTC;\\n        }\\n        totalAddedTeleBTC = totalAddedTeleBTC + _amount;\\n        // Mints instant pool token for user\\n        _mint(_user, instantPoolTokenAmount);\\n        emit AddLiquidity(_user, _amount, instantPoolTokenAmount);\\n        return instantPoolTokenAmount;\\n    }\\n\\n    /// @notice               Adds liquidity to instant pool without minting instant pool tokens\\n    /// @dev                  Updates totalAddedTeleBTC (transferring teleBTC directly does not update it)\\n    /// @param _amount        Amount of liquidity that user wants to add\\n    /// @return               True if liquidity is added successfully\\n    function addLiquidityWithoutMint(uint _amount) external nonReentrant override returns (bool) {\\n        require(_amount > 0, \\\"InstantPool: input amount is zero\\\");\\n        // Transfers teleBTC from user\\n        IERC20(teleBTC).transferFrom(_msgSender(), address(this), _amount);\\n        totalAddedTeleBTC = totalAddedTeleBTC + _amount;\\n        emit AddLiquidity(_msgSender(), _amount, 0);\\n        return true;\\n    }\\n\\n    /// @notice                               Removes liquidity from instant pool\\n    /// @dev\\n    /// @param _user                          Address of user who receives teleBTC\\n    /// @param _instantPoolTokenAmount        Amount of instant pool token that is burnt\\n    /// @return                               Amount of teleBTC that user receives\\n    function removeLiquidity(address _user, uint _instantPoolTokenAmount) external nonReentrant override returns (uint) {\\n        require(_instantPoolTokenAmount > 0, \\\"InstantPool: input amount is zero\\\");\\n        require(balanceOf(_msgSender()) >= _instantPoolTokenAmount, \\\"InstantPool: balance is not sufficient\\\");\\n        uint teleBTCAmount = _instantPoolTokenAmount*totalAddedTeleBTC/totalSupply();\\n        totalAddedTeleBTC = totalAddedTeleBTC - teleBTCAmount;\\n        _burn(_msgSender(), _instantPoolTokenAmount);\\n        IERC20(teleBTC).transfer(_user, teleBTCAmount);\\n        emit RemoveLiquidity(_msgSender(), teleBTCAmount, _instantPoolTokenAmount);\\n        return teleBTCAmount;\\n    }\\n\\n    /// @notice                               Gives loan to user\\n    /// @dev                                  Only instant router contract can call this\\n    /// @param _user                          Address of user who wants loan\\n    /// @param _amount                        Amount of requested loan\\n    /// @return                               Amount of given loan after reducing the fee\\n    function getLoan(address _user, uint _amount) nonReentrant override external returns (bool) {\\n        require(_msgSender() == instantRouter, \\\"InstantPool: sender is not allowed\\\");\\n        require(availableTeleBTC() >= _amount, \\\"InstantPool: liquidity is not sufficient\\\");\\n        // Instant fee increases the total teleBTC amount\\n        uint instantFee = _amount*instantPercentageFee/10000;\\n        IERC20(teleBTC).transfer(_user, _amount);\\n        emit InstantLoan(_user, _amount, instantFee);\\n        return true;\\n    }\\n\\n}\",\"keccak256\":\"0x55ceb7395884f9da279dc4cab362dfddb2c08cfeaa31379f3f6457cf8bc5c83b\",\"license\":\"MIT\"},\"contracts/pools/interfaces/IInstantPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IInstantPool is IERC20 {\\n\\n\\t// Events\\n\\n\\t/// @notice \\t\\t\\t\\t\\t\\t\\temits when an instant pool is created \\n\\t/// @param instantToken \\t\\t\\t\\tThe instant token of this instant pool\\n\\tevent CreatedInstantPool(address indexed instantToken);\\n\\n\\t/// @notice                             emits when some liquidity gets added to the pool               \\n\\t/// @param user                         User who added the liquidity\\n\\t/// @param teleBTCAmount                Amount of teleBTC added to the pool\\n\\t/// @param instantPoolTokenAmount       User's share from the pool\\n\\tevent AddLiquidity(address indexed user, uint teleBTCAmount, uint instantPoolTokenAmount); \\n\\n\\t/// @notice                             Emits when some liquidity gets removed from the pool\\n\\t/// @param user                         User who removed the liquidity\\n\\t/// @param teleBTCAmount                Amount of teleBTC removed from the pool\\n\\t/// @param instantPoolTokenAmount       User's share from the pool\\n\\tevent RemoveLiquidity(address indexed user, uint teleBTCAmount, uint instantPoolTokenAmount);\\n\\n\\t/// @notice                       \\t\\tGets an instant loan from the contract\\n\\t/// @param user                   \\t\\tUser who wants to get the loan\\n\\t/// @param requestedAmount        \\t\\tAmount of loan requested and sent to the user\\n\\t/// @param instantFee             \\t\\tAmount of fee that the user should pay back later with the loan\\n\\tevent InstantLoan(address indexed user, uint256 requestedAmount, uint instantFee);\\n\\n\\t/// @notice                       \\t\\tEmits when changes made to instant router address\\n\\tevent NewInstantRouter(address oldInstantRouter, address newInstaneRouter);\\n\\n\\t/// @notice                       \\t\\tEmits when changes made to instant percentage fee\\n\\tevent NewInstantPercentageFee(uint oldInstantPercentageFee, uint newInstantPercentageFee);\\n\\n\\t/// @notice                       \\t\\tEmits when changes made to TeleBTC address\\n\\tevent NewTeleBTC(address oldTeleBTC, address newTeleBTC);\\n\\n\\t// Read-only functions\\n\\n\\tfunction teleBTC() external view returns (address);\\n\\n\\tfunction instantRouter() external view returns (address);\\n\\n\\tfunction totalAddedTeleBTC() external view returns (uint);\\n\\n\\tfunction availableTeleBTC() external view returns (uint);\\n\\n\\tfunction totalUnpaidLoan() external view returns (uint);\\n\\n\\tfunction instantPercentageFee() external view returns (uint);\\n\\n\\tfunction getFee(uint _loanAmount) external view returns (uint);\\n\\n\\t// State-changing functions\\n\\n\\tfunction setInstantRouter(address _instantRouter) external;\\n\\n\\tfunction setInstantPercentageFee(uint _instantPercentageFee) external;\\n\\n\\tfunction setTeleBTC(address _teleBTC) external;\\n\\n\\tfunction addLiquidity(address _user, uint _amount) external returns (uint);\\n\\n\\tfunction addLiquidityWithoutMint(uint _amount) external returns (bool);\\n\\n\\tfunction removeLiquidity(address _user, uint _instantPoolTokenAmount) external returns (uint);\\n\\n\\tfunction getLoan(address _user, uint _amount) external returns (bool);\\n\\n}\",\"keccak256\":\"0xcbd7c300bc9294b889a8664dc0c24f2a2404cb44af27339509e8d22eb2b1296b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001f5f38038062001f5f8339810160408190526200003491620004da565b8151829082906200004d90600390602085019062000364565b5080516200006390600490602084019062000364565b505050620000806200007a620000e560201b60201c565b620000e9565b600160065562000090856200013b565b6200009b8462000202565b620000a683620002c5565b6040516001600160a01b038616907fe23e0079f9641e026de850166f88913c635aeec5ccabb427c5775d3717c3216a90600090a25050505050620005c4565b3390565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b806001600160a01b038116620001985760405162461bcd60e51b815260206004820152601960248201527f496e7374616e74506f6f6c3a207a65726f20616464726573730000000000000060448201526064015b60405180910390fd5b600754604080516001600160a01b03928316815291841660208301527f36a4c08a38b736dcecb6c328dba61238529620e83ccb23db2cc43cd34ec26096910160405180910390a150600780546001600160a01b0319166001600160a01b0392909216919091179055565b806001600160a01b0381166200025b5760405162461bcd60e51b815260206004820152601960248201527f496e7374616e74506f6f6c3a207a65726f20616464726573730000000000000060448201526064016200018f565b600a54604080516001600160a01b03928316815291841660208301527f12ad124e13af4c31364ad22aa74320e167b37f005dafb75d71a210c49da3629e910160405180910390a150600a80546001600160a01b0319166001600160a01b0392909216919091179055565b60085460408051918252602082018390527fcf3912ac25e0959b5ddfa4ca255e81306efc617583c3cd678d59d5de59b48480910160405180910390a16127108111156200035f5760405162461bcd60e51b815260206004820152602160248201527f496e7374616e74506f6f6c3a20616d6f756e74206d6f7265207468616e206d616044820152600f60fb1b60648201526084016200018f565b600855565b828054620003729062000571565b90600052602060002090601f016020900481019282620003965760008555620003e1565b82601f10620003b157805160ff1916838001178555620003e1565b82800160010185558215620003e1579182015b82811115620003e1578251825591602001919060010190620003c4565b50620003ef929150620003f3565b5090565b5b80821115620003ef5760008155600101620003f4565b80516001600160a01b03811681146200042257600080fd5b919050565b600082601f83011262000438578081fd5b81516001600160401b0380821115620004555762000455620005ae565b604051601f8301601f19908116603f01168101908282118183101715620004805762000480620005ae565b816040528381526020925086838588010111156200049c578485fd5b8491505b83821015620004bf5785820183015181830184015290820190620004a0565b83821115620004d057848385830101525b9695505050505050565b600080600080600060a08688031215620004f2578081fd5b620004fd866200040a565b94506200050d602087016200040a565b6040870151606088015191955093506001600160401b038082111562000531578283fd5b6200053f89838a0162000427565b9350608088015191508082111562000555578283fd5b50620005648882890162000427565b9150509295509295909350565b6002810460018216806200058657607f821691505b60208210811415620005a857634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b61198b80620005d46000396000f3fe608060405234801561001057600080fd5b50600436106101c35760003560e01c80638d3d78cd116100f9578063cfff37f811610097578063e35a0a8811610071578063e35a0a88146103ae578063e49bce3c146103c1578063f2fde38b146103ca578063fcee45f4146103dd576101c3565b8063cfff37f814610359578063dcebe9bb1461036c578063dd62ed3e14610375576101c3565b8063a1c51586116100d3578063a1c515861461030d578063a201ccf614610320578063a457c2d714610333578063a9059cbb14610346576101c3565b80638d3d78cd146102c95780638da5cb5b146102f457806395d89b4114610305576101c3565b80633950935111610166578063715018a611610140578063715018a61461029357806375e670051461029b5780637f0f1817146102a3578063870ba6cf146102b6576101c3565b8063395093511461025a578063566887001461026d57806370a0823114610280576101c3565b806318160ddd116101a257806318160ddd1461021e57806323b872dd1461023057806329894ff114610243578063313ce5671461024b576101c3565b8062440914146101c857806306fdde03146101dd578063095ea7b3146101fb575b600080fd5b6101db6101d6366004611766565b6103f0565b005b6101e561042f565b6040516101f29190611796565b60405180910390f35b61020e61020936600461171d565b6104c1565b60405190151581526020016101f2565b6002545b6040519081526020016101f2565b61020e61023e3660046116e2565b6104d7565b610222610581565b604051601281526020016101f2565b61020e61026836600461171d565b610602565b61022261027b36600461171d565b61063e565b61022261028e36600461168f565b6107c5565b6101db6107e4565b610222610810565b6101db6102b136600461168f565b610842565b6101db6102c436600461168f565b610875565b6007546102dc906001600160a01b031681565b6040516001600160a01b0390911681526020016101f2565b6005546001600160a01b03166102dc565b6101e56108a8565b61020e61031b36600461171d565b6108b7565b61022261032e36600461171d565b610ab1565b61020e61034136600461171d565b610c5d565b61020e61035436600461171d565b610cf6565b61020e610367366004611766565b610d03565b61022260095481565b6102226103833660046116b0565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b600a546102dc906001600160a01b031681565b61022260085481565b6101db6103d836600461168f565b610e3b565b6102226103eb366004611766565b610ed3565b6005546001600160a01b031633146104235760405162461bcd60e51b815260040161041a9061182a565b60405180910390fd5b61042c81610ef6565b50565b60606003805461043e90611904565b80601f016020809104026020016040519081016040528092919081815260200182805461046a90611904565b80156104b75780601f1061048c576101008083540402835291602001916104b7565b820191906000526020600020905b81548152906001019060200180831161049a57829003601f168201915b5050505050905090565b60006104ce338484610f93565b50600192915050565b60006104e48484846110b8565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156105695760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b606482015260840161041a565b6105768533858403610f93565b506001949350505050565b6007546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156105c557600080fd5b505afa1580156105d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105fd919061177e565b905090565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916104ce918590610639908690611896565b610f93565b6000600260065414156106635760405162461bcd60e51b815260040161041a9061185f565b6002600655816106855760405162461bcd60e51b815260040161041a906117e9565b6007546000906001600160a01b03166323b872dd336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260448101869052606401602060405180830381600087803b1580156106e857600080fd5b505af11580156106fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107209190611746565b5060095415806107305750600254155b1561073c575081610759565b60095460025461074c90856118ce565b61075691906118ae565b90505b826009546107679190611896565b6009556107748482611287565b60408051848152602081018390526001600160a01b038616917f06239653922ac7bea6aa2b19dc486b9361821d37712eb796adfd38d81de278ca91015b60405180910390a260016006559392505050565b6001600160a01b0381166000908152602081905260409020545b919050565b6005546001600160a01b0316331461080e5760405162461bcd60e51b815260040161041a9061182a565b565b60008061081b610581565b905080600954101561082e57600061083c565b8060095461083c91906118ed565b91505090565b6005546001600160a01b0316331461086c5760405162461bcd60e51b815260040161041a9061182a565b61042c81611366565b6005546001600160a01b0316331461089f5760405162461bcd60e51b815260040161041a9061182a565b61042c81611423565b60606004805461043e90611904565b6000600260065414156108dc5760405162461bcd60e51b815260040161041a9061185f565b6002600655600a546001600160a01b0316336001600160a01b03161461094f5760405162461bcd60e51b815260206004820152602260248201527f496e7374616e74506f6f6c3a2073656e646572206973206e6f7420616c6c6f77604482015261195960f21b606482015260840161041a565b81610958610581565b10156109b75760405162461bcd60e51b815260206004820152602860248201527f496e7374616e74506f6f6c3a206c6971756964697479206973206e6f7420737560448201526719999a58da595b9d60c21b606482015260840161041a565b6000612710600854846109ca91906118ce565b6109d491906118ae565b60075460405163a9059cbb60e01b81526001600160a01b0387811660048301526024820187905292935091169063a9059cbb90604401602060405180830381600087803b158015610a2457600080fd5b505af1158015610a38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5c9190611746565b5060408051848152602081018390526001600160a01b038616917f0b4a3e47d690ec5b072e50757ed5caa5883ea1453ec15bca511e106f721a351f910160405180910390a26001915050600160065592915050565b600060026006541415610ad65760405162461bcd60e51b815260040161041a9061185f565b600260065581610af85760405162461bcd60e51b815260040161041a906117e9565b81610b023361028e565b1015610b5f5760405162461bcd60e51b815260206004820152602660248201527f496e7374616e74506f6f6c3a2062616c616e6365206973206e6f7420737566666044820152651a58da595b9d60d21b606482015260840161041a565b6000610b6a60025490565b600954610b7790856118ce565b610b8191906118ae565b905080600954610b9191906118ed565b600955610b9e33846114e0565b60075460405163a9059cbb60e01b81526001600160a01b038681166004830152602482018490529091169063a9059cbb90604401602060405180830381600087803b158015610bec57600080fd5b505af1158015610c00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c249190611746565b50604080518281526020810185905233917f0fbf06c058b90cb038a618f8c2acbf6145f8b3570fd1fa56abb8f0f3f05b36e891016107b1565b3360009081526001602090815260408083206001600160a01b038616845290915281205482811015610cdf5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161041a565b610cec3385858403610f93565b5060019392505050565b60006104ce3384846110b8565b600060026006541415610d285760405162461bcd60e51b815260040161041a9061185f565b600260065581610d4a5760405162461bcd60e51b815260040161041a906117e9565b6007546001600160a01b03166323b872dd336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260448101859052606401602060405180830381600087803b158015610daa57600080fd5b505af1158015610dbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de29190611746565b5081600954610df19190611896565b600955604080518381526000602082015233917f06239653922ac7bea6aa2b19dc486b9361821d37712eb796adfd38d81de278ca910160405180910390a250600180600655919050565b6005546001600160a01b03163314610e655760405162461bcd60e51b815260040161041a9061182a565b6001600160a01b038116610eca5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161041a565b61042c81611626565b600061271060085483610ee691906118ce565b610ef091906118ae565b92915050565b60085460408051918252602082018390527fcf3912ac25e0959b5ddfa4ca255e81306efc617583c3cd678d59d5de59b48480910160405180910390a1612710811115610f8e5760405162461bcd60e51b815260206004820152602160248201527f496e7374616e74506f6f6c3a20616d6f756e74206d6f7265207468616e206d616044820152600f60fb1b606482015260840161041a565b600855565b6001600160a01b038316610ff55760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161041a565b6001600160a01b0382166110565760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161041a565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b03831661111c5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161041a565b6001600160a01b03821661117e5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161041a565b6001600160a01b038316600090815260208190526040902054818110156111f65760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161041a565b6001600160a01b0380851660009081526020819052604080822085850390559185168152908120805484929061122d908490611896565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161127991815260200190565b60405180910390a350505050565b6001600160a01b0382166112dd5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161041a565b80600260008282546112ef9190611896565b90915550506001600160a01b0382166000908152602081905260408120805483929061131c908490611896565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b806001600160a01b0381166113b95760405162461bcd60e51b8152602060048201526019602482015278496e7374616e74506f6f6c3a207a65726f206164647265737360381b604482015260640161041a565b600754604080516001600160a01b03928316815291841660208301527f36a4c08a38b736dcecb6c328dba61238529620e83ccb23db2cc43cd34ec26096910160405180910390a150600780546001600160a01b0319166001600160a01b0392909216919091179055565b806001600160a01b0381166114765760405162461bcd60e51b8152602060048201526019602482015278496e7374616e74506f6f6c3a207a65726f206164647265737360381b604482015260640161041a565b600a54604080516001600160a01b03928316815291841660208301527f12ad124e13af4c31364ad22aa74320e167b37f005dafb75d71a210c49da3629e910160405180910390a150600a80546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0382166115405760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161041a565b6001600160a01b038216600090815260208190526040902054818110156115b45760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161041a565b6001600160a01b03831660009081526020819052604081208383039055600280548492906115e39084906118ed565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020016110ab565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b80356001600160a01b03811681146107df57600080fd5b6000602082840312156116a0578081fd5b6116a982611678565b9392505050565b600080604083850312156116c2578081fd5b6116cb83611678565b91506116d960208401611678565b90509250929050565b6000806000606084860312156116f6578081fd5b6116ff84611678565b925061170d60208501611678565b9150604084013590509250925092565b6000806040838503121561172f578182fd5b61173883611678565b946020939093013593505050565b600060208284031215611757578081fd5b815180151581146116a9578182fd5b600060208284031215611777578081fd5b5035919050565b60006020828403121561178f578081fd5b5051919050565b6000602080835283518082850152825b818110156117c2578581018301518582016040015282016117a6565b818111156117d35783604083870101525b50601f01601f1916929092016040019392505050565b60208082526021908201527f496e7374616e74506f6f6c3a20696e70757420616d6f756e74206973207a65726040820152606f60f81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b600082198211156118a9576118a961193f565b500190565b6000826118c957634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156118e8576118e861193f565b500290565b6000828210156118ff576118ff61193f565b500390565b60028104600182168061191857607f821691505b6020821081141561193957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220a000cf66edb979f27e60ae59375f114508e8558756b83289dc5a45c0bee33eab64736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101c35760003560e01c80638d3d78cd116100f9578063cfff37f811610097578063e35a0a8811610071578063e35a0a88146103ae578063e49bce3c146103c1578063f2fde38b146103ca578063fcee45f4146103dd576101c3565b8063cfff37f814610359578063dcebe9bb1461036c578063dd62ed3e14610375576101c3565b8063a1c51586116100d3578063a1c515861461030d578063a201ccf614610320578063a457c2d714610333578063a9059cbb14610346576101c3565b80638d3d78cd146102c95780638da5cb5b146102f457806395d89b4114610305576101c3565b80633950935111610166578063715018a611610140578063715018a61461029357806375e670051461029b5780637f0f1817146102a3578063870ba6cf146102b6576101c3565b8063395093511461025a578063566887001461026d57806370a0823114610280576101c3565b806318160ddd116101a257806318160ddd1461021e57806323b872dd1461023057806329894ff114610243578063313ce5671461024b576101c3565b8062440914146101c857806306fdde03146101dd578063095ea7b3146101fb575b600080fd5b6101db6101d6366004611766565b6103f0565b005b6101e561042f565b6040516101f29190611796565b60405180910390f35b61020e61020936600461171d565b6104c1565b60405190151581526020016101f2565b6002545b6040519081526020016101f2565b61020e61023e3660046116e2565b6104d7565b610222610581565b604051601281526020016101f2565b61020e61026836600461171d565b610602565b61022261027b36600461171d565b61063e565b61022261028e36600461168f565b6107c5565b6101db6107e4565b610222610810565b6101db6102b136600461168f565b610842565b6101db6102c436600461168f565b610875565b6007546102dc906001600160a01b031681565b6040516001600160a01b0390911681526020016101f2565b6005546001600160a01b03166102dc565b6101e56108a8565b61020e61031b36600461171d565b6108b7565b61022261032e36600461171d565b610ab1565b61020e61034136600461171d565b610c5d565b61020e61035436600461171d565b610cf6565b61020e610367366004611766565b610d03565b61022260095481565b6102226103833660046116b0565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b600a546102dc906001600160a01b031681565b61022260085481565b6101db6103d836600461168f565b610e3b565b6102226103eb366004611766565b610ed3565b6005546001600160a01b031633146104235760405162461bcd60e51b815260040161041a9061182a565b60405180910390fd5b61042c81610ef6565b50565b60606003805461043e90611904565b80601f016020809104026020016040519081016040528092919081815260200182805461046a90611904565b80156104b75780601f1061048c576101008083540402835291602001916104b7565b820191906000526020600020905b81548152906001019060200180831161049a57829003601f168201915b5050505050905090565b60006104ce338484610f93565b50600192915050565b60006104e48484846110b8565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156105695760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b606482015260840161041a565b6105768533858403610f93565b506001949350505050565b6007546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b1580156105c557600080fd5b505afa1580156105d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105fd919061177e565b905090565b3360008181526001602090815260408083206001600160a01b038716845290915281205490916104ce918590610639908690611896565b610f93565b6000600260065414156106635760405162461bcd60e51b815260040161041a9061185f565b6002600655816106855760405162461bcd60e51b815260040161041a906117e9565b6007546000906001600160a01b03166323b872dd336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260448101869052606401602060405180830381600087803b1580156106e857600080fd5b505af11580156106fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107209190611746565b5060095415806107305750600254155b1561073c575081610759565b60095460025461074c90856118ce565b61075691906118ae565b90505b826009546107679190611896565b6009556107748482611287565b60408051848152602081018390526001600160a01b038616917f06239653922ac7bea6aa2b19dc486b9361821d37712eb796adfd38d81de278ca91015b60405180910390a260016006559392505050565b6001600160a01b0381166000908152602081905260409020545b919050565b6005546001600160a01b0316331461080e5760405162461bcd60e51b815260040161041a9061182a565b565b60008061081b610581565b905080600954101561082e57600061083c565b8060095461083c91906118ed565b91505090565b6005546001600160a01b0316331461086c5760405162461bcd60e51b815260040161041a9061182a565b61042c81611366565b6005546001600160a01b0316331461089f5760405162461bcd60e51b815260040161041a9061182a565b61042c81611423565b60606004805461043e90611904565b6000600260065414156108dc5760405162461bcd60e51b815260040161041a9061185f565b6002600655600a546001600160a01b0316336001600160a01b03161461094f5760405162461bcd60e51b815260206004820152602260248201527f496e7374616e74506f6f6c3a2073656e646572206973206e6f7420616c6c6f77604482015261195960f21b606482015260840161041a565b81610958610581565b10156109b75760405162461bcd60e51b815260206004820152602860248201527f496e7374616e74506f6f6c3a206c6971756964697479206973206e6f7420737560448201526719999a58da595b9d60c21b606482015260840161041a565b6000612710600854846109ca91906118ce565b6109d491906118ae565b60075460405163a9059cbb60e01b81526001600160a01b0387811660048301526024820187905292935091169063a9059cbb90604401602060405180830381600087803b158015610a2457600080fd5b505af1158015610a38573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5c9190611746565b5060408051848152602081018390526001600160a01b038616917f0b4a3e47d690ec5b072e50757ed5caa5883ea1453ec15bca511e106f721a351f910160405180910390a26001915050600160065592915050565b600060026006541415610ad65760405162461bcd60e51b815260040161041a9061185f565b600260065581610af85760405162461bcd60e51b815260040161041a906117e9565b81610b023361028e565b1015610b5f5760405162461bcd60e51b815260206004820152602660248201527f496e7374616e74506f6f6c3a2062616c616e6365206973206e6f7420737566666044820152651a58da595b9d60d21b606482015260840161041a565b6000610b6a60025490565b600954610b7790856118ce565b610b8191906118ae565b905080600954610b9191906118ed565b600955610b9e33846114e0565b60075460405163a9059cbb60e01b81526001600160a01b038681166004830152602482018490529091169063a9059cbb90604401602060405180830381600087803b158015610bec57600080fd5b505af1158015610c00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c249190611746565b50604080518281526020810185905233917f0fbf06c058b90cb038a618f8c2acbf6145f8b3570fd1fa56abb8f0f3f05b36e891016107b1565b3360009081526001602090815260408083206001600160a01b038616845290915281205482811015610cdf5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b606482015260840161041a565b610cec3385858403610f93565b5060019392505050565b60006104ce3384846110b8565b600060026006541415610d285760405162461bcd60e51b815260040161041a9061185f565b600260065581610d4a5760405162461bcd60e51b815260040161041a906117e9565b6007546001600160a01b03166323b872dd336040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260448101859052606401602060405180830381600087803b158015610daa57600080fd5b505af1158015610dbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de29190611746565b5081600954610df19190611896565b600955604080518381526000602082015233917f06239653922ac7bea6aa2b19dc486b9361821d37712eb796adfd38d81de278ca910160405180910390a250600180600655919050565b6005546001600160a01b03163314610e655760405162461bcd60e51b815260040161041a9061182a565b6001600160a01b038116610eca5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161041a565b61042c81611626565b600061271060085483610ee691906118ce565b610ef091906118ae565b92915050565b60085460408051918252602082018390527fcf3912ac25e0959b5ddfa4ca255e81306efc617583c3cd678d59d5de59b48480910160405180910390a1612710811115610f8e5760405162461bcd60e51b815260206004820152602160248201527f496e7374616e74506f6f6c3a20616d6f756e74206d6f7265207468616e206d616044820152600f60fb1b606482015260840161041a565b600855565b6001600160a01b038316610ff55760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b606482015260840161041a565b6001600160a01b0382166110565760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b606482015260840161041a565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b6001600160a01b03831661111c5760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b606482015260840161041a565b6001600160a01b03821661117e5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b606482015260840161041a565b6001600160a01b038316600090815260208190526040902054818110156111f65760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b606482015260840161041a565b6001600160a01b0380851660009081526020819052604080822085850390559185168152908120805484929061122d908490611896565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161127991815260200190565b60405180910390a350505050565b6001600160a01b0382166112dd5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640161041a565b80600260008282546112ef9190611896565b90915550506001600160a01b0382166000908152602081905260408120805483929061131c908490611896565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b806001600160a01b0381166113b95760405162461bcd60e51b8152602060048201526019602482015278496e7374616e74506f6f6c3a207a65726f206164647265737360381b604482015260640161041a565b600754604080516001600160a01b03928316815291841660208301527f36a4c08a38b736dcecb6c328dba61238529620e83ccb23db2cc43cd34ec26096910160405180910390a150600780546001600160a01b0319166001600160a01b0392909216919091179055565b806001600160a01b0381166114765760405162461bcd60e51b8152602060048201526019602482015278496e7374616e74506f6f6c3a207a65726f206164647265737360381b604482015260640161041a565b600a54604080516001600160a01b03928316815291841660208301527f12ad124e13af4c31364ad22aa74320e167b37f005dafb75d71a210c49da3629e910160405180910390a150600a80546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b0382166115405760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b606482015260840161041a565b6001600160a01b038216600090815260208190526040902054818110156115b45760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b606482015260840161041a565b6001600160a01b03831660009081526020819052604081208383039055600280548492906115e39084906118ed565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020016110ab565b600580546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b80356001600160a01b03811681146107df57600080fd5b6000602082840312156116a0578081fd5b6116a982611678565b9392505050565b600080604083850312156116c2578081fd5b6116cb83611678565b91506116d960208401611678565b90509250929050565b6000806000606084860312156116f6578081fd5b6116ff84611678565b925061170d60208501611678565b9150604084013590509250925092565b6000806040838503121561172f578182fd5b61173883611678565b946020939093013593505050565b600060208284031215611757578081fd5b815180151581146116a9578182fd5b600060208284031215611777578081fd5b5035919050565b60006020828403121561178f578081fd5b5051919050565b6000602080835283518082850152825b818110156117c2578581018301518582016040015282016117a6565b818111156117d35783604083870101525b50601f01601f1916929092016040019392505050565b60208082526021908201527f496e7374616e74506f6f6c3a20696e70757420616d6f756e74206973207a65726040820152606f60f81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b600082198211156118a9576118a961193f565b500190565b6000826118c957634e487b7160e01b81526012600452602481fd5b500490565b60008160001904831182151516156118e8576118e861193f565b500290565b6000828210156118ff576118ff61193f565b500390565b60028104600182168061191857607f821691505b6020821081141561193957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fdfea2646970667358221220a000cf66edb979f27e60ae59375f114508e8558756b83289dc5a45c0bee33eab64736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addLiquidity(address,uint256)": {
        "details": "@param _user          Address of user who receives instant pool token",
        "params": {
          "_amount": "Amount of liquidity that user wants to add"
        },
        "returns": {
          "_0": "Amount of instant pool token that user receives"
        }
      },
      "addLiquidityWithoutMint(uint256)": {
        "details": "Updates totalAddedTeleBTC (transferring teleBTC directly does not update it)",
        "params": {
          "_amount": "Amount of liquidity that user wants to add"
        },
        "returns": {
          "_0": "True if liquidity is added successfully"
        }
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. Requirements: - `spender` cannot be the zero address."
      },
      "availableTeleBTC()": {
        "returns": {
          "_0": "Available amount of teleBTC that can be borrowed"
        }
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "getLoan(address,uint256)": {
        "details": "Only instant router contract can call this",
        "params": {
          "_amount": "Amount of requested loan",
          "_user": "Address of user who wants loan"
        },
        "returns": {
          "_0": "Amount of given loan after reducing the fee"
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeLiquidity(address,uint256)": {
        "details": "@param _user                          Address of user who receives teleBTC",
        "params": {
          "_instantPoolTokenAmount": "Amount of instant pool token that is burnt"
        },
        "returns": {
          "_0": "Amount of teleBTC that user receives"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setInstantPercentageFee(uint256)": {
        "details": "Only current owner can call this",
        "params": {
          "_instantPercentageFee": "The new percentage fee"
        }
      },
      "setInstantRouter(address)": {
        "details": "Only owner can call this",
        "params": {
          "_instantRouter": "The new instant router contract address"
        }
      },
      "setTeleBTC(address)": {
        "details": "Only owner can call this",
        "params": {
          "_teleBTC": "The new teleBTC contract address"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "totalUnpaidLoan()": {
        "returns": {
          "_0": "Amount of teleBTC that has been borrowed but has not been paid back"
        }
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "AddLiquidity(address,uint256,uint256)": {
        "notice": "emits when some liquidity gets added to the pool               "
      },
      "CreatedInstantPool(address)": {
        "notice": "emits when an instant pool is created "
      },
      "InstantLoan(address,uint256,uint256)": {
        "notice": "Gets an instant loan from the contract"
      },
      "NewInstantPercentageFee(uint256,uint256)": {
        "notice": "Emits when changes made to instant percentage fee"
      },
      "NewInstantRouter(address,address)": {
        "notice": "Emits when changes made to instant router address"
      },
      "NewTeleBTC(address,address)": {
        "notice": "Emits when changes made to TeleBTC address"
      },
      "RemoveLiquidity(address,uint256,uint256)": {
        "notice": "Emits when some liquidity gets removed from the pool"
      }
    },
    "kind": "user",
    "methods": {
      "addLiquidity(address,uint256)": {
        "notice": "Adds liquidity to instant pool"
      },
      "addLiquidityWithoutMint(uint256)": {
        "notice": "Adds liquidity to instant pool without minting instant pool tokens"
      },
      "availableTeleBTC()": {
        "notice": "Gives available teleBTC amount"
      },
      "getLoan(address,uint256)": {
        "notice": "Gives loan to user"
      },
      "removeLiquidity(address,uint256)": {
        "notice": "Removes liquidity from instant pool"
      },
      "setInstantPercentageFee(uint256)": {
        "notice": "Changes instant loan fee"
      },
      "setInstantRouter(address)": {
        "notice": "Changes instant router contract address"
      },
      "setTeleBTC(address)": {
        "notice": "Changes teleBTC contract address"
      },
      "totalUnpaidLoan()": {
        "notice": "Gives the unpaid loans amount"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1679,
        "contract": "contracts/pools/InstantPool.sol:InstantPool",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1685,
        "contract": "contracts/pools/InstantPool.sol:InstantPool",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 1687,
        "contract": "contracts/pools/InstantPool.sol:InstantPool",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 1689,
        "contract": "contracts/pools/InstantPool.sol:InstantPool",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 1691,
        "contract": "contracts/pools/InstantPool.sol:InstantPool",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 807,
        "contract": "contracts/pools/InstantPool.sol:InstantPool",
        "label": "_owner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 1634,
        "contract": "contracts/pools/InstantPool.sol:InstantPool",
        "label": "_status",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 14677,
        "contract": "contracts/pools/InstantPool.sol:InstantPool",
        "label": "teleBTC",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 14680,
        "contract": "contracts/pools/InstantPool.sol:InstantPool",
        "label": "instantPercentageFee",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 14683,
        "contract": "contracts/pools/InstantPool.sol:InstantPool",
        "label": "totalAddedTeleBTC",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 14686,
        "contract": "contracts/pools/InstantPool.sol:InstantPool",
        "label": "instantRouter",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}