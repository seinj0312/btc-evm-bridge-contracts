{
  "address": "0x48FC85690677950bDB3F0bAB315733d7ceE709Bf",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_acceptableDelay",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_oracleNativeToken",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "exchangeRouter",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "exchangeConnector",
          "type": "address"
        }
      ],
      "name": "ExchangeConnectorAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "exchangeRouter",
          "type": "address"
        }
      ],
      "name": "ExchangeConnectorRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldAcceptableDelay",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newAcceptableDelay",
          "type": "uint256"
        }
      ],
      "name": "NewAcceptableDelay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "oldOracleNativeToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOracleNativeToken",
          "type": "address"
        }
      ],
      "name": "NewOracleNativeToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_firstToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_secondToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_priceProxyAddress",
          "type": "address"
        }
      ],
      "name": "SetPriceProxy",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "ChainlinkPriceProxy",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NATIVE_TOKEN",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptableDelay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_exchangeRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_exchangeConnector",
          "type": "address"
        }
      ],
      "name": "addExchangeConnector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_inputAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_inputDecimals",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_outputDecimals",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_inputToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_outputToken",
          "type": "address"
        }
      ],
      "name": "equivalentOutputAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_exchangeRouter",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_inputAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_inputToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_outputToken",
          "type": "address"
        }
      ],
      "name": "equivalentOutputAmountFromExchange",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_inputAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_inputDecimals",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_outputDecimals",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_inputToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_outputToken",
          "type": "address"
        }
      ],
      "name": "equivalentOutputAmountFromOracle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "_outputAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "exchangeConnector",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "exchangeRoutersList",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getExchangeRoutersListLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracleNativeToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_exchangeRouterIndex",
          "type": "uint256"
        }
      ],
      "name": "removeExchangeConnector",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_acceptableDelay",
          "type": "uint256"
        }
      ],
      "name": "setAcceptableDelay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_oracleNativeToken",
          "type": "address"
        }
      ],
      "name": "setOracleNativeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_firstToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_secondToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceProxyAddress",
          "type": "address"
        }
      ],
      "name": "setPriceProxy",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2397ccfc52b8b2e455ac0a76d29596a3e31b7dd4a0e476776e5173bbfa46fe84",
  "receipt": {
    "to": null,
    "from": "0x1DE72A1935Df9b4E02315BDa3C3cDbDF2A640583",
    "contractAddress": "0x48FC85690677950bDB3F0bAB315733d7ceE709Bf",
    "transactionIndex": 5,
    "gasUsed": "1572403",
    "logsBloom": "0x
    "blockHash": "0x7f1c16e1eb4c90bdb56044b05a37e082aa5caa7bdcd1eea2d3ebc593def5bc0f",
    "transactionHash": "0x2397ccfc52b8b2e455ac0a76d29596a3e31b7dd4a0e476776e5173bbfa46fe84",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 29207883,
        "transactionHash": "0x2397ccfc52b8b2e455ac0a76d29596a3e31b7dd4a0e476776e5173bbfa46fe84",
        "address": "0x48FC85690677950bDB3F0bAB315733d7ceE709Bf",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001de72a1935df9b4e02315bda3c3cdbdf2a640583"
        ],
        "data": "0x",
        "logIndex": 28,
        "blockHash": "0x7f1c16e1eb4c90bdb56044b05a37e082aa5caa7bdcd1eea2d3ebc593def5bc0f"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 29207883,
        "transactionHash": "0x2397ccfc52b8b2e455ac0a76d29596a3e31b7dd4a0e476776e5173bbfa46fe84",
        "address": "0x48FC85690677950bDB3F0bAB315733d7ceE709Bf",
        "topics": [
          "0x61fcc6fa9ba5b3ab5f72b919bc6324527ede6b5d73e12c63bbc4d4e0352e7002"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000003e8",
        "logIndex": 29,
        "blockHash": "0x7f1c16e1eb4c90bdb56044b05a37e082aa5caa7bdcd1eea2d3ebc593def5bc0f"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 29207883,
        "transactionHash": "0x2397ccfc52b8b2e455ac0a76d29596a3e31b7dd4a0e476776e5173bbfa46fe84",
        "address": "0x48FC85690677950bDB3F0bAB315733d7ceE709Bf",
        "topics": [
          "0x4a6beeb37b9f482406bcaf6e918424d6a3d27c6e726f2934b56e75e086bd0a79",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d8cf05e806099301dfb8505301770558e49053ff"
        ],
        "data": "0x",
        "logIndex": 30,
        "blockHash": "0x7f1c16e1eb4c90bdb56044b05a37e082aa5caa7bdcd1eea2d3ebc593def5bc0f"
      },
      {
        "transactionIndex": 5,
        "blockNumber": 29207883,
        "transactionHash": "0x2397ccfc52b8b2e455ac0a76d29596a3e31b7dd4a0e476776e5173bbfa46fe84",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000001de72a1935df9b4e02315bda3c3cdbdf2a640583",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000b2c260e34492000000000000000000000000000000000000000000000000447355d4988e7980e000000000000000000000000000000000000000000000af3a0df511f578aacfb000000000000000000000000000000000000000000000004472a31237ab34eee000000000000000000000000000000000000000000000af3a0ea7d4565bef61b",
        "logIndex": 31,
        "blockHash": "0x7f1c16e1eb4c90bdb56044b05a37e082aa5caa7bdcd1eea2d3ebc593def5bc0f"
      }
    ],
    "blockNumber": 29207883,
    "cumulativeGasUsed": "3105300",
    "status": 1,
    "byzantium": true
  },
  "args": [
    1000,
    "0xd8cf05e806099301dfB8505301770558e49053FF"
  ],
  "numDeployments": 1,
  "solcInputHash": "75de7cb825f3b6d07e1f1f6c98977d78",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_acceptableDelay\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_oracleNativeToken\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exchangeRouter\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exchangeConnector\",\"type\":\"address\"}],\"name\":\"ExchangeConnectorAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"exchangeRouter\",\"type\":\"address\"}],\"name\":\"ExchangeConnectorRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldAcceptableDelay\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newAcceptableDelay\",\"type\":\"uint256\"}],\"name\":\"NewAcceptableDelay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldOracleNativeToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOracleNativeToken\",\"type\":\"address\"}],\"name\":\"NewOracleNativeToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_firstToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_secondToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_priceProxyAddress\",\"type\":\"address\"}],\"name\":\"SetPriceProxy\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"ChainlinkPriceProxy\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NATIVE_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptableDelay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchangeRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_exchangeConnector\",\"type\":\"address\"}],\"name\":\"addExchangeConnector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_inputDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_outputDecimals\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_inputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_outputToken\",\"type\":\"address\"}],\"name\":\"equivalentOutputAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchangeRouter\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_inputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_outputToken\",\"type\":\"address\"}],\"name\":\"equivalentOutputAmountFromExchange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_inputDecimals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_outputDecimals\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_inputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_outputToken\",\"type\":\"address\"}],\"name\":\"equivalentOutputAmountFromOracle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_outputAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"exchangeConnector\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"exchangeRoutersList\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExchangeRoutersListLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracleNativeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_exchangeRouterIndex\",\"type\":\"uint256\"}],\"name\":\"removeExchangeConnector\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_acceptableDelay\",\"type\":\"uint256\"}],\"name\":\"setAcceptableDelay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oracleNativeToken\",\"type\":\"address\"}],\"name\":\"setOracleNativeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_firstToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_secondToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceProxyAddress\",\"type\":\"address\"}],\"name\":\"setPriceProxy\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addExchangeConnector(address,address)\":{\"details\":\"Only owner can call this\",\"params\":{\"_exchangeConnector\":\"New exchange connector contract address\",\"_exchangeRouter\":\"Exchange router contract address\"}},\"constructor\":{\"params\":{\"_acceptableDelay\":\"Maximum acceptable delay for data given from Chainlink\",\"_oracleNativeToken\":\"The address of the chainlink oracle for the native token\"}},\"equivalentOutputAmount(uint256,uint256,uint256,address,address)\":{\"details\":\"First we try to get the output amount from Chain Link                                 Only if the price is not available or out-of-date we will                                  reach to exchange routers\",\"params\":{\"_inputAmount\":\"Amount of the input token\",\"_inputDecimals\":\"Number of input token decimals\",\"_inputToken\":\"Address of the input token\",\"_outputDecimals\":\"Number of output token decimals\",\"_outputToken\":\"Address of output token\"},\"returns\":{\"_0\":\"Amount of the output token\"}},\"equivalentOutputAmountFromExchange(address,uint256,address,address)\":{\"details\":\"Input amount should have the same decimal as input token                                 Output amount has the same decimal as output token\",\"params\":{\"_exchangeRouter\":\"Address of the exchange router we are reading the price from\",\"_inputAmount\":\"Amount of the input token\",\"_inputToken\":\"Address of the input token\",\"_outputToken\":\"Address of output token\"},\"returns\":{\"_0\":\"Amount of the output token\"}},\"equivalentOutputAmountFromOracle(uint256,uint256,uint256,address,address)\":{\"details\":\"The oracle is ChainLink\",\"params\":{\"_inputAmount\":\"Amount of the input token\",\"_inputDecimals\":\"Number of input token decimals\",\"_inputToken\":\"Address of the input token\",\"_outputDecimals\":\"Number of output token decimals\",\"_outputToken\":\"Address of output token\"},\"returns\":{\"_outputAmount\":\"          Amount of the output token\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeExchangeConnector(uint256)\":{\"details\":\"Only owner can call this\",\"params\":{\"_exchangeRouterIndex\":\"The exchange router index in the list\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setAcceptableDelay(uint256)\":{\"details\":\"If oracle data has not been updated for a while,                              we will get data from exchange routers\",\"params\":{\"_acceptableDelay\":\"Maximum acceptable delay (in seconds)\"}},\"setPriceProxy(address,address,address)\":{\"details\":\"Only owner can call this                             This price proxy gives exchange rate of _firstToken/_secondToken                             Setting price proxy address to zero means that we remove it\",\"params\":{\"_firstToken\":\"Address of the first token\",\"_priceProxyAddress\":\"The address of the proxy price\",\"_secondToken\":\"Address of the second token\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"ChainlinkPriceProxy\":{\"params\":{\"_firstToken\":\"Address of the first token\",\"_secondToken\":\"Address of the second token\"},\"return\":\"Address of price proxy contract\"},\"exchangeConnector\":{\"params\":{\"_exchangeRouter\":\"Address of exchange router\"},\"return\":\"Address of exchange connector\"},\"exchangeRoutersList\":{\"params\":{\"_index\":\"Index of exchange router\"},\"return\":\"Address of exchange router\"}},\"version\":1},\"userdoc\":{\"events\":{\"ExchangeConnectorAdded(address,address)\":{\"notice\":\"Emits when new exchange router is added\"},\"ExchangeConnectorRemoved(address)\":{\"notice\":\"Emits when an exchange router is removed\"},\"NewAcceptableDelay(uint256,uint256)\":{\"notice\":\"Emits when changes made to acceptable delay\"},\"NewOracleNativeToken(address,address)\":{\"notice\":\"Emits when changes made to oracle native token\"},\"SetPriceProxy(address,address,address)\":{\"notice\":\"Emits when a price proxy is set\"}},\"kind\":\"user\",\"methods\":{\"ChainlinkPriceProxy(address,address)\":{\"notice\":\"Gives price proxy address for a pair of tokens\"},\"addExchangeConnector(address,address)\":{\"notice\":\"Adds an exchange connector\"},\"constructor\":{\"notice\":\"This contract is used to get relative price of two assets from Chainlink and available exchanges \"},\"equivalentOutputAmount(uint256,uint256,uint256,address,address)\":{\"notice\":\"Finds amount of output token that has same value as the input amount of the input token\"},\"equivalentOutputAmountFromExchange(address,uint256,address,address)\":{\"notice\":\"Finds amount of output token that has same value                                  as the input amount of the input token\"},\"equivalentOutputAmountFromOracle(uint256,uint256,uint256,address,address)\":{\"notice\":\"Finds amount of output token that has equal value                                 as the input amount of the input token\"},\"exchangeConnector(address)\":{\"notice\":\"Gives exchange connector address for an exchange router\"},\"exchangeRoutersList(uint256)\":{\"notice\":\"Gives address of an exchange router from exchange routers list\"},\"getExchangeRoutersListLength()\":{\"notice\":\"Getter for the length of exchange router list\"},\"removeExchangeConnector(uint256)\":{\"notice\":\"Removes an exchange connector\"},\"setAcceptableDelay(uint256)\":{\"notice\":\"Sets acceptable delay for oracle responses\"},\"setOracleNativeToken(address)\":{\"notice\":\"Sets oracle native token address\"},\"setPriceProxy(address,address,address)\":{\"notice\":\"Sets a price proxy for a pair of tokens\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracle/PriceOracle.sol\":\"PriceOracle\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n *\\n * Can be combined with {SafeMath} and {SignedSafeMath} to extend it to smaller types, by performing\\n * all math on `uint256` and `int256` and then downcasting.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        require(value <= type(uint224).max, \\\"SafeCast: value doesn't fit in 224 bits\\\");\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        require(value <= type(uint128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        require(value <= type(uint96).max, \\\"SafeCast: value doesn't fit in 96 bits\\\");\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        require(value <= type(uint64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        require(value <= type(uint32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        require(value <= type(uint16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        require(value <= type(uint8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        require(value >= 0, \\\"SafeCast: value must be positive\\\");\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt128(int256 value) internal pure returns (int128) {\\n        require(value >= type(int128).min && value <= type(int128).max, \\\"SafeCast: value doesn't fit in 128 bits\\\");\\n        return int128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt64(int256 value) internal pure returns (int64) {\\n        require(value >= type(int64).min && value <= type(int64).max, \\\"SafeCast: value doesn't fit in 64 bits\\\");\\n        return int64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt32(int256 value) internal pure returns (int32) {\\n        require(value >= type(int32).min && value <= type(int32).max, \\\"SafeCast: value doesn't fit in 32 bits\\\");\\n        return int32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt16(int256 value) internal pure returns (int16) {\\n        require(value >= type(int16).min && value <= type(int16).max, \\\"SafeCast: value doesn't fit in 16 bits\\\");\\n        return int16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function toInt8(int256 value) internal pure returns (int8) {\\n        require(value >= type(int8).min && value <= type(int8).max, \\\"SafeCast: value doesn't fit in 8 bits\\\");\\n        return int8(value);\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        require(value <= uint256(type(int256).max), \\\"SafeCast: value doesn't fit in an int256\\\");\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0x08d867b4c0bb782b9135691fa732b6846e0f133006489c3aa505abd1f6de56cb\",\"license\":\"MIT\"},\"contracts/connectors/interfaces/IExchangeConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\ninterface IExchangeConnector {\\n\\n    // Events\\n    \\n    event Swap(address[] path, uint[] amounts, address receiver);\\n\\n    // Read-only functions\\n\\n    function name() external view returns (string memory);\\n\\n    function exchangeRouter() external view returns (address);\\n\\n    function liquidityPoolFactory() external view returns (address);\\n\\n    function wrappedNativeToken() external view returns (address);\\n\\n    function getInputAmount(\\n        uint _outputAmount,\\n        address _inputToken,\\n        address _outputToken\\n    ) external returns (bool, uint);\\n\\n    function getOutputAmount(\\n        uint _inputAmount,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view returns (bool, uint);\\n\\n    // State-changing functions\\n\\n    function setExchangeRouter(address _exchangeRouter) external;\\n\\n    function setLiquidityPoolFactory() external;\\n\\n    function setWrappedNativeToken() external;\\n\\n    function swap(\\n        uint256 _inputAmount,\\n        uint256 _outputAmount,\\n        address[] memory _path,\\n        address _to,\\n        uint256 _deadline,\\n        bool _isFixedToken\\n    ) external returns (bool, uint[] memory);\\n\\n    function isPathValid(address[] memory _path) external view returns(bool);\\n}\",\"keccak256\":\"0x0eff6a4e5037bb973efd2af0f65e21aad868bab579a32bd571546a722af05452\",\"license\":\"MIT\"},\"contracts/oracle/PriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"./interfaces/IPriceOracle.sol\\\";\\nimport \\\"../connectors/interfaces/IExchangeConnector.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\n\\n\\ncontract PriceOracle is IPriceOracle, Ownable {\\n\\n    using SafeCast for uint;\\n\\n    modifier nonZeroAddress(address _address) {\\n        require(_address != address(0), \\\"PriceOracle: zero address\\\");\\n        _;\\n    }\\n\\n    // Public variables\\n    mapping(address => mapping (address => address)) public override ChainlinkPriceProxy; // Given two token addresses returns related Chainlink price proxy\\n    mapping(address => address) public override exchangeConnector; // Mapping from exchange router to exchange connector\\n    address[] public override exchangeRoutersList; // List of available exchange routers\\n    uint public override acceptableDelay;\\n    address public constant NATIVE_TOKEN = address(1); // ONE_ADDRESS is used for getting price of blockchain native token \\n    address public override oracleNativeToken;\\n\\n    /// @notice                         This contract is used to get relative price of two assets from Chainlink and available exchanges \\n    /// @param _acceptableDelay         Maximum acceptable delay for data given from Chainlink\\n    /// @param _oracleNativeToken       The address of the chainlink oracle for the native token\\n    constructor(uint _acceptableDelay,address _oracleNativeToken) {\\n        _setAcceptableDelay(_acceptableDelay);\\n        _setOracleNativeToken(_oracleNativeToken);\\n    }\\n\\n    function renounceOwnership() public virtual override onlyOwner {}\\n\\n    /// @notice                 Getter for the length of exchange router list\\n    function getExchangeRoutersListLength() public view override returns (uint) {\\n        return exchangeRoutersList.length;\\n    }\\n\\n    /// @notice                         Finds amount of output token that has same value as the input amount of the input token\\n    /// @dev                            First we try to get the output amount from Chain Link\\n    ///                                 Only if the price is not available or out-of-date we will \\n    ///                                 reach to exchange routers\\n    /// @param _inputAmount             Amount of the input token\\n    /// @param _inputDecimals           Number of input token decimals\\n    /// @param _outputDecimals          Number of output token decimals\\n    /// @param _inputToken              Address of the input token\\n    /// @param _outputToken             Address of output token\\n    /// @return                         Amount of the output token\\n    function equivalentOutputAmount(\\n        uint _inputAmount,\\n        uint _inputDecimals,\\n        uint _outputDecimals,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view nonZeroAddress(_inputToken) nonZeroAddress(_outputToken) override returns (uint) {\\n        // Gets output amount from oracle\\n        (bool result, uint outputAmount, uint timestamp) = _equivalentOutputAmountFromOracle(\\n            _inputAmount,\\n            _inputDecimals,\\n            _outputDecimals,\\n            _inputToken,\\n            _outputToken\\n        );\\n\\n        // Checks timestamp of the oracle result\\n        if (result == true && _abs(timestamp.toInt256() - block.timestamp.toInt256()) < acceptableDelay) {\\n            return outputAmount;\\n        } else {\\n            uint _totalAmount;\\n            uint _totalNumber;\\n\\n            // If Chainlink price is available but out-of-date, we still use it\\n            if (result == true) {\\n                _totalAmount = outputAmount;\\n                _totalNumber = 1;\\n            }\\n\\n            // Gets output amounts from exchange routers\\n            // note: we assume that the decimal of exchange returned result is _outputDecimals.\\n            for (uint i = 0; i < getExchangeRoutersListLength(); i++) {\\n                (result, outputAmount) = _equivalentOutputAmountFromExchange(\\n                    exchangeRoutersList[i],\\n                    _inputAmount,\\n                    _inputToken,\\n                    _outputToken\\n                );\\n\\n                if (result == true) {\\n                    _totalNumber = _totalNumber + 1;\\n                    _totalAmount = _totalAmount + outputAmount;\\n                }\\n            }\\n\\n            require(_totalNumber > 0, \\\"PriceOracle: no price feed is available\\\");\\n\\n            // Returns average of results from different sources\\n            return _totalAmount/_totalNumber;\\n        }\\n    }\\n\\n    /// @notice                         Finds amount of output token that has equal value\\n    ///                                 as the input amount of the input token\\n    /// @dev                            The oracle is ChainLink\\n    /// @param _inputAmount             Amount of the input token\\n    /// @param _inputDecimals           Number of input token decimals\\n    /// @param _outputDecimals          Number of output token decimals\\n    /// @param _inputToken              Address of the input token\\n    /// @param _outputToken             Address of output token\\n    /// @return _outputAmount           Amount of the output token\\n    function equivalentOutputAmountFromOracle(\\n        uint _inputAmount,\\n        uint _inputDecimals,\\n        uint _outputDecimals,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view nonZeroAddress(_inputToken) nonZeroAddress(_outputToken) override returns (uint _outputAmount) {\\n        bool result;\\n        (result, _outputAmount, /*timestamp*/) = _equivalentOutputAmountFromOracle(\\n            _inputAmount,\\n            _inputDecimals,\\n            _outputDecimals,\\n            _inputToken,\\n            _outputToken\\n        );\\n        require(result == true, \\\"PriceOracle: Price proxy does not exist\\\");\\n    }\\n\\n    /// @notice                         Finds amount of output token that has same value \\n    ///                                 as the input amount of the input token\\n    /// @dev                            Input amount should have the same decimal as input token\\n    ///                                 Output amount has the same decimal as output token\\n    /// @param _exchangeRouter          Address of the exchange router we are reading the price from\\n    /// @param _inputAmount             Amount of the input token\\n    /// @param _inputToken              Address of the input token\\n    /// @param _outputToken             Address of output token\\n    /// @return                         Amount of the output token\\n    function equivalentOutputAmountFromExchange(\\n        address _exchangeRouter,\\n        uint _inputAmount,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view nonZeroAddress(_inputToken) nonZeroAddress(_outputToken) override returns (uint) {\\n        (bool result, uint outputAmount) = _equivalentOutputAmountFromExchange(\\n            _exchangeRouter,\\n            _inputAmount,\\n            _inputToken,\\n            _outputToken\\n        );\\n        require(result == true, \\\"PriceOracle: Pair does not exist on exchange\\\");\\n        return outputAmount;\\n    }\\n\\n    /// @notice                    Adds an exchange connector\\n    /// @dev                       Only owner can call this\\n    /// @param _exchangeRouter     Exchange router contract address\\n    /// @param _exchangeConnector  New exchange connector contract address\\n    function addExchangeConnector(\\n        address _exchangeRouter, \\n        address _exchangeConnector\\n    ) external nonZeroAddress(_exchangeRouter) nonZeroAddress(_exchangeConnector) override onlyOwner {\\n        require(exchangeConnector[_exchangeRouter] == address(0), \\\"PriceOracle: exchange router already exists\\\");\\n        exchangeRoutersList.push(_exchangeRouter);\\n        exchangeConnector[_exchangeRouter] = _exchangeConnector;\\n        emit ExchangeConnectorAdded(_exchangeRouter, _exchangeConnector);\\n    }\\n\\n    /// @notice                       Removes an exchange connector\\n    /// @dev                          Only owner can call this\\n    /// @param _exchangeRouterIndex   The exchange router index in the list\\n    function removeExchangeConnector(uint _exchangeRouterIndex) external override onlyOwner {\\n        require(_exchangeRouterIndex < exchangeRoutersList.length, \\\"PriceOracle: Index is out of bound\\\");\\n        address exchangeRouterAddress = exchangeRoutersList[_exchangeRouterIndex];\\n        _removeElementFromExchangeRoutersList(_exchangeRouterIndex);\\n        exchangeConnector[exchangeRouterAddress] = address(0);\\n        emit ExchangeConnectorRemoved(exchangeRouterAddress);\\n    }\\n\\n    /// @notice                     Sets a price proxy for a pair of tokens\\n    /// @dev                        Only owner can call this\\n    ///                             This price proxy gives exchange rate of _firstToken/_secondToken\\n    ///                             Setting price proxy address to zero means that we remove it\\n    /// @param _firstToken          Address of the first token\\n    /// @param _secondToken         Address of the second token\\n    /// @param _priceProxyAddress   The address of the proxy price\\n    function setPriceProxy(\\n        address _firstToken, \\n        address _secondToken, \\n        address _priceProxyAddress\\n    ) external nonZeroAddress(_firstToken) nonZeroAddress(_secondToken) override onlyOwner {\\n        ChainlinkPriceProxy[_firstToken][_secondToken] = _priceProxyAddress;\\n        emit SetPriceProxy(_firstToken, _secondToken, _priceProxyAddress);\\n    }\\n\\n    /// @notice                     Sets acceptable delay for oracle responses\\n    /// @dev                        If oracle data has not been updated for a while, \\n    ///                             we will get data from exchange routers\\n    /// @param _acceptableDelay     Maximum acceptable delay (in seconds)\\n    function setAcceptableDelay(uint _acceptableDelay) external override onlyOwner {\\n        _setAcceptableDelay(_acceptableDelay);\\n    }\\n\\n    /// @notice                     Sets oracle native token address\\n    function setOracleNativeToken(address _oracleNativeToken) external override onlyOwner {\\n       _setOracleNativeToken(_oracleNativeToken);\\n    }\\n\\n    /// @notice                     Internal setter for acceptable delay for oracle responses\\n    /// @dev                        If oracle data has not been updated for a while, \\n    ///                             we will get data from exchange routers\\n    /// @param _acceptableDelay     Maximum acceptable delay (in seconds)\\n    function _setAcceptableDelay(uint _acceptableDelay) private {\\n        emit NewAcceptableDelay(acceptableDelay, _acceptableDelay);\\n        require(\\n            _acceptableDelay > 0,\\n            \\\"PriceOracle: zero amount\\\"\\n        );\\n        acceptableDelay = _acceptableDelay;\\n    }\\n\\n    /// @notice                     Internal setter for oracle native token address\\n    function _setOracleNativeToken(address _oracleNativeToken) private nonZeroAddress(_oracleNativeToken) {\\n        emit NewOracleNativeToken(oracleNativeToken, _oracleNativeToken);\\n        oracleNativeToken = _oracleNativeToken;\\n    }\\n\\n    /// @notice                         Finds amount of output token that has same value \\n    ///                                 as the input amount of the input token\\n    /// @param _exchangeRouter          Address of the exchange we are reading the price from\\n    /// @param _inputAmount             Amount of the input token\\n    /// @param _inputToken              Address of the input token\\n    /// @param _outputToken             Address of output token\\n    /// @return _result                 True if getting amount was successful\\n    /// @return _outputAmount           Amount of the output token\\n    function _equivalentOutputAmountFromExchange(\\n        address _exchangeRouter,\\n        uint _inputAmount,\\n        address _inputToken,\\n        address _outputToken\\n    ) private view returns (bool _result, uint _outputAmount) {\\n        if (_inputToken == NATIVE_TOKEN) {\\n            // note: different exchanges may use different wrapped native token versions\\n            address wrappedNativeToken = IExchangeConnector(exchangeConnector[_exchangeRouter]).wrappedNativeToken();\\n\\n            (_result, _outputAmount) = IExchangeConnector(exchangeConnector[_exchangeRouter]).getOutputAmount(\\n                _inputAmount,\\n                wrappedNativeToken,\\n                _outputToken\\n            );\\n        } else if (_outputToken == NATIVE_TOKEN) {\\n            // note: different exchanges may use different wrapped native token versions\\n            address wrappedNativeToken = IExchangeConnector(exchangeConnector[_exchangeRouter]).wrappedNativeToken();\\n\\n            (_result, _outputAmount) = IExchangeConnector(exchangeConnector[_exchangeRouter]).getOutputAmount(\\n                _inputAmount,\\n                _inputToken,\\n                wrappedNativeToken\\n            );\\n        } else {\\n            (_result, _outputAmount) = IExchangeConnector(exchangeConnector[_exchangeRouter]).getOutputAmount(\\n                _inputAmount,\\n                _inputToken,\\n                _outputToken\\n            );\\n        }\\n\\n    }\\n\\n    /// @notice                         Finds amount of output token that is equal as the input amount of the input token\\n    /// @dev                            The oracle is ChainLink\\n    /// @param _inputAmount             Amount of the input token\\n    /// @param _inputDecimals           Number of input token decimals\\n    /// @param _outputDecimals          Number of output token decimals\\n    /// @param _inputToken              Address of the input token\\n    /// @param _outputToken             Address of output token\\n    /// @return _result                 True if getting amount was successful\\n    /// @return _outputAmount           Amount of the output token\\n    /// @return _timestamp              Timestamp of the result\\n    function _equivalentOutputAmountFromOracle(\\n        uint _inputAmount,\\n        uint _inputDecimals,\\n        uint _outputDecimals,\\n        address _inputToken,\\n        address _outputToken\\n    ) private view returns (bool _result, uint _outputAmount, uint _timestamp) {\\n        uint decimals;\\n        int price;\\n\\n        if (_inputToken == NATIVE_TOKEN) {\\n            _inputToken = oracleNativeToken;\\n        }\\n\\n        if (_outputToken == NATIVE_TOKEN) {\\n            _outputToken = oracleNativeToken;\\n        }\\n\\n        if (ChainlinkPriceProxy[_inputToken][_outputToken] != address(0)) {\\n            // Gets price of _inputToken/_outputToken\\n            (\\n            /*uint80 roundID*/,\\n            price,\\n            /*uint startedAt*/,\\n            _timestamp,\\n            /*uint80 answeredInRound*/\\n            ) = AggregatorV3Interface(ChainlinkPriceProxy[_inputToken][_outputToken]).latestRoundData();\\n\\n            // Gets number of decimals\\n            decimals = AggregatorV3Interface(ChainlinkPriceProxy[_inputToken][_outputToken]).decimals();\\n\\n            require(price != 0, \\\"PriceOracle: zero price\\\");\\n\\n            // note: to make inside of power parentheses greater than zero, we add them with one\\n            _outputAmount = uint(price)*_inputAmount*(10**(_outputDecimals + 1))/(10**(decimals + _inputDecimals + 1));\\n\\n            _result = true;\\n        } else if (ChainlinkPriceProxy[_outputToken][_inputToken] != address(0)) {\\n            // Gets price of _outputToken/_inputToken\\n            (\\n            /*uint80 roundID*/,\\n            price,\\n            /*uint startedAt*/,\\n            _timestamp,\\n            /*uint80 answeredInRound*/\\n            ) = AggregatorV3Interface(ChainlinkPriceProxy[_outputToken][_inputToken]).latestRoundData();\\n\\n            // Gets number of decimals\\n            decimals = AggregatorV3Interface(ChainlinkPriceProxy[_outputToken][_inputToken]).decimals();\\n            \\n            require(price != 0, \\\"PriceOracle: zero price\\\");\\n\\n            // note: to make inside of power parentheses greater than zero, we add them with one\\n            _outputAmount = (10**(decimals + _outputDecimals + 1))*_inputAmount/(10**(_inputDecimals + 1)*uint(price));\\n            \\n            _result = true;\\n        } else {\\n            return (false, 0, 0);\\n        }\\n\\n    }\\n\\n    /// @notice             Removes an element of excahngeRouterList\\n    /// @dev                Deletes and shifts the array\\n    /// @param _index       Index of the element that will be deleted\\n    function _removeElementFromExchangeRoutersList(uint _index) private {\\n        exchangeRoutersList[_index] = exchangeRoutersList[exchangeRoutersList.length - 1];\\n        exchangeRoutersList.pop();\\n    }\\n\\n    /// @notice             Returns absolute value\\n    function _abs(int _value) private pure returns (uint) {\\n        return _value >= 0 ? uint(_value) : uint(-_value);\\n    }\\n\\n}\",\"keccak256\":\"0xdbaa3ba4a50b04d14ab3b838512ec467d9b8a86425dd25ed97948cbbfa8b47f1\",\"license\":\"MIT\"},\"contracts/oracle/interfaces/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\ninterface IPriceOracle {\\n\\n    /// @notice                     Emits when new exchange router is added\\n    /// @param exchangeRouter       Address of new exchange router\\n    /// @param exchangeConnector    Address of exchange connector\\n    event ExchangeConnectorAdded(address indexed exchangeRouter, address indexed exchangeConnector);\\n\\n    /// @notice                     Emits when an exchange router is removed\\n    /// @param exchangeRouter       Address of removed exchange router\\n    event ExchangeConnectorRemoved(address indexed exchangeRouter);\\n\\n    /// @notice                     Emits when a price proxy is set\\n    /// @param _firstToken          Address of the first token\\n    /// @param _secondToken         Address of the second token\\n    /// @param _priceProxyAddress   Address of price proxy contract\\n    event SetPriceProxy(address indexed _firstToken, address indexed _secondToken, address indexed _priceProxyAddress);\\n\\n    /// @notice                     Emits when changes made to acceptable delay\\n\\tevent NewAcceptableDelay(uint oldAcceptableDelay, uint newAcceptableDelay);\\n\\n    /// @notice                     Emits when changes made to oracle native token\\n\\tevent NewOracleNativeToken(address indexed oldOracleNativeToken, address indexed newOracleNativeToken);\\n\\n    // Read-only functions\\n    \\n    /// @notice                     Gives price proxy address for a pair of tokens\\n    /// @param _firstToken          Address of the first token\\n    /// @param _secondToken         Address of the second token\\n    /// @return                     Address of price proxy contract\\n    function ChainlinkPriceProxy(address _firstToken, address _secondToken) external view returns (address);\\n\\n    /// @notice                     Gives exchange connector address for an exchange router\\n    /// @param _exchangeRouter      Address of exchange router\\n    /// @return                     Address of exchange connector\\n    function exchangeConnector(address _exchangeRouter) external view returns (address);\\n\\n    /// @notice                     Gives address of an exchange router from exchange routers list\\n    /// @param _index               Index of exchange router\\n    /// @return                     Address of exchange router\\n    function exchangeRoutersList(uint _index) external view returns (address);\\n\\n    function getExchangeRoutersListLength() external view returns (uint);\\n\\n    function acceptableDelay() external view returns (uint);\\n\\n    function oracleNativeToken() external view returns (address);\\n\\n    function equivalentOutputAmount(\\n        uint _inputAmount,\\n        uint _inputDecimals,\\n        uint _outputDecimals,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view returns (uint);\\n\\n    function equivalentOutputAmountFromOracle(\\n        uint _inputAmount,\\n        uint _inputDecimals,\\n        uint _outputDecimals,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view returns (uint);\\n\\n    function equivalentOutputAmountFromExchange(\\n        address _exchangeRouter,\\n        uint _inputAmount,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view returns (uint);\\n    \\n    // State-changing functions\\n    \\n    function addExchangeConnector(address _exchangeRouter, address _exchangeConnector) external;\\n\\n    function removeExchangeConnector(uint _exchangeRouterIndex) external;\\n\\n    function setPriceProxy(address _firstToken, address _secondToken, address _priceProxyAddress) external;\\n\\n    function setAcceptableDelay(uint _acceptableDelay) external;\\n\\n    function setOracleNativeToken(address _oracleNativeToken) external;\\n}\",\"keccak256\":\"0xa0a0d9451d1d9c351fe4035467bda81e4837bff05f55a28c876f255f5d7e80bc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001c4e38038062001c4e8339810160408190526200003491620001fa565b6200003f336200005d565b6200004a82620000ad565b620000558162000144565b505062000237565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60045460408051918252602082018390527f61fcc6fa9ba5b3ab5f72b919bc6324527ede6b5d73e12c63bbc4d4e0352e7002910160405180910390a1600081116200013f5760405162461bcd60e51b815260206004820152601860248201527f50726963654f7261636c653a207a65726f20616d6f756e74000000000000000060448201526064015b60405180910390fd5b600455565b806001600160a01b0381166200019d5760405162461bcd60e51b815260206004820152601960248201527f50726963654f7261636c653a207a65726f206164647265737300000000000000604482015260640162000136565b6005546040516001600160a01b038085169216907f4a6beeb37b9f482406bcaf6e918424d6a3d27c6e726f2934b56e75e086bd0a7990600090a350600580546001600160a01b0319166001600160a01b0392909216919091179055565b600080604083850312156200020d578182fd5b825160208401519092506001600160a01b03811681146200022c578182fd5b809150509250929050565b611a0780620002476000396000f3fe608060405234801561001057600080fd5b50600436106101165760003560e01c80638b2c3c0d116100a2578063de03d10d11610071578063de03d10d14610254578063e70f330314610267578063f2e0b6a51461027a578063f2fde38b1461028d578063f4fe5e6f146102a057610116565b80638b2c3c0d146101f45780638da5cb5b14610207578063ab44048414610218578063d86faec71461022b57610116565b806331f7d964116100e957806331f7d9641461017c5780636fbd06571461019c578063715018a6146101af5780638593c3d0146101b7578063862efd4b146101eb57610116565b806304c955441461011b578063092307da1461013057806316fac92a146101565780631d4a7b2114610169575b600080fd5b61012e61012936600461152c565b6102a8565b005b61014361013e3660046115ed565b6102e7565b6040519081526020015b60405180910390f35b610143610164366004611688565b6103be565b61012e610177366004611670565b610589565b610184600181565b6040516001600160a01b03909116815260200161014d565b600554610184906001600160a01b031681565b61012e6105bc565b6101846101c536600461156b565b60016020908152600092835260408084209091529082529020546001600160a01b031681565b61014360045481565b61012e6102023660046115a3565b6105e8565b6000546001600160a01b0316610184565b610143610226366004611688565b6106c9565b61018461023936600461152c565b6002602052600090815260409020546001600160a01b031681565b61012e610262366004611670565b61079b565b610184610275366004611670565b6108b4565b61012e61028836600461156b565b6108de565b61012e61029b36600461152c565b610a68565b600354610143565b6000546001600160a01b031633146102db5760405162461bcd60e51b81526004016102d290611784565b60405180910390fd5b6102e481610b00565b50565b6000826001600160a01b0381166103105760405162461bcd60e51b81526004016102d29061174d565b826001600160a01b0381166103375760405162461bcd60e51b81526004016102d29061174d565b60008061034689898989610b84565b90925090506001821515146103b25760405162461bcd60e51b815260206004820152602c60248201527f50726963654f7261636c653a205061697220646f6573206e6f7420657869737460448201526b206f6e2065786368616e676560a01b60648201526084016102d2565b98975050505050505050565b6000826001600160a01b0381166103e75760405162461bcd60e51b81526004016102d29061174d565b826001600160a01b03811661040e5760405162461bcd60e51b81526004016102d29061174d565b60008060006104208b8b8b8b8b610e63565b91945092509050600183151514801561045d575060045461045b610443426112cc565b61044c846112cc565b610456919061191b565b61133e565b105b1561046c5750935061057e9050565b60008060018515151415610481575082905060015b60005b60035481101561050b576104cf600382815481106104b257634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03168f8d8d610b84565b9096509450600186151514156104f9576104ea8260016117b9565b91506104f685846117b9565b92505b8061050381611971565b915050610484565b506000811161056c5760405162461bcd60e51b815260206004820152602760248201527f50726963654f7261636c653a206e6f207072696365206665656420697320617660448201526661696c61626c6560c81b60648201526084016102d2565b61057681836117d1565b975050505050505b505095945050505050565b6000546001600160a01b031633146105b35760405162461bcd60e51b81526004016102d290611784565b6102e481611357565b6000546001600160a01b031633146105e65760405162461bcd60e51b81526004016102d290611784565b565b826001600160a01b03811661060f5760405162461bcd60e51b81526004016102d29061174d565b826001600160a01b0381166106365760405162461bcd60e51b81526004016102d29061174d565b6000546001600160a01b031633146106605760405162461bcd60e51b81526004016102d290611784565b6001600160a01b038581166000818152600160209081526040808320898616808552925280832080546001600160a01b0319169589169586179055519092917f6abcc480f7f47354dfac3d61ab87879f4acf371d04837e85d7b977ab6aa2b4e091a45050505050565b6000826001600160a01b0381166106f25760405162461bcd60e51b81526004016102d29061174d565b826001600160a01b0381166107195760405162461bcd60e51b81526004016102d29061174d565b60006107288989898989610e63565b509450905060018115151461078f5760405162461bcd60e51b815260206004820152602760248201527f50726963654f7261636c653a2050726963652070726f787920646f6573206e6f6044820152661d08195e1a5cdd60ca1b60648201526084016102d2565b50505095945050505050565b6000546001600160a01b031633146107c55760405162461bcd60e51b81526004016102d290611784565b60035481106108215760405162461bcd60e51b815260206004820152602260248201527f50726963654f7261636c653a20496e646578206973206f7574206f6620626f756044820152611b9960f21b60648201526084016102d2565b60006003828154811061084457634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03169050610864826113e8565b6001600160a01b03811660008181526002602052604080822080546001600160a01b0319169055517fd4c309ca8e170bf136bae67942030e0ac2e3992e9ea36936196c38be6d67a47d9190a25050565b600381815481106108c457600080fd5b6000918252602090912001546001600160a01b0316905081565b816001600160a01b0381166109055760405162461bcd60e51b81526004016102d29061174d565b816001600160a01b03811661092c5760405162461bcd60e51b81526004016102d29061174d565b6000546001600160a01b031633146109565760405162461bcd60e51b81526004016102d290611784565b6001600160a01b0384811660009081526002602052604090205416156109d25760405162461bcd60e51b815260206004820152602b60248201527f50726963654f7261636c653a2065786368616e676520726f7574657220616c7260448201526a656164792065786973747360a81b60648201526084016102d2565b60038054600181019091557fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b038087166001600160a01b03199283168117909355600083815260026020526040808220805493891693909416831790935591519092917f19dd93282347163d78a1e91a8278207144203887305da5724821079ffcc138ad91a350505050565b6000546001600160a01b03163314610a925760405162461bcd60e51b81526004016102d290611784565b6001600160a01b038116610af75760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102d2565b6102e4816114c2565b806001600160a01b038116610b275760405162461bcd60e51b81526004016102d29061174d565b6005546040516001600160a01b038085169216907f4a6beeb37b9f482406bcaf6e918424d6a3d27c6e726f2934b56e75e086bd0a7990600090a350600580546001600160a01b0319166001600160a01b0392909216919091179055565b6000806001600160a01b03841660011415610ccc576001600160a01b0380871660009081526002602090815260408083205481516317fcb39b60e01b81529151939416926317fcb39b92600480840193919291829003018186803b158015610beb57600080fd5b505afa158015610bff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c23919061154f565b6001600160a01b038881166000908152600260205260409081902054905163df71d7f360e01b8152600481018a905283831660248201528783166044820152929350169063df71d7f3906064015b604080518083038186803b158015610c8857600080fd5b505afa158015610c9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc0919061163f565b9093509150610e5a9050565b6001600160a01b03831660011415610dba576001600160a01b0380871660009081526002602090815260408083205481516317fcb39b60e01b81529151939416926317fcb39b92600480840193919291829003018186803b158015610d3057600080fd5b505afa158015610d44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d68919061154f565b6001600160a01b038881166000908152600260205260409081902054905163df71d7f360e01b8152600481018a905288831660248201528383166044820152929350169063df71d7f390606401610c71565b6001600160a01b038681166000908152600260205260409081902054905163df71d7f360e01b8152600481018890528683166024820152858316604482015291169063df71d7f390606401604080518083038186803b158015610e1c57600080fd5b505afa158015610e30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e54919061163f565b90925090505b94509492505050565b6000808080806001600160a01b03871660011415610e8a576005546001600160a01b031696505b6001600160a01b03861660011415610eab576005546001600160a01b031695505b6001600160a01b0387811660009081526001602090815260408083208a8516845290915290205416156110ba576001600160a01b0380881660009081526001602090815260408083208a8516845290915290819020548151633fabe5a360e21b8152915192169163feaf968c9160048082019260a092909190829003018186803b158015610f3857600080fd5b505afa158015610f4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7091906116dd565b506001600160a01b03808c1660009081526001602090815260408083208e8516845282529182902054825163313ce56760e01b81529251949a5095975094909116945063313ce5679360048083019450909291829003018186803b158015610fd757600080fd5b505afa158015610feb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100f919061172c565b60ff1691508061105b5760405162461bcd60e51b815260206004820152601760248201527650726963654f7261636c653a207a65726f20707269636560481b60448201526064016102d2565b61106589836117b9565b6110709060016117b9565b61107b90600a61182e565b6110868960016117b9565b61109190600a61182e565b61109b8c846118fc565b6110a591906118fc565b6110af91906117d1565b9350600194506112be565b6001600160a01b0386811660009081526001602090815260408083208b8516845290915290205416156112ac576001600160a01b0380871660009081526001602090815260408083208b8516845290915290819020548151633fabe5a360e21b8152915192169163feaf968c9160048082019260a092909190829003018186803b15801561114757600080fd5b505afa15801561115b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117f91906116dd565b506001600160a01b03808b1660009081526001602090815260408083208f8516845282529182902054825163313ce56760e01b81529251949a5095975094909116945063313ce5679360048083019450909291829003018186803b1580156111e657600080fd5b505afa1580156111fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121e919061172c565b60ff1691508061126a5760405162461bcd60e51b815260206004820152601760248201527650726963654f7261636c653a207a65726f20707269636560481b60448201526064016102d2565b806112768a60016117b9565b61128190600a61182e565b61128b91906118fc565b8a6112968a856117b9565b6112a19060016117b9565b61109b90600a61182e565b600080600094509450945050506112c1565b50505b955095509592505050565b60006001600160ff1b038211156113365760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b60648201526084016102d2565b50805b919050565b600080821215611336576113518261198c565b92915050565b60045460408051918252602082018390527f61fcc6fa9ba5b3ab5f72b919bc6324527ede6b5d73e12c63bbc4d4e0352e7002910160405180910390a1600081116113e35760405162461bcd60e51b815260206004820152601860248201527f50726963654f7261636c653a207a65726f20616d6f756e74000000000000000060448201526064016102d2565b600455565b600380546113f89060019061195a565b8154811061141657634e487b7160e01b600052603260045260246000fd5b600091825260209091200154600380546001600160a01b03909216918390811061145057634e487b7160e01b600052603260045260246000fd5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600380548061149d57634e487b7160e01b600052603160045260246000fd5b600082815260209020810160001990810180546001600160a01b031916905501905550565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b805169ffffffffffffffffffff8116811461133957600080fd5b60006020828403121561153d578081fd5b8135611548816119bc565b9392505050565b600060208284031215611560578081fd5b8151611548816119bc565b6000806040838503121561157d578081fd5b8235611588816119bc565b91506020830135611598816119bc565b809150509250929050565b6000806000606084860312156115b7578081fd5b83356115c2816119bc565b925060208401356115d2816119bc565b915060408401356115e2816119bc565b809150509250925092565b60008060008060808587031215611602578081fd5b843561160d816119bc565b9350602085013592506040850135611624816119bc565b91506060850135611634816119bc565b939692955090935050565b60008060408385031215611651578182fd5b82518015158114611660578283fd5b6020939093015192949293505050565b600060208284031215611681578081fd5b5035919050565b600080600080600060a0868803121561169f578081fd5b85359450602086013593506040860135925060608601356116bf816119bc565b915060808601356116cf816119bc565b809150509295509295909350565b600080600080600060a086880312156116f4578081fd5b6116fd86611512565b945060208601519350604086015192506060860151915061172060808701611512565b90509295509295909350565b60006020828403121561173d578081fd5b815160ff81168114611548578182fd5b60208082526019908201527f50726963654f7261636c653a207a65726f206164647265737300000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600082198211156117cc576117cc6119a6565b500190565b6000826117ec57634e487b7160e01b81526012600452602481fd5b500490565b80825b60018086116118035750610e5a565b818704821115611815576118156119a6565b8086161561182257918102915b9490941c9380026117f4565b6000611548600019848460008261184757506001611548565b8161185457506000611548565b816001811461186a5760028114611874576118a1565b6001915050611548565b60ff841115611885576118856119a6565b6001841b91508482111561189b5761189b6119a6565b50611548565b5060208310610133831016604e8410600b84101617156118d4575081810a838111156118cf576118cf6119a6565b611548565b6118e184848460016117f1565b8086048211156118f3576118f36119a6565b02949350505050565b6000816000190483118215151615611916576119166119a6565b500290565b60008083128015600160ff1b850184121615611939576119396119a6565b6001600160ff1b0384018313811615611954576119546119a6565b50500390565b60008282101561196c5761196c6119a6565b500390565b6000600019821415611985576119856119a6565b5060010190565b6000600160ff1b8214156119a2576119a26119a6565b0390565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146102e457600080fdfea26469706673582212201cd43b98f94bf9379314e373a946070d93153ff4df4f39a7ba38e014ed9653db64736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101165760003560e01c80638b2c3c0d116100a2578063de03d10d11610071578063de03d10d14610254578063e70f330314610267578063f2e0b6a51461027a578063f2fde38b1461028d578063f4fe5e6f146102a057610116565b80638b2c3c0d146101f45780638da5cb5b14610207578063ab44048414610218578063d86faec71461022b57610116565b806331f7d964116100e957806331f7d9641461017c5780636fbd06571461019c578063715018a6146101af5780638593c3d0146101b7578063862efd4b146101eb57610116565b806304c955441461011b578063092307da1461013057806316fac92a146101565780631d4a7b2114610169575b600080fd5b61012e61012936600461152c565b6102a8565b005b61014361013e3660046115ed565b6102e7565b6040519081526020015b60405180910390f35b610143610164366004611688565b6103be565b61012e610177366004611670565b610589565b610184600181565b6040516001600160a01b03909116815260200161014d565b600554610184906001600160a01b031681565b61012e6105bc565b6101846101c536600461156b565b60016020908152600092835260408084209091529082529020546001600160a01b031681565b61014360045481565b61012e6102023660046115a3565b6105e8565b6000546001600160a01b0316610184565b610143610226366004611688565b6106c9565b61018461023936600461152c565b6002602052600090815260409020546001600160a01b031681565b61012e610262366004611670565b61079b565b610184610275366004611670565b6108b4565b61012e61028836600461156b565b6108de565b61012e61029b36600461152c565b610a68565b600354610143565b6000546001600160a01b031633146102db5760405162461bcd60e51b81526004016102d290611784565b60405180910390fd5b6102e481610b00565b50565b6000826001600160a01b0381166103105760405162461bcd60e51b81526004016102d29061174d565b826001600160a01b0381166103375760405162461bcd60e51b81526004016102d29061174d565b60008061034689898989610b84565b90925090506001821515146103b25760405162461bcd60e51b815260206004820152602c60248201527f50726963654f7261636c653a205061697220646f6573206e6f7420657869737460448201526b206f6e2065786368616e676560a01b60648201526084016102d2565b98975050505050505050565b6000826001600160a01b0381166103e75760405162461bcd60e51b81526004016102d29061174d565b826001600160a01b03811661040e5760405162461bcd60e51b81526004016102d29061174d565b60008060006104208b8b8b8b8b610e63565b91945092509050600183151514801561045d575060045461045b610443426112cc565b61044c846112cc565b610456919061191b565b61133e565b105b1561046c5750935061057e9050565b60008060018515151415610481575082905060015b60005b60035481101561050b576104cf600382815481106104b257634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03168f8d8d610b84565b9096509450600186151514156104f9576104ea8260016117b9565b91506104f685846117b9565b92505b8061050381611971565b915050610484565b506000811161056c5760405162461bcd60e51b815260206004820152602760248201527f50726963654f7261636c653a206e6f207072696365206665656420697320617660448201526661696c61626c6560c81b60648201526084016102d2565b61057681836117d1565b975050505050505b505095945050505050565b6000546001600160a01b031633146105b35760405162461bcd60e51b81526004016102d290611784565b6102e481611357565b6000546001600160a01b031633146105e65760405162461bcd60e51b81526004016102d290611784565b565b826001600160a01b03811661060f5760405162461bcd60e51b81526004016102d29061174d565b826001600160a01b0381166106365760405162461bcd60e51b81526004016102d29061174d565b6000546001600160a01b031633146106605760405162461bcd60e51b81526004016102d290611784565b6001600160a01b038581166000818152600160209081526040808320898616808552925280832080546001600160a01b0319169589169586179055519092917f6abcc480f7f47354dfac3d61ab87879f4acf371d04837e85d7b977ab6aa2b4e091a45050505050565b6000826001600160a01b0381166106f25760405162461bcd60e51b81526004016102d29061174d565b826001600160a01b0381166107195760405162461bcd60e51b81526004016102d29061174d565b60006107288989898989610e63565b509450905060018115151461078f5760405162461bcd60e51b815260206004820152602760248201527f50726963654f7261636c653a2050726963652070726f787920646f6573206e6f6044820152661d08195e1a5cdd60ca1b60648201526084016102d2565b50505095945050505050565b6000546001600160a01b031633146107c55760405162461bcd60e51b81526004016102d290611784565b60035481106108215760405162461bcd60e51b815260206004820152602260248201527f50726963654f7261636c653a20496e646578206973206f7574206f6620626f756044820152611b9960f21b60648201526084016102d2565b60006003828154811061084457634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03169050610864826113e8565b6001600160a01b03811660008181526002602052604080822080546001600160a01b0319169055517fd4c309ca8e170bf136bae67942030e0ac2e3992e9ea36936196c38be6d67a47d9190a25050565b600381815481106108c457600080fd5b6000918252602090912001546001600160a01b0316905081565b816001600160a01b0381166109055760405162461bcd60e51b81526004016102d29061174d565b816001600160a01b03811661092c5760405162461bcd60e51b81526004016102d29061174d565b6000546001600160a01b031633146109565760405162461bcd60e51b81526004016102d290611784565b6001600160a01b0384811660009081526002602052604090205416156109d25760405162461bcd60e51b815260206004820152602b60248201527f50726963654f7261636c653a2065786368616e676520726f7574657220616c7260448201526a656164792065786973747360a81b60648201526084016102d2565b60038054600181019091557fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180546001600160a01b038087166001600160a01b03199283168117909355600083815260026020526040808220805493891693909416831790935591519092917f19dd93282347163d78a1e91a8278207144203887305da5724821079ffcc138ad91a350505050565b6000546001600160a01b03163314610a925760405162461bcd60e51b81526004016102d290611784565b6001600160a01b038116610af75760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102d2565b6102e4816114c2565b806001600160a01b038116610b275760405162461bcd60e51b81526004016102d29061174d565b6005546040516001600160a01b038085169216907f4a6beeb37b9f482406bcaf6e918424d6a3d27c6e726f2934b56e75e086bd0a7990600090a350600580546001600160a01b0319166001600160a01b0392909216919091179055565b6000806001600160a01b03841660011415610ccc576001600160a01b0380871660009081526002602090815260408083205481516317fcb39b60e01b81529151939416926317fcb39b92600480840193919291829003018186803b158015610beb57600080fd5b505afa158015610bff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c23919061154f565b6001600160a01b038881166000908152600260205260409081902054905163df71d7f360e01b8152600481018a905283831660248201528783166044820152929350169063df71d7f3906064015b604080518083038186803b158015610c8857600080fd5b505afa158015610c9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc0919061163f565b9093509150610e5a9050565b6001600160a01b03831660011415610dba576001600160a01b0380871660009081526002602090815260408083205481516317fcb39b60e01b81529151939416926317fcb39b92600480840193919291829003018186803b158015610d3057600080fd5b505afa158015610d44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d68919061154f565b6001600160a01b038881166000908152600260205260409081902054905163df71d7f360e01b8152600481018a905288831660248201528383166044820152929350169063df71d7f390606401610c71565b6001600160a01b038681166000908152600260205260409081902054905163df71d7f360e01b8152600481018890528683166024820152858316604482015291169063df71d7f390606401604080518083038186803b158015610e1c57600080fd5b505afa158015610e30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e54919061163f565b90925090505b94509492505050565b6000808080806001600160a01b03871660011415610e8a576005546001600160a01b031696505b6001600160a01b03861660011415610eab576005546001600160a01b031695505b6001600160a01b0387811660009081526001602090815260408083208a8516845290915290205416156110ba576001600160a01b0380881660009081526001602090815260408083208a8516845290915290819020548151633fabe5a360e21b8152915192169163feaf968c9160048082019260a092909190829003018186803b158015610f3857600080fd5b505afa158015610f4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f7091906116dd565b506001600160a01b03808c1660009081526001602090815260408083208e8516845282529182902054825163313ce56760e01b81529251949a5095975094909116945063313ce5679360048083019450909291829003018186803b158015610fd757600080fd5b505afa158015610feb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100f919061172c565b60ff1691508061105b5760405162461bcd60e51b815260206004820152601760248201527650726963654f7261636c653a207a65726f20707269636560481b60448201526064016102d2565b61106589836117b9565b6110709060016117b9565b61107b90600a61182e565b6110868960016117b9565b61109190600a61182e565b61109b8c846118fc565b6110a591906118fc565b6110af91906117d1565b9350600194506112be565b6001600160a01b0386811660009081526001602090815260408083208b8516845290915290205416156112ac576001600160a01b0380871660009081526001602090815260408083208b8516845290915290819020548151633fabe5a360e21b8152915192169163feaf968c9160048082019260a092909190829003018186803b15801561114757600080fd5b505afa15801561115b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061117f91906116dd565b506001600160a01b03808b1660009081526001602090815260408083208f8516845282529182902054825163313ce56760e01b81529251949a5095975094909116945063313ce5679360048083019450909291829003018186803b1580156111e657600080fd5b505afa1580156111fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061121e919061172c565b60ff1691508061126a5760405162461bcd60e51b815260206004820152601760248201527650726963654f7261636c653a207a65726f20707269636560481b60448201526064016102d2565b806112768a60016117b9565b61128190600a61182e565b61128b91906118fc565b8a6112968a856117b9565b6112a19060016117b9565b61109b90600a61182e565b600080600094509450945050506112c1565b50505b955095509592505050565b60006001600160ff1b038211156113365760405162461bcd60e51b815260206004820152602860248201527f53616665436173743a2076616c756520646f65736e27742066697420696e2061604482015267371034b73a191a9b60c11b60648201526084016102d2565b50805b919050565b600080821215611336576113518261198c565b92915050565b60045460408051918252602082018390527f61fcc6fa9ba5b3ab5f72b919bc6324527ede6b5d73e12c63bbc4d4e0352e7002910160405180910390a1600081116113e35760405162461bcd60e51b815260206004820152601860248201527f50726963654f7261636c653a207a65726f20616d6f756e74000000000000000060448201526064016102d2565b600455565b600380546113f89060019061195a565b8154811061141657634e487b7160e01b600052603260045260246000fd5b600091825260209091200154600380546001600160a01b03909216918390811061145057634e487b7160e01b600052603260045260246000fd5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550600380548061149d57634e487b7160e01b600052603160045260246000fd5b600082815260209020810160001990810180546001600160a01b031916905501905550565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b805169ffffffffffffffffffff8116811461133957600080fd5b60006020828403121561153d578081fd5b8135611548816119bc565b9392505050565b600060208284031215611560578081fd5b8151611548816119bc565b6000806040838503121561157d578081fd5b8235611588816119bc565b91506020830135611598816119bc565b809150509250929050565b6000806000606084860312156115b7578081fd5b83356115c2816119bc565b925060208401356115d2816119bc565b915060408401356115e2816119bc565b809150509250925092565b60008060008060808587031215611602578081fd5b843561160d816119bc565b9350602085013592506040850135611624816119bc565b91506060850135611634816119bc565b939692955090935050565b60008060408385031215611651578182fd5b82518015158114611660578283fd5b6020939093015192949293505050565b600060208284031215611681578081fd5b5035919050565b600080600080600060a0868803121561169f578081fd5b85359450602086013593506040860135925060608601356116bf816119bc565b915060808601356116cf816119bc565b809150509295509295909350565b600080600080600060a086880312156116f4578081fd5b6116fd86611512565b945060208601519350604086015192506060860151915061172060808701611512565b90509295509295909350565b60006020828403121561173d578081fd5b815160ff81168114611548578182fd5b60208082526019908201527f50726963654f7261636c653a207a65726f206164647265737300000000000000604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b600082198211156117cc576117cc6119a6565b500190565b6000826117ec57634e487b7160e01b81526012600452602481fd5b500490565b80825b60018086116118035750610e5a565b818704821115611815576118156119a6565b8086161561182257918102915b9490941c9380026117f4565b6000611548600019848460008261184757506001611548565b8161185457506000611548565b816001811461186a5760028114611874576118a1565b6001915050611548565b60ff841115611885576118856119a6565b6001841b91508482111561189b5761189b6119a6565b50611548565b5060208310610133831016604e8410600b84101617156118d4575081810a838111156118cf576118cf6119a6565b611548565b6118e184848460016117f1565b8086048211156118f3576118f36119a6565b02949350505050565b6000816000190483118215151615611916576119166119a6565b500290565b60008083128015600160ff1b850184121615611939576119396119a6565b6001600160ff1b0384018313811615611954576119546119a6565b50500390565b60008282101561196c5761196c6119a6565b500390565b6000600019821415611985576119856119a6565b5060010190565b6000600160ff1b8214156119a2576119a26119a6565b0390565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b03811681146102e457600080fdfea26469706673582212201cd43b98f94bf9379314e373a946070d93153ff4df4f39a7ba38e014ed9653db64736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addExchangeConnector(address,address)": {
        "details": "Only owner can call this",
        "params": {
          "_exchangeConnector": "New exchange connector contract address",
          "_exchangeRouter": "Exchange router contract address"
        }
      },
      "constructor": {
        "params": {
          "_acceptableDelay": "Maximum acceptable delay for data given from Chainlink",
          "_oracleNativeToken": "The address of the chainlink oracle for the native token"
        }
      },
      "equivalentOutputAmount(uint256,uint256,uint256,address,address)": {
        "details": "First we try to get the output amount from Chain Link                                 Only if the price is not available or out-of-date we will                                  reach to exchange routers",
        "params": {
          "_inputAmount": "Amount of the input token",
          "_inputDecimals": "Number of input token decimals",
          "_inputToken": "Address of the input token",
          "_outputDecimals": "Number of output token decimals",
          "_outputToken": "Address of output token"
        },
        "returns": {
          "_0": "Amount of the output token"
        }
      },
      "equivalentOutputAmountFromExchange(address,uint256,address,address)": {
        "details": "Input amount should have the same decimal as input token                                 Output amount has the same decimal as output token",
        "params": {
          "_exchangeRouter": "Address of the exchange router we are reading the price from",
          "_inputAmount": "Amount of the input token",
          "_inputToken": "Address of the input token",
          "_outputToken": "Address of output token"
        },
        "returns": {
          "_0": "Amount of the output token"
        }
      },
      "equivalentOutputAmountFromOracle(uint256,uint256,uint256,address,address)": {
        "details": "The oracle is ChainLink",
        "params": {
          "_inputAmount": "Amount of the input token",
          "_inputDecimals": "Number of input token decimals",
          "_inputToken": "Address of the input token",
          "_outputDecimals": "Number of output token decimals",
          "_outputToken": "Address of output token"
        },
        "returns": {
          "_outputAmount": "          Amount of the output token"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeExchangeConnector(uint256)": {
        "details": "Only owner can call this",
        "params": {
          "_exchangeRouterIndex": "The exchange router index in the list"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setAcceptableDelay(uint256)": {
        "details": "If oracle data has not been updated for a while,                              we will get data from exchange routers",
        "params": {
          "_acceptableDelay": "Maximum acceptable delay (in seconds)"
        }
      },
      "setPriceProxy(address,address,address)": {
        "details": "Only owner can call this                             This price proxy gives exchange rate of _firstToken/_secondToken                             Setting price proxy address to zero means that we remove it",
        "params": {
          "_firstToken": "Address of the first token",
          "_priceProxyAddress": "The address of the proxy price",
          "_secondToken": "Address of the second token"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "ChainlinkPriceProxy": {
        "params": {
          "_firstToken": "Address of the first token",
          "_secondToken": "Address of the second token"
        },
        "return": "Address of price proxy contract"
      },
      "exchangeConnector": {
        "params": {
          "_exchangeRouter": "Address of exchange router"
        },
        "return": "Address of exchange connector"
      },
      "exchangeRoutersList": {
        "params": {
          "_index": "Index of exchange router"
        },
        "return": "Address of exchange router"
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "ExchangeConnectorAdded(address,address)": {
        "notice": "Emits when new exchange router is added"
      },
      "ExchangeConnectorRemoved(address)": {
        "notice": "Emits when an exchange router is removed"
      },
      "NewAcceptableDelay(uint256,uint256)": {
        "notice": "Emits when changes made to acceptable delay"
      },
      "NewOracleNativeToken(address,address)": {
        "notice": "Emits when changes made to oracle native token"
      },
      "SetPriceProxy(address,address,address)": {
        "notice": "Emits when a price proxy is set"
      }
    },
    "kind": "user",
    "methods": {
      "ChainlinkPriceProxy(address,address)": {
        "notice": "Gives price proxy address for a pair of tokens"
      },
      "addExchangeConnector(address,address)": {
        "notice": "Adds an exchange connector"
      },
      "constructor": {
        "notice": "This contract is used to get relative price of two assets from Chainlink and available exchanges "
      },
      "equivalentOutputAmount(uint256,uint256,uint256,address,address)": {
        "notice": "Finds amount of output token that has same value as the input amount of the input token"
      },
      "equivalentOutputAmountFromExchange(address,uint256,address,address)": {
        "notice": "Finds amount of output token that has same value                                  as the input amount of the input token"
      },
      "equivalentOutputAmountFromOracle(uint256,uint256,uint256,address,address)": {
        "notice": "Finds amount of output token that has equal value                                 as the input amount of the input token"
      },
      "exchangeConnector(address)": {
        "notice": "Gives exchange connector address for an exchange router"
      },
      "exchangeRoutersList(uint256)": {
        "notice": "Gives address of an exchange router from exchange routers list"
      },
      "getExchangeRoutersListLength()": {
        "notice": "Getter for the length of exchange router list"
      },
      "removeExchangeConnector(uint256)": {
        "notice": "Removes an exchange connector"
      },
      "setAcceptableDelay(uint256)": {
        "notice": "Sets acceptable delay for oracle responses"
      },
      "setOracleNativeToken(address)": {
        "notice": "Sets oracle native token address"
      },
      "setPriceProxy(address,address,address)": {
        "notice": "Sets a price proxy for a pair of tokens"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 807,
        "contract": "contracts/oracle/PriceOracle.sol:PriceOracle",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 13001,
        "contract": "contracts/oracle/PriceOracle.sol:PriceOracle",
        "label": "ChainlinkPriceProxy",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 13006,
        "contract": "contracts/oracle/PriceOracle.sol:PriceOracle",
        "label": "exchangeConnector",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 13010,
        "contract": "contracts/oracle/PriceOracle.sol:PriceOracle",
        "label": "exchangeRoutersList",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 13013,
        "contract": "contracts/oracle/PriceOracle.sol:PriceOracle",
        "label": "acceptableDelay",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 13022,
        "contract": "contracts/oracle/PriceOracle.sol:PriceOracle",
        "label": "oracleNativeToken",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}