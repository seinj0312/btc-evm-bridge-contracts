{
  "address": "0xB8084946AdB27e8BD6aD63924a4AC06da832eb81",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "_exchangeRouter",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "exchangeRouter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_outputAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_inputToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_outputToken",
          "type": "address"
        }
      ],
      "name": "getInputAmount",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_inputAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_inputToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_outputToken",
          "type": "address"
        }
      ],
      "name": "getOutputAmount",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        }
      ],
      "name": "isPathValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_result",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidityPoolFactory",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_exchangeRouter",
          "type": "address"
        }
      ],
      "name": "setExchangeRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setLiquidityPoolFactory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setWrappedNativeToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_inputAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_outputAmount",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isFixedToken",
          "type": "bool"
        }
      ],
      "name": "swap",
      "outputs": [
        {
          "internalType": "bool",
          "name": "_result",
          "type": "bool"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrappedNativeToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe26af7c7479e683964432f53fc629f8eb7a09978cf360f6e76a465a02b72b362",
  "receipt": {
    "to": null,
    "from": "0x1DE72A1935Df9b4E02315BDa3C3cDbDF2A640583",
    "contractAddress": "0xB8084946AdB27e8BD6aD63924a4AC06da832eb81",
    "transactionIndex": 2,
    "gasUsed": "1785913",
    "logsBloom": "0x
    "blockHash": "0x18098e78abd92c4fda1bd557d583c6582608789f3f2cb36ef0afbfd428fc12c2",
    "transactionHash": "0xe26af7c7479e683964432f53fc629f8eb7a09978cf360f6e76a465a02b72b362",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 31069193,
        "transactionHash": "0xe26af7c7479e683964432f53fc629f8eb7a09978cf360f6e76a465a02b72b362",
        "address": "0xB8084946AdB27e8BD6aD63924a4AC06da832eb81",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000001de72a1935df9b4e02315bda3c3cdbdf2a640583"
        ],
        "data": "0x",
        "logIndex": 15,
        "blockHash": "0x18098e78abd92c4fda1bd557d583c6582608789f3f2cb36ef0afbfd428fc12c2"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 31069193,
        "transactionHash": "0xe26af7c7479e683964432f53fc629f8eb7a09978cf360f6e76a465a02b72b362",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000001de72a1935df9b4e02315bda3c3cdbdf2a640583",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000ad5d5ac40618e000000000000000000000000000000000000000000000000128afea64ece5dbd0000000000000000000000000000000000000000000001f671d53f5d27a91e07000000000000000000000000000000000000000000000000128028d0a28dfc2f0000000000000000000000000000000000000000000001f671e01532d3e97f95",
        "logIndex": 16,
        "blockHash": "0x18098e78abd92c4fda1bd557d583c6582608789f3f2cb36ef0afbfd428fc12c2"
      }
    ],
    "blockNumber": 31069193,
    "cumulativeGasUsed": "2463753",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "QuickswapV2",
    "0x8954AfA98594b838bda56FE4C12a09D7739D179b"
  ],
  "numDeployments": 1,
  "solcInputHash": "be8d75db0385d6f9e450b4e6950966af",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_exchangeRouter\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"exchangeRouter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_outputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_inputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_outputToken\",\"type\":\"address\"}],\"name\":\"getInputAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_inputToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_outputToken\",\"type\":\"address\"}],\"name\":\"getOutputAmount\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"}],\"name\":\"isPathValid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_result\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityPoolFactory\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_exchangeRouter\",\"type\":\"address\"}],\"name\":\"setExchangeRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setLiquidityPoolFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setWrappedNativeToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_inputAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_outputAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isFixedToken\",\"type\":\"bool\"}],\"name\":\"swap\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"_result\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedNativeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_exchangeRouter\":\"Address of the DEX router contract\",\"_name\":\"Name of the underlying DEX\"}},\"getInputAmount(uint256,address,address)\":{\"details\":\"Returns (false, 0) if liquidity pool of inputToken-outputToken doesn't exist                             Returns (false, 0) if desired output amount is greater than or equal to output reserve\",\"params\":{\"_inputToken\":\"Address of the input token\",\"_outputAmount\":\"Desired output amount\",\"_outputToken\":\"Address of the output token\"}},\"getOutputAmount(uint256,address,address)\":{\"details\":\"Returns (false, 0) if liquidity pool of inputToken-outputToken doesn't exist\",\"params\":{\"_inputAmount\":\"Amount of input token\",\"_inputToken\":\"Address of the input token\",\"_outputToken\":\"Address of the output token\"}},\"isPathValid(address[])\":{\"params\":{\"_path\":\"List of tokens that are used for exchanging\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setExchangeRouter(address)\":{\"details\":\"Gets address of liquidity pool factory from new exchange router\",\"params\":{\"_exchangeRouter\":\"Address of the new exchange router contract\"}},\"setLiquidityPoolFactory()\":{\"details\":\"Gets address from exchange router\"},\"setWrappedNativeToken()\":{\"details\":\"Gets address from exchange router\"},\"swap(uint256,uint256,address[],address,uint256,bool)\":{\"details\":\"Checks exchange conditions before exchanging                             We assume that the input token is not WETH (it is teleBTC)\",\"params\":{\"_deadline\":\"Deadline of exchanging tokens\",\"_inputAmount\":\"Amount of input token\",\"_isFixedToken\":\"True if the input token amount is fixed\",\"_outputAmount\":\"Amount of output token\",\"_path\":\"List of tokens that are used for exchanging\",\"_to\":\"Receiver address\"},\"returns\":{\"_amounts\":\"           Amounts of tokens that are involved in exchanging\",\"_result\":\"            True if the exchange is successful\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"This contract is used for interacting with UniswapV2 contract\"},\"getInputAmount(uint256,address,address)\":{\"notice\":\"Returns required input amount to get desired output amount\"},\"getOutputAmount(uint256,address,address)\":{\"notice\":\"Returns amount of output token that user receives \"},\"isPathValid(address[])\":{\"notice\":\"Returns true if the exchange path is valid\"},\"setExchangeRouter(address)\":{\"notice\":\"Setter for exchange router\"},\"setLiquidityPoolFactory()\":{\"notice\":\"Setter for liquidity pool factory\"},\"setWrappedNativeToken()\":{\"notice\":\"Setter for wrapped native token\"},\"swap(uint256,uint256,address[],address,uint256,bool)\":{\"notice\":\"Exchanges input token for output token through exchange router\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/connectors/UniswapV2Connector.sol\":\"UniswapV2Connector\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/connectors/UniswapV2Connector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"./interfaces/IExchangeConnector.sol\\\";\\nimport \\\"../uniswap/v2-periphery/interfaces/IUniswapV2Router02.sol\\\";\\nimport \\\"../uniswap/v2-core/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"../uniswap/v2-core/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\ncontract UniswapV2Connector is IExchangeConnector, Ownable, ReentrancyGuard {\\n\\n\\n    modifier nonZeroAddress(address _address) {\\n        require(_address != address(0), \\\"UniswapV2Connector: zero address\\\");\\n        _;\\n    }\\n\\n    string public override name;\\n    address public override exchangeRouter;\\n    address public override liquidityPoolFactory;\\n    address public override wrappedNativeToken;\\n\\n    /// @notice                          This contract is used for interacting with UniswapV2 contract\\n    /// @param _name                     Name of the underlying DEX\\n    /// @param _exchangeRouter           Address of the DEX router contract\\n    constructor(string memory _name, address _exchangeRouter) {\\n        name = _name;\\n        exchangeRouter = _exchangeRouter;\\n        liquidityPoolFactory = IUniswapV2Router02(exchangeRouter).factory();\\n        wrappedNativeToken = IUniswapV2Router02(exchangeRouter).WETH();\\n    }\\n\\n    function renounceOwnership() public virtual override onlyOwner {}\\n\\n    /// @notice                             Setter for exchange router\\n    /// @dev                                Gets address of liquidity pool factory from new exchange router\\n    /// @param _exchangeRouter              Address of the new exchange router contract\\n    function setExchangeRouter(address _exchangeRouter) external nonZeroAddress(_exchangeRouter) override onlyOwner {\\n        exchangeRouter = _exchangeRouter;\\n        liquidityPoolFactory = IUniswapV2Router02(exchangeRouter).factory();\\n        wrappedNativeToken = IUniswapV2Router02(exchangeRouter).WETH();\\n    }\\n\\n    /// @notice            Setter for liquidity pool factory\\n    /// @dev               Gets address from exchange router\\n    function setLiquidityPoolFactory() external override onlyOwner {\\n        liquidityPoolFactory = IUniswapV2Router02(exchangeRouter).factory();\\n    }\\n\\n    /// @notice            Setter for wrapped native token\\n    /// @dev               Gets address from exchange router\\n    function setWrappedNativeToken() external override onlyOwner {\\n        wrappedNativeToken = IUniswapV2Router02(exchangeRouter).WETH();\\n    }\\n\\n    /// @notice                     Returns required input amount to get desired output amount\\n    /// @dev                        Returns (false, 0) if liquidity pool of inputToken-outputToken doesn't exist\\n    ///                             Returns (false, 0) if desired output amount is greater than or equal to output reserve\\n    /// @param _outputAmount        Desired output amount\\n    /// @param _inputToken          Address of the input token\\n    /// @param _outputToken         Address of the output token\\n    function getInputAmount(\\n        uint _outputAmount,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view nonZeroAddress(_inputToken) nonZeroAddress(_outputToken) override returns (bool, uint) {\\n\\n        // Checks that the liquidity pool exists\\n        address liquidityPool = IUniswapV2Factory(liquidityPoolFactory).getPair(_inputToken, _outputToken);\\n        if (\\n            liquidityPool == address(0)\\n        ) {\\n            return (false, 0);\\n        }\\n\\n\\n        // Gets reserve of output token and checks that enough output token exists\\n        address token0 = IUniswapV2Pair(liquidityPool).token0();\\n        (uint reserveIn, uint reserveOut, /*timestamp*/) = IUniswapV2Pair(liquidityPool).getReserves();\\n        if (token0 == _inputToken) {\\n            if (_outputAmount >= reserveOut) {\\n                return (false, 0);\\n            }\\n        }\\n        else {\\n            if (_outputAmount >= reserveIn) {\\n                return (false, 0);\\n            }\\n        }\\n\\n        address[] memory path = new address[](2);\\n        path[0] = _inputToken;\\n        path[1] = _outputToken;\\n        uint[] memory result = IUniswapV2Router02(exchangeRouter).getAmountsIn(_outputAmount, path);\\n\\n        return (true, result[0]);\\n    }\\n\\n    /// @notice                     Returns amount of output token that user receives \\n    /// @dev                        Returns (false, 0) if liquidity pool of inputToken-outputToken doesn't exist\\n    /// @param _inputAmount         Amount of input token\\n    /// @param _inputToken          Address of the input token\\n    /// @param _outputToken         Address of the output token\\n    function getOutputAmount(\\n        uint _inputAmount,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view nonZeroAddress(_inputToken) nonZeroAddress(_outputToken) override returns (bool, uint) {\\n\\n        // Checks that the liquidity pool exists\\n        if (\\n            IUniswapV2Factory(liquidityPoolFactory).getPair(_inputToken, _outputToken) == address(0)\\n        ) {\\n            return (false, 0);\\n        }\\n\\n        address[] memory path = new address[](2);\\n        path[0] = _inputToken;\\n        path[1] = _outputToken;\\n        uint[] memory result = IUniswapV2Router02(exchangeRouter).getAmountsOut(_inputAmount, path);\\n\\n        return (true, result[1]);\\n    }\\n\\n    /// @notice                     Exchanges input token for output token through exchange router\\n    /// @dev                        Checks exchange conditions before exchanging\\n    ///                             We assume that the input token is not WETH (it is teleBTC)\\n    /// @param _inputAmount         Amount of input token\\n    /// @param _outputAmount        Amount of output token\\n    /// @param _path                List of tokens that are used for exchanging\\n    /// @param _to                  Receiver address\\n    /// @param _deadline            Deadline of exchanging tokens\\n    /// @param _isFixedToken        True if the input token amount is fixed\\n    /// @return _result             True if the exchange is successful\\n    /// @return _amounts            Amounts of tokens that are involved in exchanging\\n    function swap(\\n        uint256 _inputAmount,\\n        uint256 _outputAmount,\\n        address[] memory _path,\\n        address _to,\\n        uint256 _deadline,\\n        bool _isFixedToken\\n    ) external nonReentrant nonZeroAddress(_to) override returns (bool _result, uint[] memory _amounts) {\\n        uint neededInputAmount;\\n        (_result, neededInputAmount) = _checkExchangeConditions(\\n            _inputAmount,\\n            _outputAmount,\\n            _path,\\n            _deadline,\\n            _isFixedToken\\n        );\\n        \\n        if (_result) {\\n            // Gets tokens from user\\n            IERC20(_path[0]).transferFrom(_msgSender(), address(this), neededInputAmount);\\n\\n            // Gives allowance to exchange router\\n            IERC20(_path[0]).approve(exchangeRouter, neededInputAmount);\\n\\n            if (_isFixedToken == false && _path[_path.length-1] != wrappedNativeToken) {\\n                _amounts = IUniswapV2Router02(exchangeRouter).swapTokensForExactTokens(\\n                    _outputAmount,\\n                    _inputAmount,\\n                    _path,\\n                    _to,\\n                    _deadline\\n                );\\n            }\\n\\n            if (_isFixedToken == false && _path[_path.length-1] == wrappedNativeToken) {\\n                _amounts = IUniswapV2Router02(exchangeRouter).swapTokensForExactETH(\\n                    _outputAmount,\\n                    _inputAmount,\\n                    _path,\\n                    _to,\\n                    _deadline\\n                );\\n            }\\n\\n            if (_isFixedToken == true && _path[_path.length-1] != wrappedNativeToken) {\\n                _amounts = IUniswapV2Router02(exchangeRouter).swapExactTokensForTokens(\\n                    _inputAmount,\\n                    _outputAmount,\\n                    _path,\\n                    _to,\\n                    _deadline\\n                );\\n            }\\n\\n            if (_isFixedToken == true && _path[_path.length-1] == wrappedNativeToken) {\\n                _amounts = IUniswapV2Router02(exchangeRouter).swapExactTokensForETH(\\n                    _inputAmount,\\n                    _outputAmount,\\n                    _path,\\n                    _to,\\n                    _deadline\\n                );\\n            }\\n            emit Swap(_path, _amounts, _to);\\n        }\\n    }\\n\\n    /// @notice                     Returns true if the exchange path is valid\\n    /// @param _path                List of tokens that are used for exchanging\\n    function isPathValid(address[] memory _path) public view override returns (bool _result) {\\n        address liquidityPool;\\n\\n        // Checks that path length is greater than one\\n        if (_path.length < 2) {\\n            return false;\\n        }\\n\\n        for (uint i = 0; i < _path.length - 1; i++) {\\n            liquidityPool =\\n                IUniswapV2Factory(liquidityPoolFactory).getPair(_path[i], _path[i + 1]);\\n            if (liquidityPool == address(0)) {\\n                return false;\\n            }\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @notice                     Checks if exchanging can happen successfully\\n    /// @dev                        Avoids reverting the execution by exchange router\\n    /// @param _inputAmount         Amount of input token\\n    /// @param _outputAmount        Amount of output token\\n    /// @param _path                List of tokens that are used for exchanging\\n    /// @param _deadline            Deadline of exchanging tokens\\n    /// @param _isFixedToken        True if the input token amount is fixed\\n    /// @return                     True if exchange conditions are satisfied\\n    /// @return                     Needed amount of input token\\n    function _checkExchangeConditions(\\n        uint256 _inputAmount,\\n        uint256 _outputAmount,\\n        address[] memory _path,\\n        uint256 _deadline,\\n        bool _isFixedToken\\n    ) private view returns (bool, uint) {\\n\\n        // Checks deadline has not passed\\n        if (_deadline < block.timestamp) {\\n            return (false, 0);\\n        }\\n\\n        // Checks that the liquidity pool exists\\n        if (!isPathValid(_path)) {\\n            return (false, 0);\\n        }\\n\\n        // Finds maximum output amount\\n        uint[] memory outputResult = IUniswapV2Router02(exchangeRouter).getAmountsOut(\\n            _inputAmount,\\n            _path\\n        );\\n\\n        // Checks that exchanging is possible or not\\n        if (_outputAmount > outputResult[_path.length - 1]) {\\n            return (false, 0);\\n        } else {\\n            if (_isFixedToken == true) {\\n                return (true, _inputAmount);\\n            } else {\\n                uint[] memory inputResult = IUniswapV2Router02(exchangeRouter).getAmountsIn(\\n                    _outputAmount, \\n                    _path\\n                );\\n                return (true, inputResult[0]);\\n            }\\n        }\\n    }\\n\\n}\",\"keccak256\":\"0x1d59bac5dbb7c7da64cc63f945d0b53b10010f12bea2744309ad4a4a3ea88501\",\"license\":\"MIT\"},\"contracts/connectors/interfaces/IExchangeConnector.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\ninterface IExchangeConnector {\\n\\n    // Events\\n    \\n    event Swap(address[] path, uint[] amounts, address receiver);\\n\\n    // Read-only functions\\n\\n    function name() external view returns (string memory);\\n\\n    function exchangeRouter() external view returns (address);\\n\\n    function liquidityPoolFactory() external view returns (address);\\n\\n    function wrappedNativeToken() external view returns (address);\\n\\n    function getInputAmount(\\n        uint _outputAmount,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view returns (bool, uint);\\n\\n    function getOutputAmount(\\n        uint _inputAmount,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view returns (bool, uint);\\n\\n    // State-changing functions\\n\\n    function setExchangeRouter(address _exchangeRouter) external;\\n\\n    function setLiquidityPoolFactory() external;\\n\\n    function setWrappedNativeToken() external;\\n\\n    function swap(\\n        uint256 _inputAmount,\\n        uint256 _outputAmount,\\n        address[] memory _path,\\n        address _to,\\n        uint256 _deadline,\\n        bool _isFixedToken\\n    ) external returns (bool, uint[] memory);\\n\\n    function isPathValid(address[] memory _path) external view returns(bool);\\n}\",\"keccak256\":\"0x12cc3b3424654cc48e9f0563ed027b953414fa142305c32dfc4e7d58bd39c2fa\",\"license\":\"MIT\"},\"contracts/uniswap/v2-core/interfaces/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xa7a60cac7084df79f5b6f5712cabadfc0bfcdb01b87fefa69ff826247b4ec4cd\",\"license\":\"MIT\"},\"contracts/uniswap/v2-core/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x506c650dfe2dfaf284cacfd05ba003521ce26cbcc2b1f881908068852a9d657e\",\"license\":\"MIT\"},\"contracts/uniswap/v2-periphery/interfaces/IUniswapV2Router01.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2;\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\",\"keccak256\":\"0x2698329f35127559498658df11c438943f02c3e5bae5635689795019947dec54\",\"license\":\"MIT\"},\"contracts/uniswap/v2-periphery/interfaces/IUniswapV2Router02.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.6.2;\\n\\nimport './IUniswapV2Router01.sol';\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5587f172bf56ac4435d970e05b16aec3e28323fb3aea3e4f5f568537bbbf7d3f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620020b8380380620020b88339810160408190526200003491620002e5565b6200003f33620001ae565b60018055815162000058906002906020850190620001fe565b50600380546001600160a01b0319166001600160a01b0383811691909117918290556040805163c45a015560e01b81529051929091169163c45a015591600480820192602092909190829003018186803b158015620000b657600080fd5b505afa158015620000cb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000f19190620002c1565b600480546001600160a01b0319166001600160a01b03928316178155600354604080516315ab88c960e31b81529051919093169263ad5c46489281810192602092909190829003018186803b1580156200014a57600080fd5b505afa1580156200015f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001859190620002c1565b600580546001600160a01b0319166001600160a01b039290921691909117905550620004239050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8280546200020c90620003d0565b90600052602060002090601f0160209004810192826200023057600085556200027b565b82601f106200024b57805160ff19168380011785556200027b565b828001600101855582156200027b579182015b828111156200027b5782518255916020019190600101906200025e565b50620002899291506200028d565b5090565b5b808211156200028957600081556001016200028e565b80516001600160a01b0381168114620002bc57600080fd5b919050565b600060208284031215620002d3578081fd5b620002de82620002a4565b9392505050565b60008060408385031215620002f8578081fd5b82516001600160401b03808211156200030f578283fd5b818501915085601f83011262000323578283fd5b8151818111156200033857620003386200040d565b604051601f8201601f19908116603f011681019083821181831017156200036357620003636200040d565b816040528281526020935088848487010111156200037f578586fd5b8591505b82821015620003a2578482018401518183018501529083019062000383565b82821115620003b357858484830101525b9550620003c5915050858201620002a4565b925050509250929050565b600281046001821680620003e557607f821691505b602082108114156200040757634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b611c8580620004336000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c80638da5cb5b1161008c578063b23e4fc611610066578063b23e4fc6146101ef578063df71d7f3146101f7578063e75d75d51461020a578063f2fde38b1461021d576100ea565b80638da5cb5b1461019a5780639b4bca24146101ab578063b0bbcd88146101ce576100ea565b80631cb85818116100c85780631cb8581814610142578063715018a614610155578063838b7ccb1461015d5780638988307414610170576100ea565b806306fdde03146100ef5780631580b5e51461010d57806317fcb39b14610117575b600080fd5b6100f7610230565b6040516101049190611a14565b60405180910390f35b6101156102be565b005b60055461012a906001600160a01b031681565b6040516001600160a01b039091168152602001610104565b60035461012a906001600160a01b031681565b610115610399565b61011561016b366004611721565b6103c5565b61018361017e366004611895565b61055e565b604080519215158352602083019190915201610104565b6000546001600160a01b031661012a565b6101be6101b9366004611760565b610924565b6040519015158152602001610104565b6101e16101dc3660046118cb565b610a81565b6040516101049291906119f9565b6101156110aa565b610183610205366004611895565b61117c565b60045461012a906001600160a01b031681565b61011561022b366004611721565b6113cd565b6002805461023d90611baa565b80601f016020809104026020016040519081016040528092919081815260200182805461026990611baa565b80156102b65780601f1061028b576101008083540402835291602001916102b6565b820191906000526020600020905b81548152906001019060200180831161029957829003601f168201915b505050505081565b6000546001600160a01b031633146102f15760405162461bcd60e51b81526004016102e890611a67565b60405180910390fd5b600360009054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b15801561033f57600080fd5b505afa158015610353573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103779190611744565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146103c35760405162461bcd60e51b81526004016102e890611a67565b565b806001600160a01b0381166103ec5760405162461bcd60e51b81526004016102e890611a9c565b6000546001600160a01b031633146104165760405162461bcd60e51b81526004016102e890611a67565b600380546001600160a01b0319166001600160a01b0384811691909117918290556040805163c45a015560e01b81529051929091169163c45a015591600480820192602092909190829003018186803b15801561047257600080fd5b505afa158015610486573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104aa9190611744565b600480546001600160a01b0319166001600160a01b03928316178155600354604080516315ab88c960e31b81529051919093169263ad5c46489281810192602092909190829003018186803b15801561050257600080fd5b505afa158015610516573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053a9190611744565b600580546001600160a01b0319166001600160a01b03929092169190911790555050565b600080836001600160a01b0381166105885760405162461bcd60e51b81526004016102e890611a9c565b836001600160a01b0381166105af5760405162461bcd60e51b81526004016102e890611a9c565b6004805460405163e6a4390560e01b81526001600160a01b038981169382019390935287831660248201526000929091169063e6a439059060440160206040518083038186803b15801561060257600080fd5b505afa158015610616573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063a9190611744565b90506001600160a01b03811661065757600080945094505061091a565b6000816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561069257600080fd5b505afa1580156106a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ca9190611744565b9050600080836001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561070857600080fd5b505afa15801561071c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107409190611847565b506001600160701b031691506001600160701b03169150896001600160a01b0316836001600160a01b0316141561078d57808b1061078857600080975097505050505061091a565b6107a4565b818b106107a457600080975097505050505061091a565b6040805160028082526060820183526000926020830190803683370190505090508a816000815181106107e757634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050898160018151811061082957634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250506000600360009054906101000a90046001600160a01b03166001600160a01b0316631f00ca748e846040518363ffffffff1660e01b815260040161088e929190611ad1565b60006040518083038186803b1580156108a657600080fd5b505afa1580156108ba573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108e2919081019061179b565b905060018160008151811061090757634e487b7160e01b600052603260045260246000fd5b6020026020010151995099505050505050505b5050935093915050565b60008060028351101561093b576000915050610a7c565b60005b6001845161094c9190611b93565b811015610a755760045484516001600160a01b039091169063e6a439059086908490811061098a57634e487b7160e01b600052603260045260246000fd5b6020026020010151868460016109a09190611b7b565b815181106109be57634e487b7160e01b600052603260045260246000fd5b60200260200101516040518363ffffffff1660e01b81526004016109f89291906001600160a01b0392831681529116602082015260400190565b60206040518083038186803b158015610a1057600080fd5b505afa158015610a24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a489190611744565b91506001600160a01b038216610a6357600092505050610a7c565b80610a6d81611be5565b91505061093e565b5060019150505b919050565b6000606060026001541415610ad85760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016102e8565b6002600155846001600160a01b038116610b045760405162461bcd60e51b81526004016102e890611a9c565b6000610b138a8a8a8989611468565b909450905083156110975787600081518110610b3f57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166323b872dd610b5c3390565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260448101849052606401602060405180830381600087803b158015610baa57600080fd5b505af1158015610bbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be2919061182b565b5087600081518110610c0457634e487b7160e01b600052603260045260246000fd5b602090810291909101015160035460405163095ea7b360e01b81526001600160a01b0391821660048201526024810184905291169063095ea7b390604401602060405180830381600087803b158015610c5c57600080fd5b505af1158015610c70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c94919061182b565b5084158015610cef575060055488516001600160a01b03909116908990610cbd90600190611b93565b81518110610cdb57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031614155b15610d8557600354604051634401edf760e11b81526001600160a01b0390911690638803dbee90610d2c908c908e908d908d908d90600401611aea565b600060405180830381600087803b158015610d4657600080fd5b505af1158015610d5a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d82919081019061179b565b92505b84158015610dde575060055488516001600160a01b03909116908990610dad90600190611b93565b81518110610dcb57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316145b15610e7457600354604051632512eca560e11b81526001600160a01b0390911690634a25d94a90610e1b908c908e908d908d908d90600401611aea565b600060405180830381600087803b158015610e3557600080fd5b505af1158015610e49573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e71919081019061179b565b92505b6001851515148015610ed2575060055488516001600160a01b03909116908990610ea090600190611b93565b81518110610ebe57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031614155b15610f68576003546040516338ed173960e01b81526001600160a01b03909116906338ed173990610f0f908d908d908d908d908d90600401611aea565b600060405180830381600087803b158015610f2957600080fd5b505af1158015610f3d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f65919081019061179b565b92505b6001851515148015610fc5575060055488516001600160a01b03909116908990610f9490600190611b93565b81518110610fb257634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316145b1561105b576003546040516318cbafe560e01b81526001600160a01b03909116906318cbafe590611002908d908d908d908d908d90600401611aea565b600060405180830381600087803b15801561101c57600080fd5b505af1158015611030573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611058919081019061179b565b92505b7fe1010d0ab476908054981d12fbb96915efcceb8d57a09ae8ca62f4bda731837388848960405161108e939291906119bb565b60405180910390a15b5050600180559097909650945050505050565b6000546001600160a01b031633146110d45760405162461bcd60e51b81526004016102e890611a67565b600360009054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561112257600080fd5b505afa158015611136573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115a9190611744565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b600080836001600160a01b0381166111a65760405162461bcd60e51b81526004016102e890611a9c565b836001600160a01b0381166111cd5760405162461bcd60e51b81526004016102e890611a9c565b6004805460405163e6a4390560e01b81526001600160a01b038981169382019390935287831660248201526000929091169063e6a439059060440160206040518083038186803b15801561122057600080fd5b505afa158015611234573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112589190611744565b6001600160a01b03161415611273576000809350935061091a565b60408051600280825260608201835260009260208301908036833701905050905086816000815181106112b657634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505085816001815181106112f857634e487b7160e01b600052603260045260246000fd5b6001600160a01b03928316602091820292909201015260035460405163d06ca61f60e01b8152600092919091169063d06ca61f9061133c908c908690600401611ad1565b60006040518083038186803b15801561135457600080fd5b505afa158015611368573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611390919081019061179b565b90506001816001815181106113b557634e487b7160e01b600052603260045260246000fd5b60200260200101519550955050505050935093915050565b6000546001600160a01b031633146113f75760405162461bcd60e51b81526004016102e890611a67565b6001600160a01b03811661145c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102e8565b61146581611645565b50565b6000804284101561147e5750600090508061163b565b61148785610924565b6114965750600090508061163b565b60035460405163d06ca61f60e01b81526000916001600160a01b03169063d06ca61f906114c9908b908a90600401611ad1565b60006040518083038186803b1580156114e157600080fd5b505afa1580156114f5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261151d919081019061179b565b9050806001875161152e9190611b93565b8151811061154c57634e487b7160e01b600052603260045260246000fd5b602002602001015187111561156857600080925092505061163b565b6001841515141561158057600188925092505061163b565b6003546040516307c0329d60e21b81526000916001600160a01b031690631f00ca74906115b3908b908b90600401611ad1565b60006040518083038186803b1580156115cb57600080fd5b505afa1580156115df573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611607919081019061179b565b905060018160008151811061162c57634e487b7160e01b600052603260045260246000fd5b60200260200101519350935050505b9550959350505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600082601f8301126116a5578081fd5b813560206116ba6116b583611b57565b611b26565b82815281810190858301838502870184018810156116d6578586fd5b855b858110156116fd5781356116eb81611c2c565b845292840192908401906001016116d8565b5090979650505050505050565b80516001600160701b0381168114610a7c57600080fd5b600060208284031215611732578081fd5b813561173d81611c2c565b9392505050565b600060208284031215611755578081fd5b815161173d81611c2c565b600060208284031215611771578081fd5b813567ffffffffffffffff811115611787578182fd5b61179384828501611695565b949350505050565b600060208083850312156117ad578182fd5b825167ffffffffffffffff8111156117c3578283fd5b8301601f810185136117d3578283fd5b80516117e16116b582611b57565b81815283810190838501858402850186018910156117fd578687fd5b8694505b8385101561181f578051835260019490940193918501918501611801565b50979650505050505050565b60006020828403121561183c578081fd5b815161173d81611c41565b60008060006060848603121561185b578182fd5b6118648461170a565b92506118726020850161170a565b9150604084015163ffffffff8116811461188a578182fd5b809150509250925092565b6000806000606084860312156118a9578283fd5b8335925060208401356118bb81611c2c565b9150604084013561188a81611c2c565b60008060008060008060c087890312156118e3578182fd5b8635955060208701359450604087013567ffffffffffffffff811115611907578283fd5b61191389828a01611695565b945050606087013561192481611c2c565b92506080870135915060a087013561193b81611c41565b809150509295509295509295565b6000815180845260208085019450808401835b838110156119815781516001600160a01b03168752958201959082019060010161195c565b509495945050505050565b6000815180845260208085019450808401835b838110156119815781518752958201959082019060010161199f565b6000606082526119ce6060830186611949565b82810360208401526119e0818661198c565b91505060018060a01b0383166040830152949350505050565b6000831515825260406020830152611793604083018461198c565b6000602080835283518082850152825b81811015611a4057858101830151858201604001528201611a24565b81811115611a515783604083870101525b50601f01601f1916929092016040019392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252818101527f556e69737761705632436f6e6e6563746f723a207a65726f2061646472657373604082015260600190565b6000838252604060208301526117936040830184611949565b600086825285602083015260a06040830152611b0960a0830186611949565b6001600160a01b0394909416606083015250608001529392505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715611b4f57611b4f611c16565b604052919050565b600067ffffffffffffffff821115611b7157611b71611c16565b5060209081020190565b60008219821115611b8e57611b8e611c00565b500190565b600082821015611ba557611ba5611c00565b500390565b600281046001821680611bbe57607f821691505b60208210811415611bdf57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415611bf957611bf9611c00565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461146557600080fd5b801515811461146557600080fdfea2646970667358221220fae36b70a99da0d51e88a8a97bc19a31d96df479292035a67fc4a4c7447914d364736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c80638da5cb5b1161008c578063b23e4fc611610066578063b23e4fc6146101ef578063df71d7f3146101f7578063e75d75d51461020a578063f2fde38b1461021d576100ea565b80638da5cb5b1461019a5780639b4bca24146101ab578063b0bbcd88146101ce576100ea565b80631cb85818116100c85780631cb8581814610142578063715018a614610155578063838b7ccb1461015d5780638988307414610170576100ea565b806306fdde03146100ef5780631580b5e51461010d57806317fcb39b14610117575b600080fd5b6100f7610230565b6040516101049190611a14565b60405180910390f35b6101156102be565b005b60055461012a906001600160a01b031681565b6040516001600160a01b039091168152602001610104565b60035461012a906001600160a01b031681565b610115610399565b61011561016b366004611721565b6103c5565b61018361017e366004611895565b61055e565b604080519215158352602083019190915201610104565b6000546001600160a01b031661012a565b6101be6101b9366004611760565b610924565b6040519015158152602001610104565b6101e16101dc3660046118cb565b610a81565b6040516101049291906119f9565b6101156110aa565b610183610205366004611895565b61117c565b60045461012a906001600160a01b031681565b61011561022b366004611721565b6113cd565b6002805461023d90611baa565b80601f016020809104026020016040519081016040528092919081815260200182805461026990611baa565b80156102b65780601f1061028b576101008083540402835291602001916102b6565b820191906000526020600020905b81548152906001019060200180831161029957829003601f168201915b505050505081565b6000546001600160a01b031633146102f15760405162461bcd60e51b81526004016102e890611a67565b60405180910390fd5b600360009054906101000a90046001600160a01b03166001600160a01b031663ad5c46486040518163ffffffff1660e01b815260040160206040518083038186803b15801561033f57600080fd5b505afa158015610353573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103779190611744565b600580546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146103c35760405162461bcd60e51b81526004016102e890611a67565b565b806001600160a01b0381166103ec5760405162461bcd60e51b81526004016102e890611a9c565b6000546001600160a01b031633146104165760405162461bcd60e51b81526004016102e890611a67565b600380546001600160a01b0319166001600160a01b0384811691909117918290556040805163c45a015560e01b81529051929091169163c45a015591600480820192602092909190829003018186803b15801561047257600080fd5b505afa158015610486573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104aa9190611744565b600480546001600160a01b0319166001600160a01b03928316178155600354604080516315ab88c960e31b81529051919093169263ad5c46489281810192602092909190829003018186803b15801561050257600080fd5b505afa158015610516573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053a9190611744565b600580546001600160a01b0319166001600160a01b03929092169190911790555050565b600080836001600160a01b0381166105885760405162461bcd60e51b81526004016102e890611a9c565b836001600160a01b0381166105af5760405162461bcd60e51b81526004016102e890611a9c565b6004805460405163e6a4390560e01b81526001600160a01b038981169382019390935287831660248201526000929091169063e6a439059060440160206040518083038186803b15801561060257600080fd5b505afa158015610616573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063a9190611744565b90506001600160a01b03811661065757600080945094505061091a565b6000816001600160a01b0316630dfe16816040518163ffffffff1660e01b815260040160206040518083038186803b15801561069257600080fd5b505afa1580156106a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106ca9190611744565b9050600080836001600160a01b0316630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561070857600080fd5b505afa15801561071c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107409190611847565b506001600160701b031691506001600160701b03169150896001600160a01b0316836001600160a01b0316141561078d57808b1061078857600080975097505050505061091a565b6107a4565b818b106107a457600080975097505050505061091a565b6040805160028082526060820183526000926020830190803683370190505090508a816000815181106107e757634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050898160018151811061082957634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b0316815250506000600360009054906101000a90046001600160a01b03166001600160a01b0316631f00ca748e846040518363ffffffff1660e01b815260040161088e929190611ad1565b60006040518083038186803b1580156108a657600080fd5b505afa1580156108ba573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108e2919081019061179b565b905060018160008151811061090757634e487b7160e01b600052603260045260246000fd5b6020026020010151995099505050505050505b5050935093915050565b60008060028351101561093b576000915050610a7c565b60005b6001845161094c9190611b93565b811015610a755760045484516001600160a01b039091169063e6a439059086908490811061098a57634e487b7160e01b600052603260045260246000fd5b6020026020010151868460016109a09190611b7b565b815181106109be57634e487b7160e01b600052603260045260246000fd5b60200260200101516040518363ffffffff1660e01b81526004016109f89291906001600160a01b0392831681529116602082015260400190565b60206040518083038186803b158015610a1057600080fd5b505afa158015610a24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a489190611744565b91506001600160a01b038216610a6357600092505050610a7c565b80610a6d81611be5565b91505061093e565b5060019150505b919050565b6000606060026001541415610ad85760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064016102e8565b6002600155846001600160a01b038116610b045760405162461bcd60e51b81526004016102e890611a9c565b6000610b138a8a8a8989611468565b909450905083156110975787600081518110610b3f57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b03166323b872dd610b5c3390565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015230602482015260448101849052606401602060405180830381600087803b158015610baa57600080fd5b505af1158015610bbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be2919061182b565b5087600081518110610c0457634e487b7160e01b600052603260045260246000fd5b602090810291909101015160035460405163095ea7b360e01b81526001600160a01b0391821660048201526024810184905291169063095ea7b390604401602060405180830381600087803b158015610c5c57600080fd5b505af1158015610c70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c94919061182b565b5084158015610cef575060055488516001600160a01b03909116908990610cbd90600190611b93565b81518110610cdb57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031614155b15610d8557600354604051634401edf760e11b81526001600160a01b0390911690638803dbee90610d2c908c908e908d908d908d90600401611aea565b600060405180830381600087803b158015610d4657600080fd5b505af1158015610d5a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d82919081019061179b565b92505b84158015610dde575060055488516001600160a01b03909116908990610dad90600190611b93565b81518110610dcb57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316145b15610e7457600354604051632512eca560e11b81526001600160a01b0390911690634a25d94a90610e1b908c908e908d908d908d90600401611aea565b600060405180830381600087803b158015610e3557600080fd5b505af1158015610e49573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e71919081019061179b565b92505b6001851515148015610ed2575060055488516001600160a01b03909116908990610ea090600190611b93565b81518110610ebe57634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b031614155b15610f68576003546040516338ed173960e01b81526001600160a01b03909116906338ed173990610f0f908d908d908d908d908d90600401611aea565b600060405180830381600087803b158015610f2957600080fd5b505af1158015610f3d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f65919081019061179b565b92505b6001851515148015610fc5575060055488516001600160a01b03909116908990610f9490600190611b93565b81518110610fb257634e487b7160e01b600052603260045260246000fd5b60200260200101516001600160a01b0316145b1561105b576003546040516318cbafe560e01b81526001600160a01b03909116906318cbafe590611002908d908d908d908d908d90600401611aea565b600060405180830381600087803b15801561101c57600080fd5b505af1158015611030573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611058919081019061179b565b92505b7fe1010d0ab476908054981d12fbb96915efcceb8d57a09ae8ca62f4bda731837388848960405161108e939291906119bb565b60405180910390a15b5050600180559097909650945050505050565b6000546001600160a01b031633146110d45760405162461bcd60e51b81526004016102e890611a67565b600360009054906101000a90046001600160a01b03166001600160a01b031663c45a01556040518163ffffffff1660e01b815260040160206040518083038186803b15801561112257600080fd5b505afa158015611136573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061115a9190611744565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b600080836001600160a01b0381166111a65760405162461bcd60e51b81526004016102e890611a9c565b836001600160a01b0381166111cd5760405162461bcd60e51b81526004016102e890611a9c565b6004805460405163e6a4390560e01b81526001600160a01b038981169382019390935287831660248201526000929091169063e6a439059060440160206040518083038186803b15801561122057600080fd5b505afa158015611234573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112589190611744565b6001600160a01b03161415611273576000809350935061091a565b60408051600280825260608201835260009260208301908036833701905050905086816000815181106112b657634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b03168152505085816001815181106112f857634e487b7160e01b600052603260045260246000fd5b6001600160a01b03928316602091820292909201015260035460405163d06ca61f60e01b8152600092919091169063d06ca61f9061133c908c908690600401611ad1565b60006040518083038186803b15801561135457600080fd5b505afa158015611368573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611390919081019061179b565b90506001816001815181106113b557634e487b7160e01b600052603260045260246000fd5b60200260200101519550955050505050935093915050565b6000546001600160a01b031633146113f75760405162461bcd60e51b81526004016102e890611a67565b6001600160a01b03811661145c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016102e8565b61146581611645565b50565b6000804284101561147e5750600090508061163b565b61148785610924565b6114965750600090508061163b565b60035460405163d06ca61f60e01b81526000916001600160a01b03169063d06ca61f906114c9908b908a90600401611ad1565b60006040518083038186803b1580156114e157600080fd5b505afa1580156114f5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261151d919081019061179b565b9050806001875161152e9190611b93565b8151811061154c57634e487b7160e01b600052603260045260246000fd5b602002602001015187111561156857600080925092505061163b565b6001841515141561158057600188925092505061163b565b6003546040516307c0329d60e21b81526000916001600160a01b031690631f00ca74906115b3908b908b90600401611ad1565b60006040518083038186803b1580156115cb57600080fd5b505afa1580156115df573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611607919081019061179b565b905060018160008151811061162c57634e487b7160e01b600052603260045260246000fd5b60200260200101519350935050505b9550959350505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600082601f8301126116a5578081fd5b813560206116ba6116b583611b57565b611b26565b82815281810190858301838502870184018810156116d6578586fd5b855b858110156116fd5781356116eb81611c2c565b845292840192908401906001016116d8565b5090979650505050505050565b80516001600160701b0381168114610a7c57600080fd5b600060208284031215611732578081fd5b813561173d81611c2c565b9392505050565b600060208284031215611755578081fd5b815161173d81611c2c565b600060208284031215611771578081fd5b813567ffffffffffffffff811115611787578182fd5b61179384828501611695565b949350505050565b600060208083850312156117ad578182fd5b825167ffffffffffffffff8111156117c3578283fd5b8301601f810185136117d3578283fd5b80516117e16116b582611b57565b81815283810190838501858402850186018910156117fd578687fd5b8694505b8385101561181f578051835260019490940193918501918501611801565b50979650505050505050565b60006020828403121561183c578081fd5b815161173d81611c41565b60008060006060848603121561185b578182fd5b6118648461170a565b92506118726020850161170a565b9150604084015163ffffffff8116811461188a578182fd5b809150509250925092565b6000806000606084860312156118a9578283fd5b8335925060208401356118bb81611c2c565b9150604084013561188a81611c2c565b60008060008060008060c087890312156118e3578182fd5b8635955060208701359450604087013567ffffffffffffffff811115611907578283fd5b61191389828a01611695565b945050606087013561192481611c2c565b92506080870135915060a087013561193b81611c41565b809150509295509295509295565b6000815180845260208085019450808401835b838110156119815781516001600160a01b03168752958201959082019060010161195c565b509495945050505050565b6000815180845260208085019450808401835b838110156119815781518752958201959082019060010161199f565b6000606082526119ce6060830186611949565b82810360208401526119e0818661198c565b91505060018060a01b0383166040830152949350505050565b6000831515825260406020830152611793604083018461198c565b6000602080835283518082850152825b81811015611a4057858101830151858201604001528201611a24565b81811115611a515783604083870101525b50601f01601f1916929092016040019392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252818101527f556e69737761705632436f6e6e6563746f723a207a65726f2061646472657373604082015260600190565b6000838252604060208301526117936040830184611949565b600086825285602083015260a06040830152611b0960a0830186611949565b6001600160a01b0394909416606083015250608001529392505050565b604051601f8201601f1916810167ffffffffffffffff81118282101715611b4f57611b4f611c16565b604052919050565b600067ffffffffffffffff821115611b7157611b71611c16565b5060209081020190565b60008219821115611b8e57611b8e611c00565b500190565b600082821015611ba557611ba5611c00565b500390565b600281046001821680611bbe57607f821691505b60208210811415611bdf57634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415611bf957611bf9611c00565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461146557600080fd5b801515811461146557600080fdfea2646970667358221220fae36b70a99da0d51e88a8a97bc19a31d96df479292035a67fc4a4c7447914d364736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_exchangeRouter": "Address of the DEX router contract",
          "_name": "Name of the underlying DEX"
        }
      },
      "getInputAmount(uint256,address,address)": {
        "details": "Returns (false, 0) if liquidity pool of inputToken-outputToken doesn't exist                             Returns (false, 0) if desired output amount is greater than or equal to output reserve",
        "params": {
          "_inputToken": "Address of the input token",
          "_outputAmount": "Desired output amount",
          "_outputToken": "Address of the output token"
        }
      },
      "getOutputAmount(uint256,address,address)": {
        "details": "Returns (false, 0) if liquidity pool of inputToken-outputToken doesn't exist",
        "params": {
          "_inputAmount": "Amount of input token",
          "_inputToken": "Address of the input token",
          "_outputToken": "Address of the output token"
        }
      },
      "isPathValid(address[])": {
        "params": {
          "_path": "List of tokens that are used for exchanging"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setExchangeRouter(address)": {
        "details": "Gets address of liquidity pool factory from new exchange router",
        "params": {
          "_exchangeRouter": "Address of the new exchange router contract"
        }
      },
      "setLiquidityPoolFactory()": {
        "details": "Gets address from exchange router"
      },
      "setWrappedNativeToken()": {
        "details": "Gets address from exchange router"
      },
      "swap(uint256,uint256,address[],address,uint256,bool)": {
        "details": "Checks exchange conditions before exchanging                             We assume that the input token is not WETH (it is teleBTC)",
        "params": {
          "_deadline": "Deadline of exchanging tokens",
          "_inputAmount": "Amount of input token",
          "_isFixedToken": "True if the input token amount is fixed",
          "_outputAmount": "Amount of output token",
          "_path": "List of tokens that are used for exchanging",
          "_to": "Receiver address"
        },
        "returns": {
          "_amounts": "           Amounts of tokens that are involved in exchanging",
          "_result": "            True if the exchange is successful"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "This contract is used for interacting with UniswapV2 contract"
      },
      "getInputAmount(uint256,address,address)": {
        "notice": "Returns required input amount to get desired output amount"
      },
      "getOutputAmount(uint256,address,address)": {
        "notice": "Returns amount of output token that user receives "
      },
      "isPathValid(address[])": {
        "notice": "Returns true if the exchange path is valid"
      },
      "setExchangeRouter(address)": {
        "notice": "Setter for exchange router"
      },
      "setLiquidityPoolFactory()": {
        "notice": "Setter for liquidity pool factory"
      },
      "setWrappedNativeToken()": {
        "notice": "Setter for wrapped native token"
      },
      "swap(uint256,uint256,address[],address,uint256,bool)": {
        "notice": "Exchanges input token for output token through exchange router"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 807,
        "contract": "contracts/connectors/UniswapV2Connector.sol:UniswapV2Connector",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1634,
        "contract": "contracts/connectors/UniswapV2Connector.sol:UniswapV2Connector",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 3647,
        "contract": "contracts/connectors/UniswapV2Connector.sol:UniswapV2Connector",
        "label": "name",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 3650,
        "contract": "contracts/connectors/UniswapV2Connector.sol:UniswapV2Connector",
        "label": "exchangeRouter",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 3653,
        "contract": "contracts/connectors/UniswapV2Connector.sol:UniswapV2Connector",
        "label": "liquidityPoolFactory",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 3656,
        "contract": "contracts/connectors/UniswapV2Connector.sol:UniswapV2Connector",
        "label": "wrappedNativeToken",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}