{
  "address": "0xa9e3173cb7D6851FEaa0db1C28f0bec2A5b0B213",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "OneHundredPercent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "HealthFactor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "UpperHealthFactor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "MaxLockerFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "NativeTokenDecimal",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "NativeToken",
              "type": "address"
            }
          ],
          "internalType": "struct DataTypes.lockersLibConstants",
          "name": "libConstants",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "teleportDAOToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "teleBTC",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "ccBurnRouter",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "exchangeConnector",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "priceOracle",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "minRequiredTDTLockedAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minRequiredTNTLockedAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockerPercentageFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidationRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "priceWithDiscountRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "inactivationDelay",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.lockersLibParam",
          "name": "libParams",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "_collateralAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_priceOfCollateral",
          "type": "uint256"
        }
      ],
      "name": "neededTeleBTCToBuyCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "OneHundredPercent",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "HealthFactor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "UpperHealthFactor",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "MaxLockerFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "NativeTokenDecimal",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "NativeToken",
              "type": "address"
            }
          ],
          "internalType": "struct DataTypes.lockersLibConstants",
          "name": "libConstants",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "teleportDAOToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "teleBTC",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "ccBurnRouter",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "exchangeConnector",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "priceOracle",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "minRequiredTDTLockedAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minRequiredTNTLockedAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockerPercentageFee",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "liquidationRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "priceWithDiscountRatio",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "inactivationDelay",
              "type": "uint256"
            }
          ],
          "internalType": "struct DataTypes.lockersLibParam",
          "name": "libParams",
          "type": "tuple"
        }
      ],
      "name": "priceOfOneUnitOfCollateralInBTC",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd3f3b4709b0a1dbf0046612aa7be29488c6ddfff0b1c09bdb9b9145749516a8e",
  "receipt": {
    "to": null,
    "from": "0xBffc372e2E00a247c17bf0A9eD0b993Bfe3607F5",
    "contractAddress": "0xa9e3173cb7D6851FEaa0db1C28f0bec2A5b0B213",
    "transactionIndex": 35,
    "gasUsed": "1449450",
    "logsBloom": "0x
    "blockHash": "0x7ffca419e3e07a27d3ab4aa79dd5dd527eddcb45e99ebcf5d44c4d820b7d9558",
    "transactionHash": "0xd3f3b4709b0a1dbf0046612aa7be29488c6ddfff0b1c09bdb9b9145749516a8e",
    "logs": [
      {
        "transactionIndex": 35,
        "blockNumber": 38952924,
        "transactionHash": "0xd3f3b4709b0a1dbf0046612aa7be29488c6ddfff0b1c09bdb9b9145749516a8e",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000bffc372e2e00a247c17bf0a9ed0b993bfe3607f5",
          "0x00000000000000000000000046a3a41bd932244dd08186e4c19f1a7e48cbcdf4"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000ced26086aa084c0000000000000000000000000000000000000000000000008e4b91a4e1ed69b90000000000000000000000000000000000000000000001fb3581133ab9fb9f480000000000000000000000000000000000000000000000008d7cbf445b43616d0000000000000000000000000000000000000000000001fb364fe59b40a5a794",
        "logIndex": 99,
        "blockHash": "0x7ffca419e3e07a27d3ab4aa79dd5dd527eddcb45e99ebcf5d44c4d820b7d9558"
      }
    ],
    "blockNumber": 38952924,
    "cumulativeGasUsed": "7160697",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d0fde59e21efce6625c599e571b7b106",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"OneHundredPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"HealthFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"UpperHealthFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"MaxLockerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"NativeTokenDecimal\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"NativeToken\",\"type\":\"address\"}],\"internalType\":\"struct DataTypes.lockersLibConstants\",\"name\":\"libConstants\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"teleportDAOToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teleBTC\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ccBurnRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchangeConnector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceOracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minRequiredTDTLockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minRequiredTNTLockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockerPercentageFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceWithDiscountRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inactivationDelay\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.lockersLibParam\",\"name\":\"libParams\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"_collateralAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_priceOfCollateral\",\"type\":\"uint256\"}],\"name\":\"neededTeleBTCToBuyCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"OneHundredPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"HealthFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"UpperHealthFactor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"MaxLockerFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"NativeTokenDecimal\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"NativeToken\",\"type\":\"address\"}],\"internalType\":\"struct DataTypes.lockersLibConstants\",\"name\":\"libConstants\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"teleportDAOToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"teleBTC\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"ccBurnRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"exchangeConnector\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"priceOracle\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minRequiredTDTLockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minRequiredTNTLockedAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockerPercentageFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidationRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"priceWithDiscountRatio\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"inactivationDelay\",\"type\":\"uint256\"}],\"internalType\":\"struct DataTypes.lockersLibParam\",\"name\":\"libParams\",\"type\":\"tuple\"}],\"name\":\"priceOfOneUnitOfCollateralInBTC\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/LockersLib.sol\":\"LockersLib\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xb03df8481a954604ad0c9125680893b2e3f7ff770fe470e38b89ac61b84e8072\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"contracts/erc20/interfaces/ITeleBTC.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ITeleBTC is IERC20 {\\n\\n    // Events\\n    event Mint(address indexed doer, address indexed receiver, uint value);\\n\\n    event Burn(address indexed doer, address indexed burner, uint value);\\n\\n    event MinterAdded(address indexed newMinter);\\n\\n    event MinterRemoved(address indexed minter);\\n\\n    event BurnerAdded(address indexed newBurner);\\n\\n    event BurnerRemoved(address indexed burner);\\n\\n    event NewMintLimit(uint oldMintLimit, uint newMintLimit);\\n\\n    event NewEpochLength(uint oldEpochLength, uint newEpochLength);\\n\\n    // read functions\\n\\n    function decimals() external view returns (uint8);\\n\\n    // state-changing functions\\n\\n    function addMinter(address account) external;\\n\\n    function removeMinter(address account) external;\\n\\n    function addBurner(address account) external;\\n\\n    function removeBurner(address account) external;\\n\\n    function mint(address receiver, uint amount) external returns(bool);\\n\\n    function burn(uint256 amount) external returns(bool);\\n\\n    function setMaxMintLimit(uint _mintLimit) external;\\n\\n    function setEpochLength(uint _length) external;\\n}\",\"keccak256\":\"0x00105d2be25db30bf8e8d6f498976dd68827212efc1ea488bad28081672985e0\",\"license\":\"MIT\"},\"contracts/libraries/LockersLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"../oracle/interfaces/IPriceOracle.sol\\\";\\nimport \\\"../erc20/interfaces/ITeleBTC.sol\\\";\\nimport \\\"../types/ScriptTypesEnum.sol\\\";\\nimport \\\"../types/DataTypes.sol\\\";\\n\\nlibrary LockersLib {\\n\\n    function requestToBecomeLockerValidation(\\n        mapping(address => DataTypes.locker) storage lockersMapping,\\n        DataTypes.lockersLibParam memory libParams,\\n        address theLockerTargetAddress,\\n        uint _lockedTDTAmount,\\n        uint _lockedNativeTokenAmount\\n    ) external {\\n\\n        require(\\n            !lockersMapping[msg.sender].isCandidate,\\n            \\\"Lockers: is candidate\\\"\\n        );\\n\\n        require(\\n            !lockersMapping[msg.sender].isLocker,\\n            \\\"Lockers: is locker\\\"\\n        );\\n\\n        require(\\n            _lockedTDTAmount >= libParams.minRequiredTDTLockedAmount,\\n            \\\"Lockers: low TDT\\\"\\n        );\\n\\n        require(\\n            _lockedNativeTokenAmount >= libParams.minRequiredTNTLockedAmount && msg.value == _lockedNativeTokenAmount,\\n            \\\"Lockers: low TNT\\\"\\n        );\\n\\n        require(\\n            theLockerTargetAddress == address(0),\\n            \\\"Lockers: used locking script\\\"\\n        );\\n\\n    }\\n\\n    function requestToBecomeLocker(\\n        mapping(address => DataTypes.locker) storage lockersMapping,\\n        bytes calldata _candidateLockingScript,\\n        uint _lockedTDTAmount,\\n        uint _lockedNativeTokenAmount,\\n        ScriptTypes _lockerRescueType,\\n        bytes calldata _lockerRescueScript\\n    ) external {\\n\\n        DataTypes.locker memory locker_;\\n        locker_.lockerLockingScript = _candidateLockingScript;\\n        locker_.TDTLockedAmount = _lockedTDTAmount;\\n        locker_.nativeTokenLockedAmount = _lockedNativeTokenAmount;\\n        locker_.isCandidate = true;\\n        locker_.lockerRescueType = _lockerRescueType;\\n        locker_.lockerRescueScript = _lockerRescueScript;\\n\\n        lockersMapping[msg.sender] = locker_;\\n\\n    }\\n\\n    function buySlashedCollateralOfLocker(\\n        DataTypes.locker storage theLocker,\\n        DataTypes.lockersLibConstants memory libConstants,\\n        DataTypes.lockersLibParam memory libParams,\\n        uint _collateralAmount\\n    ) external returns (uint neededTeleBTC) {\\n\\n        require(\\n            theLocker.isLocker,\\n            \\\"Lockers: input address is not a valid locker\\\"\\n        );\\n\\n        require(\\n            _collateralAmount <= theLocker.reservedNativeTokenForSlash,\\n            \\\"Lockers: not enough slashed collateral to buy\\\"\\n        );\\n\\n        // Finds needed amount of TeleBTC to buy collateral with discount\\n        uint priceOfCollateral = priceOfOneUnitOfCollateralInBTC(\\n            libConstants,\\n            libParams\\n        );\\n\\n        neededTeleBTC = neededTeleBTCToBuyCollateral(\\n            libConstants,\\n            libParams,\\n            _collateralAmount,\\n            priceOfCollateral\\n        );\\n\\n        if (\\n            _collateralAmount == theLocker.reservedNativeTokenForSlash || \\n                neededTeleBTC >= theLocker.slashingTeleBTCAmount // Users cannot buy more than total slashed TeleBTC\\n        ) {\\n            // we ensure that all the slashing TeleBTC is provided by users \\n            neededTeleBTC = theLocker.slashingTeleBTCAmount;\\n        } else {\\n            neededTeleBTC = neededTeleBTC + 1; // to avoid precision loss (so buyer cannot profit bcz of that)\\n        }\\n\\n        // Updates locker's slashing info \\n        theLocker.slashingTeleBTCAmount =\\n            theLocker.slashingTeleBTCAmount - neededTeleBTC;\\n\\n        theLocker.reservedNativeTokenForSlash =\\n            theLocker.reservedNativeTokenForSlash - _collateralAmount;\\n\\n    }\\n\\n    function liquidateLocker(\\n        DataTypes.locker storage theLocker,\\n        DataTypes.lockersLibConstants memory libConstants,\\n        DataTypes.lockersLibParam memory libParams,\\n        uint _collateralAmount\\n    ) external view returns (uint neededTeleBTC) {\\n\\n        require(\\n            theLocker.isLocker,\\n            \\\"Lockers: input address is not a valid locker\\\"\\n        );\\n\\n        // DataTypes.locker memory theLiquidatingLocker = lockersMapping[_lockerTargetAddress];\\n        uint priceOfCollateral = priceOfOneUnitOfCollateralInBTC(\\n            libConstants,\\n            libParams\\n        );\\n\\n        // Checks that the collateral has become unhealthy\\n        require(\\n            calculateHealthFactor(\\n                theLocker,\\n                libConstants,\\n                libParams,\\n                priceOfCollateral\\n            ) < libConstants.HealthFactor,\\n            \\\"Lockers: is healthy\\\"\\n        );\\n\\n        uint _maxBuyableCollateral = maximumBuyableCollateral(\\n            theLocker,\\n            libConstants,\\n            libParams,\\n            priceOfCollateral\\n        );\\n\\n        if (_maxBuyableCollateral > theLocker.nativeTokenLockedAmount) {\\n            _maxBuyableCollateral = theLocker.nativeTokenLockedAmount;\\n        }\\n\\n        require(\\n            _collateralAmount <= _maxBuyableCollateral,\\n            \\\"Lockers: not enough collateral to buy\\\"\\n        );\\n\\n        // Needed amount of TeleBTC to buy collateralAmount\\n        neededTeleBTC = neededTeleBTCToBuyCollateral(\\n            libConstants,\\n            libParams,\\n            _collateralAmount,\\n            priceOfCollateral\\n        );\\n\\n        neededTeleBTC = neededTeleBTC + 1; // to prevent precision loss\\n\\n    }\\n\\n    function slashThiefLocker(\\n        DataTypes.locker storage theLocker,\\n        DataTypes.lockersLibConstants memory libConstants,\\n        DataTypes.lockersLibParam memory libParams,\\n        uint _rewardAmount,\\n        uint _amount\\n    ) external returns (uint rewardInNativeToken, uint neededNativeTokenForSlash) {\\n\\n        require(\\n            theLocker.isLocker,\\n            \\\"Lockers: input address is not a valid locker\\\"\\n        );\\n\\n        uint equivalentNativeToken = IPriceOracle(libParams.priceOracle).equivalentOutputAmount(\\n            _amount, // Total amount of TeleBTC that is slashed\\n            ITeleBTC(libParams.teleBTC).decimals(), // Decimal of teleBTC\\n            libConstants.NativeTokenDecimal, // Decimal of TNT\\n            libParams.teleBTC, // Input token\\n            libConstants.NativeToken // Output token\\n        );\\n\\n        rewardInNativeToken = equivalentNativeToken*_rewardAmount/_amount;\\n        neededNativeTokenForSlash = equivalentNativeToken*libParams.liquidationRatio/libConstants.OneHundredPercent;\\n\\n        if ((rewardInNativeToken + neededNativeTokenForSlash) > theLocker.nativeTokenLockedAmount) {\\n            // Divides total locker's collateral proportional to reward amount and slash amount\\n            rewardInNativeToken = rewardInNativeToken*theLocker.nativeTokenLockedAmount/\\n                (rewardInNativeToken + neededNativeTokenForSlash);\\n            neededNativeTokenForSlash = theLocker.nativeTokenLockedAmount - rewardInNativeToken;\\n        }\\n\\n        // Updates locker's bond (in TNT)\\n        theLocker.nativeTokenLockedAmount\\n            = theLocker.nativeTokenLockedAmount - (rewardInNativeToken + neededNativeTokenForSlash);\\n\\n        if (_amount > theLocker.netMinted) {\\n            _amount = theLocker.netMinted;\\n        }\\n        \\n        theLocker.netMinted\\n            = theLocker.netMinted - _amount;\\n\\n        theLocker.slashingTeleBTCAmount\\n            = theLocker.slashingTeleBTCAmount + _amount; \\n\\n        theLocker.reservedNativeTokenForSlash\\n            = theLocker.reservedNativeTokenForSlash + neededNativeTokenForSlash;\\n    }\\n\\n    function slashIdleLocker(\\n        DataTypes.locker storage theLocker,\\n        DataTypes.lockersLibConstants memory libConstants,\\n        DataTypes.lockersLibParam memory libParams,\\n        uint _rewardAmount,\\n        uint _amount\\n    ) external returns (uint equivalentNativeToken) {\\n\\n        require(\\n            theLocker.isLocker,\\n            \\\"Lockers: input address is not a valid locker\\\"\\n        );\\n\\n        equivalentNativeToken = IPriceOracle(libParams.priceOracle).equivalentOutputAmount(\\n            _rewardAmount + _amount, // Total amount of TeleBTC that is slashed\\n            ITeleBTC(libParams.teleBTC).decimals(), // Decimal of teleBTC\\n            libConstants.NativeTokenDecimal, // Decimal of TNT\\n            libParams.teleBTC, // Input token\\n            libConstants.NativeToken // Output token\\n        );\\n\\n        if (equivalentNativeToken > theLocker.nativeTokenLockedAmount) {\\n            equivalentNativeToken = theLocker.nativeTokenLockedAmount;\\n        }\\n\\n        // Updates locker's bond (in TNT)\\n        theLocker.nativeTokenLockedAmount\\n        = theLocker.nativeTokenLockedAmount - equivalentNativeToken;\\n    }\\n\\n    function maximumBuyableCollateral(\\n        DataTypes.locker storage theLocker,\\n        DataTypes.lockersLibConstants memory libConstants,\\n        DataTypes.lockersLibParam memory libParams,\\n        uint _priceOfOneUnitOfCollateral\\n    ) public view returns (uint) {\\n\\n        // maxBuyable <= (upperHealthFactor*netMinted*liquidationRatio/10000 - nativeTokenLockedAmount*nativeTokenPrice)/(upperHealthFactor*liquidationRatio*discountedPrice - nativeTokenPrice)\\n        //  => maxBuyable <= (upperHealthFactor*netMinted*liquidationRatio * 10^18  - nativeTokenLockedAmount*nativeTokenPrice * 10^8)/(upperHealthFactor*liquidationRatio*discountedPrice - nativeTokenPrice * 10^8)\\n\\n        uint teleBTCDecimal = ERC20(libParams.teleBTC).decimals();\\n\\n        uint antecedent = (libConstants.UpperHealthFactor * theLocker.netMinted * libParams.liquidationRatio * (10 ** libConstants.NativeTokenDecimal)) -\\n        (theLocker.nativeTokenLockedAmount * _priceOfOneUnitOfCollateral * (10 ** teleBTCDecimal));\\n\\n        uint consequent = ((libConstants.UpperHealthFactor * libParams.liquidationRatio * _priceOfOneUnitOfCollateral * libParams.priceWithDiscountRatio)/libConstants.OneHundredPercent) -\\n        (_priceOfOneUnitOfCollateral * (10 ** teleBTCDecimal));\\n\\n        return antecedent/consequent;\\n    }\\n\\n    function calculateHealthFactor(\\n        DataTypes.locker storage theLocker,\\n        DataTypes.lockersLibConstants memory libConstants,\\n        DataTypes.lockersLibParam memory libParams,\\n        uint _priceOfOneUnitOfCollateral\\n    ) public view returns (uint) {\\n        return (_priceOfOneUnitOfCollateral * theLocker.nativeTokenLockedAmount * \\n            (10 ** (1 + ERC20(libParams.teleBTC).decimals())))/\\n                (theLocker.netMinted * libParams.liquidationRatio * (10 ** (1 + libConstants.NativeTokenDecimal)));\\n    }\\n\\n    function neededTeleBTCToBuyCollateral(\\n        DataTypes.lockersLibConstants memory libConstants,\\n        DataTypes.lockersLibParam memory libParams,\\n        uint _collateralAmount,\\n        uint _priceOfCollateral\\n    ) public pure returns (uint) {\\n        return (_collateralAmount * _priceOfCollateral * libParams.priceWithDiscountRatio)/\\n            (libConstants.OneHundredPercent*(10 ** libConstants.NativeTokenDecimal));\\n    }\\n\\n    function addToCollateral(\\n        DataTypes.locker storage theLocker,\\n        uint _addingNativeTokenAmount\\n    ) external {\\n\\n        require(\\n            theLocker.isLocker,\\n            \\\"Lockers: no locker\\\"\\n        );\\n\\n        theLocker.nativeTokenLockedAmount =\\n        theLocker.nativeTokenLockedAmount + _addingNativeTokenAmount;\\n    }\\n\\n    function removeFromCollateral(\\n        DataTypes.locker storage theLocker,\\n        DataTypes.lockersLibConstants memory libConstants,\\n        DataTypes.lockersLibParam memory libParams,\\n        uint _priceOfOneUnitOfCollateral,\\n        uint _removingNativeTokenAmount\\n    ) internal {\\n\\n        require(\\n            theLocker.isLocker,\\n            \\\"Lockers: account is not a locker\\\"\\n        );\\n\\n        // Capacity of locker = (locker's collateral value in TeleBTC) * (collateral ratio) - (minted TeleBTC) \\n        uint lockerCapacity = (theLocker.nativeTokenLockedAmount * _priceOfOneUnitOfCollateral * \\n            libConstants.OneHundredPercent)/\\n                (libParams.collateralRatio * (10 ** libConstants.NativeTokenDecimal)) - theLocker.netMinted;\\n\\n        uint maxRemovableCollateral = (lockerCapacity * (10 ** libConstants.NativeTokenDecimal))/_priceOfOneUnitOfCollateral;\\n\\n        require(\\n            _removingNativeTokenAmount <= maxRemovableCollateral,\\n            \\\"Lockers: more than max removable collateral\\\"\\n        );\\n\\n        require(\\n            theLocker.nativeTokenLockedAmount - _removingNativeTokenAmount >= libParams.minRequiredTNTLockedAmount,\\n            \\\"Lockers: less than min collateral\\\"\\n        );\\n\\n        theLocker.nativeTokenLockedAmount =\\n        theLocker.nativeTokenLockedAmount - _removingNativeTokenAmount;\\n    }\\n\\n    function priceOfOneUnitOfCollateralInBTC(\\n        DataTypes.lockersLibConstants memory libConstants,\\n        DataTypes.lockersLibParam memory libParams\\n    ) public view returns (uint) {\\n\\n        return IPriceOracle(libParams.priceOracle).equivalentOutputAmount(\\n            (10**libConstants.NativeTokenDecimal), // 1 Ether is 10^18 wei\\n            libConstants.NativeTokenDecimal,\\n            ITeleBTC(libParams.teleBTC).decimals(),\\n            libConstants.NativeToken,\\n            libParams.teleBTC\\n        );\\n\\n    }\\n\\n\\n    function lockerCollateralInTeleBTC(\\n        DataTypes.locker storage theLocker,\\n        DataTypes.lockersLibConstants memory libConstants,\\n        DataTypes.lockersLibParam memory libParams\\n    ) public view returns (uint) {\\n\\n        return IPriceOracle(libParams.priceOracle).equivalentOutputAmount(\\n            theLocker.nativeTokenLockedAmount,\\n            libConstants.NativeTokenDecimal,\\n            ITeleBTC(libParams.teleBTC).decimals(),\\n            libConstants.NativeToken,\\n            libParams.teleBTC\\n        );\\n    }\\n\\n}\",\"keccak256\":\"0x07eb9c4b352b3e57cbdf0f9298f43a7594bfcfa15ef5c72cbf53508f3ac5d1de\",\"license\":\"MIT\"},\"contracts/oracle/interfaces/IPriceOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\ninterface IPriceOracle {\\n\\n    /// @notice                     Emits when new exchange router is added\\n    /// @param exchangeRouter       Address of new exchange router\\n    /// @param exchangeConnector    Address of exchange connector\\n    event ExchangeConnectorAdded(address indexed exchangeRouter, address indexed exchangeConnector);\\n\\n    /// @notice                     Emits when an exchange router is removed\\n    /// @param exchangeRouter       Address of removed exchange router\\n    event ExchangeConnectorRemoved(address indexed exchangeRouter);\\n\\n    /// @notice                     Emits when a price proxy is set\\n    /// @param _token               Address of the token\\n    /// @param _priceProxyAddress   Address of price proxy contract\\n    event SetPriceProxy(address indexed _token, address indexed _priceProxyAddress);\\n\\n    /// @notice                     Emits when changes made to acceptable delay\\n\\tevent NewAcceptableDelay(uint oldAcceptableDelay, uint newAcceptableDelay);\\n\\n    /// @notice                     Emits when changes made to oracle native token\\n\\tevent NewOracleNativeToken(address indexed oldOracleNativeToken, address indexed newOracleNativeToken);\\n\\n    // Read-only functions\\n    \\n    /// @notice                     Gives USD price proxy address for a token\\n    /// @param _token          Address of the token\\n    /// @return                     Address of price proxy contract\\n    function ChainlinkPriceProxy(address _token) external view returns (address);\\n\\n    /// @notice                     Gives exchange connector address for an exchange router\\n    /// @param _exchangeRouter      Address of exchange router\\n    /// @return                     Address of exchange connector\\n    function exchangeConnector(address _exchangeRouter) external view returns (address);\\n\\n    /// @notice                     Gives address of an exchange router from exchange routers list\\n    /// @param _index               Index of exchange router\\n    /// @return                     Address of exchange router\\n    function exchangeRoutersList(uint _index) external view returns (address);\\n\\n    function getExchangeRoutersListLength() external view returns (uint);\\n\\n    function acceptableDelay() external view returns (uint);\\n\\n    function oracleNativeToken() external view returns (address);\\n\\n    function equivalentOutputAmountByAverage(\\n        uint _inputAmount,\\n        uint _inputDecimals,\\n        uint _outputDecimals,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view returns (uint);\\n\\n    function equivalentOutputAmount(\\n        uint _inputAmount,\\n        uint _inputDecimals,\\n        uint _outputDecimals,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view returns (uint);\\n\\n    function equivalentOutputAmountFromOracle(\\n        uint _inputAmount,\\n        uint _inputDecimals,\\n        uint _outputDecimals,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view returns (uint);\\n\\n    function equivalentOutputAmountFromExchange(\\n        address _exchangeRouter,\\n        uint _inputAmount,\\n        address _inputToken,\\n        address _outputToken\\n    ) external view returns (uint);\\n    \\n    // State-changing functions\\n    \\n    function addExchangeConnector(address _exchangeRouter, address _exchangeConnector) external;\\n\\n    function removeExchangeConnector(uint _exchangeRouterIndex) external;\\n\\n    function setPriceProxy(address _token, address _priceProxyAddress) external;\\n\\n    function setAcceptableDelay(uint _acceptableDelay) external;\\n\\n    function setOracleNativeToken(address _oracleNativeToken) external;\\n}\",\"keccak256\":\"0x55bea95b019d709a74c525ccf25d384c8bb3ff12f56db7605b41c1e2a3aff1c5\",\"license\":\"MIT\"},\"contracts/types/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\nimport \\\"./ScriptTypesEnum.sol\\\";\\n\\nlibrary DataTypes {\\n\\n    /// @notice                             Structure for registering lockers\\n    /// @dev\\n    /// @param lockerLockingScript          Locker redeem script\\n    /// @param lockerRescueType             Locker script type in case of getting BTCs back\\n    /// @param lockerRescueScript           Locker script in case of getting BTCs back\\n    /// @param TDTLockedAmount              Bond amount of locker in TDT\\n    /// @param nativeTokenLockedAmount      Bond amount of locker in native token of the target chain\\n    /// @param netMinted                    Total minted - total burnt\\n    /// @param slashingTeleBTCAmount        Total amount of teleBTC a locker must be slashed\\n    /// @param reservedNativeTokenForSlash  Total native token reserved to support slashing teleBTC\\n    /// @param isLocker                     Indicates that is already a locker or not\\n    /// @param isCandidate                  Indicates that is a candidate or not\\n    /// @param isScriptHash                 Shows if it's script hash\\n    ///                                     has enough collateral to accept more minting requests)\\n    struct locker {\\n        bytes lockerLockingScript;\\n        ScriptTypes lockerRescueType;\\n        bytes lockerRescueScript;\\n        uint TDTLockedAmount;\\n        uint nativeTokenLockedAmount;\\n        uint netMinted;\\n        uint slashingTeleBTCAmount;\\n        uint reservedNativeTokenForSlash;\\n        bool isLocker;\\n        bool isCandidate;\\n        bool isScriptHash;\\n    }\\n\\n    struct lockersLibConstants {\\n        uint OneHundredPercent;\\n        uint HealthFactor;\\n        uint UpperHealthFactor;\\n        uint MaxLockerFee;\\n        uint NativeTokenDecimal;\\n        address NativeToken;\\n    }\\n\\n    struct lockersLibParam {\\n        address teleportDAOToken;\\n        address teleBTC;\\n        address ccBurnRouter;\\n        address exchangeConnector;\\n        address priceOracle;\\n\\n        uint minRequiredTDTLockedAmount;\\n        uint minRequiredTNTLockedAmount;\\n        uint lockerPercentageFee;\\n        uint collateralRatio;\\n        uint liquidationRatio;\\n        uint priceWithDiscountRatio;\\n        uint inactivationDelay;\\n    }\\n}\",\"keccak256\":\"0xba4cd1e2d23b3acfe09b797b01fd4e0430086ac9db9d5df75ad329fc37222cb2\",\"license\":\"MIT\"},\"contracts/types/ScriptTypesEnum.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.8.4;\\n\\n    enum ScriptTypes {\\n        P2PK, // 32 bytes\\n        P2PKH, // 20 bytes        \\n        P2SH, // 20 bytes          \\n        P2WPKH, // 20 bytes          \\n        P2WSH // 32 bytes               \\n    }\",\"keccak256\":\"0x0b00007c6dfa5422319f3a8d78dcf45f9dd44f9e4c61b7604dde673d8e7f96f9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}